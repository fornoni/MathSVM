(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    863573,      18492]
NotebookOptionsPosition[    843560,      17926]
NotebookOutlinePosition[    848478,      18066]
CellTagsIndexPosition[    847564,      18038]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"$Path", "=", 
   RowBox[{"Join", " ", "[", 
    RowBox[{"$Path", ",", 
     RowBox[{"{", 
      RowBox[{"NotebookDirectory", "[", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Get", "[", "\"\<MathSVM`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}], "//", "Quiet"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
     RowBox[{"loadData", " ", "[", "\"\<banana.mat\>\"", "]"}]}], ";"}], 
   "*)"}]}]}], "Input",
 CellOpen->False,
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.600092953254756*^9, 3.600092955367569*^9}, {
   3.600093561777714*^9, 3.600093573991499*^9}, 3.6000936160971107`*^9, {
   3.600093655594242*^9, 3.6000936633743477`*^9}, {3.60041483141713*^9, 
   3.6004148351879187`*^9}, {3.600525085388228*^9, 3.600525090629882*^9}, 
   3.600528824845894*^9, {3.600543944567115*^9, 3.6005439558129797`*^9}, 
   3.600588170045826*^9, {3.600671000405999*^9, 3.600671016591625*^9}, {
   3.60067207858484*^9, 3.600672100077403*^9}, {3.6006724181907578`*^9, 
   3.60067243328294*^9}, {3.6375854261910458`*^9, 3.637585427189118*^9}}],

Cell[BoxData["\<\"SVM Package Loaded\"\>"], "Print",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{3.601212290049609*^9, 3.60121266748938*^9, 
  3.60121335565849*^9, 3.601214039708928*^9, 3.601214607518528*^9, 
  3.6012180037848454`*^9, 3.601286272243084*^9, 3.601295888966861*^9, 
  3.601296909161872*^9, 3.6012971698767357`*^9, 3.601297661411908*^9, 
  3.601298893956583*^9, 3.601298946571395*^9, 3.601304692965095*^9, 
  3.601372884558834*^9, 3.601375276779317*^9, 3.6015597711291647`*^9, 
  3.601562166047846*^9, 3.601563111281438*^9, 3.601571644905724*^9, 
  3.601572489132666*^9, 3.60162615552444*^9, 3.602856855184366*^9, 
  3.602859724095646*^9, 3.6074305172060204`*^9, 3.607432447940103*^9, 
  3.637564724629726*^9, 3.6375655252913218`*^9, 3.6375656538818502`*^9, 
  3.637566041831627*^9, 3.6375733605461493`*^9, 3.637581899228078*^9, 
  3.637582140264697*^9, 3.637582200929224*^9, 3.637583463981867*^9, 
  3.6375855246920357`*^9, 3.637588557801639*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["A hands-on introduction to Support Vector Machines", "Title",
 CellChangeTimes->{{3.41783940236821*^9, 3.4178394062050323`*^9}, {
   3.435291780155868*^9, 3.43529178092163*^9}, {3.468557035897552*^9, 
   3.4685570550125637`*^9}, 3.5442382141880083`*^9, 3.544238351303344*^9, {
   3.577353300017419*^9, 3.5773533139229527`*^9}, {3.5773537360629873`*^9, 
   3.577353752656562*^9}, {3.577360010706706*^9, 3.577360032241975*^9}, {
   3.5773623107856827`*^9, 3.5773623335992813`*^9}, {3.577366518781762*^9, 
   3.5773665255746326`*^9}, {3.6006674743663063`*^9, 3.600667515305976*^9}, {
   3.6006724810398617`*^9, 3.600672484136705*^9}, {3.60067811062516*^9, 
   3.600678199962726*^9}, {3.600678268573207*^9, 3.600678294242147*^9}, 
   3.601298617085761*^9, {3.6074354021223297`*^9, 3.607435406715845*^9}}],

Cell[" This file is part of the MathSVM Software", "Text",
 CellChangeTimes->{{3.6375914910152884`*^9, 3.637591493596785*^9}},
 TextAlignment->Center],

Cell["Feb 3, 2014", "SmallText",
 CellChangeTimes->{{3.511439683975197*^9, 3.5114397034510307`*^9}, {
  3.544238057548271*^9, 3.54423806068119*^9}, {3.563082604004828*^9, 
  3.5630826078039503`*^9}, {3.5762506934144382`*^9, 3.576250700712188*^9}, {
  3.577360043793089*^9, 3.577360047111844*^9}, {3.587640689382739*^9, 
  3.5876406916604958`*^9}, {3.600522942653962*^9, 3.600522947743492*^9}, {
  3.600675320404994*^9, 3.6006753342597103`*^9}}],

Cell[CellGroupData[{

Cell["Marco Fornoni", "Subsubtitle",
 CellChangeTimes->{{3.577360037879161*^9, 3.577360051866151*^9}}],

Cell[CellGroupData[{

Cell["Abstract", "Subsection",
 CellChangeTimes->{{3.4685570921061563`*^9, 3.468557093653076*^9}}],

Cell[TextData[{
 "Nowadays computers can be trained to perform a variety of tasks, \
traditionally associated with intelligence. Recognizing people, classifying \
webpages, recognizing human speech, performing online trading, are just a few \
examples of tasks that can be performed by machines. \nBehind this very \
diverse set of abilities there is a branch of ",
 StyleBox["computer science",
  FontSlant->"Italic"],
 " and ",
 StyleBox["artificial intelligence",
  FontSlant->"Italic"],
 ", called ",
 StyleBox["machine learning",
  FontSlant->"Italic"],
 ", which deals with the problem of constructing and studying systems able to \
learn from data. In a ",
 StyleBox["supervised",
  FontSlant->"Italic"],
 " machine learning setting, problems are directly specified by sets of input \
data, with associated desired outputs. The goal of a learning machine is then \
to learn a mathematical model able to reproduce the desired output on the \
training data, while preserving ",
 StyleBox["generalization",
  FontSlant->"Italic"],
 " abilities on unseen data. This approach results to be very useful when the \
functional dependency of the output w.r.t. the input is not known, or is too \
complex to be modeled exactly.\n\nOne of the most successful machine learning \
tools that is widely used to solve classification and regression problems is \
called ",
 StyleBox["Support Vector Machine (SVM)",
  FontSlant->"Italic"],
 " ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ".  The key assumption of this model is that training and testing samples \
are generated i.i.d. according to an unknown but fixed distribution. Given a \
set of i.i.d.  training instances ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         StyleBox[
          SubscriptBox["x", 
           StyleBox["1",
            FontWeight->"Plain"]],
          FontWeight->"Bold"], ",", 
         SubscriptBox["y", "1"]}], ")"}], ",", 
       RowBox[{
        SubscriptBox[
         RowBox[{
          StyleBox["(", "InlineFormula"], 
          RowBox[{
           StyleBox[
            SubscriptBox["x", 
             StyleBox["2",
              FontWeight->"Plain"]], "InlineFormula",
            FontWeight->"Bold"], 
           StyleBox[",", "InlineFormula"], 
           SubscriptBox["y", "2"]}], 
          StyleBox[")", "InlineFormula"]}], 
         RowBox[{",", "\[Ellipsis]", ","}]], 
        RowBox[{"(", 
         RowBox[{
          StyleBox[
           SubscriptBox["x", 
            StyleBox["n",
             FontWeight->"Plain"]],
           FontWeight->"Bold"], ",", 
          SubscriptBox["y", "n"]}], ")"}]}]}], "}"}], "InlineFormula"], ",", 
    " ", 
    RowBox[{
     RowBox[{"where", " ", 
      StyleBox[
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "InlineFormula"]}], 
     StyleBox["\[Element]", "InlineFormula"], 
     StyleBox["X", "InlineFormula"], 
     StyleBox["\[Subset]", "InlineFormula"], 
     StyleBox[
      SuperscriptBox["\[DoubleStruckCapitalR]", "d"], "InlineFormula"]}]}], 
   TraditionalForm]], "Text"],
 " is an input and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["y", "i"], "\[Element]", "\[DoubleStruckCapitalR]"}], 
    "InlineFormula"], TraditionalForm]]],
 " is the desired output, a SVM predicts using a real valued function ",
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], 
     StyleBox["X", "InlineFormula",
      FontSlant->"Italic"]}], 
    StyleBox["\[Subset]", "InlineFormula",
     FontSlant->"Italic"], 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[DoubleStruckCapitalR]", "InlineFormula",
       FontSlant->"Italic"], "d"], 
     StyleBox["\[RightArrow]", "InlineFormula"], 
     StyleBox["\[DoubleStruckCapitalR]", "InlineFormula"]}]}], 
   TraditionalForm]], "InlineFormula"], "InlineFormula"],
 ", parametrized by a vector ",
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], " ", "\[Epsilon]", " ", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], TraditionalForm]], 
  "InlineFormula",
  FontSlant->"Italic"], "InlineFormula"],
 StyleBox[" and a scalar ", "InlineFormula"],
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "\[Element]", "\[DoubleStruckCapitalR]"}], 
   TraditionalForm]]],
 " (",
 StyleBox["bias",
  FontSlant->"Italic"],
 "). This prediction function ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"]}]], "InlineFormula"], TraditionalForm]]],
 " is chosen to maximize a quantity called ",
 StyleBox["margin",
  FontSlant->"Italic"],
 " and it is linear. ",
 StyleBox["Kernel methods",
  FontSlant->"Italic"],
 " can be used to extend SVM to the non-linear setting, without modifing the \
analysis and implementation of the method.\n\nThe goal of this notebook is to \
present the very basic theory of linear classifiers, max-margin classifiers \
and Support Vector Machines and to explore the use of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve the optimization problems that arise",
 StyleBox[".", "DisplayFormula"],
 " Following the presentation in ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ", this notebook explicitly derives, implements and compare several \
classifiers, demonstrating them on synthetic 2D-data generated by the user, \
with visualizations involving direct hyper-parameters manipulations. It can \
thus be considered a hands-on introduction to the topic."
}], "Text",
 CellChangeTimes->{{3.4178394136694803`*^9, 3.417839428740713*^9}, {
   3.435291790854022*^9, 3.435291847713936*^9}, {3.435291966315791*^9, 
   3.435291977441812*^9}, {3.435292037892099*^9, 3.43529205339745*^9}, {
   3.435292093987976*^9, 3.435292116665512*^9}, {3.43529216806837*^9, 
   3.435292168632934*^9}, {3.468557118215548*^9, 3.46855718512158*^9}, {
   3.46855721597228*^9, 3.468557850172822*^9}, 3.4685583296453753`*^9, {
   3.5114393871615458`*^9, 3.5114394394283047`*^9}, 3.5442380739013147`*^9, 
   3.54423811926757*^9, 3.544238181361961*^9, {3.544238219239573*^9, 
   3.544238219600222*^9}, {3.563082613137628*^9, 3.563082617149609*^9}, {
   3.576250708729867*^9, 3.576250710544142*^9}, {3.576250746308978*^9, 
   3.5762507601422777`*^9}, {3.577353720714952*^9, 3.5773537245951014`*^9}, {
   3.577353755031596*^9, 3.577353830618239*^9}, {3.5773540172759666`*^9, 
   3.5773541162480803`*^9}, {3.577354152066833*^9, 3.577354413093473*^9}, {
   3.5773544432664547`*^9, 3.577354529607409*^9}, {3.5773545645004063`*^9, 
   3.577354609881363*^9}, {3.577354646693754*^9, 3.577354719256816*^9}, {
   3.577354804577231*^9, 3.577354815180592*^9}, {3.577354859759325*^9, 
   3.577354878122208*^9}, {3.577354937657115*^9, 3.57735497397362*^9}, {
   3.5773551128436937`*^9, 3.577355124374435*^9}, {3.577355287847395*^9, 
   3.577355291745131*^9}, {3.577355331502981*^9, 3.5773555238018637`*^9}, {
   3.5773556441864843`*^9, 3.577355680529611*^9}, {3.577355764746146*^9, 
   3.57735603616667*^9}, {3.577356067609832*^9, 3.577356088698545*^9}, {
   3.5773566127012033`*^9, 3.577356646538927*^9}, {3.577357259521092*^9, 
   3.577357262049225*^9}, {3.577357426760705*^9, 3.577357749278442*^9}, {
   3.577357796111245*^9, 3.5773578084046593`*^9}, {3.577357892477436*^9, 
   3.577357900054429*^9}, {3.577357991703231*^9, 3.57735800683899*^9}, {
   3.577358336912718*^9, 3.577358356808399*^9}, {3.57735841721972*^9, 
   3.57735849711208*^9}, {3.577358566418222*^9, 3.577358587755087*^9}, {
   3.577358622872891*^9, 3.577358733602942*^9}, {3.5773587638068533`*^9, 
   3.577358768925439*^9}, {3.577358808147798*^9, 3.5773588098055563`*^9}, 
   3.577358901440624*^9, {3.577358941533095*^9, 3.577359165805587*^9}, {
   3.5773591962207117`*^9, 3.5773592177684097`*^9}, {3.577359248474031*^9, 
   3.5773593667376966`*^9}, {3.5773594331034393`*^9, 
   3.5773594896816797`*^9}, {3.577359523693625*^9, 3.577359534295063*^9}, {
   3.577359620018565*^9, 3.577359678937852*^9}, {3.577359798296011*^9, 
   3.57735998655851*^9}, {3.5773601049909*^9, 3.577360237113104*^9}, {
   3.577360270767872*^9, 3.577360311467051*^9}, {3.577360856695126*^9, 
   3.577360857977613*^9}, {3.577360929098216*^9, 3.57736095463447*^9}, {
   3.577361698337792*^9, 3.577361771468536*^9}, {3.577361809866765*^9, 
   3.577361875240674*^9}, {3.5773619792408257`*^9, 3.577361982504136*^9}, {
   3.577362428808133*^9, 3.577362524010764*^9}, {3.57736260183395*^9, 
   3.577362609007038*^9}, {3.5773631916012077`*^9, 3.577363194621887*^9}, {
   3.577363443192843*^9, 3.577363497664022*^9}, {3.577363577378818*^9, 
   3.577363580696754*^9}, {3.577363666202127*^9, 3.577363668237071*^9}, {
   3.577363743420475*^9, 3.577363761484745*^9}, {3.577363871084654*^9, 
   3.5773639581458473`*^9}, {3.577363993050496*^9, 3.577364010484871*^9}, 
   3.5773641351947107`*^9, 3.577364201631631*^9, {3.577364306749485*^9, 
   3.5773643334205103`*^9}, {3.57736441377666*^9, 3.577364488304467*^9}, {
   3.577364523400754*^9, 3.5773645248374968`*^9}, {3.577364582099708*^9, 
   3.577364591155931*^9}, {3.577364621168502*^9, 3.577364661622953*^9}, {
   3.5773647598942966`*^9, 3.5773648991330013`*^9}, {3.5773652346321173`*^9, 
   3.577365236397955*^9}, {3.577365302172237*^9, 3.5773653024409237`*^9}, {
   3.5773655683095427`*^9, 3.5773655851660433`*^9}, 3.577365637306139*^9, {
   3.5773656911417418`*^9, 3.577365717371419*^9}, {3.57736585258633*^9, 
   3.577365852839656*^9}, 3.577366675224243*^9, 3.577366729881351*^9, {
   3.577366799324977*^9, 3.577366807334918*^9}, {3.577366876537867*^9, 
   3.577366878036584*^9}, {3.577367027497939*^9, 3.577367034261444*^9}, {
   3.577367087240992*^9, 3.577367089335643*^9}, {3.577367169963922*^9, 
   3.5773671704316463`*^9}, 3.5998996090176907`*^9, {3.599899692790882*^9, 
   3.599899718820017*^9}, {3.5999117123308287`*^9, 3.5999117350698566`*^9}, {
   3.599911780274081*^9, 3.599911781937955*^9}, {3.5999118178722878`*^9, 
   3.5999118223204803`*^9}, {3.599924786788741*^9, 3.5999247907428427`*^9}, {
   3.5999824626267967`*^9, 3.5999824865906353`*^9}, {3.599982518201003*^9, 
   3.5999826042331457`*^9}, {3.6000003857849197`*^9, 
   3.6000003884372997`*^9}, {3.600667542168519*^9, 3.600667641114686*^9}, {
   3.600668540601487*^9, 3.600668595923644*^9}, 3.6006754649573*^9, {
   3.600675520062149*^9, 3.600675601239461*^9}, {3.600675681972083*^9, 
   3.6006757348788013`*^9}, {3.600678216351714*^9, 3.600678261538052*^9}, {
   3.6006783078520327`*^9, 3.6006783573405323`*^9}, {3.60067840334352*^9, 
   3.600678559458737*^9}, {3.6028560933902903`*^9, 3.602856093727703*^9}, {
   3.6074285100030327`*^9, 3.607428510388282*^9}, {3.637557072823853*^9, 
   3.637557119311878*^9}, {3.6375571727361917`*^9, 3.637557173731791*^9}, {
   3.637557208739818*^9, 3.637557209268497*^9}, {3.637573339934503*^9, 
   3.637573342011644*^9}},
 TextAlignment->Left,
 TextJustification->1.]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tIntroduction"
}], "Section",
 CellChangeTimes->{{3.5998938857987137`*^9, 3.5998939022215014`*^9}, {
  3.599894124600873*^9, 3.5998941509689074`*^9}, {3.5998942049690657`*^9, 
  3.599894208887265*^9}, {3.599895819252528*^9, 3.5998958414230003`*^9}},
 CellTags->"intro"],

Cell[TextData[{
 "As computers are applied to address increasingly complicated problems, \
situations arise in which there is no known method to build a model able to \
produce a desired output, from a given set of inputs.\nConsider the task of \
recognizing hand written digits. The goal is to estimate a function that will \
take numerical representation (e.g. a raster image) of an hand-written digit \
and that will output the identity of the digit in the image: 0, . . . , 9. At \
first glance, one would think that a possible way to address such problems \
could be to hard-code some rules to perform the recognition. Unfortunately, \
this approach would demand huge human efforts to analyze a representative \
dataset of digits and to find stable patterns that could be used for the \
recognition task. Moreover, due to the large variability in the hand \
writings, it may produce poor results when applied to digits produced by \
writers that were not considered during the rule making process. Finally, the \
skills acquired while addressing the digit recognition problem would not be \
transfered to other unrelated problems like, for example, automatically \
recognizing spoken words.\nA more modern approach to tackle such problems is \
to use machine learning to design general ",
 StyleBox["pattern recognition",
  FontSlant->"Italic"],
 " algorithms and to study their generalization properties. These tools could \
then be applied to any pattern recognition problem (such as the above \
mentioned digit recognition and speach recognition problems), with a \
comparably very limited human effort.\nPattern recognition algorithms make \
use of a set of training examples of the form ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"(", 
     RowBox[{
      StyleBox[
       SubscriptBox["x", 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"], ",", 
      SubscriptBox["y", "i"]}], ")"}], "InlineFormula"], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], "\[Element]", " ", "X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], "InlineFormula"], 
   TraditionalForm]]],
 " is a numerical representation of an input instance and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["y", "i"], "\[Element]", " ", "Y"}], "InlineFormula"], 
   TraditionalForm]]],
 " is an associated desired output. \nSuppose that the training examples are \
drawn from a given distribution \[CapitalDifferentialD] on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"X", "\[Times]", "Y"}], "InlineFormula"], TraditionalForm]]],
 StyleBox[". ", "DisplayFormula"],
 "The goal of a pattern recognition algorithm is to automatically learn a \
function ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["f", "v"], ":", 
     RowBox[{"X", "\[RightArrow]", "Y"}]}], "InlineFormula"], 
   TraditionalForm]]],
 " (where ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]]],
 " is a parameter, or a set of parameters to be estimated) able to produce \
the desired output ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " on each training example ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["x", 
     StyleBox["i",
      FontWeight->"Plain"]], "InlineFormula",
    FontWeight->"Bold"], TraditionalForm]]],
 " and to perform well on other (unseen) example drawn from the same \
distribution \[CapitalDifferentialD].\n\nOne of the most powerful and widely \
used tools to solve pattern recognition tasks is the Support Vector Machine \
(SVM) ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". Over the last 15 years, this class of algorithms have become the de facto \
standard in several fields. In this notebook we will present the basic theory \
of SVMs and present some simple implementations using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".\nAn outline of the notebook is as follows. In Section\[NonBreakingSpace]",
 
 
 CounterBox["Section", "linear_classifiers"],
 " we introduce the basics concepts of linear classifiers. Section\
\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:max_margin"],
 " presents the theory of max-margin classifiers and the resulting algorithms \
and implementations. In Section\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:svm"],
 " we introduce Support Vector Machines, the related optimization tools and \
several implementations. Section\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:kernel_svm"],
 " finally discusses the usage of ",
 StyleBox["kernel methods",
  FontSlant->"Italic"],
 " to turn the SVM classifiers into non-linear ones, without any modification \
to the learning algorithms and the analysis. We conclude in Section ",
 
 CounterBox["Section", "conclusions"],
 "\[NonBreakingSpace], pointing out some possible extensions of this work."
}], "Text",
 CellChangeTimes->{{3.5998943087684813`*^9, 3.5998943271227007`*^9}, 
   3.599894407253346*^9, 3.5998948280174227`*^9, {3.5998951864442167`*^9, 
   3.5998951952238407`*^9}, {3.599896658295856*^9, 3.599896727209674*^9}, {
   3.599898813372349*^9, 3.599898816683291*^9}, {3.5998988627056*^9, 
   3.599898898867103*^9}, {3.599898937396241*^9, 3.599899016660832*^9}, {
   3.599899055552977*^9, 3.599899152596859*^9}, {3.5998992798243923`*^9, 
   3.5998993971280947`*^9}, {3.599899542183464*^9, 3.599899564379373*^9}, {
   3.599911881099936*^9, 3.599911974310871*^9}, {3.599921388866708*^9, 
   3.59992147049356*^9}, {3.599921722923037*^9, 3.5999217446395407`*^9}, {
   3.5999217874217176`*^9, 3.599921801417346*^9}, {3.599921897618664*^9, 
   3.599921905508203*^9}, {3.599921954931614*^9, 3.599922668857256*^9}, {
   3.599922705859602*^9, 3.599922924914104*^9}, {3.599922955624147*^9, 
   3.5999231184498*^9}, {3.5999231516651506`*^9, 3.599923241315639*^9}, {
   3.599923271374123*^9, 3.599923528304927*^9}, {3.599923562720948*^9, 
   3.599923778621764*^9}, {3.599923847071067*^9, 3.599923922580636*^9}, {
   3.599923962088328*^9, 3.599923988851654*^9}, {3.599924043221188*^9, 
   3.59992432636644*^9}, {3.599924358925447*^9, 3.5999244579349737`*^9}, {
   3.5999245088907957`*^9, 3.5999245206387987`*^9}, {3.599924565204747*^9, 
   3.5999246010434227`*^9}, {3.599982401872068*^9, 3.5999824378881817`*^9}, {
   3.6000004010460987`*^9, 3.6000004116739187`*^9}, {3.6006681285910587`*^9, 
   3.600668182653831*^9}, {3.600668232106468*^9, 3.600668284999237*^9}, {
   3.600668330536263*^9, 3.600668478955243*^9}, {3.600675783976914*^9, 
   3.6006758428460817`*^9}, {3.600675894162828*^9, 3.6006760349611263`*^9}, {
   3.602856353983424*^9, 3.602856355009945*^9}, {3.607428556074897*^9, 
   3.607428569902584*^9}, {3.607428954011552*^9, 3.607428974018379*^9}, 
   3.610027973954509*^9, 3.616701571920931*^9, {3.637557258513633*^9, 
   3.6375573888018293`*^9}, {3.637557425528923*^9, 3.637557456285863*^9}, {
   3.6375575215561743`*^9, 3.637557573154581*^9}, {3.637583943040402*^9, 
   3.637583964267373*^9}, {3.637584066449935*^9, 3.637584067015843*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tLinear Classifiers"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.59989587689098*^9, 3.599895892048147*^9}, {3.599895942273438*^9, 
  3.599895956106649*^9}, {3.599983213882422*^9, 3.599983223053462*^9}, {
  3.5999952940499563`*^9, 3.59999533593959*^9}, {3.600001907096558*^9, 
  3.600001907988482*^9}},
 CellTags->"linear_classifiers"],

Cell[TextData[{
 "Suppose we are given a set of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " training examples ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["S", "InlineFormula"], 
    StyleBox["\[Congruent]", "InlineFormula"], 
    RowBox[{
     StyleBox["{", "InlineFormula"], 
     RowBox[{
      StyleBox[
       RowBox[{"(", 
        RowBox[{
         StyleBox[
          SubscriptBox["x", 
           StyleBox["i",
            FontWeight->"Plain"]],
          FontWeight->"Bold"], ",", 
         SubscriptBox["y", "i"]}], ")"}], "InlineFormula"], 
      StyleBox[",", "InlineFormula"], 
      StyleBox[" ", "InlineFormula"], 
      StyleBox[
       RowBox[{"i", "=", "1"}], "InlineFormula"], 
      StyleBox[",", "InlineFormula"], "\[Ellipsis]", ",", "n"}], "}"}]}], 
   TraditionalForm]]],
 " drawn from a given distribution \[CapitalDifferentialD] on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"X", "\[Times]", "Y"}], "InlineFormula"], TraditionalForm]]],
 ", where:"
}], "Text",
 CellChangeTimes->{{3.5999833201968613`*^9, 3.599983333359153*^9}, {
  3.599983411766436*^9, 3.599983429731062*^9}, {3.599983469021221*^9, 
  3.599983699442152*^9}, {3.599983985304085*^9, 3.599983987420415*^9}, {
  3.599984055365138*^9, 3.599984095786604*^9}, {3.5999841276182547`*^9, 
  3.5999841634915257`*^9}, {3.5999841954486227`*^9, 3.599984283340876*^9}, {
  3.599984338350649*^9, 3.5999843408194103`*^9}, {3.599984373328288*^9, 
  3.599984388233059*^9}, {3.599984566838851*^9, 3.599984567148521*^9}, {
  3.599984694295349*^9, 3.599984694951599*^9}, {3.5999954171135883`*^9, 
  3.5999954338568573`*^9}, {3.599996209204809*^9, 3.599996266625684*^9}, {
  3.599996305172275*^9, 3.599996367763781*^9}, {3.599996444071846*^9, 
  3.599996462310013*^9}, {3.599996661334001*^9, 3.59999666841422*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  StyleBox[
   RowBox[{
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], "\[Element]", "X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "\[Element]", " ", "Y"}], ";"}]}], 
   "InlineFormula"], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.599996715715584*^9}, {
  3.600000424125843*^9, 3.600000430480761*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
   "X", " ", "is", " ", "called", " ", "the", " ", "input", " ", "space"}], 
   ";"}], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.599996714110073*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"Y", " ", "is", " ", "called", " ", "the", " ", "outcome", " ", 
   RowBox[{"(", 
    RowBox[{"or", " ", "decision"}], ")"}], " ", 
   RowBox[{"space", "."}]}], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.5999967110155077`*^9}}]
}, Open  ]],

Cell[TextData[{
 "In ",
 StyleBox["binary classification",
  FontSlant->"Italic"],
 " problems (problems with two classes), the decision space is defined as",
 Cell[BoxData[
  FormBox[
   RowBox[{"Y", "\[Congruent]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], TraditionalForm]]],
 " and a ",
 StyleBox["linear classifier",
  FontSlant->"Italic"],
 " can be defined in the following way:"
}], "Text",
 CellChangeTimes->{{3.5999833201968613`*^9, 3.599983333359153*^9}, {
   3.599983411766436*^9, 3.599983429731062*^9}, {3.599983469021221*^9, 
   3.599983699442152*^9}, {3.599983985304085*^9, 3.599983987420415*^9}, {
   3.599984055365138*^9, 3.599984095786604*^9}, {3.5999841276182547`*^9, 
   3.5999841634915257`*^9}, {3.5999841954486227`*^9, 3.599984283340876*^9}, {
   3.599984338350649*^9, 3.5999843408194103`*^9}, {3.599984373328288*^9, 
   3.599984388233059*^9}, {3.599984566838851*^9, 3.599984567148521*^9}, {
   3.599984694295349*^9, 3.599984694951599*^9}, {3.5999954171135883`*^9, 
   3.5999954338568573`*^9}, {3.599996209204809*^9, 3.599996266625684*^9}, {
   3.599996305172275*^9, 3.599996367763781*^9}, {3.599996444071846*^9, 
   3.599996462310013*^9}, {3.599996661334001*^9, 3.59999666841422*^9}, {
   3.600676055582761*^9, 3.600676093519527*^9}, {3.6028563850033283`*^9, 
   3.602856385365007*^9}, {3.63756005606686*^9, 3.637560057624992*^9}, {
   3.637560217609866*^9, 3.6375602187926617`*^9}, 3.637560309064089*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox[
     OverscriptBox["y", "^"], "i"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}], ")"}]}], "=", 
   RowBox[{"sign", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["f", 
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], ",", "b"}]], 
      RowBox[{"(", 
       StyleBox[
        SubscriptBox["x", 
         StyleBox["i",
          FontWeight->"Plain"]],
        FontWeight->"Bold"], ")"}]}], ")"}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.599984391909471*^9, 3.599984400633883*^9}, {
   3.599984585296199*^9, 3.599984662219262*^9}, {3.599984803758453*^9, 
   3.599984813777051*^9}, 3.5999954402745743`*^9, {3.637557831401524*^9, 
   3.6375578562072363`*^9}, {3.6375593933864117`*^9, 3.637559394153325*^9}, {
   3.637559476361559*^9, 3.6375594822094307`*^9}, {3.637559798022852*^9, 
   3.637559798718795*^9}, {3.637560777886765*^9, 3.637560800588523*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["y", "^"], "i"], TraditionalForm]]],
 " is the predicted label for a given sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 ", using parametes  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}], ")"}], "\[Epsilon]", " ", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"], "\[Times]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]]],
 ", while ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], 
       StyleBox[",",
        FontWeight->"Bold"], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["b",
        FontWeight->"Plain"]}]], ":", "X"}], "\[Rule]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]]],
 " is a parametric linear function, defined as"
}], "Text",
 CellChangeTimes->{{3.59998470550469*^9, 3.5999847184918623`*^9}, {
  3.599995380838723*^9, 3.5999953847721653`*^9}, {3.6375579352423964`*^9, 
  3.6375579531649437`*^9}, {3.637559089793523*^9, 3.63755918088489*^9}, {
  3.637559225614257*^9, 3.637559314737771*^9}, {3.637559389430121*^9, 
  3.6375594510826883`*^9}, {3.637559492836709*^9, 3.6375596551386023`*^9}, {
  3.6375596967675*^9, 3.637559709104871*^9}, {3.637559762603465*^9, 
  3.637559764617177*^9}, {3.637559805293641*^9, 3.637559855297859*^9}, {
  3.6375598982607594`*^9, 3.6375599401862307`*^9}, {3.6375602460849648`*^9, 
  3.637560282315172*^9}, {3.63756032571612*^9, 3.6375603329679117`*^9}, {
  3.637560407198728*^9, 3.637560416593088*^9}, {3.637560824370755*^9, 
  3.637560839111212*^9}, {3.63756323623885*^9, 3.637563275448161*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], 
   RowBox[{"(", 
    StyleBox["x",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["x",
     FontWeight->"Bold"]}], " ", "+", 
   RowBox[{"b", "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.599984726788556*^9, 3.5999847764296103`*^9}, {
   3.5999848163245077`*^9, 3.599984820955571*^9}, 3.599995450163426*^9, {
   3.637559663616598*^9, 3.6375596641818447`*^9}, {3.637559859958955*^9, 
   3.637559861838345*^9}, {3.637560845157565*^9, 3.637560845442911*^9}}],

Cell[TextData[{
 "We refer to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " as to the ",
 StyleBox["scoring function",
  FontSlant->"Italic"],
 " of the linear classifier, as it provides a classification score for each \
sample. For brevity, we also sometimes refer to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " as to the classifier.\nThe geometry of this simple classifier can be \
understood by looking at the 2D visualization in the following figure. The \
points whose vector projection on ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " is grater than ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "b"}], TraditionalForm]]],
 " will be positively classified, while the others will be negatively \
classified. The equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], "+", "b"}], "=", "0"}], TraditionalForm]]],
 " thus defines a (hyper) plane separating the positively classified points \
from the negative ones.\n"
}], "Text",
 CellChangeTimes->{{3.5999848374383993`*^9, 3.599984853455332*^9}, {
   3.599984885735837*^9, 3.599985006272943*^9}, 3.599992786541381*^9, {
   3.599992831736384*^9, 3.599992906070362*^9}, 3.5999929741867743`*^9, 
   3.599993588724721*^9, {3.599993630655571*^9, 3.599993638290903*^9}, {
   3.5999938017619667`*^9, 3.59999385156149*^9}, {3.599993899101679*^9, 
   3.599993967704577*^9}, {3.599994078570162*^9, 3.599994083576499*^9}, {
   3.599994142489312*^9, 3.599994222918152*^9}, {3.599994259188177*^9, 
   3.599994278147274*^9}, {3.599995387200259*^9, 3.599995394053111*^9}, {
   3.599995470257247*^9, 3.5999954848046083`*^9}, {3.599998898143688*^9, 
   3.599998898467804*^9}, {3.600676141246665*^9, 3.60067615059121*^9}, 
   3.601386017267371*^9, {3.637557676688958*^9, 3.637557678075529*^9}, {
   3.63755771390899*^9, 3.6375577407034397`*^9}, {3.637559459727026*^9, 
   3.637559461548736*^9}, 3.637559530016273*^9, {3.637559659615926*^9, 
   3.637559660778345*^9}, {3.637559864308524*^9, 3.6375598839855556`*^9}, {
   3.637560000137486*^9, 3.637560016566737*^9}, {3.637560094699978*^9, 
   3.6375601526531*^9}, {3.637560284909622*^9, 3.637560306533741*^9}, {
   3.6375603436605043`*^9, 3.637560377416593*^9}, {3.6375608302942247`*^9, 
   3.637560842871337*^9}, {3.6375609618068333`*^9, 3.6375610182851067`*^9}, {
   3.637561053747444*^9, 3.6375611560891867`*^9}, {3.6375611945261307`*^9, 
   3.637561283777487*^9}, {3.637563188260047*^9, 3.6375632205032263`*^9}, {
   3.637563290262705*^9, 3.637563339425099*^9}, {3.637563445093539*^9, 
   3.637563459392502*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    TagBox[
     RasterBox[CompressedData["
1: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
2b6+vrVq1Tpw4MD169c15U4WH02HDh1q1aoVJXbK9tJflbz++uv0egrq3LQu
iV1+nC6lkeEBAABAK2tg57vzt0ppqKcFeHBHjhyxsbGR9nYVJ/OCgoJXXnmF
x5nhuvfatWvTY7169Xbt2iUXy/RitXQNByMAAAAwXXdUhASAijl58mStWrX2
798va3g0GG5+FxTRvby8ZJRIivq8MGLEiJSUFG51l+iuIbcDAADA7aQWFyEB
oAJu3bp1+vTpBg0a+Pr6aqX9SdVDiZc5k/OLP/zwQ66TkQFnOMl/9tlnUjDD
jyhaAwAAAFFQUJCWlqZrFQSA+1dSUhIWFtayZcuQkBCpUb/7VXBqaurIkSN1
48wQHx8fbrSXnE+/jX8VH6TSFI+6dwAACyOdm1SGZxNdebOGkglrQmEgKytL
HUkGTXwAD+rChQvNmzc/d+7cfb6ej7Lt27c3bdpU2ttlzJkJEyZcu3ZNU+6F
0es5t2PIVgAAy6N+w2tlX/KGo4XcKZwjt1uVgoICXkALHkDFREdHu7i4BAcH
S66+y/WvWjlz5cqVd999l0M7z7LKkzQ5ODh89913Wll7u/rbdF/vAABgAdT2
c+32kUOEmtN0rwfrIZ87GvEAKiYhIaF9+/ZpaWn89J6hWr5v6ZGOu7CwsG7d
ulF6p7jOAZ6WbWxsnnzyydDQUHk9vVJK2vB1DQBgSW6VkXAus3vw97/6MvUF
YD04Xej2ELTjATyopKSkxx577D7vWMkhJgv8PfzTTz85Oztzq7ug9D558uTC
wkJ+JX914xIbAMCSqAMaSLcmXSy/U0rnMwhKZayBNOLpBoQ04iYBmKO4uLge
PXpo991vVNfJVM3hr732mmF/VVdX1x07dqhNMYjuAACWR77buZcTZ3VuupF/
opzGQw0baRvB+NDSDvAwEhISfHx8NIO7V3fCJevqyDNSA1NcXBwaGtqzZ09u
eKcM7+joyEl+4MCBGRkZOFoBACyP2gu1oKDgwIEDc+fO/eijj+bNm7ds2bKr
V68GBQXNmTPn7bffnjVrVn5+PkYCBPRLBagAitCJiYnc3l7uzU0d9UAr96Ar
KfXZZ5/ZlNK1vc+fP5/bYQAAwDLwWYNb1HkksYiIiObNm/NoY4MGDdJKZ+6j
p7Vq1XrrrbcKCwvVSktuC0J7jjXApOoAD4m+LWNjYzt16lQpv40PSW5IoV87
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
euaZZ2i5bdu2a9eu1Up3RfVTAwAAAKgUFB2TkpJ69+599epVzTy71OlKjsmh
Q4coR3Xt2lXWpKWlcZv26NGjtdLmbvU3VFsdsuFgj7QmIiLiqaeeos2jbeYB
3tmf/vSns2fPyuapVxxgXGPGjOHP6Oeff6ZP8K9//Sst85j8ajcE1LcDAABA
5UpPT6fczrFQN+mnueCwxGmclps2bUo5ys/PT1ZSuFq9ejVnLQ7D3CJabX+p
lMdoSuG9+m7/+uuvdevWlZoZmWv1iy++UAv1wRTQweLu7k6f0dChQw8fPkwf
2S+//KKWu9+p9B0AAADgYaSkpHh4eCQkJJhpaNf1M92+fTunX/q7+AWce+Pj
47kKZezYsbzeKINelju/Eud5SoMzZsyQ9nYZKPLRRx89ePBgdW4k3NOGDRv4
Csve3v65555Th99Xhx4FAAAAqERJSUlt27al3G5YcGJ2aMtfe+01jruZmZlc
Vc4J6sqVK/Xq1aP13bt3l9jM434Y/e9VLz18fX29vb3VJnfOh2+++ebly5fV
Qia146p2e+dcs7v4MhfqoKMU17nKfffu3fIRyCsxbqc50l1QG/2bAQAAQCc5
Ofmxxx5TG9vNcbxBKVmfNGkSt1RzvbEoLCz08PCwt7enRw7zpvNnyiDt/CnQ
pn711VcODg48xSr9LVz3Xr9+/TVr1ugmitK17hpOLAWViC+O+PPas2cPX1j9
9a9/lReog/Dj/TdHN8rINRo+RwAAMBFFRUUpKSl9+/bVDEZTNBfq1tLZdunS
pZymAgICrpfSysJt27ZtbW1t//SnP+n+TCO2TnO6lg2gqw/pzEjLL774Iv8t
jo6OUj8zYMCAM2fOaMqg9PzjlPb53oG0yaPVvSpwQzq9vX369KHdia4E6XHH
jh2aQbduvP/mSL3teKuMcTcJAABApKWl+fj4UBox0/p2JjE1Li6O8+2bb77J
/8Qn4tzcXB4N8tdff9Vun4nJFP5kXfueRIWwsLAePXpIkztFRG6Bnzp1qtr5
0TBaYDCTqiA9oP/1r3/RZ3Hq1KlOnTrRx9GqVaucnBwNLe0WgY4stQjNFL4f
AAAAWEJCQteuXeU8ZV4lnerWcgEJ/SGDBw/mfp3x8fGSz//3v//Z29u3bNny
2rVrmmlkda10+2VLDOt2eOPpBZ999lmtWrXU/qoUGikrbtiwQV5MYVJtftdM
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
tHXrVt0MXPfcK9RdKyUlhX8hXQXwv/IoNwAAAFCJTpw40aVLF57sntcgxVkS
+jTVme5nzZp1/PhxzWDmSgz6YWHu0tBNGXvUqFEcs7n0nZP8sGHDzpw5c5+D
wXJjPv8vtF+98sor3Ok1NTWV/4nds90eAAAA7hOdUoOCgh5//HF+Sukdod3C
6DoPSojiZlKpdsB4fdZAPnR63LNnT6tWrXhiJhlzhoL3v/71r3v+HrVlnh4P
Hz7Mv2fJkiWyF8mFA/YrAACAyhIVFeXj46MpLWM4z1oY3Zh++HyFWtHNOVOO
Aqks4noPiykeU7udpqWlffDBB9LezkPBkG7dum3bto1fo9tb1B1Jkrm3tzf9
Bjc3t2r5CwAAAKwUnZTDw8O7du1q7A2BKsTDcWsWFD4rkZRhG745uj7altRl
Wy5PKHvHxMQMGzaMh4iU6G5jYzN48GB1eFi1F7OmFNJs3bqVS25+++23av87
AAAArEtUVFSPHj2kpR31EpZEZtI5e/bsuXPnNDS2367cKC59LWlBSrUto37s
LoVwq1atcnZ2lv6qjo6OPMz7V199RW+CvCe6aqucnJy6detS2n/mmWeq7a8A
AACwWhcuXOjTpw/inAW7du1aixYtvvzyS2NviClS70S8//77o0aNev755/v2
7Tt8+PDTp0/zCyxsaBSZGVm3/tKlS5MnT5Ymd657p6deXl7h4eHys2p7+4wZ
M/jFkZGRlnFpAwAAYMpiYmIGDBhg7K2AKvTRRx917NhRZsNEvlJxCk1OTm7d
ujVl1J9++snf33/t2rXc7Dx79mx+mdQamTV1ZCFZyVFc/sBdu3Y9+uijMkok
V7+Tt956q7i4WO5E0EJsbCy9jP7pww8/NMqfAwAAYG0iIiIGDhyoKb0XLamO
FyhrURA9f/48P0WJu4qrwkiXLl0ooB48eJDfHzoE1q1bZ1tq06ZN/GILyO2a
UjolT9Uwz8uXL1+eN2+eNLlLeq9Xr97OnTu1sku/oUOH0vpGjRpxB1VMsQQA
AFClKIqcPHmyZ8+eGEnGUqnjtyNZlWv58uWUz729vTUl1tJC165dKZe6urqq
pd0WQw3w8idrpVd2/D2QkJDQt29fHhySB5zhuvfhw4fn5OT8/PPPPPXqypUr
MUg7AABA9Th06FDnzp11Y0SAZZDBDNVYhYgleIfv1asX5c9Ro0bxU7nx9PXX
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
SZOKFy9Oct3Pz08EPL2OGjVKn5iZmck1xdqq06VQXwAAwHPZs2dPo0aN9B64
duQS7a0qU9Xp6elnz541bM7tWnOCa0XfOlm1xzt1UA5IEeCtyEMuT/ilS5ee
e+45WakaHBzMzjN33nlnXFycrghSU6hJp5bK9BHaeeChWB9duOwCn2Lt2rX1
6tVzdSk8DG1jpw6R+1brKlSIyeuH1/lqmSExq023F+028DIks6pVvW/durVm
zZo61Aw7vfft2/fkyZOmswQdr6aAfgMANxq7TT3af+AjUC8wZ84c9pMxoDOv
BW3jpf5RB3vUdmAXlMy7MEl06yOKOHjA69GDVtlJD/yMGTNuvfVWXq8qPjNB
QUEjRoyQYwxVNaj66JxNBfcDAAAA3CC+/PLLBg0a8DYmm64HVpi8RlWcru2G
fQPXREZGBt9Mnu5fsmTJuHHjPv7449jY2NOnTxtQIMBLMfm3iOrW+d0yMzO7
dOmiTe78GhMT8/vvvxu22qHbdjRNwAtAsw98E+oFhgwZUqtWLWnVURdyg+49
2dJ+4sSJTp067dixQ3xK9ZEgb4i0YB+kadOmVa1aNSoq6s0332zfvn1gYKC/
vz/tdGkZAch3rB4vaWlphlpEs27dusjISDG5S7SZzp07UyXiw6Rth2IHng6P
YRFMA/gmL7/8MuddspplgBNYkKemphpZvedrr71WqVKlc+fOpaSk/Pnnn/Hx
8QZu5g2CZcaqVatIqEdERNA955u/dOlSNi1KtHwAvAzt4iKL3HW8R5YuvD1i
xAhZrEqvQUFB9FqyZMnZs2ezdJe4NC76NQDcGNg3VUKbGniqgS/Rt2/fqlWr
it0GUjM3aKdr3mYBWatWrdKlS/v7+//3v/81EEzmupH7TBvly5enO/zHH3+I
PxJBTy/tLFKkyPnz5zG1AXwcqikHDx5s1aoVq3dqiHSY93379hnKRM+niEef
bs2AO4NYQEbWQHX37t3nzp0zoNiBj0Gt9GuvvRYZGSmxUFAFconkNCG5SBsT
Jkxo1qyZzFD36tVL4syA64Ru48yZM+mulilThic45Mb++uuvbFT88ssvXVpG
AFyPWF1+/PHH4sWLS35V2Rg0aJBeQS/b2nMG419PgQQ8/YPsMeVT8BhTcqMg
hQfwNd59913S7SkpKYaKsAdyRE9YG7amIzQ0NCiLlStXypG4pdcDS4tnn32W
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
tGSno+Ll319j/YrcfJejY+w2lY7sJKa6bPepyOWeXBbSebvh6CJXVUNk6toc
ncUPodyNHJ83+S5TH62/0foHXbXXUxg5PZx2nyv9LxhOb7v1wdYXMf1qvZ8q
rLWns+6xu6FvgrVhN5VEn8Lbq1ataty4scR45/WqRN++fTMyMuTg3Pg/262Y
0hbJcMPuX2C3aucG000w3QfrXyZ/hOl4Rw2vk0ohukiXxLDcB9126cP06MY6
FDVd09H+q5b2U+80lZz+RFPXwH/rX3/9NXz48Hbt2rVs2bJTp07Dhg3jGC9G
dqcpU1Flf45rKxYuXEhP1Lhx4+htVFTUE088wadcvnyZC0DX1KmXcv8k6Gpi
91YYju+hYe+pu2qLZm/6B60jKcNeK3fVMdZTrI+u9Wp2f4L1kdOLi53/WOtO
u4ra+aNoGstcVaOb3Ndfu/fHWk5Hd9LuFzna6eiRMOkKuwfnHrkPpsfpqhLq
+tXJc2LYezhzU4Acj5e+5mr2uvM/G7rwTq7mRKnmplQ5PiqObov+1PlZjr6I
RwF2v+WqrUpa++6r1zItZThoHBzpPVP7L8Vw8nsd3QE9lDM9Tna/2npNRzc8
xxZGhhiSEMTJ7XI+2LGLbnMcjYb0D5EjtQHW0XOlz9WF18fYLbP1HlrLYD3M
yOmW5v622P26vJ2l3+bmanKLHA0qTSrd+khftYwdGJOA4VbrX9uElLVG65KY
yu/8uXX0HDr6+Xb/R+s8juy/ausUrJ86Ko/dL9I6XILvjRw5Urxl6DUwMDAg
ICAkJOS7774z1MDfGuDd7veaTCWOjnSO6fnXFc10zdw8YLlvcq9aOl+5gukB
s3tjpcDOTcFGdutKjo+WtUJd6y8ylfmfLAxbLeBKkZqaumDBgocffrhixYp1
69b99NNPd+zYwZauf5ULOr3ymE5bhJwUYNeuXfRElS9fvlmzZgMHDtRPoJGV
O9X5FfLWiTi6iKMOJced1maHN3IZMdXUF9i1FVjL7KgX+NdmSrX7RboR+9fe
OMj0u/SGtRnPsZyOCm+61ayX7DZxebi+nGWaDbGWXO+xHub8+narnt2SO+p9
eEObi53fz9zcB7u/JZefWo+8qnSj84ad74aTdShX7ZmbHN15Rx85wVGtt3sp
/ej+a5k1y0MBclMXcvO38j00VQS5bzmWMw81UU4x/TtO1LX+uqv2hJlUZ0cF
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
g6Cpvzm0Wtpq2VFqeUuzPb+vsTucBYSOAwzdFhOaO7nNhYIM7+bW236ta9nj
rnlm0v1750vFzRn3722/e2ouC3R0vpyzr7GZWDu5zjR/u9Sy21sr+a3zVzC1
kva3JtpHgopZL/qlQpazfq2gsFZ7oK3qev0nS1V7G2iufTU511d61sdCIM2l
dXp+rkBnlpjqdaGOzt/vRHkW07Iatn379h07duzcuVO6a9cu1X/66aeoipLo
qZ1f95TqWWQLB3VVpEe+/teM/S59ZHmT8ixaZlnvxx9/3NUJOmNFXJTVwvDJ
92rCnKSKOGQJMSvVUSWf5dAsrNUek6mNin4p4fBPLQpzCvZV74axJU13dN4e
yUcYtm7dmhazDIvJtm3b4sy6XxxmZTWswpaSZKQ0ZPW1Jk9JljRrh0D6JWva
UUsnyWhIPk1EJvbG5N+qL2vF0ujJEne8B1n9pjOFyYDWN2/eHD9v2rRpy5Yt
WU9ev369RsNTxY0bN2aVmwz5rDMrzKp4VlkJZG2cfLov68k0kFEeL4VSRhdz
4sbYCNFPMvSyy7C5E1mBjwzgkI2JL7/8MrsM9Rr+mjVr8MniPKC3du1akspX
rFiRhX21Vq1alerLli2Tl1m+fLmS1atXM00TKjYbldHounXr0hfcqDC7OdHz
UQVN0IMPJVlOzx/BZEH76wqoLl68eP78+dlVnDVr1rRp0+bNm7dw4cJFixY5
hWQ2mD6rkHx2N7LFkMySJUu0GMO16HDp0qWYKJGm6dDIkn7cmxHF7ToLf9oo
yabY+++/P3v27DfffDPbbSsqYK7TeQ9/KXu1lW2aqVOnTpgwYcyYMWPHjpWZ
NGmSkuyNzpw5MztZ0uwrZXtu7ty5CqULFizI/tfjjz9+9NFHJ4AXyc+ZMyf7
dFjFdhzWVP/gk05hV9yenaPsLXLgxIkTEUBj8uTJaEyfPl1D2f/iljiWJBqE
X61Q779nJTZ70MGIESMcZitt/PjxjGJRvb+WLVctjhs3ju3OZucxu67ZvGOj
5tiCZ/qLOcYGi0I7jsq+8KhRo7J3P2jQoEceeWT48OHZYc/+KXM0ly1OzTk7
ePDggQMHhnkWllNxyJAhpg/ZBB86dCgDhw0bxpaRI0dm3zl7yq+88golCukf
PXp0ziphMhrqZvd2ypQpWtfRdWcxKuaTR09z2sorIlnSFOr369cvS83mMgMG
DMDw0Qp5iyDb9w4Rznsj5hEidnOZrCKK280KE7GL3k0P8en4G16VKSgoKCgo
KCgo+P+GiVXfvn379OkjOEzJ3/j+ecGhhuZCXLMTm0s9LauvdUVzsfvvv79r
167HHHNM7969TTqUtHzSv6CgoKCgoKCg4I9Fds069vdmeMHhgubeZUrq/frf
Oj8HWp/KCxibN28eO3bs7bff3qtXr7POOqtbt24PPvjgunXr8tuQJsp4KCgo
KCgoKCj4w1F/0Cz4/QBfqys4xNH+GmrHAb7Q9e23344ePfraa6897rjjxOr9
+/cXvW/btq3jf39ysIyEgoKCgoKCgoJDDS3fjC04fFG/KlOvrte/CxOZjxkz
5qabburRo0eXLl369u07bdq0PXv21D+pO8j7UWW9vaCgoKCgoKDgkEL7f1EV
HC6oP6jS/F7Ehg0b5syZc99993Xv3r1nz559+vR58sknV65c2XGAz3S0fHSi
DIOCgoKCgoKCgkMKLf8nWKK1wxR1x+3du3fGjBl33HHHmWeeeeyxx95yyy3T
p09v/rFX3d0km5+h2++6esvXDgsKCgoKCgoKCv4Q7Peb0n8Ik4L/CxJ415+h
vvfee6+77roJEybs3r27+c3hWn6/vVwvs//e+KvcgoKCgoKCgoKCQwHt/9XS
Ud5nPpyRt2XqV9bb/82nLml5LepAi+olgC8oKCgoKCgoKCg4XPA/j0CbrQ==

      "], {{0, 601}, {1000, 0}}, {0, 255}, ColorFunction -> RGBColor], 
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True], 
     Selectable -> False], BaseStyle -> "ImageGraphics", 
    ImageSize -> {517., Automatic}, ImageSizeRaw -> {1000, 601}, 
    PlotRange -> {{0, 1000}, {0, 601}}],StyleBox[
   "\"Geometry of a linear classifier.\"", "FigureCaptionCentered", 
    StripOnInput -> False]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        StyleBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], Background -> RGBColor[1, 1, 0]], 
        DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"Background", "\[Rule]", 
         RowBox[{"RGBColor", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}]}]}], "]"}]& )]], "Text",
 CellChangeTimes->{
  3.599992537217804*^9, 3.599992635051611*^9, 3.599992744228339*^9, {
   3.599993594079843*^9, 3.5999935981414623`*^9}, {3.59999362851158*^9, 
   3.5999936542686567`*^9}, {3.5999937689082937`*^9, 3.599993770279931*^9}, 
   3.599998786154839*^9, 3.599998887014358*^9},
 TextAlignment->Center,
 CellTags->"fig_geometry"],

Cell[TextData[{
 "\nLet ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalChi]", "(", "r", ")"}], TraditionalForm]], 
  "InlineFormula"],
 " be the indicator function of the predicate ",
 Cell[BoxData[
  FormBox[
   StyleBox["r", "TI"], TraditionalForm]], "InlineFormula"],
 " and let ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " be a the scoring function of a linear classifier. A natural measure for \
the performance of a binary classifier is given by the 0/1 istantaneous \
error, which for a sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 " can be written as"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995499436138*^9, 
   3.599995539266868*^9}, {3.599997582821453*^9, 3.5999975860480633`*^9}, {
   3.599998976253676*^9, 3.5999989914597387`*^9}, {3.599999170742371*^9, 
   3.599999173138685*^9}, {3.599999714269641*^9, 3.5999997234665003`*^9}, 
   3.601386016087184*^9, {3.63756129218629*^9, 3.637561333457786*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", 
   RowBox[{"(", 
    RowBox[{"h", ",", "i"}], ")"}]}], "=", 
  RowBox[{"\[CapitalChi]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["y", "i"], "h", 
       RowBox[{"(", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], ")"}]}], "<", "0"}], ")"}], 
    "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999944603634357`*^9, 3.599994493588257*^9}, {
   3.599995527890851*^9, 3.599995607101728*^9}, {3.59999759190174*^9, 
   3.599997605387134*^9}, {3.599998685361197*^9, 3.599998685502387*^9}, 
   3.5999987301762114`*^9, {3.5999989185448513`*^9, 3.5999989188784037`*^9}, {
   3.5999989939314337`*^9, 3.5999990018287563`*^9}, {3.599999423831132*^9, 
   3.599999448026225*^9}, {3.600000447372196*^9, 3.600000448986864*^9}, 
   3.607429382585763*^9}],

Cell[TextData[{
 "As it can be seen, if the sign of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], ")"}], TraditionalForm]]],
 " disagree, the prediction will be counted as erroneous and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "1"}], TraditionalForm]]],
 ". In the other case, if the sign of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], ")"}], TraditionalForm]]],
 " agree, the prediction will be considered correct and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "0"}], TraditionalForm]]],
 ".\n\nUsing the error function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"e", "(", 
    RowBox[{"h", ",", "i"}], ")"}], TraditionalForm]]],
 ", we can now define the ",
 StyleBox["risk functional",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 " of a classifier ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " over a distribution ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " as"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
  3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
  3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
  3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
  3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
  3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
  3.599997646412861*^9}, {3.5999987264237432`*^9, 3.599998748160718*^9}, {
  3.5999989206421623`*^9, 3.599998967244173*^9}, {3.599999031887761*^9, 
  3.5999990785253983`*^9}, {3.6074293768330593`*^9, 3.607429631218378*^9}, {
  3.6074302685756474`*^9, 3.607430273193674*^9}, {3.607430379106879*^9, 
  3.607430398069633*^9}, {3.6074306202107058`*^9, 3.607430620210925*^9}, {
  3.637561416089044*^9, 3.6375614250470753`*^9}, {3.637563519716991*^9, 
  3.637563520313816*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], 
    RowBox[{"(", "h", ")"}]}], "=", 
   RowBox[{"\[CapitalDifferentialD]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], ",", 
        SubscriptBox["y", "i"]}], ")"}], ":", 
      RowBox[{
       RowBox[{"e", 
        RowBox[{"(", 
         RowBox[{"h", ",", "i"}], ")"}]}], "==", "1"}]}], "}"}]}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.599999082706435*^9, 3.5999991473256493`*^9}, 
   3.5999992125321608`*^9, {3.599999450499954*^9, 3.599999453716419*^9}, 
   3.6074299688686123`*^9, 3.607430001086486*^9, 3.6074301179761*^9}],

Cell[TextData[{
 "which is the expected error rate of the classifier over the set of samples \
generated according to ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 ". This quantity represents the true risk that a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 " generated according to ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " is missclassified by the classifier.\nThe so called \
\[OpenCurlyDoubleQuote]",
 StyleBox["generalization ability",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] of a classifier can then be defined as its ability \
to have a low true risk on ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 ", and thus have a low expected error on samples which were possibly not \
considered when constructing ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " (",
 StyleBox["unseen samples",
  FontSlant->"Italic"],
 ").\n\nSince the distribution ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " is often unknown, this quantity is not directly measurable. Moreover, the \
error function used by this functional is non-smooth, its gradient is zero \
and it is thus not very tractable, as can be seen in the following figure.\n"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
   3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
   3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
   3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
   3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
   3.599997646412861*^9}, {3.5999987264237432`*^9, 3.599998748160718*^9}, {
   3.5999989206421623`*^9, 3.599998967244173*^9}, {3.599999031887761*^9, 
   3.5999990785253983`*^9}, 3.5999991505011597`*^9, {3.60067619505227*^9, 
   3.600676195415215*^9}, 3.60138602053524*^9, {3.607429643154152*^9, 
   3.60742965332517*^9}, 3.607430075464189*^9, {3.607430119374009*^9, 
   3.607430338750307*^9}, {3.607430408471323*^9, 3.607430461779922*^9}, {
   3.607430546133355*^9, 3.607430579954646*^9}, {3.607431805744916*^9, 
   3.607432028681036*^9}, {3.637560644871584*^9, 3.637560645260613*^9}, {
   3.637561443933708*^9, 3.6375614927949877`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"err", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Full", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".5"}], ",", "1.5"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Background", "\[Rule]", "White"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Thickness", "[", ".01", "]"}], "}"}]}]}], "]"}], ",", 
   "\"\<Error function e, as a function of: \!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{
SubscriptBox[\"y\", \"i\"], 
RowBox[{\"h\", \"(\", 
SubscriptBox[\"x\", \"i\"], \")\"}]}], TraditionalForm]]]]]\)\>\""}], 
  "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.5999944603634357`*^9, 3.599994493588257*^9}, {
  3.599995527890851*^9, 3.599995607101728*^9}, {3.59999759190174*^9, 
  3.599997634142555*^9}, {3.599998769467708*^9, 3.599998882743507*^9}, {
  3.5999990056548223`*^9, 3.599999008217857*^9}, {3.599999195190351*^9, 
  3.5999991997650547`*^9}, {3.599999331756563*^9, 3.599999344516803*^9}, {
  3.600092833145628*^9, 3.6000928702255983`*^9}, {3.60009296960063*^9, 
  3.600092970173424*^9}, {3.6074305028656063`*^9, 3.607430508832467*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Hue[0.67, 0.6, 0.6], 
       Thickness[0.01], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBWIQnbx+wvv//7/vZwCDD/Z1qrcOpLUj+LNmK086y4fg
z7/fkR/I+Q3OF7sQ7K8p+hXOPxEQ7HJa9Quc76GpWqKs9BnOt1oXs+y8/ic4
/1dXmrCR5kc4/+v3JVPj1D/A+UeUJpnsy30H51uz1m/WTnkD509xMDd3rH0F
5yfPiXj6av4LOP/8cjlOxlnP4Hw5ng2G+7c9gfO5FJ6df7nqEZyfE9I6Y8WK
B3B+wuH7p+Um3YXzlWz/BR5tvAnnr8zY/HD3tqtwftbnjTHdsy7C+Xp1rJFs
yqfhfOHKK9zTZh+G86+n5Gitf7wNzi9l/t6r2LkOzi+v0uo7OXUenH8vX9k0
xqMfzr/WfuzXhQh/OB8AvXOlrw==
        "]], 
       LineBox[CompressedData["
1:eJxFz21I0wEQBvA5s0XkQMVwk0wNoyhGoC5touYLivlCWzMjy1FarrSBlk4l
YeG0xaZ/QQsXuilprYnWejHFSelYg8o022LQbJiNNU3LLRcbywri7uB4+H05
nos6I2CXkUkkUvrf/ZemFr1npqgghfR/VIy+2m1jbHCXsPvnnJEHtpj5w735
5eBoFpMveCkAx+aL2iOU1eDa4bwjy2ENYLo1dg/H2Ag+vUVGtmSLwKTE6k/p
AWJwhjylK6hRCu7UaCiZxa3g6i/BrKQdBFjnE6sE3nbwOUZFs2mkE3y/LSH1
zoFu8CadYpwS1wMu+bU58eJBBfjGA0cYTaEEJ9NGg6z9feABB9f/0qMBsFDW
ZpNMD4Fb+SIT79oIONCVyxo8OgW2XtbH1TS9Aq+M5k3WGmbxfksvr1RiBMes
q0OEt83gec1OLavcAubesl5fIqzgnn6pNvfmAv57svJbQN0ieJqnustusoGf
BNJPuSvs4N3yKDsl1wH21DT51Jxl8JInnHovYQWsPN/yPnzXdzBx+LWUFvMD
TBWo06ZC18ATGc+0T+lOsK+yhFlIdYH9KO+69vnQzOyqyRzSOvb5OGgPXUNn
VBiIvHW0zPs5QexBR9LDJS6yG5x1XLJ3LgTdMVt2gYhHM/QRy1vr0ELuoY60
q+gXi9ykehH6mL9M+lWCbkj17jfI0YaxD5XicXRwjjNU+xxdbKZOuHToVXcm
tfQNenv846G0eTRP97awfgGt4iz9fmhDJ1VFF0Stopv9kt1FTvQMcUJBuNH0
yCtZBi/67DCxurGB/gMrHxCb
        "]]}, {}}, {{}, {}, {}}}, Axes -> True, 
    AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> 
    GrayLevel[1], BaseStyle -> {"Palatino", Bold, 16}, GridLines -> Automatic,
     ImageSize -> 600, Method -> {}, PlotRange -> {{-1.5, 1.5}, {-0.5, 1.5}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], Automatic}],
   "\"Error function e, as a function of: \
\\!\\(\\*Cell[TextData[Cell[BoxData[\\nFormBox[\\n\\n  \
RowBox[{\\nSubscriptBox[\\\"y\\\", \\\"i\\\"], \\n\\n   RowBox[{\\\"h\\\", \\\
\"(\\\", \\nSubscriptBox[\\\"x\\\", \\\"i\\\"], \\\")\\\"}]}], \\n  \
TraditionalForm]]]]]\\)\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{3.6074305182405767`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.601386029889903*^9, 3.6013860331555233`*^9}, 
   3.60743052878615*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tMaximal-margin classifiers"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.59989587689098*^9, 3.599895892048147*^9}, {3.599895942273438*^9, 
  3.599895956106649*^9}, {3.599997812882894*^9, 3.5999978173844213`*^9}, {
  3.600001523801238*^9, 3.6000015293877583`*^9}, {3.600001797005638*^9, 
  3.600001802768417*^9}},
 CellTags->"sec:max_margin"],

Cell[CellGroupData[{

Cell["Margin-based Generalization Bounds", "Subsection",
 CellChangeTimes->{{3.6000018604500504`*^9, 3.600001896893854*^9}},
 CellTags->"margin_bound"],

Cell[TextData[{
 "In the previous section we have introduced linear classifiers, the 0/1 \
error function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"e", "(", 
    RowBox[{"h", ",", "i"}], ")"}], TraditionalForm]]],
 " and the risk functional ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 ". Starting from these definitions, a more optimization-friendly performance \
measure can be obtained by using the definition of ",
 StyleBox["functional margin",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Gamma]", "i"], TraditionalForm]]],
 ", of a classifier ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " over a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
   3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
   3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
   3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
   3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
   3.599997654536499*^9}, 3.599999465685328*^9, {3.599999741572907*^9, 
   3.5999997654585238`*^9}, {3.6000013609599867`*^9, 3.600001361172513*^9}, {
   3.600001563186242*^9, 3.600001626437427*^9}, {3.600676347164753*^9, 
   3.600676371773777*^9}, {3.601586899455288*^9, 3.601586910593154*^9}, 
   3.6028564935711327`*^9, {3.607429719504444*^9, 3.60742972158954*^9}, {
   3.607430604408039*^9, 3.607430656303341*^9}, {3.637563102385953*^9, 
   3.637563124193836*^9}, {3.637563496670677*^9, 3.637563497522789*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Gamma]", "i"], "=", 
  RowBox[{
   SubscriptBox["y", "i"], "h", 
   RowBox[{
    RowBox[{"(", 
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], ")"}], "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999959493023653`*^9, 3.599995953719469*^9}, {
  3.599996014195363*^9, 3.599996034756254*^9}, {3.599999769055859*^9, 
  3.599999772772359*^9}, {3.600001653935862*^9, 3.60000165485928*^9}, {
  3.600091396276722*^9, 3.600091400954399*^9}}],

Cell[TextData[{
 "Note that whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], ">", "0"}], TraditionalForm]]],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "0"}], TraditionalForm]]],
 " and the sample ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 " is correcty classified, while if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "<", "0"}], TraditionalForm]]],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "1"}], TraditionalForm]]],
 " and the sample is missclassified. \nWe can than define the ",
 StyleBox["minimal functional margin",
  FontSlant->"Italic"],
 " of a classifier using a scoring function ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " on a training set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", as"
}], "Text",
 CellChangeTimes->{{3.599996048918401*^9, 3.599996060837015*^9}, {
  3.59999618849629*^9, 3.59999619102376*^9}, {3.59999771033974*^9, 
  3.599997750823564*^9}, {3.5999977831216793`*^9, 3.5999978863941708`*^9}, {
  3.599997995922997*^9, 3.599997999004837*^9}, {3.599999476675037*^9, 
  3.5999995251109858`*^9}, {3.599999778635126*^9, 3.5999997804083443`*^9}, {
  3.6000016490258417`*^9, 3.600001673828826*^9}, {3.60158691936445*^9, 
  3.601586922364491*^9}, {3.602856522113866*^9, 3.602856523214366*^9}, {
  3.60742973303699*^9, 3.607429835232155*^9}, {3.607431069027816*^9, 
  3.607431085163354*^9}, {3.637563146992399*^9, 3.637563165012268*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["m", "S"], 
   RowBox[{"(", "h", ")"}]}], "=", 
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["\[Gamma]", "i"]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999978955436907`*^9, 3.599997988866353*^9}, 
   3.599999793796834*^9, {3.600001681671842*^9, 3.6000016844109898`*^9}}],

Cell[TextData[{
 "Using this quantity we can now state without proving the following result \
from the Generalization Theory of max-margin classifiers ",
 ButtonBox[Cell["[1]", "Citation"],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". "
}], "Text",
 CellChangeTimes->{{3.6000021520783777`*^9, 3.600002156522519*^9}, {
  3.60742984679766*^9, 3.6074298490243063`*^9}}],

Cell[TextData[{
 StyleBox["Theorem 1. ", "Subsection"],
 "Let ",
 Cell[BoxData[
  FormBox["\[ScriptCapitalH]", TraditionalForm]]],
 " be the set of linear scoring functions having a unit weight vector ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", on an input space ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ". For any probabilty distribution on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", "\[Times]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], TraditionalForm]]],
 ", with support on a ball of radius ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]]],
 " around the origin, with probability ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "-", "\[Delta]"}], TraditionalForm]]],
 " over ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " random samples ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", the error of any classifier using a scoring function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "\[Element]", "\[ScriptCapitalH]"}], TraditionalForm]]],
 " with a minimal margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", "h", ")"}], " ", "\[GreaterEqual]", " ", 
    "\[Gamma]"}], TraditionalForm]]],
 " is bounded by"
}], "Text",
 CellChangeTimes->{{3.600002045349361*^9, 3.600002064902932*^9}, 
   3.60000216302361*^9, 3.600002197076413*^9, {3.600007053813912*^9, 
   3.600007054102824*^9}, {3.6074315808767147`*^9, 3.607431582604834*^9}, {
   3.607432079682301*^9, 3.607432101606476*^9}, {3.63756335849697*^9, 
   3.637563374431131*^9}, {3.637563405298534*^9, 3.6375634281897793`*^9}, {
   3.6375635551548777`*^9, 3.637563593847636*^9}, {3.637563632802895*^9, 
   3.637563640810668*^9}},
 CellTags->"theorem1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["err", "\[CapitalDifferentialD]"], 
     RowBox[{"(", "h", ")"}]}], "\[LessEqual]", "\[Epsilon]"}], "=", 
   RowBox[{
    FractionBox["2", "n"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"64", 
         SuperscriptBox["R", "2"]}], 
        SuperscriptBox["\[Gamma]", "2"]], "log", " ", 
       FractionBox["\[ScriptE]n\[Gamma]", 
        RowBox[{"4", "R"}]], "log", " ", 
       FractionBox[
        RowBox[{"128", 
         SuperscriptBox["R", "2"]}], 
        SuperscriptBox["\[Gamma]", "2"]]}], "+", 
      RowBox[{"log", " ", 
       FractionBox["4", "\[Delta]"]}]}], ")"}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600000006374289*^9, 3.6000002062180643`*^9}, 
   3.6000002573346148`*^9, {3.600000475231299*^9, 3.60000048884702*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Gamma]", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 "and provided that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", ">", 
    FractionBox["2", "\[Epsilon]"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"64", 
      SuperscriptBox["R", "2"]}], 
     SuperscriptBox["", 
      SuperscriptBox["\[Gamma]", "2"]]], "<", "n"}], TraditionalForm]]],
 ".\nThis bound tells us that the generalization ability of a linear \
classifier trained on a set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " composed of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " random samples drawn from \[ScriptCapitalD], is directly related to the \
minimum margin acheived by the classifier on the training set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ". We also note that the generalization does not depend on the \
dimensionality of the input space ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ".\nIn other words, this theorem tells us that whenever ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " is normalized to one, a classifier with a large minimal functional margin \
\[Gamma] will also have a low true risk on \[ScriptCapitalD] and thus perform \
well also on unseen samples drawn from \[ScriptCapitalD].\n"
}], "Text",
 CellChangeTimes->{{3.600000213585745*^9, 3.600000221727106*^9}, {
   3.600000261689476*^9, 3.600000292450082*^9}, {3.600000520930485*^9, 
   3.6000006628593903`*^9}, {3.600000859861929*^9, 3.600001272563404*^9}, {
   3.6000013728450623`*^9, 3.600001439133802*^9}, {3.600001709608714*^9, 
   3.6000017098448877`*^9}, {3.600001781941401*^9, 3.600001783769779*^9}, {
   3.6006764429267817`*^9, 3.600676445095525*^9}, 3.601558704488698*^9, {
   3.602856581445754*^9, 3.6028565916141043`*^9}, {3.6074307306914167`*^9, 
   3.607430760664345*^9}, {3.607430803758081*^9, 3.607430888817957*^9}, {
   3.607430919063895*^9, 3.607431044586088*^9}, {3.607431105422138*^9, 
   3.607431144164812*^9}, {3.607431268806119*^9, 3.607431350873888*^9}, {
   3.6074317901328917`*^9, 3.607431791885376*^9}, 3.607432142163611*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: hard margin", "Subsection",
 CellChangeTimes->{{3.6000018233736467`*^9, 3.6000018292632837`*^9}, {
  3.600511116033592*^9, 3.600511153981496*^9}}],

Cell[TextData[{
 "Recall that the functional margin on a sample was defined as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["\[Gamma]", 
      RowBox[{"i", "="}]], 
     SubscriptBox["y", "i"], 
     RowBox[{"h", "(", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"], ")"}]}], "InlineFormula"], 
   TraditionalForm]]],
 ". For a linear classifiers this definition specializes to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "=", 
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
   TraditionalForm]]],
 ". This quantity obviously depends on the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", as it is affected by any rescaling of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ". In order to remove this dependency, instead of forcing ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " to be normalized to 1 (as in Theorem 1), we consider the ",
 StyleBox["geometric margin",
  FontSlant->"Italic"],
 ", which is the Euclidean distance of the point to the hyper-plane given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], "+", "b"}], "=", "0"}], TraditionalForm]]],
 " .\nFor any ",
 StyleBox["correctly classified",
  FontVariations->{"Underline"->True}],
 " sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 ", the geometric margin can be computed as"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQfS52Y2rppVeO65hXpIPou/fe5oPo68o/CkA0x4nu
6SC694P+PBDtEyezGER7LP66DEQ/6luzBkRvaXbdCaJ9T8n8B9Fiv54alwFp
vYfHw0F0w+mZCSA6Qdg1DURzumgXgegZuiwVIFrl/UcwLeFV3w6iX3F1gmll
rx0zweqcjWaB6JiKuvkgev8xkUUg+tdig5Mg+lT3gcsg2k5pyV0Qffj/2/sg
+onM5fjqq68c536RTgDRLRsOpoDonvMO6SC669kNqYUPXjkeuTdFA0TLLPGp
BdF/v9eD6TW9rFZSUq8dZXxd7EC0W2uoK4i2e5cDpgFdQLL6
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    FractionBox["1", 
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
    SubscriptBox["y", "i"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], "|", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], "|"}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.60000405249175*^9, 3.600004093162671*^9}, {
  3.60000413469939*^9, 3.600004162886248*^9}, {3.6000042185678997`*^9, 
  3.6000042203326073`*^9}, {3.600004436032797*^9, 3.600004463584036*^9}, {
  3.600004545307625*^9, 3.6000045933056927`*^9}, {3.600004705129046*^9, 
  3.600004716759162*^9}, {3.6000048170476103`*^9, 3.600004829213614*^9}, {
  3.60000499390374*^9, 3.6000049958444643`*^9}, {3.601587007749618*^9, 
  3.601587028944851*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " has the role of inverting the sign of the projection, in case the sample \
was negative. As we can see, this is basically a rescaled version of the \
functional margin defined above, making it independent from the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\nThe minimal geometric margin over a set of examples ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " can then be defined as"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005147477468*^9}, {3.600005887337599*^9, 3.600005971401277*^9}, {
   3.601587422816578*^9, 3.6015874927953777`*^9}, {3.607431704532465*^9, 
   3.60743176222755*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], 
    "."}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.6015874543083487`*^9, 3.6015874979330187`*^9}, {
   3.601587531451908*^9, 3.601587553132724*^9}, 3.601587593340803*^9}],

Cell["\<\
Using this definition and following the intuition provided by Theorem 1 (that \
we should select a classifier with a large minimal margin) we could thus \
define the following max-margin objective function, maximizing the \
generalization ability of the classifier\
\>", "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005147477468*^9}, {3.600005887337599*^9, 3.600005971401277*^9}, {
   3.601587422816578*^9, 3.60158744344695*^9}, {3.6015875835414953`*^9, 
   3.601587584494212*^9}, {3.601587647951623*^9, 3.601587653187126*^9}, {
   3.60158768521929*^9, 3.601587687820085*^9}, {3.601587737498707*^9, 
   3.601587737953657*^9}, {3.607431559672174*^9, 3.60743164211471*^9}, {
   3.637564204633869*^9, 3.6375642278032227`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], 
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600005137443612*^9, 3.600005170947382*^9}, {
   3.600007440536175*^9, 3.600007441317205*^9}, {3.602778391536978*^9, 
   3.602778399922*^9}, {3.602778480605424*^9, 3.602778482625045*^9}, 
   3.6074316295513077`*^9}],

Cell[TextData[{
 "for any linearly separable problem ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " (a problem for which there exist a linear scoring function ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], ">", "0"}], 
   TraditionalForm]]],
 ").\nThis is a non-linear non-convex objective function, which is very is \
difficult to optimize. A way to ease the optimization could be to impose ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], "=", "1"}],
    TraditionalForm]]],
 " (as also suggested also by Theorem 1), however this would result in a \
problem with quadratic constraints (Second Order Cone Programming), which is \
still not immediate to solve.\nAlternatively, since we are considering a \
linearly separable dataset ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", instead of normalizing ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " by imposing ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], "=", "1"}],
    TraditionalForm]]],
 ", we could equivalently rescale it until ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", "1"}], 
   TraditionalForm]]],
 ", resulting in the following optimization problem"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.600006296152946*^9, 3.600006338062229*^9}, {3.60000639992452*^9, 
   3.6000064036079407`*^9}, {3.600006887328807*^9, 3.600006926233221*^9}, {
   3.600676541491768*^9, 3.600676547884078*^9}, {3.601587689418614*^9, 
   3.601587713721084*^9}, {3.6074316248336983`*^9, 3.6074316635456877`*^9}, {
   3.607432234252885*^9, 3.607432276677658*^9}, {3.637564262008259*^9, 
   3.6375643193380127`*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["max", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], ",", "b"}]], 
  FractionBox["1", 
   RowBox[{"\[LeftDoubleBracketingBar]", 
    StyleBox["w",
     FontWeight->"Bold"], 
    "\[RightDoubleBracketingBar]"}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"s", ".", "t", ".", " ", 
    SubscriptBox["min", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        StyleBox[
         SubscriptBox["x", 
          StyleBox["i",
           FontWeight->"Plain"]],
         FontWeight->"Bold"], ",", 
        SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]]}], " ", 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
  "1."}]}], "DisplayFormula",
 CellChangeTimes->{{3.600005137443612*^9, 3.600005170947382*^9}, {
   3.6000062569968653`*^9, 3.600006282663604*^9}, 3.600006347788377*^9, {
   3.6000070849495296`*^9, 3.600007113916357*^9}, {3.600007430799041*^9, 
   3.6000074343497953`*^9}}],

Cell[TextData[{
 "By noting that the maximization of ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 " can be equivalently replaced by a minimization of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], 
   TraditionalForm]]],
 " and that the constraint ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["min", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], ",", 
         SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], " ", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", "1"}], 
   TraditionalForm]]],
 " can be replaced by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
     "1"}], ",", 
    RowBox[{"\[ForAll]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], 
         RowBox[{"i", ","}]], 
        SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]}]}], 
   TraditionalForm]]],
 ", we obtain the final objective function of the maximal margin classifier"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006949860783*^9, 3.6000069561934233`*^9}, {3.601587795583527*^9, 
   3.601587811156686*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["min", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], ",", "b"}]], " ", 
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "\[CenterDot]", 
   StyleBox["w",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"\[ForAll]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], 
       RowBox[{"i", ","}]], 
      SubscriptBox["y", "i"]}], ")"}], "\[Element]", 
    RowBox[{"S", "."}]}]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, 3.600523071368231*^9},
 CellTags->"eq:max_margin_hard"],

Cell[TextData[{
 "The classifier obtained by solving problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") is also called ",
 StyleBox["hard-margin classifier",
  FontSlant->"Italic"],
 ", as it requires linear separability of the data, imposing a functional \
margin of 1, for all the training points. Indeed, with this approach any \
feasible solution ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}], TraditionalForm]]],
 " will correctly classify all the training points with a functional margin \
of at least one. The minimal geometric margin of the optimal classifier can \
thus be computed as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["min", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["x", "i"], ",", 
          SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
      FractionBox["1", 
       RowBox[{"\[LeftDoubleBracketingBar]", 
        StyleBox["w",
         FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{"\[LeftDoubleBracketingBar]", 
         StyleBox["w",
          FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
       SubscriptBox["min", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["x", "i"], ",", 
           SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
       RowBox[{
        SubscriptBox["y", "i"], "(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], " ", "=", 
      FractionBox["1", 
       RowBox[{"\[LeftDoubleBracketingBar]", 
        StyleBox["w",
         FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], " "}]}]}], 
   TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.607432502051855*^9}, {
   3.6074326608421707`*^9, 3.607432663009742*^9}, 3.6074339643873463`*^9, {
   3.637564474128066*^9, 3.637564497960371*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.6074325729420013`*^9}}],

Cell[TextData[{
 "It can also be noticed that (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") has the form of a standard ",
 StyleBox["Quadratic Programming (QP)",
  FontSlant->"Italic"],
 " problem (a quadratic objective function, with linear constraints). It can \
thus be solved using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver, as showcased by the following code snippet:\n"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.6074325188927917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainMaxMargin", "[", 
    RowBox[{"fTr_", ",", "yTr_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "nTr", ",", "fTr2", ",", 
       "d", ",", "w", ",", "v", ",", "b", ",", "i", ",", "sol", ",", 
       "cnstr"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"cnstr", "=", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "<=", "0"}], "&"}], "/@", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"fTr", ".", "w"}], "+", "b"}], ")"}], "yTr"}]}], 
            ")"}]}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"w", ".", "w"}], ",", "cnstr"}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}]}], "]"}], ",", " ", 
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}]}],
         "]"}]}], ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{"1", "/", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600523181274065*^9, 3.6005232173178873`*^9}, {
  3.601373409791304*^9, 3.601373430582547*^9}, {3.63756456790762*^9, 
  3.6375645689313183`*^9}}],

Cell[TextData[{
 "\nAs it can be seen, the basic max-margin classifier can be implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using just a few lines of code. \nHere is an example, using the SVM \
package imported in the initialization cell of the notebook. First we make \
use of the function ",
 StyleBox["createData", "Code"],
 " in order to draw an arbitrary training set. After calling this function, \
it is possible to draw samples in the plot by clicking and dragging. A single \
click in any point of the plot will change the color/label of the samples \
that are going to be drawn subsequently.\n"
}], "Text",
 CellChangeTimes->{{3.600523190135332*^9, 3.600523306766039*^9}, {
  3.6005234114043703`*^9, 3.600523464140204*^9}, {3.6005235065280943`*^9, 
  3.600523538476019*^9}, {3.600676656209612*^9, 3.600676761650674*^9}, {
  3.601373446221478*^9, 3.6013735793660107`*^9}, {3.601386040044692*^9, 
  3.601386042277657*^9}, {3.601588084111608*^9, 3.601588084226252*^9}, {
  3.602856836313241*^9, 3.602856844435326*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.599821879624202*^9, 3.599821882910767*^9}, {
   3.5998374136334047`*^9, 3.599837414563703*^9}, {3.600524449261044*^9, 
   3.600524449764729*^9}, 3.6005251182019*^9, {3.601286452426608*^9, 
   3.601286459340432*^9}, {3.60129586541825*^9, 3.601295882607009*^9}, {
   3.601297623282825*^9, 3.601297623691505*^9}, {3.6015599058363*^9, 
   3.6015599096616507`*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$824 = MousePosition["Graphics"]; 
     Private`p$824 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$824], 2], 
          Union[
           Partition[Private`pt$824, 2]]}, 1]]; 
     If[Private`s$824 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$824}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$824}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$824 = {}; 
     Private`s$824 = Private`s$824 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600020789808509*^9, 3.600020856659668*^9, 3.600021064090733*^9, 
   3.600021134472349*^9, 3.600025702389955*^9, 3.600026032842807*^9, 
   3.600026264079362*^9, 3.600026352841942*^9, 3.6000264126599073`*^9, 
   3.6000266007209597`*^9, 3.600027976298297*^9, 3.600028028405682*^9, 
   3.600176728446885*^9, 3.600181734032493*^9, {3.6001820217877293`*^9, 
   3.6001820304202747`*^9}, 3.600183345188478*^9, 3.600193136661227*^9, 
   3.60019316869851*^9, {3.600193335742634*^9, 3.600193344481193*^9}, 
   3.600438694419705*^9, {3.600439402461076*^9, 3.6004394069642553`*^9}, 
   3.600439466620039*^9, {3.60044152359057*^9, 3.600441528715617*^9}, 
   3.600450816131914*^9, 3.600451015125469*^9, {3.6005233399931498`*^9, 
   3.6005233509012213`*^9}, {3.600523680628913*^9, 3.600523704957892*^9}, 
   3.600524451211219*^9, 3.6005249111054897`*^9, 3.600524941735911*^9, {
   3.6005251156066513`*^9, 3.6005251187154427`*^9}, 3.600525168965639*^9, 
   3.600525292059767*^9, {3.600525322085216*^9, 3.600525330520967*^9}, 
   3.600526153903242*^9, 3.600526235268276*^9, 3.600526277068296*^9, {
   3.600526507556377*^9, 3.6005265656547403`*^9}, 3.600527230231511*^9, 
   3.600527878259603*^9, 3.60052839679093*^9, 3.600528963692533*^9, 
   3.60054517201192*^9, 3.6005464231918573`*^9, 3.600547776709139*^9, 
   3.600602781421591*^9, 3.600603522757304*^9, 3.600603576649341*^9, 
   3.600603945564912*^9, 3.6006129983382263`*^9, 3.6006138118956957`*^9, 
   3.6006326440948353`*^9, {3.600671117185631*^9, 3.600671117554494*^9}, {
   3.600671642124771*^9, 3.600671642372834*^9}, {3.600671803610708*^9, 
   3.600671803934524*^9}, 3.600671901390617*^9, 3.600672265372055*^9, {
   3.600672525750431*^9, 3.600672526281946*^9}, 3.601206370211595*^9, 
   3.601209436802705*^9, 3.6012114669108763`*^9, {3.6012122645074587`*^9, 
   3.601212290623011*^9}, 3.601212668051188*^9, 3.601213356298387*^9, 
   3.601214040242144*^9, 3.6012146080914593`*^9, 3.601218004364975*^9, {
   3.601286272870986*^9, 3.601286273244032*^9}, 3.60128646017093*^9, {
   3.601295889847659*^9, 3.6012958903741693`*^9}, 3.60129593000884*^9, 
   3.601295972447404*^9, 3.601296089913126*^9, {3.601296909696188*^9, 
   3.601296910072357*^9}, {3.601297170354568*^9, 3.6012971707230797`*^9}, 
   3.601297661914198*^9, 3.601298894516284*^9, {3.6012989470897703`*^9, 
   3.601298947392427*^9}, 3.601301317888859*^9, {3.6013046934166737`*^9, 
   3.601304694792658*^9}, {3.601372884991866*^9, 3.601372909370584*^9}, {
   3.601375277091938*^9, 3.601375277422819*^9}, 3.601375321553116*^9, {
   3.601559771686858*^9, 3.6015597721311703`*^9}, 3.601559873485691*^9, 
   3.601559911233698*^9, 3.601559949586494*^9, 3.601560118698316*^9, 
   3.601562166296884*^9, {3.601563111904537*^9, 3.601563112365608*^9}, {
   3.601571644995494*^9, 3.601571645289775*^9}, {3.60157248923569*^9, 
   3.601572489691409*^9}, {3.6015726916095533`*^9, 3.60157270745105*^9}, {
   3.6016261561211157`*^9, 3.601626156488168*^9}, 3.601626313809525*^9, {
   3.602856855577692*^9, 3.602856855902801*^9}, {3.602859724447907*^9, 
   3.602859724787682*^9}, 3.607430517746237*^9, {3.6074324482242804`*^9, 
   3.6074324485746603`*^9}, {3.6375647250204363`*^9, 3.637564725294656*^9}, {
   3.6375655257112837`*^9, 3.637565526049217*^9}, {3.637565654608366*^9, 
   3.637565654942616*^9}, 3.637565699808429*^9, 3.637565819224247*^9, {
   3.637566042031205*^9, 3.637566042379583*^9}, {3.637573360944421*^9, 
   3.637573361280225*^9}, {3.637573767281982*^9, 3.6375737928044043`*^9}, 
   3.63757430800124*^9, {3.637574367287339*^9, 3.637574381441729*^9}, 
   3.6375818994135513`*^9, 3.637582140732675*^9, 3.637582201391613*^9, 
   3.637583464094264*^9, {3.6375855254372063`*^9, 3.637585530625801*^9}, {
   3.6375885584057913`*^9, 3.637588558971067*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nThe 2D coordinates and associated lables of the drawn points are then \
obtained by calling the function ",
 StyleBox["{fTr,yTr,fTe,yTe}=getTrTeData[trPerc]", "Code"],
 ", which also randomly split the data into a training and a testing set, \
with a specific percentage used for training.\nIn the following we will use a \
30/70% training/testing split.\nFinally, the classification algorithm can be \
run on the selected dataset by using the command ",
 StyleBox["runMaxMarginExperiment[fTr,yTr,fTe,yTe,trainMaxMargin]", "Code"],
 " . This command will produce a plot reporting, in the title, the training \
error, the testing error and the achieved minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "s"], "(", "h", ")"}], TraditionalForm]]],
 " (the Euclidean distance of the closest point to the separation surface). \
The training points are represented with a large marker, while the testing \
points are represented by a small marker.\n"
}], "Text",
 CellChangeTimes->{{3.6005234829998817`*^9, 3.600523504323905*^9}, {
  3.6005235434255257`*^9, 3.600523553821986*^9}, {3.600523605337965*^9, 
  3.600523633003153*^9}, {3.60052421959686*^9, 3.6005242417990026`*^9}, {
  3.600525621685663*^9, 3.600525630796471*^9}, {3.600671934415372*^9, 
  3.600671937229444*^9}, {3.600676780381122*^9, 3.600676808730955*^9}, {
  3.600676840736334*^9, 3.60067691149102*^9}, {3.601286538518358*^9, 
  3.6012865418126507`*^9}, {3.6012871286472797`*^9, 3.601287158922804*^9}, {
  3.601373587673876*^9, 3.60137400323562*^9}, {3.6013741141416483`*^9, 
  3.601374143172521*^9}, {3.601374336687283*^9, 3.6013743372265387`*^9}, {
  3.6013860440825567`*^9, 3.601386046101164*^9}, {3.601588105156858*^9, 
  3.601588126085878*^9}, {3.602856877459526*^9, 3.602856922171908*^9}, {
  3.607432471489798*^9, 3.60743248038743*^9}, {3.607432616632223*^9, 
  3.607432616925638*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"results", "=", 
  RowBox[{"runMaxMarginExperiment", "[", 
   RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainMaxMargin"}],
    "]"}]}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, 3.6006004425513983`*^9, {3.600603595693391*^9, 
   3.6006035959711657`*^9}, {3.600671920796858*^9, 3.600671925004285*^9}, {
   3.601286465650691*^9, 3.601286520255199*^9}, {3.601296113882533*^9, 
   3.6012961143798037`*^9}, {3.6012971986150007`*^9, 
   3.6012972506912613`*^9}, {3.60285717644379*^9, 3.60285717809779*^9}, {
   3.637574841944762*^9, 3.63757484577633*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxlk30sFGAcx293NIs1zSQvbflHpGTUpOJJsStsiaUZ0apbpz+8RWU4krte
d5lmenPW0qb+uC4OselhGWnkyOlQzonLrXTHnJfYStt9H9v543b77Hff5/v9
vZznufRYAZfD4SSsfv5/P/Eeqr8da6b8IFfhjfRBGt/baIzs1zJu5ZkXSl+o
CViZMxWU2DnLGHobnThYe6iFQA+GHgw9GPoJp7TiJck404OhB0MPhn6gXi31
rTMxPRh6MPTgDI/OTA/+NHUQpQdWHH7H+gFXN0zmUP8p0kEdYmrmDQRsrbee
D35/KTF5wX55hn7cYt778m8P3XByZLZZ+5s0On9tKJRPs/yoQ4869Hgfevjv
qhAbLyco1+UFo26jkqWW+w2yvMiHOhjzWqe37AvvIw/q1vvDe/BDXnOl00rg
/VZSpHokKzx4lm4q7pvb/lBP0e8RD9Pi++s6gnmUPu42x2X3U3VqiEEVqmd1
+EOP95EP/bL7szD89XkhQeGyb4wjjnH29xT0rOkt/cIPecHW84E/8qIfMOYB
PfwwH+Rj/x8LQ4+8uA/44x6QD/nB6B/+6Bf5kB9cKXJcSrrWxfof5Mpc3N6O
sf64WX22SZpPxNO3WpLSISd3EzhKRe4Y3WjkaefvmEhsmlocNdxIPjgvRffa
qUhTsJ1R8llFj7/yzm+t1bN9xJfLo28pFFQak7uDz9ewfpI76mptle3snpAv
eshL9CxilM1n5dTo0aHdJpI2F1niPqlm800O0OXZ3dOSgHFDmXRaRTWdodwD
/GFS9FrYVcBvpymeNSJvZTetCYujcrdJovffZ9hjWLsn7Kd6YmCEJ1BTji7L
9czmB+x+MuwX26Q5Err8qyzbq0pDombeuPIyW0hK1kXB7NVuojBfIO75X8jT
pp3hYp9mKrxS4pv9XUP9wrduOz3xk+3zhIPweRj9QZz/uAgCb7bR847BIz6r
vv8A/JQRWA==
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{56, 47, 7}, {47, 56, 46}, {54, 65, 53}, {74, 37, 80}, {
          53, 64, 15}, {37, 48, 11}, {85, 49, 70}, {47, 49, 7}, {11, 46, 
          12}, {22, 24, 19}, {48, 47, 11}, {60, 30, 4}, {46, 50, 8}, {51, 50, 
          7}, {12, 19, 11}, {64, 65, 33}, {26, 24, 22}, {42, 36, 30}, {24, 28,
           20}, {19, 20, 15}, {78, 42, 79}, {22, 19, 12}, {63, 33, 11}, {24, 
          26, 16}, {46, 8, 12}, {63, 19, 15}, {47, 46, 11}, {24, 20, 19}, {75,
           37, 89}, {62, 61, 50}, {65, 54, 33}, {33, 37, 11}, {30, 36, 4}, {
          50, 56, 7}, {82, 42, 78}, {68, 7, 66}, {69, 14, 67}, {61, 60, 8}, {
          61, 62, 30}, {65, 64, 53}, {50, 61, 8}, {60, 61, 30}, {76, 14, 
          69}, {28, 24, 16}, {89, 37, 74}, {64, 63, 15}, {62, 51, 30}, {54, 
          55, 33}, {88, 55, 77}, {54, 53, 14}, {72, 7, 68}, {51, 52, 30}, {52,
           42, 30}, {56, 50, 46}, {51, 62, 50}, {63, 64, 33}, {19, 63, 11}}], 
         PolygonBox[{{83, 47, 48, 84}, {79, 42, 52, 73}, {66, 7, 49, 85}, {80,
           37, 33, 71}, {84, 48, 37, 75}, {87, 54, 14, 76}, {71, 33, 55, 
          88}, {86, 51, 7, 72}, {81, 36, 42, 82}, {70, 49, 47, 83}, {77, 55, 
          54, 87}, {73, 52, 51, 86}}]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{9, 57, 10}, {6, 57, 5}, {23, 25, 1}, {3, 29, 2}, {38, 
          32, 10}, {29, 6, 2}, {18, 17, 5}, {58, 57, 6}, {57, 9, 5}, {83, 31, 
          70}, {34, 40, 29}, {38, 41, 32}, {32, 39, 13}, {41, 45, 39}, {85, 
          35, 66}, {75, 31, 84}, {41, 39, 32}, {35, 31, 6}, {34, 29, 3}, {40, 
          35, 29}, {43, 38, 10}, {84, 31, 83}, {88, 43, 71}, {23, 27, 21}, {
          29, 35, 6}, {10, 32, 9}, {86, 34, 73}, {18, 23, 17}, {58, 59, 10}, {
          59, 58, 31}, {72, 34, 86}, {57, 58, 10}, {76, 38, 87}, {71, 43, 
          80}, {31, 58, 6}, {82, 44, 81}, {17, 2, 6}, {87, 38, 77}, {17, 21, 
          2}, {27, 23, 1}, {25, 23, 18}, {73, 34, 79}, {5, 17, 6}, {23, 21, 
          17}, {32, 13, 9}}], 
         PolygonBox[{{67, 45, 41, 69}, {79, 34, 3, 78}, {77, 38, 43, 88}, {80,
           43, 10, 74}, {66, 35, 40, 68}, {68, 40, 34, 72}, {70, 31, 35, 
          85}, {69, 41, 38, 76}, {78, 3, 44, 82}, {89, 59, 31, 75}, {74, 10, 
          59, 89}}]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
         LineBox[{67, 69, 76, 87, 77, 88, 71, 80, 74, 89, 75, 84, 83, 70, 85, 
          66, 68, 72, 86, 73, 79, 78, 82, 81}]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], CompressedData["
1:eJxFUn9Q03UYnsDFAvlVokxApYNuae7otEaGPkA0tIAbXroOldIzIFDgCAgJ
EA4Q5aDWuUqvoBnL8aPW3F2KA/1CsbE54kfAYMCA79gPNuaxkSmKnA3M9dw9
f7x3n8/zvu/zvCEnsg9+7EqhUPY6uM5BFwfPr2GEKEieG1kS2pAV/OhP9ZVh
ojdh30q7xgq558mDHVGDREqWVO7GXUDhHPNIdamSCKXuXKaWWBAqrN2Re0dO
dBuuZsZTzBC/TWj23LtBXMvTLl9mzYPalV7kWyshIt3pAf20eZT1bPUufNyM
J4FDfG30MDrrIysmlK0450bLDrFZEc49YHe5LEbaZ1ZBXI4ZXEpVxvPsDrzb
HUYojUZQfrn9/oCFgLoqb6mTVMO39qp7V3on7lcyF1ujZtD2avEPqt+78NIx
1a5skQZt3iup8wMyfG/T+bgKSUTFrkIOvkA0Jr04C5ueNpnY0IOm9ayM7adN
KNx8/KbQT4Gw5p64yYoZUNlN31CqFHjmB739jSRJphK7+3iNIemjmGsKzPxC
2o9oy4OV/QwtFILC8viaAXyaXJlmZOnBRZBt6Y8B/Fi64dbGmv/rZ35RPv/6
/q+cv3DcLH2wq86INblrQ7jFyb8dEWxEhKPbi2EOnz6aJg6/NYoZe7XrlrMj
2EfWPd7ua0XAWsNRlBWYury8LDh16cvucw9HUWE3LUZ6kGA3dN3V0zRoL/EZ
n3zZgMkhqmpvnQZLKfVqdyYJQdbPb1rkGoyFq4lksQmTsUpRAm8C394p27Rn
QoP4spjf3OhaXPCqyIH3FCRGx4TepFPvuRsX03LaSWyyKvnkdT0yKg0NrDHS
qd+XxFQH/UNC6nmmRRU3jfCtF7z+9tM58+FZx2OVDB36grWpSdQhiDmfPCny
n0Vvcczm0nVaZ2061BjI502hQ8btO1Krd74XKV6ZrQky4OjrC4xivh6pqzAa
wPD7UPPeMT22uDWao8VG7JCdkE1V/5ePx5zz/nLfSaRxTpoh8S/cfzqBxPAL
fPbOcjOWQ/Nl6vpeRKwa3mBG0XdHq/UtcthKGJ7TaRa0lbON0aJWsBzf9Rvm
nfutNzsmTJyHhy731GCGAh7JJc38Q3fBK3bZzbFdd9b2lJGHuryxp3mdWYDv
xp8UlrgW0PtnChbjbfggfzzwvLod97YFJPjE2EGXvHbg0ZVBbHPY99UlO0QL
/mxBuebp/dMXcfimUniWqcK/vNz6dQ==
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], CompressedData["
1:eJw9k30w3GcQxy+0SVCKEZUMDa1yvUyROFRI96RCR4lQDUXCFa2KcFLMTSOq
znuk0bppTBNCEG+J0ipJE9b7S7g77hzn/bzGcTcu8RIVpT9m3M7sH5/ZeWaf
/e5+jb6O9AxRJpFITkTuI1KJyM6jGszNgmU87f/zR77q0yAL+IO/ZfUCu3W+
D7FcmIQASuhqcbMco7PdtyOslxSc+auLvpVgCVgjXZaPLshxnvTmtG3QEvBX
DPXc3OVYSy5r9bCUwW9Xj9Afmy7hWr1SBtViEWTDjl2VHBm241vnStckkK6+
/IuoSoZ2XP8EJ4oYqKcOOgmUZThsS2tickVw/0BT6A9ZUnTS9F3T2pgBcbjB
Bue8FMOPPbq87b8IZ7oq3djhC3g73lX8omNEwe+Zdeg+TJGAfL1l302U4Pqt
0IgsEylsr1JkAeYS7I9TfXWvZVbBOTFT44KyBdDfefD2PPr6pbsYlk/DgH5M
EKdvDpvUHFLlKvOQ6JrxTqfxHH7TkzH2sEAE3jPsqDPcWUzZ8FjxJfMhaUcP
gxm8f0KczI2dg3kbv9R4yykss3NJlbIHITlM5Vyp7hSmq7MYoDEOwZ5PaSZt
42ix2Fpf8sUsrOh+ejLy+BhW2WkHa3mLQVtrJ0axbt3Z7DldABa/v/tGoUSE
r41j2gZye+Be8KCJS6wIyZF3rSsWumGUaJ9rL0LnzW5SchgPNojxQX8QNS/m
LHMEk6DbwAuZfC3EtSSblxU0MUQQcg4U9GOrTkWaBnkINicTOo5qCLDI9bi3
dWEDHBk9m9ck68Pi1PgGaqkQvBwqzA/V9GFC8eI4jzoM5fnCW6q+vfiXY1yI
eUyfgr+qMmWljPDhwS7zkHnKyy3QbwBIu8HFCZlahsWTYdiR7+xhDjKET5/I
f+KDz+6B9aBtYmD4kNeQgsNeSoWxl8XwoMGrd+HzbtTJ52RGT46B/7UyokMn
9ptXf3fDsQ2MSzKPXXnWjo1R2bVBlDw4aL/FaJxuw6K56Sh6wQQw99dlf8to
Q6bSgTn6eYScm60p/37WjB+UdTiPssSQdedEZeeHiBeN6LZLmjwF79V92g/Z
hvjXK/ZhuCPfRBFmXLpe3nKBC+L3q+mfaBciaX/Nf9u0G7jHe/VGN7Z02LEA
E8xWr38ccQkbJQ7EStlYo2K+ZcH4BxKMcuv0+Om4KU62nbCvB9Luwccid9jF
S8mDA4259oTlKoBhk2n6/O4dpOHQyZXbjyFnpidPWVKOvcRvwg0aICkTg6yi
axTMjlOiestrgfyK2nzFvQnIej+a8QqrgOa4E+2QZry6nnY1HwIJ+69SOsDZ
5nAoK3IAmYR9S7Q6oYdFcTVR/ROq5NfM1Ca6gLbypaVQwkTieNWCPZ9BY6mP
prNGIurtGkII9n+HklNLqvF/snlaBg==
       "]]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334],
       AbsoluteThickness[2], PointBox[CompressedData["
1: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
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
VLc=
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.27% Marg=0.00695\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.3326508620689654`, 
   1.1736709770114944`}, {-0.3505562321268951, 1.0437427119717215`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.600525281598768*^9, 3.6005253136889677`*^9}, {
   3.6005253478571663`*^9, 3.600525371143449*^9}, 3.600525473291607*^9, {
   3.600525698422022*^9, 3.6005258048029137`*^9}, 3.6005259032103653`*^9, {
   3.6005261610614653`*^9, 3.600526281106331*^9}, 3.600526573182786*^9, 
   3.600526777281084*^9, {3.6005272235439568`*^9, 3.600527240872759*^9}, 
   3.600528404990016*^9, 3.600528509066758*^9, 3.6005289681701803`*^9, 
   3.600529089956275*^9, 3.600545179203183*^9, 3.600599486802042*^9, {
   3.600600439179556*^9, 3.600600443029963*^9}, {3.600603585410226*^9, 
   3.600603596615411*^9}, 3.600671168649715*^9, {3.600671657502849*^9, 
   3.6006716662418337`*^9}, 3.600671813286641*^9, {3.6006718972369537`*^9, 
   3.600671925372246*^9}, 3.600672554362094*^9, 3.6012141439917803`*^9, 
   3.601214215409931*^9, {3.601286475085067*^9, 3.601286520742255*^9}, {
   3.601295996336068*^9, 3.601296015130075*^9}, 3.601296095374415*^9, {
   3.601297208860219*^9, 3.601297219178059*^9}, 3.601298964909574*^9, 
   3.601301325744738*^9, 3.601304700631179*^9, 3.601372920719833*^9, 
   3.601375313063343*^9, 3.601375344736702*^9, 3.601559816717133*^9, {
   3.601559851094203*^9, 3.60155986282467*^9}, 3.601559893370398*^9, 
   3.60155996690933*^9, 3.601560101652937*^9, 3.601560139156393*^9, 
   3.601560664405232*^9, 3.601563125004244*^9, 3.60157166248385*^9, 
   3.6015725047098017`*^9, 3.601572725661755*^9, 3.601626190133806*^9, 
   3.6016262228601522`*^9, {3.6016262668611517`*^9, 3.601626330040524*^9}, 
   3.6028569435795317`*^9, 3.602857179012652*^9, 3.6028573805641193`*^9, {
   3.60285974033444*^9, 3.602859782181679*^9}, 3.60286008254284*^9, 
   3.607432691675115*^9, 3.6375648212489023`*^9, 3.6375649416831427`*^9, 
   3.637565535374145*^9, 3.637565667239622*^9, 3.63756572103988*^9, 
   3.637565860554153*^9, 3.6375660638111267`*^9, 3.637573403188794*^9, {
   3.637573822994574*^9, 3.637573972374054*^9}, {3.6375743232779303`*^9, 
   3.637574364556185*^9}, 3.637574402084166*^9, {3.637574848704534*^9, 
   3.637574858207715*^9}, 3.6375753120064096`*^9, 3.6375820359715137`*^9, 
   3.637582314386149*^9, 3.637583530043165*^9, 3.6375855989602222`*^9, 
   3.637588908588122*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it can be seen, if the training data is linearly separable (if there \
exists an hyperplane separating the two classes), the max-margin classifier \
will always return the hyperplane maximizing the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "s"], "(", "h", ")"}], TraditionalForm]]],
 " between the two classes.\nUnfortunately, if the training data is not \
linearly separable this learning algorithm will fail to find a feasible \
solution (try drawing a non-linearly separable dataset for a direct proof). \
Moreover, while margin-maximization is a desirable property for \
generalization, when the training and the testing datasets do not exactly \
follow the same distribution (which is often the case due to noise, or too \
small training sets), exact margin maximization can result in poor testing \
performances. A way to address these problems is represented by the so-called \
\[OpenCurlyDoubleQuote]soft-margin\[CloseCurlyDoubleQuote] classifiers, \
introduced in the following Subsection.\n"
}], "Text",
 CellChangeTimes->{{3.601374016160015*^9, 3.601374108453491*^9}, {
   3.6013741701092167`*^9, 3.601374185867347*^9}, {3.601374300517311*^9, 
   3.6013743112997437`*^9}, {3.601374349818544*^9, 3.60137435164546*^9}, {
   3.6013754753413553`*^9, 3.6013758242855387`*^9}, 3.601386048099481*^9, 
   3.601558698679441*^9, {3.601588174036932*^9, 3.601588259533139*^9}, {
   3.607432723483946*^9, 3.6074328364540586`*^9}, {3.6375742776000977`*^9, 
   3.637574280398279*^9}, {3.637574436133092*^9, 3.637574476278235*^9}, {
   3.6375745098118353`*^9, 3.6375745166992073`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: soft margin", "Subsection",
 CellChangeTimes->{{3.6000689928004103`*^9, 3.6000690070043983`*^9}, {
  3.600511161175296*^9, 3.600511163195389*^9}}],

Cell[TextData[{
 "The formulation introduced above is designed for linearly separable \
problems. However, it often happens that a dataset does not satisfy this \
condition, or it is difficult to know in advance whether it holds or not. In \
case the problem does not turn out to be linearly separable, the max-margin \
learning algorithm will fail to find a solution satisfying the constraints, \
leaving us without a solution.\nIn order to addess this problem, soft-margin \
classifiers have been designed ",
 ButtonBox[Cell["[1]", "Citation"],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 " to allow the algorithm to violate the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", by an amount ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " (called ",
 StyleBox["slack variable",
  FontSlant->"Italic"],
 ") as little as possible.\nIn this case, the optimization problem can be \
written as:"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.6000690359654818`*^9, 3.600069616392734*^9}, {
   3.6000698086840277`*^9, 3.600069819840662*^9}, 3.6000698520984077`*^9, {
   3.600069946376136*^9, 3.6000699712854137`*^9}, {3.6000701256232224`*^9, 
   3.60007014793779*^9}, {3.600071495706664*^9, 3.60007150754605*^9}, 
   3.6006769472261*^9, {3.60158827235858*^9, 3.601588326002502*^9}, {
   3.607432874239674*^9, 3.60743288050905*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b", ",", 
     StyleBox["\[Xi]",
      FontWeight->"Bold"]}]], " ", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{"C", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Xi]", "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    SubscriptBox["\[Xi]", "i"], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n", ",", 
  "\[IndentingNewLine]", "          ", 
  RowBox[{
   SubscriptBox["\[Xi]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                      ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, {3.600069619878358*^9, 3.6000696976499662`*^9}, {
   3.6000698340070744`*^9, 3.600069843688924*^9}, {3.6000703147873783`*^9, 
   3.600070318851357*^9}, 3.600070748774111*^9, {3.6004338335707273`*^9, 
   3.600433892615193*^9}, {3.6005188532159567`*^9, 3.6005188733822203`*^9}},
 CellTags->"eq:1norm_svm"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " tunes the importance of the slack variable minimization, w.r.t. the margin \
maximization. A big value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will push the optimization algorithm to find a hyperplane on which all the \
points are correctly classified with margin 1, while lower value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will allow the learning algorithm to commit margin - or decision - \
mistakes on some samples, without heavily affecting the decision boundary.\n\n\
In this case the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "S"], "(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}], TraditionalForm]]],
 " of the optimal classifier cannot be computed simply as ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 ", since there is no guarantee anymore that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    " ", "1"}], TraditionalForm]]],
 ". Nonetheless for all the points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "<", "1"}], 
   TraditionalForm]]],
 " we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", while for the others we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 ". Therefore, the minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["max", "i"], 
        SubscriptBox["\[Xi]", "i"]}]}], ")"}]}]}], TraditionalForm]]],
 ". For linearly separable datasets and with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[Rule]", "\[Infinity]"}], TraditionalForm]]],
 ", we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["max", "i"], 
     SubscriptBox["\[Xi]", "i"]}], "=", "0"}], TraditionalForm]]],
 " and the margin obtained with this approach will correspond to the one \
obtained by the max-margin classifier. On the other hand, on non linearly \
separable datasets, we might have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], ">", "1"}], TraditionalForm]]],
 ", resulting in negative geometric margins. In this case the geometric \
margin behaves as a signed Euclidean distance, with a negative sign meaning \
that the problem is not separable.\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529771801248*^9, 3.6005297753873158`*^9}, {3.600544039843444*^9, 
   3.600544087555781*^9}, {3.6006769921215057`*^9, 3.600677024230349*^9}, 
   3.6015586958593483`*^9, {3.60162113767901*^9, 3.601621155282135*^9}, {
   3.601621185743477*^9, 3.601621278323886*^9}, {3.601621321146552*^9, 
   3.6016213355989933`*^9}, {3.601621427863902*^9, 3.6016216153973618`*^9}, {
   3.601621664497609*^9, 3.601621699926613*^9}, {3.601621776837029*^9, 
   3.601622163930435*^9}, {3.60162220858821*^9, 3.601622236455072*^9}, {
   3.601622299066782*^9, 3.601622393699473*^9}, 3.601626091685643*^9, {
   3.602857085844995*^9, 3.602857088063904*^9}, {3.607432973261351*^9, 
   3.607433063362577*^9}, 3.60743395766329*^9, 3.637574559415341*^9, 
   3.63757460024273*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433046905921*^9, 3.607433060149661*^9}}],

Cell[TextData[{
 "Even if at a first glance the optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 ") does not look very friendly, it can be shown to still be a QP program. It \
can thus be again directly solved using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver, as shown by the following code snippet:\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529771801248*^9, 3.6005297753873158`*^9}, {3.600544039843444*^9, 
   3.600544087555781*^9}, {3.6006769921215057`*^9, 3.600677024230349*^9}, 
   3.6015586958593483`*^9, {3.60162113767901*^9, 3.601621155282135*^9}, {
   3.601621185743477*^9, 3.601621278323886*^9}, {3.601621321146552*^9, 
   3.6016213355989933`*^9}, {3.601621427863902*^9, 3.6016216153973618`*^9}, {
   3.601621664497609*^9, 3.601621699926613*^9}, {3.601621776837029*^9, 
   3.601622163930435*^9}, {3.60162220858821*^9, 3.601622236455072*^9}, {
   3.601622299066782*^9, 3.601622393699473*^9}, 3.601626091685643*^9, {
   3.602857085844995*^9, 3.602857088063904*^9}, {3.607432973261351*^9, 
   3.60743303565504*^9}, {3.6375747573619413`*^9, 3.637574760010569*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainSoftMargin", "[", 
    RowBox[{"fTr_List", ",", "yTr_List", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "nTr", ",", "fTr2", ",", 
       "d", ",", "w", ",", "v", ",", "b", ",", "xi", ",", "x", ",", "i", ",", 
       "sol", ",", "obj", ",", "cnstr"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"xi", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"x", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"cnstr", "=", 
       RowBox[{
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "<=", "0"}], "&"}], "/@", 
           RowBox[{"Flatten", "@", 
            RowBox[{"(", 
             RowBox[{"1", "-", "xi", "-", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"fTr", ".", "w"}], "+", "b"}], ")"}], "yTr"}]}], 
             ")"}]}]}], ")"}]}], " ", "&&", "\n", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", ">=", "0"}], "&"}], "/@", 
           RowBox[{"Flatten", "@", "xi"}]}], ")"}]}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{"w", ".", "w"}], "+", 
        RowBox[{"regC", " ", 
         RowBox[{"Total", "[", "xi", "]"}]}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "cnstr"}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}], ",", "xi"}], "]"}], ",", " ", 
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}]}],
         "]"}]}], ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b", ",", "xi"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"sol", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"Max", "[", 
           RowBox[{"model", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ")"}], "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"model", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600529613144619*^9, 3.60052963238398*^9}, {
  3.600603885117957*^9, 3.600603886505888*^9}, {3.601374403830535*^9, 
  3.601374430109478*^9}, {3.601573493622208*^9, 3.601573493847793*^9}, {
  3.6015883741683693`*^9, 3.601588380449217*^9}}],

Cell[TextData[{
 "\nAs before, we report here an example of usage, where ",
 StyleBox["createData[]", "Code"],
 " is called in order to draw a dataset and  ",
 StyleBox["{fTr,yTr,fTe,yTe}=getTrTeData[trPerc]", "Code"],
 " is used to obtain the coordinates of the training and the testing points, \
using a 30%/70% training/testing split.\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529678813099*^9, 3.600529764249748*^9}, {3.600544095482354*^9, 
   3.600544177035437*^9}, {3.6006719488475933`*^9, 3.6006719512135572`*^9}, {
   3.6013744660606613`*^9, 3.6013745296506243`*^9}, {3.601374565839364*^9, 
   3.601374849821602*^9}, {3.6013748857814693`*^9, 3.601374950895156*^9}, {
   3.601386057433106*^9, 3.601386058982265*^9}, 3.6015586941993*^9, 
   3.637576734611086*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601207826661016*^9, 3.6012078322261257`*^9}, {
  3.6012096925331287`*^9, 3.6012096929102297`*^9}, {3.6012976309206133`*^9, 
  3.601297631575138*^9}, {3.601297918675498*^9, 3.6012979195420094`*^9}, {
  3.6012979550010023`*^9, 3.601297955892606*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$8422 = MousePosition["Graphics"]; 
     Private`p$8422 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$8422], 2], 
          Union[
           Partition[Private`pt$8422, 2]]}, 1]]; 
     If[Private`s$8422 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$8422}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$8422}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$8422 = {}; 
     Private`s$8422 = Private`s$8422 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600529782509405*^9, {3.600529990283494*^9, 3.600530002186282*^9}, 
   3.600530090211268*^9, 3.600530210238405*^9, {3.600530256815338*^9, 
   3.600530286011044*^9}, 3.600530410375724*^9, 3.6005304763736343`*^9, 
   3.6005441825365047`*^9, 3.600545003679199*^9, 3.600545595081881*^9, 
   3.6005462589772253`*^9, 3.600602781576613*^9, 3.6006030832068377`*^9, 
   3.6006033180255737`*^9, 3.600603522890913*^9, {3.6006039456108847`*^9, 
   3.600603945809247*^9}, 3.600612998413377*^9, 3.600613811986126*^9, 
   3.6006326441470413`*^9, 3.600671117240415*^9, 3.600671642169813*^9, 
   3.6006718036689577`*^9, {3.600672265428256*^9, 3.600672275933691*^9}, 
   3.600672525805505*^9, {3.600672575455937*^9, 3.600672628747901*^9}, 
   3.600672677987822*^9, 3.600672730325946*^9, 3.60067293990129*^9, 
   3.600673032365019*^9, 3.600673142949374*^9, {3.60120637031126*^9, 
   3.6012063706503887`*^9}, 3.601207775277233*^9, 3.601207832529253*^9, 
   3.601207865996746*^9, 3.601208442423897*^9, 3.601208487025152*^9, {
   3.601208525644061*^9, 3.6012085352612534`*^9}, {3.601208774940124*^9, 
   3.60120878254042*^9}, 3.6012091167445087`*^9, {3.601209436890952*^9, 
   3.601209437447448*^9}, 3.601209693426746*^9, 3.601211466975379*^9, {
   3.601212264522111*^9, 3.601212290660997*^9}, 3.60121266810853*^9, 
   3.6012133563570623`*^9, 3.6012140403085938`*^9, 3.601214608162497*^9, 
   3.601218004410623*^9, 3.601286272904632*^9, 3.601295889896371*^9, 
   3.601296909732279*^9, 3.601297170396491*^9, {3.601297662001245*^9, 
   3.6012976623672943`*^9}, 3.601297956422258*^9, 3.601298894647387*^9, 
   3.601298947126103*^9, 3.601304693462337*^9, 3.601372885040307*^9, 
   3.6013752771477337`*^9, 3.6015597717449512`*^9, 3.601562166361266*^9, 
   3.601563111969944*^9, 3.601571645033457*^9, 3.601572489292029*^9, 
   3.601626156175782*^9, 3.6028568556284237`*^9, 3.602857141081953*^9, 
   3.602857220153934*^9, 3.60285972449185*^9, 3.60285988514993*^9, 
   3.602859990583866*^9, 3.6028600338423443`*^9, 3.607430517793701*^9, 
   3.607432448278328*^9, 3.637564725066325*^9, 3.637565525764845*^9, 
   3.637565654656723*^9, 3.637566042079208*^9, 3.6375733609909153`*^9, 
   3.637575000818576*^9, {3.637575033777073*^9, 3.637575055248712*^9}, 
   3.637575142158746*^9, {3.637581899470537*^9, 3.637581927595129*^9}, 
   3.6375819602768717`*^9, 3.637581994823217*^9, 3.6375821407731237`*^9, {
   3.637582201438532*^9, 3.63758220173599*^9}, {3.637583464142974*^9, 
   3.637583464430566*^9}, 3.637585525555756*^9, 3.637588558476117*^9, 
   3.6375886491685677`*^9, {3.6375887838990593`*^9, 3.637588821476104*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nThis time, in order to use the soft-margin classifier with a \
regularization parameter ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", we will use the command  ",
 StyleBox["runMaxMarginExperiment[fTr,yTr,fTe,yTe,trainSoftMargin[#1, #2, \
C]&].", "Code"],
 " In this case the classifier funtion is created as an anonymous function \
with two parameters (corresponding to fTr and yTr - see the documentation -) \
while the third parameter, the regularization coefficient",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " is fixed. Finally, in order to show the behavoir of the algorithm when \
varying the regularization parameter, we will also make use of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function ",
 StyleBox["Manipulate", "Code"],
 " to dynamically adjust the plot while varying the parameter ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.601374954867086*^9, 3.6013751014899483`*^9}, {
   3.601375184833784*^9, 3.601375193858099*^9}, {3.601386061880291*^9, 
   3.601386063628708*^9}, 3.637576779599946*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainSoftMargin", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, {
   3.600600462988875*^9, 3.600600490747484*^9}, {3.6006006023090973`*^9, 
   3.600600617351081*^9}, 3.600603164788883*^9, 3.600603990447899*^9, {
   3.600604112686928*^9, 3.6006041143637753`*^9}, {3.600671965092746*^9, 
   3.600671965294054*^9}, {3.600672656770911*^9, 3.600672658595111*^9}, {
   3.601286614709449*^9, 3.601286623982645*^9}, {3.601286700237975*^9, 
   3.601286764071398*^9}, {3.601286988876445*^9, 3.601287001193364*^9}, {
   3.601297278695887*^9, 3.601297290837179*^9}, {3.6012974792041807`*^9, 
   3.601297500526369*^9}, {3.601297538358511*^9, 3.601297585092586*^9}, {
   3.601297713310603*^9, 3.6012977413100033`*^9}, {3.601297914356962*^9, 
   3.601297914769359*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 1., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    288., {143., 143.9957298901707}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$10285$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$10285$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainSoftMargin[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {175., 178.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.601372966250511*^9, 3.601559984712159*^9, 3.6015601463192863`*^9, 
   3.601560648196865*^9, 3.601560819491561*^9, 3.60156314165327*^9, 
   3.6015716781021643`*^9, 3.6015725231652803`*^9, 3.60157259248239*^9, 
   3.601572737232231*^9, 3.601626243854045*^9, 3.6016263428498783`*^9, 
   3.6028571191699953`*^9, 3.602857154839723*^9, {3.602857243070468*^9, 
   3.602857338210691*^9}, 3.602859809329527*^9, 3.602859871915287*^9, {
   3.602859904005724*^9, 3.6028600446975718`*^9}, 3.607433127612075*^9, 
   3.637564853024686*^9, 3.637565731869989*^9, 3.63756588020093*^9, 
   3.637566075614814*^9, 3.637574905470798*^9, {3.637574944557906*^9, 
   3.637574972840777*^9}, 3.637575017511821*^9, {3.637575080167186*^9, 
   3.637575128583579*^9}, 3.6375751609028873`*^9, {3.637581917568626*^9, 
   3.63758194152759*^9}, 3.637581977725383*^9, 3.637582010113209*^9, {
   3.637582230820006*^9, 3.637582274309915*^9}, 3.637582304993907*^9, 
   3.6375834981706343`*^9, 3.637585576056095*^9, {3.6375857930855513`*^9, 
   3.6375858087978992`*^9}, {3.637588683766335*^9, 3.637588752579894*^9}, 
   3.637588838137336*^9, 3.637588888596665*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it is possible to see, in agreement with the theory when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[RightArrow]", "\[Infinity]"}], TraditionalForm]]],
 ", the solution returned by soft-margin classifier reduces to the one of the \
max-margin classifier. On the other hand, reducing ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " might results in the max-margin principle being violated, resulting in a \
different separation hyperplane. When the noise in the data is high, this \
might result in better performance on unseen samples."
}], "Text",
 CellChangeTimes->{{3.601375224930306*^9, 3.6013752325484877`*^9}, {
   3.60137540215469*^9, 3.6013754610603323`*^9}, {3.601375835744356*^9, 
   3.601376069596875*^9}, 3.6013860666940823`*^9, 3.601558688900959*^9, {
   3.607433175066598*^9, 3.607433249435253*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: hinge-loss", "Subsection",
 CellChangeTimes->{{3.600090403054838*^9, 3.60009041228967*^9}, {
  3.6005111769690857`*^9, 3.600511189362093*^9}},
 CellTags->"subsec:hinge_loss"],

Cell[TextData[{
 "An interesting property of the formulation introduced in the previous \
sub-section is that, by using the fact that the objective function is \
minimizing w.r.t. ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Xi]",
    FontWeight->"Bold"], TraditionalForm]]],
 " and performing a simple case analysis, it is possible to see that for any ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090420965437*^9}, {
   3.6000907095950127`*^9, 3.6000907169789877`*^9}, 3.600155060116129*^9, {
   3.600544262412472*^9, 3.600544264853862*^9}, 3.60067706256285*^9, {
   3.601389838113303*^9, 3.6013899348842487`*^9}, {3.601389968160818*^9, 
   3.6013899697787113`*^9}, {3.601390108620432*^9, 3.60139013955446*^9}, {
   3.637576893202181*^9, 3.637576945874955*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 " whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "\[LessEqual]", 
    "0"}], TraditionalForm]]],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 " (no additional slack is necessary to satisfy the constraints);"
}], "Item",
 CellChangeTimes->{{3.60007140215028*^9, 3.6000714048159437`*^9}, {
   3.600071471087552*^9, 3.600071486127376*^9}, {3.600071539107299*^9, 
   3.6000715483156967`*^9}, 3.60007159412475*^9, {3.600433271266449*^9, 
   3.6004332719557037`*^9}, {3.6004333262443323`*^9, 3.6004333277650023`*^9}}],

Cell[TextData[{
 "whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ">", "0"}], 
   TraditionalForm]]],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
   TraditionalForm]]],
 " (the minimal ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " satisfying the constraints)."
}], "Item",
 CellChangeTimes->{{3.60007140215028*^9, 3.600071453305488*^9}, {
   3.6000715661678467`*^9, 3.600071607546055*^9}, 3.600072002455305*^9, {
   3.600433273163218*^9, 3.600433276731516*^9}, {3.6004333300526257`*^9, 
   3.600433336539894*^9}, {3.60138813785434*^9, 3.601388143645668*^9}, {
   3.601388199359839*^9, 3.60138821253098*^9}}]
}, Open  ]],

Cell[TextData[{
 "We can thus write a closed form solution for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " as a function of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.6000716232316027`*^9, 3.6000717172050867`*^9}, {
  3.600071797373171*^9, 3.600071804208117*^9}, {3.600072063822472*^9, 
  3.600072139207631*^9}, {3.60007219023997*^9, 3.600072247029084*^9}, {
  3.601389991992825*^9, 3.601390056675672*^9}, {3.601390087604802*^9, 
  3.601390168739094*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[Xi]", "i"], "=", 
   SubscriptBox[
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
     "\[RightBracketingBar]"}], "+"]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.601390068246149*^9, 3.6013900714502153`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"|", "x", 
     SubscriptBox["|", "+"]}], "=", 
    RowBox[{"max", "(", 
     RowBox[{"x", ",", "0"}], ")"}]}], TraditionalForm]]],
 ".  By construction, for any given ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]],
 " this choice of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " ensures that all the constraints are satisfied. We can thus subsitute for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " in the objective function and remove the constraints, obtaining the \
following optimization problem:"
}], "Text",
 CellChangeTimes->{{3.6000716232316027`*^9, 3.6000717172050867`*^9}, {
  3.600071797373171*^9, 3.600071804208117*^9}, {3.600072063822472*^9, 
  3.600072139207631*^9}, {3.60007219023997*^9, 3.600072247029084*^9}, {
  3.601389991992825*^9, 3.601390035029743*^9}, {3.601390073716324*^9, 
  3.601390076351453*^9}, {3.60139019456527*^9, 3.601390333031674*^9}, {
  3.601390401102871*^9, 3.601390402716786*^9}, {3.601390687937025*^9, 
  3.601390690051483*^9}, {3.637576996041149*^9, 3.637577005157626*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], " ", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{"C", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
      "\[RightBracketingBar]"}], "+"]}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
  3.6000722300726633`*^9, 3.600072241744952*^9}}],

Cell[TextData[{
 "This is a non-smooth unconstrained convex optimization problem, which can \
be solved by using simple sub-gradient descent procedures.  As before, the \
minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["max", "i"], 
        SubscriptBox["\[Xi]", "i"]}]}], ")"}]}]}], TraditionalForm]]],
 ", where in this case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], "(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
      "\[RightBracketingBar]"}], "+"]}], TraditionalForm]]],
 ". We can also equivalently compute it using its definition, whichever is \
faster in the implementation.\n\nRecalling that the functional margin was \
defined as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["f", 
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], ",", "b"}]], "(", 
      StyleBox[
       SubscriptBox["x", 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"], ")"}]}]}], TraditionalForm]]],
 " and the 0/1 error function was defined as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalChi]", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], 
      RowBox[{
       SubscriptBox["f", 
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], ",", "b"}]], "(", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ")"}]}], "<", "0"}], ")"}], 
   TraditionalForm]]],
 ", we can see that both the 0/1 error and the constraints violation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{
         SubscriptBox["f", 
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], ",", "b"}]], "(", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], ")"}]}]}], "\[RightBracketingBar]"}], 
     "+"]}], TraditionalForm]]],
 " (often refered to as ",
 StyleBox["hinge-loss",
  FontSlant->"Italic"],
 ") can be expressed as a function of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Gamma]", "i"], TraditionalForm]]],
 ". Moreover we have"
}], "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.600091297397209*^9, 3.6000912978433123`*^9}, {
   3.600094482291164*^9, 3.600094502641637*^9}, {3.600094577882024*^9, 
   3.600094581776475*^9}, {3.600153228630068*^9, 3.6001532599410954`*^9}, {
   3.600153423589492*^9, 3.600153435742185*^9}, {3.601390340706565*^9, 
   3.60139035926153*^9}, {3.601622444788268*^9, 3.601622507610202*^9}, {
   3.601622931148408*^9, 3.601622956020783*^9}, {3.6016230015286903`*^9, 
   3.6016230218652573`*^9}, 3.601626109910359*^9, {3.602857486784349*^9, 
   3.60285749239607*^9}, {3.637577039962811*^9, 3.6375770716417427`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FormBox[
    RowBox[{
     RowBox[{"\[CapitalChi]", "(", 
      RowBox[{
       SubscriptBox["\[Gamma]", "i"], "<", "0"}], ")"}], "\[LessEqual]"}],
    TraditionalForm], 
   SubscriptBox[
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Gamma]", "i"]}], "\[RightBracketingBar]"}], "+"]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600091506754642*^9, 3.600091546586398*^9}, 
   3.600154643457857*^9}],

Cell["\<\
as it can also be seen in the following figure.
\
\>", "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.60009129225014*^9, 3.6000914835746737`*^9}, {
   3.600091573755001*^9, 3.600091589195252*^9}, {3.6000930824444017`*^9, 
   3.600093086838382*^9}, 3.60009438495957*^9, {3.600153284105681*^9, 
   3.600153284728677*^9}, 3.601386071870221*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Labeled", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"err", "[", "x", "]"}], ",", 
        RowBox[{"hinge", "[", "x", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1.5"}], ",", "2.5"}], "}"}], ",", 
      RowBox[{"PlotLegend", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<0/1 Error\>\"", ",", "\"\<Hinge Loss\>\""}], "}"}]}], 
      ",", 
      RowBox[{"LegendPosition", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".5", ",", ".2"}], "}"}]}], ",", 
      RowBox[{"LegendShadow", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".02", ",", 
         RowBox[{"-", ".02"}]}], "}"}]}], ",", 
      RowBox[{"LegendSize", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.4", ",", "0.2"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Full", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".5"}], ",", "2.5"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Background", "\[Rule]", "White"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", ".01", "]"}], ",", "Blue"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", ".01", "]"}], ",", "Red"}], "}"}]}], 
        "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
    "\"\<Hinge Loss and istantaneous error, as a function of the \
margin.\>\""}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.600093131245949*^9, 3.600093279883689*^9}, {
  3.600093324189554*^9, 3.6000933347352867`*^9}, {3.600093368172399*^9, 
  3.600093404706318*^9}, {3.6000934567967463`*^9, 3.6000934816712933`*^9}, {
  3.600093515357876*^9, 3.6000935181937037`*^9}, {3.600093692311961*^9, 
  3.600093749388242*^9}, {3.60009378075563*^9, 3.600093970889696*^9}, {
  3.600094016823143*^9, 3.600094032366508*^9}, {3.600094118782789*^9, 
  3.600094357553536*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{
     InsetBox[
      GraphicsBox[{{{}, {}, {
          RGBColor[0, 0, 1], 
          Thickness[0.01], 
          LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQrWcv9ur//+/7GcDgg31Q+9nVxvEIfvn5ltz0fd/g
/CtXuF8dTPwK58seyBcxl/kC52/NPsLKf/cTnJ/QY/jhZtNHOP/HpOqO/fYf
4Hw32T3GBoffwvlWU5OeLBN+Deez3zz0IWjSCzj/F1vI+ye3nsL5xxjme64J
fAznG1SfNrS8+gDOb9gfKBHhegfhP4WGlhU21+H8wlCBq0eOX4Tzp4ofb7px
4wScH56+csrPrXsR7lnza8nW+5vg/LyH07MeCy2A8z+YZYREcEyD8znCHJdf
vtoO51tM+exzqqAa4b6PE3W3Xo+B8y1Z9Zc/eBoC5wMAciCYww==
           "]], 
          LineBox[CompressedData["
1:eJxF0HtI0wEQB/C5TdNJQyskMDGtOQ3NIFuGwtbAB7IEh7k/VptODZymopUZ
BmnbciLTRMlwTmI656M5KYviZ7g/jDIEHzXNpm5aosyV5msOHxXV3cFxfODg
jm+QpICfTSaRSPG/+8+84B7Zbv2Wyib9K880/wnbpBi8wrqcN+slBednqDZ1
h4vAWcyfLFFwCVj/2SJcaLkH1hL0nYvM+2BNC0fdbJCD67NbLan9VeABZ58h
43oduFt2N3KkSg3mJisazRI9uKTagxp1qAP3hxQFD01ov4QH8bzjXWA7u3Ld
NP0UPHQ0Tp/W3Qu+QUugcpkvwfO3GKJqugn/E2hneKMfwGpqgLPJMQb2VirU
g6JJ8LubZUpZ8TS4zSiIuHLeBubEDpzwsc+DyTv5b1SFC5jX6PI1ZvgS3gtR
lrum7GBTTy6nUfgd/LdWwOntKo9QJXqtlsbOGV4FR79uMCZ4r4Fz8j3Dzmat
gw2xmjWKbgNsbfAftJG3wAwvYrE10Qk+RuTGuVdug/e3yR1Fcy7wZkq/aJCx
A56KEvszZLvgAoGPb7BlD/NMKgqvoJM4/22OGBkvJdCdGvbJryI3sKCH5Ruw
h74jf1Ju6SSD2xcDmug8CriiWZ4+k4wW8R0MQwrajyCMlwRoeY3wbbUEncl6
vEorRQfKjiQe0KFd0WUHJ/Ros2N+TNeFVgmeXY3vRe+e4hfLCfSX0RoNZRz9
QrGVOf4JXRcjDtNOopPaTj/nzqBf3R5+X76Ero84V5OyjC6cU6cG/UCH8vJm
B9bRVLePrbVbaGtfjDTdhSak2sgzu+hHgd4b+/voXxvoAeM=
           "]]}, {
          RGBColor[1, 0, 0], 
          Thickness[0.01], 
          LineBox[CompressedData["
1:eJxlyX8w23ccx/HUF+2OGsakh6Ita1VNSmsc9/6y0qGlVZ1eR5EOm1+hLaE4
qWV+7Ky1UpJrmM2Pou6YYnbCJzSUsvlRBF1aRExFkJHmx6L23d/743XPe9zL
hkoLjtYikUhexP6rI3y4ururQOVWevLdXQynqQ4XqNQK1Kkx4mftYHjLE4rd
llyBZmbJJSo1hp88ep66LFGgA6V2lC05hrsaMedGBArE2eeduCzBcFwke85u
VqAqWbp4RIDhwfm/P3aOUKCGp8tT7GYMp48yE2N73iJubF+HcwSGT07qrfZG
yVHcqo58vkULt+TRTFwttpHBvOt35gZaeHs8X+d94d9o7tRibn7SHjyyiLI5
mytDTgNkZUIvCVfezyxAsImyhjz5r61IuK8l19npqRRVG7w6wFp4B+4PqEt1
H0hQhT/lxovCHdg727cZfH8FMROi0o/5aUCtG7KxNCdG2Vgj/YZUDQOkH/2a
LorQdcbokel6FThlDlPcpuYRq1vM4sQpgYEukq/4/InmaSa6nxspINiawaz3
ECCTfdY29qNySLlsOMV/No7CTM+ckqVswwOzZ7kzM4Noa/GKobn5FoTGNpSq
2rtRapk/O+KlDJIWyuNExlVID4WYlzM2wTswjzVNrQeLh/SyiYx1EKXZXisy
6IWzP6ethHElwAutfnVufBgM7UMHm/TeAEfbUvlQOgGt2TLsZOEy6BXmcfqv
zcDtLi6lYkwEg6lZhcybQrDo9+ry9F2A2pbQE2GuC9BReaH27A9CwD14hw0l
ImDk53S+PjYDWpqknrvJy6DZe+ibxYMvoHJ8LeYjhzdQ8Nu5L6lBw8CxK7yj
npNAcfRLlWkpD3gtTKVmSQIkT6mlfgIPxO4M2u66BBJMdr20zvDAMYgero2t
QXGej4nwLwQ8erSbwfE1IHlPutx91APiQS+ZTeYazHTKUjftuOAYr470M5dC
cZ2Dss32VwiWywUBtlJIvnwB/2mqA+g5ssDAj6Xwmfatgu+/7QBeyYrHpU+l
QKJ2kWPE7XCJO00Oj5fCV5b+bma1bZC+/8lYcpcU8NLY2xlHWqG3OR5nfbEO
m5iPKtO3ETzSKq1uxqwDziHr/sFqgE6P8XfnU9aB4bJmbC2ph5ah091Y/jqQ
oksc+PceQZVojzutlfDAQoT+bA0wzFjOvu9tAMlwp8hNUAka4XNjG5MNYOA1
dcLMCkiv2ZH9c5D4UwJ4d6w5kEy53vKLC+EJ9tbQ12yIDHA8YRlJuPT01aua
EsBz+HbbHYSd5gPfeucC10ehM9pL+FC4djY5Bz7Rtxc3jBBeUsXtf5wBbRNh
fKaAcF3ZeIXnLXBi36uOWCQ8FpMcVpUITRF9ue5SwiFVntn9VDhqJ48yVRKO
jD2e3hj0P/8LtygPrQ==
           "]], 
          LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQPSFSd8JTtg/2DFBwbs+x/0E8CD6PQkL+AUEEv+PZ
JL/ZMgh+Q/EPnkAjBH/ftYk1+8wR/D+W2m+0bRH8Coa402weCH5B7+HOPbEI
fsLyPjaNTgSfbXoBt2Ufgr+mLUjAazKC/zNVTCpnLoI/SWWe7oaNCP7RhWtD
LG4h+Fpzzizy0P4I53+ewGWfeRbBt9g1dYM792c4PzOPQ9M45Qucv85m3mfm
ZV/h/AdTpY8+ZPoO56ty7nmxxOMHnC+zJ9uVteMnnP//J9PKoke/4PxvgXvj
jqr+gfNvmcRLq7b8hfPzwwUEle78g/O5vYp0mvgYHGD8a7oXLlfuQfBXzbNX
eRLHCOeHrzcTlP2H4Fe1Lmy8s4oJzl/+QnY2nw8znN80tzXhnh+CHxf0VnVd
IIIvtmfPBt9wBL+1P/pYTxKCn2w28yNXJYIv3yLiwb4Mwf9lUcN7fQWCf+3t
40vLViP4feGbY902Ivh/tYKKW/cg+Lcv9s9jvozgb2v7nnz5KoI/yTpec/EN
BN9rqd4Wp3sI/s6KsycbXyL4U3RN+wPfIPgFj+aEKL5H8DV8cu4f+ILgszBe
WTLhO4L/YKt1VsIvBH9P1mJ9g78I/nR57q///yP4ANxNyrs=
           
           "]]}, {}}, {{}, {}, {}, {}}}, Axes -> True, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> 
       GrayLevel[1], BaseStyle -> {"Palatino", Bold, 16}, 
       DisplayFunction :> $DisplayFunction, FormatType -> TraditionalForm, 
       GridLines -> Automatic, ImageSize -> 600, Method -> {}, 
       PlotRange -> {{-1.5, 2.5}, {-0.5, 2.5}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {
         Scaled[0.02], Automatic}], {-1, -0.75}, {Left, Bottom}, {2, 1.5}], 
     GraphicsGroupBox[{{
        GrayLevel[0], 
        RectangleBox[{0.52, 0.18000000000000002`}, {0.92, 0.38}]}, {
        GrayLevel[1], 
        EdgeForm[{
          GrayLevel[0], 
          Thickness[0.001]}], 
        GraphicsGroupBox[{
          RectangleBox[{0.5, 0.2}, {0.9, 0.4}], 
          InsetBox[
           GraphicsBox[{{{
               InsetBox[
                GraphicsBox[{
                  RGBColor[1, 0, 0], 
                  Thickness[0.01], 
                  LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {Left, Bottom}, {
                1, 1}], 
               InsetBox[
               "\"Hinge Loss\"", {1.2100000000000002`, 0.58}, {-1, 0}, 
                Automatic, {1, 0}]}, {
               InsetBox[
                GraphicsBox[{
                  RGBColor[0, 0, 1], 
                  Thickness[0.01], 
                  LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {Left, Bottom}, {
                1, 1}], 
               InsetBox[
               "\"0/1 Error\"", {1.2100000000000002`, 1.74}, {-1, 0}, 
                Automatic, {1, 0}]}}, {}}, AspectRatio -> 0.5, FormatType -> 
            TraditionalForm, PlotRange -> {{-0.1, 3.26}, {-0.1, 2.42}}], {0.5,
            0.2}, {Left, Bottom}, {0.4, 0.2}]}]}}]}, AspectRatio -> Automatic,
     Background -> GrayLevel[1.], ColorOutput -> Automatic, ImageSize -> 600.,
     PlotRange -> All],
   "\"Hinge Loss and istantaneous error, as a function of the margin.\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.600093265892646*^9, {3.600093328029045*^9, 3.600093335201136*^9}, {
   3.600093371478383*^9, 3.6000934054485064`*^9}, {3.6000934650536947`*^9, 
   3.6000934821932898`*^9}, 3.600093518904855*^9, {3.600093682488847*^9, 
   3.600093715270859*^9}, 3.600093758144931*^9, {3.600093789457769*^9, 
   3.600093971955018*^9}, 3.600094026985216*^9, 3.6000941262722054`*^9, {
   3.600094159026362*^9, 3.6000943633867397`*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

The hinge loss is thus clearly a convex piecewise-linear upperbound of the \
0/1 error function. Using this intuition, the hinge-loss classifier objective \
function can be virtually decomposed in two parts: \
\>", "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.60009129225014*^9, 3.6000914835746737`*^9}, {
   3.600091573755001*^9, 3.600091589195252*^9}, {3.6000930824444017`*^9, 
   3.600093086838382*^9}, {3.600094486669729*^9, 3.600094545714559*^9}, {
   3.600094624204111*^9, 3.600094647449463*^9}, {3.600094709463649*^9, 
   3.600094787988662*^9}, {3.6001532947532673`*^9, 3.600153317960039*^9}, {
   3.600154676245984*^9, 3.600154687314789*^9}, {3.6006771590608683`*^9, 
   3.600677176207753*^9}, 3.6013860745439253`*^9, {3.602857536788834*^9, 
   3.602857562095058*^9}, {3.6375770934446173`*^9, 3.637577117789996*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "a \[OpenCurlyDoubleQuote]",
 StyleBox["regularizer",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ", named in this way because of its role in favoring general solutions"
}], "Item",
 CellChangeTimes->{{3.600091181152338*^9, 3.6000912605961437`*^9}, {
  3.600094803062545*^9, 3.600094835866577*^9}, {3.6001533264864693`*^9, 
  3.600153364470174*^9}, {3.600154693739958*^9, 3.600154696004071*^9}, {
  3.6074333453055277`*^9, 3.6074333499646683`*^9}}],

Cell[TextData[{
 "a weighted loss function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       "\[RightBracketingBar]"}], "+"]}]}], TraditionalForm]]],
 ", measuring the hinge-loss on every sample"
}], "Item",
 CellChangeTimes->{{3.600091181152338*^9, 3.6000912878115053`*^9}, {
  3.600094569178194*^9, 3.600094570439437*^9}, {3.6000947993169937`*^9, 
  3.600094825127008*^9}, {3.600153369950371*^9, 3.600153383222048*^9}, {
  3.607433357603455*^9, 3.607433359757029*^9}, {3.607433932426351*^9, 
  3.6074339359775047`*^9}}]
}, Open  ]],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433368352339*^9, 3.607433374420573*^9}}],

Cell["\<\
As before, we report here the code snippet of this implementation
\
\>", "Text",
 CellChangeTimes->{{3.6005442882927713`*^9, 3.6005443042883883`*^9}, 
   3.601386076379731*^9, 3.6074333625220213`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hinge", "[", "x_", "]"}], ":=", 
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "-", "x"}], ",", 
         RowBox[{
          RowBox[{"1", "-", "x"}], ">", "0"}]}], "}"}], "}"}], ",", "0"}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"trainSoftMarginHinge", "[", 
    RowBox[{"feats_List", ",", "labels_List", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "b", ",", "d", ",", "nTr", 
       ",", "v", ",", "w", ",", "regularizer", ",", "loss", ",", "obj", ",", 
       "sol"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "feats", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"regularizer", "=", 
       RowBox[{"w", ".", "w"}]}], ";", "\n", 
      RowBox[{"loss", "=", 
       RowBox[{"Total", "[", 
        RowBox[{"hinge", "@@@", 
         RowBox[{"(", 
          RowBox[{"labels", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"feats", ".", "w"}], "+", "b"}], ")"}]}], ")"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{"regularizer", " ", "+", " ", 
        RowBox[{"regC", " ", "loss"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{
        RowBox[{"FindMinimum", "[", 
         RowBox[{"obj", ",", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"w", ",", 
            RowBox[{"{", "b", "}"}]}], "]"}]}], "]"}], "//", "Quiet"}]}], ";",
       "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"labels", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"feats", ".", 
               RowBox[{"model", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", 
              RowBox[{"model", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}], "]"}], ")"}],
         "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"model", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600544854869842*^9, 3.600544869258173*^9}, {
  3.600603635602695*^9, 3.6006036366102333`*^9}, {3.601376250280011*^9, 
  3.6013762567611713`*^9}, {3.601573476747438*^9, 3.6015734770535173`*^9}, {
  3.601623044296619*^9, 3.601623056384856*^9}}],

Cell["\<\

An example of usage is as follow
\
\>", "Text",
 CellChangeTimes->{{3.6005448879827833`*^9, 3.60054489880509*^9}, {
  3.601386078534184*^9, 3.6013860796351767`*^9}, {3.601560585359741*^9, 
  3.601560587116675*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.60121194128167*^9, 3.601211945994905*^9}, {
  3.601213846066174*^9, 3.601213846423414*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$693 = MousePosition["Graphics"]; 
     Private`p$693 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$693], 2], 
          Union[
           Partition[Private`pt$693, 2]]}, 1]]; 
     If[Private`s$693 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$693}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$693}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$693 = {}; 
     Private`s$693 = Private`s$693 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005449418843603`*^9, 3.600545026353217*^9, 3.600545344832444*^9, {
   3.600549892714267*^9, 3.600549896275764*^9}, {3.600587742396299*^9, 
   3.600587757977747*^9}, 3.600602781749795*^9, 3.600603523043189*^9, 
   3.6006039456469507`*^9, 3.600612998820183*^9, 3.600613812104033*^9, 
   3.6006326442290087`*^9, 3.600671117281825*^9, 3.600671642210066*^9, 
   3.60067180370498*^9, 3.600672265467708*^9, 3.600672525853112*^9, {
   3.600672836554018*^9, 3.600672850631194*^9}, 3.6012063703524323`*^9, 
   3.601209437147979*^9, 3.6012114671204643`*^9, 3.601211946322893*^9, {
   3.6012122448130617`*^9, 3.6012122910579147`*^9}, {3.601212668169895*^9, 
   3.601212668525999*^9}, {3.601213356436779*^9, 3.601213356823247*^9}, 
   3.601213402009972*^9, {3.6012134433127337`*^9, 3.6012134609849977`*^9}, 
   3.601213643644863*^9, 3.601213852234685*^9, 3.601214040359129*^9, 
   3.601214608246007*^9, 3.60121800451103*^9, 3.601286272936027*^9, 
   3.6012958899364843`*^9, 3.601296909755733*^9, 3.601297170433475*^9, 
   3.6012976620494633`*^9, 3.6012988947650013`*^9, 3.6012989471568413`*^9, 
   3.6013046935022507`*^9, 3.601372885069866*^9, 3.601375277184816*^9, 
   3.601559771791875*^9, 3.6015608051139927`*^9, 3.60156216642771*^9, 
   3.601563112013534*^9, 3.6015716450697536`*^9, 3.601572489368885*^9, 
   3.601626156217442*^9, 3.602856855665761*^9, 3.60285972452811*^9, 
   3.607430517837002*^9, 3.607432448325654*^9, 3.63756472510083*^9, 
   3.6375655258096*^9, 3.637565654687269*^9, 3.637566042116534*^9, 
   3.6375733610310087`*^9, 3.6375818995097313`*^9, 3.637582140823168*^9, 
   3.637582201471571*^9, 3.637583464194372*^9, 3.637585525650531*^9, 
   3.6375885585333138`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainSoftMarginHinge", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.6005479317609177`*^9, 3.600547943871744*^9}, 3.6006036721231003`*^9, {
   3.600604130271123*^9, 3.6006041313075647`*^9}, 3.600672824777946*^9, {
   3.600672888585968*^9, 3.600672926349937*^9}, {3.600673201958695*^9, 
   3.600673221709093*^9}, {3.601211506662661*^9, 3.6012115593205023`*^9}, {
   3.601211963663365*^9, 3.60121206767241*^9}, {3.6012123175245247`*^9, 
   3.60121252049656*^9}, {3.601212561616869*^9, 3.6012125815873137`*^9}, {
   3.601212612434774*^9, 3.601212627681984*^9}, 3.601212679938843*^9, 
   3.6012127106813993`*^9, {3.6012133667569923`*^9, 3.601213367635418*^9}, {
   3.6012134119254217`*^9, 3.6012134339214478`*^9}, {3.601213662321473*^9, 
   3.601213675149495*^9}, {3.6012137652131767`*^9, 3.6012137742405357`*^9}, {
   3.601213833558949*^9, 3.601213835855653*^9}, {3.601213887084127*^9, 
   3.601213912709806*^9}, {3.601287015355753*^9, 3.601287025155109*^9}, 
   3.601287106576169*^9, {3.601297927697929*^9, 3.601297927958023*^9}, {
   3.601298003109445*^9, 3.60129803642181*^9}, {3.601373005470107*^9, 
   3.6013730104967957`*^9}, {3.601373041330082*^9, 3.601373050067439*^9}, 
   3.6028575856574078`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 1., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    288., {143., 143.9957298901707}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$12773$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$12773$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainSoftMarginHinge[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {175., 178.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.60137303558141*^9, 3.601373053759708*^9}, 
   3.601560219901368*^9, 3.601560605644328*^9, 3.6015606951247168`*^9, 
   3.6015608530852222`*^9, 3.601563162058833*^9, {3.601563636857156*^9, 
   3.601563641360997*^9}, 3.601563683412404*^9, {3.6015637241738586`*^9, 
   3.6015637381113367`*^9}, 3.6015717330080233`*^9, 3.601572618322707*^9, 
   3.6016263703538713`*^9, 3.602857586810186*^9, {3.602859831611567*^9, 
   3.602859859544814*^9}, 3.602860149431301*^9, 3.6074333953964863`*^9, 
   3.6375648805595827`*^9, 3.6375659061552477`*^9, 3.6375660985779543`*^9, 
   3.63758205550838*^9, 3.6375823520399103`*^9, 3.637585618610615*^9, 
   3.637588922277966*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

As it is possible to see, the behavior of this classifier is very similar to \
the one of the original soft-margin algorithm (though the solution might \
slightly differ, for numerical reasons).
\
\>", "Text",
 CellChangeTimes->{{3.601376100004849*^9, 3.601376134040353*^9}, 
   3.601386086412291*^9, 3.601558674131753*^9, {3.607433419237398*^9, 
   3.607433442678946*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Minimizing the 0/1 error", "Subsection",
 CellChangeTimes->{{3.601209915340871*^9, 3.601209917694199*^9}, {
  3.60121504252315*^9, 3.601215073415551*^9}, {3.6012152593121233`*^9, 
  3.601215263961134*^9}, {3.60121530191003*^9, 3.601215315701867*^9}}],

Cell[TextData[{
 "For what we said above, soft-margin maximization - and thus good \
generalization abilities - can be acheived through the minimization of the \
regularized hinge loss function: ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       "\[RightBracketingBar]"}], "+"]}]}]}]], "InlineFormula",
  CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
   3.6000722300726633`*^9, 3.600072241744952*^9}}],
 ".  On the other hand, we have also seen that the hinge-loss is a convex \
piecewise-linear upper-bound to the 0/1 error, which ultimately is the \
quantity that we care about. What would happen if we replace  the hinge-loss \
in this regularized objective function, with a 0/1 error function?\n"
}], "Text",
 CellChangeTimes->{{3.6012099215635433`*^9, 3.601210038930832*^9}, {
   3.601210344003456*^9, 3.60121039523493*^9}, {3.6012144715930243`*^9, 
   3.601214527549773*^9}, {3.601215077486929*^9, 3.601215109167843*^9}, {
   3.601215146221079*^9, 3.601215238753796*^9}, {3.601215269929373*^9, 
   3.601215285806988*^9}, {3.601215331093032*^9, 3.601215398032632*^9}, {
   3.601373105606681*^9, 3.60137322428964*^9}, {3.602857624875058*^9, 
   3.602857634939942*^9}, 3.6074334826529284`*^9, 3.60743392661095*^9, {
   3.637577217810164*^9, 3.63757721874469*^9}, {3.637582771103168*^9, 
   3.6375827734851513`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433486692894*^9, 3.607433492728703*^9}}],

Cell[TextData[{
 "We can verify this by using the numerical optimization abilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " (",
 StyleBox["NMinimize", "Code"],
 ") to solve"
}], "Text",
 CellChangeTimes->{{3.6012099215635433`*^9, 3.601210038930832*^9}, {
   3.601210344003456*^9, 3.60121039523493*^9}, {3.6012144715930243`*^9, 
   3.601214527549773*^9}, {3.601215077486929*^9, 3.601215109167843*^9}, {
   3.601215146221079*^9, 3.601215238753796*^9}, {3.601215269929373*^9, 
   3.601215285806988*^9}, {3.601215331093032*^9, 3.601215398032632*^9}, {
   3.601373105606681*^9, 3.60137322428964*^9}, {3.602857624875058*^9, 
   3.602857634939942*^9}, 3.6074334826529284`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["min", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], " ", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], "\[CenterDot]", 
     StyleBox["w",
      FontWeight->"Bold"]}]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{"\[CapitalChi]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "<", "0"}], 
       ")"}]}]}]}]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
   3.6000722300726633`*^9, 3.600072241744952*^9}, {3.6012104743903723`*^9, 
   3.601210487709112*^9}, 3.60121053938375*^9}],

Cell[TextData[{
 "Note that, although the objective function still includes a regularizer, \
the indicator function ",
 Cell[BoxData[
  FormBox["\[CapitalChi]", TraditionalForm]]],
 " does not measure the margin obtained by ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", but only the 0/1 error. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " we can minimize this function for example, by asking NMinimize to perform \
a random search, as shown in the following code snippet\n"
}], "Text",
 CellChangeTimes->{{3.60121049972244*^9, 3.6012105058656883`*^9}, {
   3.601210541564143*^9, 3.6012105688797617`*^9}, {3.60121453139952*^9, 
   3.601214578522887*^9}, {3.6012154037449617`*^9, 3.601215408313727*^9}, {
   3.601373232196843*^9, 3.601373252758483*^9}, 3.601386088896632*^9, {
   3.637582608594431*^9, 3.637582632277896*^9}, {3.637582716462081*^9, 
   3.637582735381411*^9}, {3.637582788322219*^9, 3.637582801326556*^9}, {
   3.6375828373589354`*^9, 3.6375829585811663`*^9}, {3.6375830268854923`*^9, 
   3.6375830292114697`*^9}, {3.637583192864036*^9, 3.6375831970239058`*^9}, {
   3.6375832709007597`*^9, 3.637583345646347*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainZeroOneError", "[", 
    RowBox[{"c_", ",", "feats_", ",", "labels_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "b", ",", "d", ",", "nTr", 
       ",", "v", ",", "w", ",", "regularizer", ",", "loss", ",", "obj", ",", 
       "sol"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "feats", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"regularizer", "=", 
       RowBox[{"w", ".", "w"}]}], ";", "\n", 
      RowBox[{"loss", "=", 
       RowBox[{"Total", "[", 
        RowBox[{"err", "@@@", 
         RowBox[{"(", 
          RowBox[{"labels", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"feats", ".", "w"}], "+", "b"}], ")"}]}], ")"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{"regularizer", " ", "+", " ", 
        RowBox[{"c", " ", "loss"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"NMinimize", "[", 
        RowBox[{"obj", ",", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}]}], "]"}], ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<RandomSearch\>\""}]}], "]"}]}], 
      ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"1", "/", 
         RowBox[{"Norm", "[", 
          RowBox[{"model", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], 
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"labels", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"feats", ".", 
               RowBox[{"model", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", 
              RowBox[{"model", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}], "]"}], 
         ")"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.601210571525784*^9, 3.6012105835260897`*^9}, {
  3.601573414482918*^9, 3.601573440950531*^9}}],

Cell["\<\

Following is an example of usage of this code
\
\>", "Text",
 CellChangeTimes->{{3.6005448879827833`*^9, 3.60054489880509*^9}, {
  3.601210632252318*^9, 3.601210638991849*^9}, {3.601373260890164*^9, 
  3.601373269229082*^9}, {3.601386091010215*^9, 3.601386092805372*^9}, {
  3.637582593947945*^9, 3.6375825954243917`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601214091257781*^9, 3.601214096377967*^9}, {
  3.601214601576762*^9, 3.6012146018379908`*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$719 = MousePosition["Graphics"]; 
     Private`p$719 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$719], 2], 
          Union[
           Partition[Private`pt$719, 2]]}, 1]]; 
     If[Private`s$719 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$719}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$719}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$719 = {}; 
     Private`s$719 = Private`s$719 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.60121087419002*^9, {3.601210940269863*^9, 3.6012109481673*^9}, 
   3.60121099324424*^9, {3.601211467185676*^9, 3.6012114673875103`*^9}, {
   3.601212264618929*^9, 3.6012122907590446`*^9}, 3.60121266821483*^9, 
   3.601213356497918*^9, {3.601214040450753*^9, 3.601214040704617*^9}, 
   3.60121409680414*^9, {3.601214608348693*^9, 3.601214608629203*^9}, 
   3.6012180045608263`*^9, 3.601286272978816*^9, 3.601295889980215*^9, 
   3.601296909781158*^9, 3.601297170474646*^9, 3.6012976620815477`*^9, 
   3.60129889488898*^9, 3.601298947184609*^9, 3.601304693536516*^9, 
   3.601372885110718*^9, 3.601375277226056*^9, 3.6015597718380957`*^9, 
   3.601562166493429*^9, 3.601563112057412*^9, 3.601571645114797*^9, 
   3.601572489412768*^9, 3.6016261562586946`*^9, 3.602856855701194*^9, 
   3.6028597245657988`*^9, 3.607430517877798*^9, 3.607432448368534*^9, 
   3.637564725132847*^9, 3.637565525847085*^9, 3.637565654716428*^9, 
   3.637566042161289*^9, 3.6375733610705833`*^9, 3.6375818995422907`*^9, {
   3.637582140871317*^9, 3.637582141111209*^9}, 3.637582201506496*^9, 
   3.637583464222974*^9, 3.637585525737719*^9, 3.637588558595929*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainZeroOneError", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "10", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.601206412072904*^9, 3.601206439602756*^9}, {
   3.601207402577566*^9, 3.601207422893263*^9}, {3.601207473430217*^9, 
   3.6012074880340767`*^9}, {3.6012075318410597`*^9, 3.601207549397902*^9}, {
   3.601207579515867*^9, 3.6012076661646357`*^9}, {3.601207702131342*^9, 
   3.601207756902109*^9}, {3.60120779520131*^9, 3.601207802489641*^9}, {
   3.601207892818038*^9, 3.601207942630393*^9}, {3.6012079732655983`*^9, 
   3.60120805640635*^9}, 3.6012085698823757`*^9, {3.601208744131277*^9, 
   3.601208749528508*^9}, {3.601208846906273*^9, 3.601208878723583*^9}, {
   3.60120891918299*^9, 3.601208982964459*^9}, {3.601209016606789*^9, 
   3.601209071829247*^9}, {3.601209105216289*^9, 3.601209105504429*^9}, {
   3.601209176094448*^9, 3.601209188093761*^9}, {3.601209465009707*^9, 
   3.601209465726193*^9}, {3.601209495974411*^9, 3.6012095473117437`*^9}, {
   3.601209578809228*^9, 3.601209584813322*^9}, 3.6012096397776337`*^9, {
   3.60120985755095*^9, 3.6012098579378023`*^9}, {3.601287041349455*^9, 
   3.6012870991566477`*^9}, {3.601298065938662*^9, 3.601298071661854*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 3., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 10, 0.2}}, Typeset`size$$ = {
    288., {149., 148.78562499999992`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$21516$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$21516$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainZeroOneError[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 10, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {180., 183.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.601563369208535*^9, 3.60157175384159*^9, 3.6015726548731318`*^9, 
   3.6016264029562387`*^9, 3.602857644758247*^9, 3.602860159017392*^9, 
   3.607433503336472*^9, 3.6375650928769083`*^9, 3.6375659287909822`*^9, 
   3.637574038211939*^9, 3.637582074764988*^9, {3.637582156703615*^9, 
   3.6375821690456257`*^9}, 3.637582360592127*^9, 3.6375856319604073`*^9, 
   3.637588951460347*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it is possible to see ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " may be able to find an hyperplane minimizing the training 0/1 error. \
However, not only the optimization is much harder (as the objective function \
has always sub-gradient 0) but, more importantly, without promoting any \
margin maximization the generalization abilities of the classifier are \
clearly negatively affected. This in turn results in a high testing error \
rate."
}], "Text",
 CellChangeTimes->{{3.6012106431864967`*^9, 3.601210688540284*^9}, {
   3.601210771627122*^9, 3.6012108692579308`*^9}, {3.6012146700441027`*^9, 
   3.6012146935613422`*^9}, {3.601214731122373*^9, 3.6012147453805923`*^9}, {
   3.601214817452739*^9, 3.601215028390627*^9}, {3.601215415462797*^9, 
   3.601215415846622*^9}, 3.6013860958792686`*^9, {3.6028576648450603`*^9, 
   3.602857666219592*^9}, {3.607433538013639*^9, 3.607433541302189*^9}, {
   3.607433572582103*^9, 3.607433574507115*^9}, {3.6375834173384123`*^9, 
   3.637583426863504*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tSupport Vector Machines"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.600154775042107*^9, 3.6001547788358383`*^9}},
 CellTags->"sec:svm"],

Cell[TextData[{
 "In the previous Section we introduced the basic theory of max-margin \
classifiers. A Support Vector Machine is basically a max-margin classifier \
(hard or soft-margin) trained in a different way. In this section we will \
first briefly introduce the ",
 StyleBox["convex optimization",
  FontSlant->"Italic"],
 " theory ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 " necessary to derive the SVM algorithm, and then perform the derivations \
necessary to obtain SVMs and finally present the resulting implementations.\n\
"
}], "Text",
 CellChangeTimes->{{3.600154875125265*^9, 3.6001549181816397`*^9}, 
   3.600155031827753*^9, {3.6001553088687277`*^9, 3.600155366668939*^9}, {
   3.600155430120121*^9, 3.600155445536603*^9}, {3.6001554825240726`*^9, 
   3.600155496361331*^9}, {3.600155582648361*^9, 3.6001555947194567`*^9}, {
   3.600414871766923*^9, 3.600414873146832*^9}, {3.600429222572053*^9, 
   3.600429337504127*^9}, {3.600511207971109*^9, 3.600511228061693*^9}, {
   3.600512833942341*^9, 3.6005128343868933`*^9}, {3.600677197978772*^9, 
   3.6006773089673767`*^9}, {3.600677372353778*^9, 3.600677376555369*^9}, {
   3.6006786361826878`*^9, 3.600678644731577*^9}, 3.601558667665824*^9, {
   3.607433596645958*^9, 3.607433614258649*^9}, {3.637577530666527*^9, 
   3.637577531167904*^9}}],

Cell[CellGroupData[{

Cell["Convex Optimization Theory", "Subsection",
 CellChangeTimes->{{3.600429345878928*^9, 3.600429351035904*^9}}],

Cell["Suppose we are given an optimization problem of the form", "Text",
 CellChangeTimes->{{3.600415182339123*^9, 3.600415235021255*^9}, {
  3.6004152679843388`*^9, 3.60041532191236*^9}, {3.600415439755579*^9, 
  3.6004155884965687`*^9}, {3.600415641729501*^9, 3.600415652938727*^9}, {
  3.600416054015314*^9, 3.6004160579326*^9}, {3.600416453336545*^9, 
  3.600416454451515*^9}, {3.600416911156144*^9, 3.600416911686496*^9}, {
  3.600678620696653*^9, 3.6006786305596952`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    StyleBox["w",
     FontWeight->"Bold"]], "f", 
   RowBox[{"(", 
    StyleBox["w",
     FontWeight->"Bold"], ")"}]}], ",", "         ", 
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "\[Element]", "\[CapitalOmega]", "\[Subset]", 
   SuperscriptBox["\[DoubleStruckCapitalR]", 
    "d"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", 
     SubscriptBox["g", "i"]}], 
    RowBox[{"(", 
     StyleBox["w",
      FontWeight->"Bold"], ")"}]}], "\[LessEqual]", "0"}], ",", " ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{"\t ", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["h", "i"], 
     RowBox[{"(", 
      StyleBox["w",
       FontWeight->"Bold"], ")"}]}], "=", "0"}], ",", " ", 
   RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
   "m"}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600415328840414*^9, 3.6004154058700333`*^9}, {
   3.600415665891083*^9, 3.6004157237966223`*^9}, {3.600415896963788*^9, 
   3.600415897999427*^9}, 3.600417100003827*^9, {3.600418690524115*^9, 
   3.600418694226101*^9}},
 CellTags->"primal_problem"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["h", "i"], ",", " ", 
    RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "m"}], 
   TraditionalForm]]],
 ",  are a set of real functions defined on a domain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalOmega]", "\[Subset]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], TraditionalForm]]],
 " . This problem is refered to as the ",
 StyleBox["primal problem",
  FontSlant->"Italic"],
 ".\n\nThe ",
 StyleBox["generalized Lagrangian",
  FontSlant->"Italic"],
 " of the minimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 ") is defined as"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
  3.6004157289837933`*^9, 3.600415772365546*^9}, {3.6004158993933773`*^9, 
  3.600415899750411*^9}, {3.600416060875347*^9, 3.600416063338799*^9}, {
  3.600416102200801*^9, 3.600416104148707*^9}, {3.600416355581702*^9, 
  3.600416380401072*^9}, {3.600416414240261*^9, 3.600416532321621*^9}, {
  3.6004169138287563`*^9, 3.6004169213589773`*^9}, {3.600418102342947*^9, 
  3.600418115255018*^9}, {3.600428905610808*^9, 3.6004289099762383`*^9}, {
  3.600429414824535*^9, 3.600429429469164*^9}, {3.6006785802651653`*^9, 
  3.6006785805358467`*^9}, {3.6006786649110613`*^9, 3.6006786652763*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"L", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"f", 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", " ", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["g", "i"], 
       RowBox[{"(", 
        StyleBox["w",
         FontWeight->"Bold"], ")"}]}]}], "+", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "m"], 
      RowBox[{
       SubscriptBox["\[Beta]", "i"], 
       SubscriptBox["h", "i"], 
       RowBox[{"(", 
        StyleBox["w",
         FontWeight->"Bold"], ")"}]}]}]}], "=", " ", 
    RowBox[{
     RowBox[{"f", 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["g",
       FontWeight->"Bold"], 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["h",
       FontWeight->"Bold"], 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}]}]}]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600415778069233*^9, 3.600415886046279*^9}, {
  3.6004159335411863`*^9, 3.600416041078998*^9}, {3.600416311897974*^9, 
  3.600416312525124*^9}, {3.600417144930235*^9, 3.6004171523903913`*^9}, {
  3.600418677149428*^9, 3.600418685861945*^9}}],

Cell[TextData[{
 "and the ",
 StyleBox["Lagrangian dual problem",
  FontSlant->"Italic"],
 " is defined as"
}], "Text",
 CellChangeTimes->{{3.60041604667068*^9, 3.600416068173777*^9}, {
  3.600416116838738*^9, 3.6004161580773067`*^9}, {3.6004163089355993`*^9, 
  3.600416309859293*^9}, {3.600417049611938*^9, 3.600417053903081*^9}, {
  3.60067858810745*^9, 3.600678588418157*^9}, {3.600678666438592*^9, 
  3.600678666894721*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["max", 
   RowBox[{
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ",", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}]], "  ", 
  StyleBox["\[Theta]",
   FontWeight->"Bold"], 
  RowBox[{"(", 
   RowBox[{
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ",", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"s", ".", "t", ".", " ", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"]}], "\[GreaterEqual]", 
   StyleBox["0",
    FontWeight->"Bold"]}], ","}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60041604667068*^9, 3.600416068173777*^9}, {
  3.600416116838738*^9, 3.600416290006764*^9}, {3.6004175737175837`*^9, 
  3.600417578551526*^9}, {3.600417988927905*^9, 3.60041806731647*^9}},
 CellTags->"eq:dual_problem"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["\[Theta]",
      FontWeight->"Bold"], "(", 
     RowBox[{
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}], "=", " ", 
    RowBox[{
     SubscriptBox["inf", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[Element]", "\[CapitalOmega]"}]], 
     RowBox[{"L", "(", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], ",", 
       StyleBox["\[Beta]",
        FontWeight->"Bold"]}], ")"}]}]}], TraditionalForm]]],
 ".\nWe will now cite the following important results from optimization \
theory."
}], "Text",
 CellChangeTimes->{{3.600416566102697*^9, 3.600416579133808*^9}, {
  3.600416648379065*^9, 3.600416683946109*^9}, {3.600416787348226*^9, 
  3.600416826918919*^9}, {3.600417294162068*^9, 3.6004173156659803`*^9}, {
  3.600418044059804*^9, 3.600418124542616*^9}, {3.600427516955368*^9, 
  3.6004275342828817`*^9}, {3.600429444385693*^9, 3.600429444854097*^9}}],

Cell[TextData[{
 StyleBox["Theorem 2 ", "Subsection"],
 StyleBox["(",
  FontWeight->"Plain"],
 StyleBox["Strong duality theorem",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[")",
  FontWeight->"Plain"],
 StyleBox[".", "Subsection"],
 " Let ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " be the solution of the of the primal optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 ") and let ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], "*"], ",", 
     SuperscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "*"]}], ")"}], TraditionalForm]]],
 " be the solution of the Lagrangian dual problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:dual_problem"],
 ").\nIf ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions (i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "i"], "(", 
     StyleBox["w",
      FontWeight->"Bold"], ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["a",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["w",
       FontWeight->"Bold"]}], "-", "d"}]}], TraditionalForm]]],
 "), then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}], "=", 
    RowBox[{
     StyleBox["\[Theta]",
      FontWeight->"Bold"], "(", 
     RowBox[{
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "*"]}], ")"}]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417605760099*^9, 3.600417622161007*^9}, {3.600418193059209*^9, 
   3.6004184479104156`*^9}, {3.600418526867786*^9, 3.6004185274644403`*^9}, {
   3.600419015125244*^9, 3.600419018595573*^9}, {3.600425897987835*^9, 
   3.600425898295209*^9}, {3.600426133978353*^9, 3.600426135471858*^9}, {
   3.600427111261457*^9, 3.600427112864626*^9}, {3.6004271726863937`*^9, 
   3.600427175101616*^9}, {3.600427520940413*^9, 3.6004275211997004`*^9}, 
   3.600427735726377*^9, {3.6004288268446207`*^9, 3.600428827126993*^9}, {
   3.600513222779529*^9, 3.600513223571279*^9}, {3.6375776532850857`*^9, 
   3.6375776972475224`*^9}}],

Cell[TextData[{
 StyleBox["Theorem 3 ", "Subsection"],
 StyleBox["(",
  FontWeight->"Plain"],
 StyleBox["Karush\[Dash]Kuhn\[Dash]Tucker",
  FontSlant->"Italic"],
 StyleBox[" - KKT - optimality conditions",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[")",
  FontWeight->"Plain"],
 StyleBox[".", "Subsection"],
 " Given a primal optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 "), where ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[Element]", 
    SuperscriptBox["\[ScriptCapitalC]", "1"]}], TraditionalForm]]],
 ". Necessary and sufficient conditions for a point ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " to be an optimum are  the existence of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "*"], ",", 
    SuperscriptBox[
     StyleBox["\[Beta]",
      FontWeight->"Bold"], "*"]}], TraditionalForm]]],
 " such that"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417605760099*^9, 3.600417622161007*^9}, {3.600418193059209*^9, 
   3.6004184479104156`*^9}, {3.600418526867786*^9, 3.6004185274644403`*^9}, {
   3.600419015125244*^9, 3.600419018595573*^9}, {3.600425897987835*^9, 
   3.600425898295209*^9}, {3.600426133978353*^9, 3.600426135471858*^9}, {
   3.600427111261457*^9, 3.600427112864626*^9}, {3.6004271726863937`*^9, 
   3.600427175101616*^9}, {3.600427520940413*^9, 3.6004275211997004`*^9}, 
   3.600427735726377*^9, {3.600427809285172*^9, 3.600427885849931*^9}, {
   3.600427931483832*^9, 3.6004280662357693`*^9}, {3.600428420767791*^9, 
   3.60042842139086*^9}, {3.600428469156039*^9, 3.600428472735189*^9}, {
   3.600428831434767*^9, 3.600428831543598*^9}, {3.6004299159154577`*^9, 
   3.600429919811499*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", "L"}], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", 
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "*"]}], ")"}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", "L"}], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       StyleBox["w",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}]], "=", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Alpha]", "i"], "*"], 
    SubscriptBox["g", "i"], 
    RowBox[{"(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}]}], "=", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  RowBox[{"n", "                ", 
   StyleBox[
    RowBox[{"(", 
     RowBox[{"KKT", " ", "complementarity", " ", "condition"}], ")"}], 
    "Text"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["g", "i"], 
    RowBox[{"(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}]}], "\[LessEqual]", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SuperscriptBox[
    SubscriptBox["\[Alpha]", "i"], "*"], "\[GreaterEqual]", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600428098450416*^9, 3.600428276349086*^9}, {
  3.60042830994925*^9, 3.600428360656294*^9}, {3.600428971555417*^9, 
  3.60042897299465*^9}, {3.600429597108923*^9, 3.600429603784739*^9}, {
  3.600515291370558*^9, 3.6005153267401447`*^9}},
 CellTags->"eq:kkt"],

Cell[TextData[{
 "Theorem 2 tells us that if ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions, the optimal value of the primal problem can be \
obtained by solving the Lagrangian dual problem. Moreover, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[Element]", 
    SuperscriptBox["\[ScriptCapitalC]", "1"]}], TraditionalForm]]],
 " Theorem 3 gives us the conditions characterizing the solution of both the \
primal and the dual problems. For example, the first condition in (",
 
 CounterBox["DisplayFormulaNumbered", "eq:kkt"],
 ") provides a way to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["\[Theta]",
     FontWeight->"Bold"], "(", 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], "*"], ",", 
     SuperscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "*"]}], ")"}], TraditionalForm]]],
 ", as it is showcased below for the SVM optimization problem.\n"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417411934288*^9, 3.600417423052297*^9}, {3.6004175079538803`*^9, 
   3.6004175395920963`*^9}, {3.600418577302629*^9, 3.600418671703981*^9}, {
   3.600418713467914*^9, 3.600418786173774*^9}, {3.600418820726795*^9, 
   3.6004188963217573`*^9}, 3.600418938868869*^9, {3.60041909773505*^9, 
   3.600419110274001*^9}, 3.600425266898609*^9, 3.6004255520373907`*^9, {
   3.600425630225403*^9, 3.6004256330049477`*^9}, {3.600427729505784*^9, 
   3.600427734453733*^9}, {3.600428975423246*^9, 3.600429058864686*^9}, {
   3.600429095992033*^9, 3.6004291459168453`*^9}, 3.600429196837678*^9, {
   3.600429940666926*^9, 3.6004299498798103`*^9}, {3.60043000224362*^9, 
   3.600430227450808*^9}, {3.6004302759189262`*^9, 3.6004302930976877`*^9}, 
   3.601385814964429*^9, 3.601558663281171*^9, {3.607433654410502*^9, 
   3.607433656197339*^9}, {3.607433715280018*^9, 3.607433715673252*^9}, {
   3.637578039799329*^9, 3.63757806250173*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support Vector Machines", "Subsection",
 CellChangeTimes->{{3.600429383935976*^9, 3.600429387959351*^9}}],

Cell[TextData[{
 "Support Vector Machines arise when applying the convex optimization theory \
outlined above, to the max-margin classifiers introduced in Section ",
 
 CounterBox["Section", "sec:max_margin"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600512740961812*^9, 3.600512801119184*^9}, {
   3.60051283892124*^9, 3.600512850395771*^9}, 3.601558659500217*^9, {
   3.601558736117927*^9, 3.601558740347517*^9}}],

Cell[CellGroupData[{

Cell["Hard-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.600510896273519*^9, 3.6005109006592607`*^9}, {
  3.6005128679886007`*^9, 3.6005128719736147`*^9}}],

Cell[TextData[{
 "The generalized Lagrangian of the optimization problem for the max-margin \
classifier (in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ")) is given by "
}], "Text",
 CellChangeTimes->{{3.6005128770847673`*^9, 3.600512943813957*^9}, {
  3.600677425738347*^9, 3.600677480971018*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["L",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   StyleBox["=",
    FontWeight->"Plain"], 
   RowBox[{
    RowBox[{
     FractionBox[
      StyleBox["1",
       FontWeight->"Plain"], "2"], 
     SuperscriptBox[
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", 
    "+", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       ")"}]}]}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600512955178851*^9, 3.6005129730155067`*^9}, {
  3.600513906229238*^9, 3.600513910547207*^9}},
 CellTags->"eq:hard_margin_svm_L"],

Cell[TextData[{
 "where, for simplicty we have divided the squared norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "2"], TraditionalForm]]],
 ". The objective function in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") is convex and differentiable, while the constraints are affine function \
",
 StyleBox["(each constraint can be expressed as ",
  FontSize->12],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          StyleBox["w",
           FontWeight->"Bold"], "b"}
        }], ")"}], "\[Transpose]"}], 
     RowBox[{"(", GridBox[{
        {
         RowBox[{
          RowBox[{"-", "yi"}], " ", 
          StyleBox[
           SubscriptBox["x", 
            StyleBox["i",
             FontWeight->"Plain"]],
           FontWeight->"Bold"]}]},
        {
         RowBox[{"-", "yi"}]}
       }], ")"}]}], "-", "1"}], TraditionalForm]],
  FontSize->12],
 StyleBox[")",
  FontSize->12],
 ", and we can thus apply Theorem 3 to get the following KKT optimality \
conditions:"
}], "Text",
 CellChangeTimes->{{3.6005129784631653`*^9, 3.600513025922779*^9}, {
   3.6005130576397543`*^9, 3.6005130974873857`*^9}, {3.600513365653596*^9, 
   3.600513516719843*^9}, {3.600513650699325*^9, 3.600513760507359*^9}, 
   3.600517241981903*^9, 3.637577872750004*^9}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   "0"}], ",", "     ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                          ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, 
   3.600513870738564*^9, {3.60051722534639*^9, 3.60051723159496*^9}, {
   3.60051890411646*^9, 3.600518919036416*^9}}],

Cell["where the first two conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}, {3.600513867266624*^9, 3.600513867631464*^9}}],

Cell[BoxData[{
 RowBox[{
  StyleBox["w",
   FontWeight->"Bold"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"]}]}], "=", "0."}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
   3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
   3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
   3.600158661435207*^9, 3.60015866767249*^9}, 3.600513864747818*^9, 
   3.60051392712012*^9},
 CellTags->"eq:hard_margin_svm_w"],

Cell[TextData[{
 "We can then plug eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_w"],
 ") into eq. (",
 
 CounterBox["Title", "eq:hard_margin_svm_L"],
 "), to obtain"
}], "Text",
 CellChangeTimes->{{3.6005139229439096`*^9, 3.6005139327340612`*^9}, {
  3.600513998355977*^9, 3.600514040753975*^9}, {3.600514214591071*^9, 
  3.6005142148630037`*^9}, {3.602857905701252*^9, 3.602857907301415*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"L", 
   RowBox[{"(", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], 
     "0"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox[
         StyleBox["H",
          FontWeight->"Bold"], 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}, {
   3.60051411622726*^9, 3.600514161953629*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}], ")"}]}]}], TraditionalForm]]],
 ".\nWe note that both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared form this problem. However, after solving for ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ", the optimal ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " can still be obtained using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_w"],
 "), while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ". Indeed, by left and right multiplying this constraint by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and summing over all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 ", we can compute the value of ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " satisfying all the constraints:"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.600174352033383*^9, 
   3.600174383955019*^9}, {3.600174491817814*^9, 3.600174537941121*^9}, {
   3.600175445275632*^9, 3.600175448682406*^9}, {3.600175506253343*^9, 
   3.600175508667962*^9}, {3.600175871676817*^9, 3.600175927236977*^9}, {
   3.600430909988146*^9, 3.6004309310256977`*^9}, {3.600514166631318*^9, 
   3.600514195458735*^9}, {3.6005152064756107`*^9, 3.600515283881835*^9}, {
   3.600515344928915*^9, 3.600515409862432*^9}, {3.600518062887248*^9, 
   3.600518095663272*^9}, {3.600677531332918*^9, 3.600677573255021*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["y", "i"], "-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "-", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}]}], "=", 
  RowBox[{
   UnderscriptBox[
    UnderscriptBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["\[Alpha]", "i"]}]], 
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], 
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{"(", 
           RowBox[{
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "j"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], ")"}]}]}]}]}], ")"}]}], " ", "=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]], 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "n"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "n"], 
           RowBox[{
            SubscriptBox["\[Alpha]", "i"], 
            SubscriptBox["y", "i"], 
            SubscriptBox["\[Alpha]", "j"], 
            SubscriptBox[
             StyleBox["H",
              FontWeight->"Bold"], 
             RowBox[{"i", ",", "j"}]]}]}]}]}], ")"}]}], "=", 
      RowBox[{"-", 
       FractionBox[
        StyleBox[
         RowBox[{
          RowBox[{
           OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600174127286213*^9, 3.600174151893757*^9}, {
  3.600174192850265*^9, 3.600174297068885*^9}, {3.6001743312244453`*^9, 
  3.6001743320502377`*^9}, {3.600174395426324*^9, 3.60017448222078*^9}, {
  3.600174609257825*^9, 3.600174620294325*^9}, {3.600174700488557*^9, 
  3.60017476750701*^9}, {3.6001748058235807`*^9, 3.600174817131991*^9}, {
  3.600174862424131*^9, 3.600175009763543*^9}, {3.600175081076378*^9, 
  3.6001750843648157`*^9}, {3.6001751300761957`*^9, 3.600175142796803*^9}, {
  3.600175178151023*^9, 3.600175202209634*^9}, {3.60017552263131*^9, 
  3.6001755621461077`*^9}, {3.600175619176784*^9, 3.6001757437281857`*^9}, {
  3.600435176945134*^9, 3.600435180026492*^9}, {3.60051426419655*^9, 
  3.6005142837214518`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Alpha]", "~"], "i"], "=", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], TraditionalForm]]],
 ".\nThe Lagrangian dual problem can thus be defined as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.60017522567037*^9, 
   3.600175228536392*^9}, {3.600175718035424*^9, 3.6001757187181892`*^9}, {
   3.600175750944895*^9, 3.600175831350972*^9}, {3.6005143339971437`*^9, 
   3.600514339262733*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "\[GreaterEqual]", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], 
      StyleBox["\[Transpose]",
       FontWeight->"Plain"]}], 
     StyleBox["y",
      FontWeight->"Bold"]}], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox["0",
     FontWeight->"Bold"]}], ","}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.600677610391242*^9, 3.600677616531293*^9}, {
  3.6028583730545607`*^9, 3.6028583827818108`*^9}},
 CellTags->"eq:hard_margin_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ".  The KKT conditions guarantee us that solving this problem is equivalent \
to solve the primal max-margin optimization problem. Note that this is again \
a quadratic program, with simpler constraints, which can be solved by using \
off-the-shelf the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver. On the other hand, the prediction for a given sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 " can be computed with"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005456864968147`*^9, 3.600545700613552*^9}, {
   3.600546086295779*^9, 3.6005460870879908`*^9}, {3.600677628407139*^9, 
   3.6006777163858547`*^9}, 3.6015586551940937`*^9, {3.601622748825629*^9, 
   3.601622815469157*^9}, {3.6016231250698767`*^9, 3.601623127931273*^9}, {
   3.6016232604861717`*^9, 3.60162326741459*^9}, {3.6016233002996483`*^9, 
   3.6016233228344*^9}, {3.6016234515069513`*^9, 3.6016234630445004`*^9}, {
   3.601623543396038*^9, 3.601623545576292*^9}, {3.601623613108419*^9, 
   3.601623643378582*^9}, {3.601623826542027*^9, 3.601623827898641*^9}, {
   3.601623922085689*^9, 3.601623934134159*^9}, {3.601715356947105*^9, 
   3.60171540012154*^9}, {3.6017155563549356`*^9, 3.6017155944614773`*^9}, 
   3.6028579410764847`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], 
    RowBox[{"(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], " ", "+", "b"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "+", "b"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox[
         OverscriptBox["\[Alpha]", "~"],
         FontWeight->"Bold"], 
        StyleBox["\[Transpose]",
         FontWeight->"Plain"]}], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["k",
        FontWeight->"Bold"], 
       RowBox[{"(", 
        RowBox[{":", 
         RowBox[{",", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}]}], ")"}]}], "+", "b"}]}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{3.601715407263446*^9, 3.601715444664547*^9, 
  3.601715481756896*^9}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["k",
     FontWeight->"Bold"], "(", 
    RowBox[{":", 
     RowBox[{",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}], ")"}], TraditionalForm]]],
 " is the vector containing the inner products between all the training \
instances and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 ".\n\nFinally, using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"], 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}]}], TraditionalForm]]],
 " and the facts that by construction ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", "1"}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"]}]}], "=", "0"}], TraditionalForm]]],
 ", we can compute the minimal geometric margin as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005456864968147`*^9, 3.600545700613552*^9}, {
   3.600546086295779*^9, 3.6005460870879908`*^9}, {3.600677628407139*^9, 
   3.6006777163858547`*^9}, 3.6015586551940937`*^9, {3.601622748825629*^9, 
   3.601622815469157*^9}, {3.6016231250698767`*^9, 3.601623127931273*^9}, {
   3.6016232604861717`*^9, 3.60162326741459*^9}, {3.6016233002996483`*^9, 
   3.6016233228344*^9}, {3.6016234515069513`*^9, 3.6016234630445004`*^9}, {
   3.601623543396038*^9, 3.601623545576292*^9}, {3.601623613108419*^9, 
   3.601623643378582*^9}, {3.601623826542027*^9, 3.601623827898641*^9}, {
   3.601623922085689*^9, 3.601623934134159*^9}, {3.601715356947105*^9, 
   3.6017154776947517`*^9}, 3.607433809000391*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], "=", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"j", "=", "1"}], "n"], 
        RowBox[{
         SubscriptBox["\[Alpha]", "i"], 
         SubscriptBox["\[Alpha]", "j"], 
         SubscriptBox["y", "i"], 
         SubscriptBox["y", "j"], 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
     RowBox[{"-", 
      FractionBox["1", "2"]}]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "j"]}]}]}]}]}], ")"}], 
     RowBox[{"-", 
      FractionBox["1", "2"]}]]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{
          SubscriptBox["y", "i"], "b"}]}], ")"}]}]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]], "=", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubscriptBox["\[Alpha]", "i"]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]]}]}]}], "DisplayFormula",
 CellChangeTimes->{{3.601623144017231*^9, 3.6016231451197367`*^9}, {
  3.601623205236801*^9, 3.601623208445745*^9}, {3.601623275581362*^9, 
  3.6016232794166937`*^9}, {3.601623336392014*^9, 3.601623425424549*^9}, {
  3.6016234710926313`*^9, 3.6016235157209797`*^9}, {3.601623561558578*^9, 
  3.601623604321465*^9}, {3.601623654255562*^9, 3.60162365866744*^9}, {
  3.601623692867774*^9, 3.6016237267201357`*^9}, {3.601623878819889*^9, 
  3.601623907696751*^9}, {3.601623941178073*^9, 3.601623995593197*^9}, {
  3.601625248429729*^9, 3.601625263276997*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support vectors and generalization  ability", "Subsubsection",
 CellChangeTimes->{{3.600516572783146*^9, 3.600516581479706*^9}, {
  3.6005167168202353`*^9, 3.6005167209714613`*^9}, {3.6005189316224546`*^9, 
  3.600518931785338*^9}}],

Cell[TextData[{
 "It is important to note that due to the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ", only a small subset of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " will be non-zero. Specifically the only ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "\[NotEqual]", "0"}], TraditionalForm]]],
 " will be those for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", "0"}], 
   TraditionalForm]]],
 ", that is: only the training points with functional margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", "1"}], 
   TraditionalForm]]],
 " will have an ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " different from zero (for all the other points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " must be zero). These points are the ",
 StyleBox["Support Vectors",
  FontSlant->"Italic"],
 " of the considered problem. \n\nAn important theoretical result for Support \
Vector Machines is that the ",
 StyleBox["expected ",
  FontSlant->"Italic"],
 "generalization error of a SVM can be obtained by a ",
 StyleBox["leave-one-out",
  FontSlant->"Italic"],
 " argument ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". Since when a non-support vector is omitted, it is correctly classified by \
the remaining subset of the training data, the leave-one-out estimate of the \
generalization error is given by"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.6005165851954737`*^9}, {3.600677757555637*^9, 3.600677789539145*^9}, {
   3.601386623921225*^9, 3.6013866239214*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"#", "SV"}], "n"], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.60051574189585*^9, 3.600515750787139*^9}, 
   3.600515781307664*^9}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"#", "SV"}], TraditionalForm]]],
 " denotes the number of Support Vectors. \nA cyclic permutation of the \
training set shows that the expected error of a test point is bounded by this \
quantity. This gives us another criteria (besides the maximal margin \
principle) to perform model selection: when comparing two models with similar \
testing performances, the one with fewer support vectors should be prefered.\n"
}], "Text",
 CellChangeTimes->{{3.600515758635311*^9, 3.600515893314638*^9}, {
   3.6005162249309397`*^9, 3.600516380265181*^9}, {3.600516451187839*^9, 
   3.6005164690412903`*^9}, {3.6005461027436113`*^9, 3.600546157811988*^9}, {
   3.6006777934200277`*^9, 3.600677797195367*^9}, {3.6006790967491913`*^9, 
   3.600679109313181*^9}, {3.6006791538231916`*^9, 3.6006791542853107`*^9}, {
   3.600679203770637*^9, 3.600679222444211*^9}, {3.600679429138935*^9, 
   3.600679431559985*^9}, 3.6013767001944304`*^9, {3.607433896546997*^9, 
   3.607433913774089*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074339017542343`*^9, 3.6074339076858997`*^9}}],

Cell[TextData[{
 "A code snippet implementing hard-margin SVM and showing the support vectors \
is provided below, where ",
 StyleBox["KTr", "Code"],
 " is expected to be the matrix of inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["KTr", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], "\[CenterDot]", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}]}], TraditionalForm]]],
 " computed using the training samples\n"
}], "Text",
 CellChangeTimes->{{3.600515758635311*^9, 3.600515893314638*^9}, {
   3.6005162249309397`*^9, 3.600516380265181*^9}, {3.600516451187839*^9, 
   3.6005164690412903`*^9}, {3.6005461027436113`*^9, 3.600546157811988*^9}, {
   3.6006777934200277`*^9, 3.600677797195367*^9}, {3.6006790967491913`*^9, 
   3.600679109313181*^9}, {3.6006791538231916`*^9, 3.6006791542853107`*^9}, {
   3.600679203770637*^9, 3.600679222444211*^9}, {3.600679429138935*^9, 
   3.600679431559985*^9}, 3.6013767001944304`*^9, 3.607433896546997*^9, {
   3.637578920429126*^9, 3.637578920971682*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainHardMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nTr", ",", "d", ",", "H", ",", "f", ",", "a", ",", "alpha", ",", "b", 
       ",", "margin", ",", "sol", ",", "obj", ",", "constraints"}], "}"}], 
     ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{"f", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"a", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"H", "=", 
       RowBox[{
        RowBox[{"yTr", ".", 
         RowBox[{"Transpose", "[", "yTr", "]"}]}], " ", "KTr"}]}], ";", "\n", 
      
      RowBox[{"constraints", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"alpha", ".", "yTr"}], "]"}], "==", "0"}], " ", "&&", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", ">=", "0"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"alpha", ".", "H", ".", "alpha"}]}], " ", "-", " ", 
        RowBox[{"f", ".", "alpha"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "constraints"}], "}"}], ",", "alpha", ",", " ", 
         
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\[LineSeparator]", 
         RowBox[{"AccuracyGoal", "->", "1"}], ",", " ", 
         RowBox[{"PrecisionGoal", "->", "1"}], ",", " ", 
         RowBox[{"MaxIterations", "->", "100"}], ",", " ", "\[LineSeparator]", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}], 
         ",", " ", 
         RowBox[{"Gradient", ":>", " ", 
          RowBox[{
           RowBox[{"H", ".", "a"}], " ", "-", "f"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"(", 
        RowBox[{"alpha", "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"alpha", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "<", 
               RowBox[{"10", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "8"}], ")"}]}]}], "&"}], "/@", "alpha"}], ",", 
            "True"}], "]"}]}], "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", 
         RowBox[{"Total", "[", "alpha", "]"}]}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha", " ", 
           RowBox[{"yTr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}], ".", "H", ".", 
         "alpha"}]}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"Total", "[", "alpha", "]"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"alpha", " ", 
        RowBox[{"yTr", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"alpha", ",", "b"}], "}"}], ",", "margin"}], "}"}]}]}], "\n",
     "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600545717875956*^9, 3.600545751119782*^9}, {
   3.600585819582821*^9, 3.6005858288391867`*^9}, 3.6006042128918858`*^9, {
   3.600604265210268*^9, 3.600604273450542*^9}, {3.601588478974782*^9, 
   3.601588482089418*^9}}],

Cell[TextData[{
 "\nAs before, we make use of ",
 StyleBox["createData[]", "Code"],
 " to draw a datset and then we obtain the 2D training and testing matrices \
and labels, using ",
 StyleBox["getTrTeData", "Code"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600546320652032*^9, 3.6005463437612333`*^9}, {
  3.6006790268837757`*^9, 3.600679140519519*^9}, {3.600679171350915*^9, 
  3.600679201241987*^9}, {3.60067923626015*^9, 3.60067935278434*^9}, {
  3.601376421303667*^9, 3.601376633858713*^9}, {3.6013766911938267`*^9, 
  3.601376696855672*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$745 = MousePosition["Graphics"]; 
     Private`p$745 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$745], 2], 
          Union[
           Partition[Private`pt$745, 2]]}, 1]]; 
     If[Private`s$745 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$745}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$745}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$745 = {}; 
     Private`s$745 = Private`s$745 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600585746776744*^9, {3.600590623675686*^9, 
   3.6005906310066977`*^9}, 3.600590726854548*^9, 3.6005908772505617`*^9, {
   3.600598917722591*^9, 3.6005989405406446`*^9}, 3.600599110860197*^9, 
   3.600599443958766*^9, 3.600599582535881*^9, 3.600602782182436*^9, 
   3.600603523385064*^9, 3.6006039456721487`*^9, 3.600610585106822*^9, 
   3.6006129988954983`*^9, 3.600613812201179*^9, 3.600632644271154*^9, 
   3.600671117325617*^9, 3.600671642243865*^9, 3.600671803735737*^9, 
   3.600672265501902*^9, 3.600672525891562*^9, 3.60120637038491*^9, 
   3.6012094371933126`*^9, 3.601211467232752*^9, {3.601212264674571*^9, 
   3.601212290791333*^9}, 3.601212668249308*^9, 3.601213356535677*^9, 
   3.6012140404884243`*^9, 3.601214608386944*^9, 3.6012180046242743`*^9, 
   3.601286273026966*^9, 3.601295890024681*^9, 3.601296909804433*^9, 
   3.601297170515983*^9, 3.6012976621200314`*^9, 3.6012988950067387`*^9, 
   3.601298947215431*^9, 3.601304693568375*^9, 3.601372885156996*^9, 
   3.601375277266766*^9, 3.601559771884309*^9, 3.601562166577299*^9, 
   3.601563112101934*^9, 3.601571645145769*^9, 3.6015724894480963`*^9, 
   3.601626156297797*^9, 3.6028568557453737`*^9, 3.602859724608704*^9, 
   3.607430517929019*^9, 3.607432448405761*^9, 3.637564725159348*^9, 
   3.637565525882448*^9, 3.637565654749401*^9, 3.637566042202242*^9, 
   3.6375733611127863`*^9, 3.637581899581437*^9, 3.637582140909525*^9, 
   3.637582201539864*^9, 3.637583464261553*^9, 3.637585525828174*^9, 
   3.637588558654112*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nIn order to train a hard margin SVM, we will use the code ",
 StyleBox["runSVMExperiment[fTr,yTr,fTe,yTe,trainHardMarginSVM,linearKernel]",
   "Code"],
 ", where ",
 StyleBox["linearKernel", "Code"],
 " is the function used to compute the inner products between the samples, \
which is in turn used by the training algorithm to compute the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\nIn the following, only the Support Vectors will be marked with thicker \
markers (squares and circles), while the other training samples will be \
plotted with small marker size. Furthermore, in order to high-light the role \
of the Support Vectors (the closest training points to the separation \
hyper-plane) in the following examples we will not plot the testing samples. \
\n"
}], "Text",
 CellChangeTimes->{{3.60137662712603*^9, 3.601376639247032*^9}, {
  3.60137668044366*^9, 3.601376811776379*^9}, {3.6013849649473867`*^9, 
  3.601384971557229*^9}, {3.601385365180463*^9, 3.601385409684113*^9}, {
  3.601385995761528*^9, 3.601386003469253*^9}, {3.6028581504826813`*^9, 
  3.602858159332988*^9}, {3.63757932841257*^9, 3.6375793740726624`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"runSVMExperiment", "[", 
  RowBox[{
  "fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainHardMarginSVM", ",", 
   "linearKernel"}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005898842524137`*^9, 3.60058990481599*^9}, {3.600590770279476*^9, 
   3.6005907805314817`*^9}, {3.600590906007497*^9, 3.6005909295274487`*^9}, {
   3.600599100001532*^9, 3.600599103254562*^9}, {3.600599690230921*^9, 
   3.600599690557418*^9}, {3.6006105474506817`*^9, 3.600610631784918*^9}, {
   3.600631686689803*^9, 3.600631696086622*^9}, {3.6012171377628727`*^9, 
   3.601217160028503*^9}, 3.60121856408537*^9}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxl3Xe8j+Xj+HGkUommlTJalCgln4auT6Ut2qGUrFQ0VKJIg4qMNFTSQihJ
Rsi67ZG9js2x98hoSPken9/9vM7vnPqnx+vx9r5v9znv531d133fzinT4Jl7
GufLkydPzZPz5Dn6/xmlCrU6/PX+5JaqxZu++UxGMnhG+Q2dVu2L3eO5m2oW
L5rdbUs89nP/u3+N3Whym/Ou7Lw39kfLLi3Vscue2A0uanrwm3y7Y1dq8+Ws
SS/tjH14TsbXa3dujz3z6N/nsW059790S+yGR/dXY3PsS88cfuieiRtj/91k
x/xnrtwQ+5dRZft3Hrgu9scn1m37benM7P0dff3i1dnH83D3e6eduSL2kf/9
lxG7Z5+nv79q+6LYVW5ZXfv5xfNjf7Xk6B5mxc4o+WLDOXdPjV10Rt9Wr9cY
H/uNBx7N+goNiT38g8efvaZ1j+ztVf4h6zvSM+hq/zw7YUPhYbEXPjOi0N9N
ktjD97ateNLaqbFf/fbo32h27POGPHbdaWctiN3x5P3dl126OPbuJ9pv+uLm
pbGzvhhXNX54Rez/fblarI7dLZTc+8eNmbEn7dpYfNXcdbEPfjboxqTOhtjl
bm/ZvPfGjbEf+uO6jzs8szl2137HT2x6aEvsiffN335Hh22xD+T79IxKp+yI
feHR4/lsZ+y6R7+c5++O3eXo8f24J3bm6qz/Pt8b+88rJrWo1fDX2Kd0zvoL
lNsXm4+Z9UZe9J8vFkcfmg/Nh+ZD86H50HxoPjQfOfaf5UPzofnQfGg+NB9x
f6mPeDypD82H5kPzofnQfGg+NB+aj7i91IfmQ/MR35/60HxoPjQfmg/Nh+ZD
86H50HxoPjQfmg/Nh+ZD86H50HxoPjQfmg/Nxx3t79+1c/bC6EPzofnQfGg+
NB+aD82H5iPH/rN8aD40H5oPzYfmI+4v9RGPJ/Wh+dB8aD40H5oPzYfmQ/MR
t5f60HxoPuL7Ux+aD82H5kPzofnQfGg+NB+aD82H5kPzofnQfGg+NB+aD82H
5kPzofmY893+wV//NT/60HxoPjQfmg/Nh+ZD86H5yLH/LB+aD82H5kPzofmI
+0t9xONJfWg+NB+aD82H5kPzofnQfMTtpT40H5qP+P7Uh+ZD86H50HxoPjQf
mg/Nh+ZD86H50HxoPjQfmg/Nh+ZD86H50HxoPr7ofe6m7++bG31oPjQfmg/N
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
0HxoPjQfmg/Nh+Yjx/6zfGg+NB+aD82H5iPuL/URjyf1ofnQfGg+NB+aD82H
5kPzEbeX+tB8aD7i+1Mfmg/Nh+ZD86H50HxoPjQfmg/Nh+ZD86H50HxoPjQf
mg/Nh+ZD86H52Jv35MseGrQr+tB8aD40H5oPzYfmQ/Oh+cix/ywfmg/Nh+ZD
86H5iPtLfcTjSX1oPjQfmg/Nh+ZD86H50HzE7aU+NB+aj/j+1IfmQ/Oh+dB8
aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD4G7x43L0+P3dGH5kPz
ofnQfGg+NB+aD81Hjv1n+dB8aD40H5oPzUfcX+ojHk/qQ/Oh+dB8aD40H5oP
zYfmI24v9aH50HzE96c+NB+aD82H5kPzofnQfGg+NB+aD82H5kPzofnQfGg+
NB+aD82H5kPz8fTKp5/u9+qe6EPzofnQfGg+NB+aD82H5iPH/rN8aD40H5oP
zYfmI+4v9RGPJ/Wh+dB8aD40H5oPzYfmQ/MRt5f60HxoPuL7Ux+aD82H5kPz
ofnQfGg+NB+aD82H5kPzofnQfGg+NB+aD82H5kPzofkourHbcf0u3xt9aD40
H5oPzYfmQ/Oh+dB85Nh/lg/Nh+ZD86H50HzE/aU+4vGkPjQfmg/Nh+ZD86H5
0HxoPuL2Uh+aD81HfH/qQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfm
Q/Oh+dB8aD50vH9ed+uSP/pn+9Dx/nna8f552vH+edrx/nna8f552vH+edrx
/nna8f75/7//o/fP0473z9OO98/TjvfP0473z9OO98/tz/1zx+P+edrx/nna
8f552vH+edrx/nna8f552vH+edrx/nna8f657bl/nna8f552vH/u/e6fpx3v
n6cd75+nHe+fpx3vn6cd75+nHe+fpx3vn6cd75+nHe+fpx3vn6cd75+nHe+f
px3vn6cd75+nHe+fpx3vn6cd75+nHe+fpx3vn6cd75+nfe2BrAMI+5N3bm86
c/VbS+Lv69Tt619RrcC0X8PNpa59el7zvUHnfv8tVYs3ffOZjPj7P/35fCcu
Oe2rZ/cnWydM+OTSv5YkR788jX7/Nay59rSyGztl+/R6/P2h6eveb/veb/8D
euTp8OQJ64K/76rqM3+488P1sb1+4nPHdX7/p0VJlp6sD9Sa0PnjvjVv2bgg
vq69Xmj8DacePm1+8tYLaxrcumVlKD1zYv/H3pwdX9deP6/IPxVmZc5IShe7
s/AbC5aFcg2vHnrFdVPj69rrFX5sWfWLzyYmY8cc/W9JqH+ocevC+8bE17XX
m3645s313w+PnfnwDyWfmvdd8j9e3ywMmWVCw7KdPsl+PW2vH7es9aybLmoR
NhxbufwjpeeFfce92rf3vK+C17XX1y/s3O1wncGh+NG/zoEZ4Yl5d1a7eN+I
+Lr2eoMqSyrXrjo+1Pxw54rqMyeFQXdW/PCG8ZPi69rr3+bZV2h5/WmhwMij
J4SfwzfDfur4zDG/xNe1179u0jr/cf3mxJ7X+YtQs+/8sKlTr6wzyLfhziZ5
2n764sL4uvb6rNBg9MabF4cfXzl6gn8s3FZ8yu+VimXE17XXp+87v8or25aG
Z65pfdzID/onN81+u8W00cvj69rrk7/ZNvjUzitDjaOHW3pUcn27O3Y9XG91
fF17Pak96KIBFdeG57LOdsdfOyk559Pjh//ZLjO+rr2+psOoe75sui78b3OP
z0h6tXji1+p3r4+va68//GiJ97ZftSF2iRqzKr5XdmP437fvg7nJiv+0mVPl
pE3xde31T86/pNnK/ZtC1ocj6xS+MKl92poTX1+1Ob6uvV7kSNdvL5i6Jcy+
u2rWkLAkydgRbp09aGt8XXv9w2V7Nz/XY1v43+m/07Lkvqlfdyjabnt8XXv9
tKH3nDfu8R2hx9Hx7auVycIvjpnc4K6d8XXt9ffeHf5Ygat2xb6rVeM8P5TZ
HQ4fHT9HrEkKNS7y5b0n7omva6/PvXt6tT/37Qk/Hh1ONmcmzmde18aD3Oeb
mfVGXvSfLxbH85Hzl9fvaH//rp2zF8bf/5z7/DPnu/2Dv/5rfuwvep+76fv7
5sbfH537/NN7z6NPFhn6S+x+1/ba067w9Pj7p3Off77ruOyFbc0mx354UPkD
33yYxN9fnfv80+iW3v+0qjUqdrN1JU6oceKQ2Ll/X3zu84/fBx3PN7l/X3Cu
84/f/6lz/77I3Ocfv+9N5/59YbnPP36/j879+2Jyn3/8Pgft59fr3D8fPff5
x88r1rl/Pm7u84+fT6lz/3zE3OcfP49M5/75WLnPP37+TDwf5fr5KLnPP37e
gM797+Nzn3/8+1Lt39Pp3P8eLPf5x7+f0Ln/PUDu84/nZXXu50Fzn388H6Vz
Pw+U+/zjfrjOfT849/kn3n9LO95vSDv39c/c5594/Snt3Otf5x/npzhfz5ru
ndtsXSi3uPChTqctSfKXu++O1yatDRXK1Gh34JkFSdbq5Pefv18VHlt1yglj
e85Krn7msr77eywPT7TseHq3+6ckWbOtuy55PSOsL53/2imlRyfPHuXw1KKw
dczI5gerd09OOvrXv39+2P3z9aWuatE31Phr6cDh7X4JWwYMfrnl5FHh9Rt+
ytrllNDs6rWVt/abHJqffv6YK+8eGxp91aTcmTt/CT/emCy/+sDg8P2q2jV2
blsYihz9+BXrEgZ0Kzn9jc4Zoe//PrBfJ31vyLy+eKUVYcvQo4B/Sr462Gfs
4AWrw9GjPXfIhKTm4mFnnTs6MxSYVa3Lj6umJbMHnVnn6XfXh4VvHp2gzklO
fKFclUdv2hRqfjFx18ZPFyTv3NmpxXdFtoRhh+65fuDgxclxF+4cfHDL1lDs
wY0fPjd1adI+T81d//15e2g77MWtVVeuSPKtGHxR5047w/qsT/s/e1cn1301
6bi21feE866cfUuDNzMT89NaxbM2cNn6YP5a8qmuo4f0yww7T/777J61FyYL
W79b5vOqa8Lan1rcfHyzOUmzsw/NySizMmypteOuFRdMS7JWAy+fUnBZWLNo
+oi6k8clvRstveD23xaHZW9Pq11r3pdJtQI3L3ozc0HY0f+Fe4vV7Rl+fPCJ
Iy9/NCfsOLjjyNrSP4XNX9xce/cT08Pu+m0P9loyMZTM+uo8dt3EsHla/h0z
S8wMvevmO+O780eE3Xv6D7o578JQ4n9/oT5he++nyq3usyRcV/3of+2TzfdX
6vP8zcvD1Ufn88mgZH2B/WefuG1VGPrU0W/gmGR3vYdqzL8pM/Q9ymna5KRZ
1XEdzyq6Pjx94bzMlvtmJt/9Pa9xwQUbj45mk/MWnp+UW3pZnwd7bw6v1+hU
dMZ5i5J+P36Q2fv5rWHzgLOe6np1RnJep4Nn766+Pdxx7KDx9921POnd8MGH
riqy8/99npusStaUf7LqRfN3hzPHz2u87pW1yQ95m4wefVf219t46vuRez3g
dR58f4zX2vhq/m581bw0Ln9n1/P/mB7HV/N346vmqfnkqZ/8MXRCHF/N342v
mrfto9vc/PHKoYnxznzaeKd5e/bts0bdnX9CHO/Mp413msemu3oPevW26XG8
M5823mle6997UZ+BXefG8cR8Nf68rLT5PGfesYcO9V4bxxPzVeOJ5rfQxEaj
Z/ReF8cT81Xjiea7c89pv5/+woZ4fjd/dH7XfE85/fOan83PPr+bPzq/a/5v
2PXPu5u/3hHP7+aPzu/a+WHCtPozL3t+V/D5sb40n9POB09ueeShTeUXx/7u
0KCx4fpF8fNkvenzp50/nr7is8yab2d3vW6L37yn2rz4+dyQb/CsZ2fOjJ+/
Hb0uzLix/aT4+drc/L8TL3l1RPZ6MV0/xvla2s4/qwq3+Dhvix9ib/x2+9eL
K/SPn0/rSfM37Xw1ot0tZ65a3Dievw6MnDW/zZdvx8+r9aXPt3Z+21xq5hlN
Rg6MveeGch1ue3VI/PxvfOj5gwWbjI2f7+2nX//s5a2mxs/v+tYzGtcfNzvO
t6wXzc+08+MzRW5+9q9K2V3xmN8LfV1sQZx/WT+ar2nn02YzT9jRfeGi2BeN
GN2x6pjF0Y/1pPmbdv5t2mZO43IvZvcFT7yaf269ZdGT9SV/2vm6UaXumeOL
ZnfZkje0a5RnVfRZf/19D90/ek3098PtBXe8WHFd9FXhvKfLTTyyPs63rBfN
z7Tz/fZTSk1vsnVD7NvffqnHzw9vjD6tH83XtPGh6fbX8g/9Obtn1F++KH/F
zdGr9STf2niyefL66//ulN03X33NqXcdyR7fG31evd2tD2+Lvte37Df2g0t2
RL/17ypwaM0/O+P8yvrQfEwbj0pX+/mT9lt2xX5t2KlNlz60O86/rBfNz7Tx
64siZ2XMG5Xd7ab9fE/3ItnzNetH5wfrQ96t/5xvrPe8bj6nc68PrffMP8z3
dO71ofWe+Yn5oLY+dH6w/uPd+o5f6zf+rb/MX8wXde71mvWX+Y35pLZe49d6
jEfrLb6sp3ixXuLV+sjr5p8693rK+sh8yfxU515PWR+ZT5m/auspvqyXeLEe
8vm33uHP+sbr5rs693rI+sb8zHxY514PWd+Yv5kva+shXqx3fP6tZ1wfMV6a
n2k+jJ8+/3xY35hvm/8ZP43H2p83nhoPfX6td8y/Xd8wvhkvtT9vvIvXV9PP
v/WS+bv9Ge+Mn9qfN/7xwo/xz/zf+Obzbn1lvu/6hPHK+Bevh6Z/3vhlvOPF
+sx6wf6MX8ZD7c8bz3jizfrOesP+jGfGR+3PG9/4MR6ZL2rjmfHJeBZ/Hky6
PrRecT3C+GS80/688Yov/qwvrXfsz3hl/NP+vPHL+MOH9ab1j+sFxhPjk/bn
jS/Go3i/OF0fWT8ZH8wXnf/NF53fzRedj82vnG/Nr5wPzS+c78wvnM/ML5x/
jM/OL8Zn5w/js/HIesx6S/v7W5/xaj1mvaUdn/UZj9ZjfGvjm/WZ8ch6zHpL
+3pZn/FnPWa9pX09rc/4sh7jVRvfrM94sB6LP9847Tj+pOszn3frMX6075f1
mfO99ZX1k/b9s97yebW+sn7Svr/WWz7/1lc+39r4Yb3l/Op6r/mF9YDxxPV3
1wuMH8YH19fNt4wHPj+uV/v+O7/7vLg+bb7jfO377Xqv75fzq++v67vmJ86X
zoeu55qv5D7/uZ7q++V85/vr+qn5g/OX85PrpeYTzke+f64/+vo7vxh/zVeN
r7nnr66v+Hqbj/rz2nhs/mr75qPWw9p61/zV/NZ81PlBWw+bv/r8mF9af2rj
q/mo8df8kndt/Rmvb6bfP/ND45k2nplPGh/ND63vtPWb+aT5pvkh79r6znzS
99t8z3ikjUfmh8Y38z3rL219ZX5o/mi+5/ygrb/MD32/XQ/1/XQ91PfL9VDf
D9c3fb1d3/T1dL3S18v1Sl8P1ysdr+uRjsf1SH9f1yN9fq2/fL79/X1e3W8z
vjoen0/314xXjs/n0f0q5zPH6/Pn/pTxxfH7vFm/OF/4esTrd+n9HeO1r4/P
k/s5xgtfL58f6wvnC18/nxf3T4zvvp4+H+6XGC98fc33BxT/u8L3F2ckJ9X4
8Owvrsi+fzru0irbKm3Lvp7r/LH88XllSlVemEw49puCB3usjefz654vs2bQ
lFVxfTwz8/PBTfYtj+vfB2uWeL1U6aVxfWu8fzvP1AEPPto76bbvvjHDN2bf
rzQ/f/fsux8rs6JnKFJ/Qefmp82P53/nj4qFT+owtteIcNlnn42t8dovcXwq
0/LDR8evnBLXu616lzi2/tPj43rW+P7C8lk3ZHywIDRrcuKqJ/IODLl/v2zL
d/+8s2GXJWHEXSO/nDj29ZD79wk2rHZhnb1vLQ/LJlQseMK5vbN/39Z35//3
67rD43p23oHLD43rk8T1at5SZeo2b5n983s/H9L3neG3zvjXzzN9Od+eG94f
sTE0yhi46YZdc/718+veW9lhRu1hm0PftnW+3jpjQRxfTj9l9bxKny2O69Ef
e9f/p2XzpXG9eVKVjRXGh+x/L2b8Hx7WrWnRb3fo9d63+8q9kn0/zPWVmwpe
O7TX3XtDo00Va32wfm24oG/1I4XqLUhanten8jl/rQpfXVpmbL3rZiWvNyxa
5NvTV4S/i/3c+vNJk5Puvd/98/IKS0P/fL2fHt1lVLKv000FWzWeH85YumrD
+rF9Q94Pn1977OFfwoqe43/79f6fQ/7THu531iVTw/GNp1f7+YIp4YLSHVc0
GDs+9G9T6bXWvWeFnsf/WbnDr1nrxE3PLL/w9hXh5Zt3ja/Sc1jS4tc+h44v
sCZcdHvJy078T5J888+Okw+sz/rc9vvm7j1PTk0+yP/WORsnrg9X7CjW4/I2
C5Kap33S84lSW8LOgX2HDmi4OLmtWOWBdf7ZGv5odum8s+9Ymlx8zuwxt63e
HlZcMnbH+5VXJMXPazL7qrE7w9iyrzfr3yYz2Vvs2r5rO+8NDQtMe+isbZnh
74Fjn+y7clFS4IFk97dDM8Nto8reXLfWomR8rTyfTdy+JlT56p3bppw9P1nV
K2PL9llrQr3BjzQ9dee85KcuFfe9XnlVqLr7pepPXzUzqfif0YOOPW9ZeP20
92/a1Glccs1LFbu/d+2S0HTam6/PvGBQUn1E7xfOun9h2HvMB8f8elyd8Pn2
S36ssXJu+P63sd3/M/KHUPWt2XdsbzI3PPz96WveePvHUL9pm/rFrpgZSldc
d/7MnePCR7dXePHmvFPCtgeXjjj+26nhxjFfL1l858Qw/IWRZ2w8d2Y42OKM
q5b8PSJcOa3bxQtrzQ9XrPmlS94J/cLxCyfXGHry4rCzxi99l2yrmaxZ/Xvz
92ctDTUHdsh34X9bJ+svuercX65aFvJe9uvVd43snwzadnG3Fh1XhgIVunep
sb9/Ur1rhZ/O+mBl+Hph07Nvf3REsmx3qVua71wTbn3l1m13vDI56ZtvwOTr
yq4Pz//9aNkrb5+ZtC9ww+KKeTeGza++9FDp4vOSVwut2nhO5qawPvPAmJ2H
5iX3jWo5fXm5zeGr1265/dgXFiYPntHyYKFkS2jerve9a3ssTLo3ffa9N5Zs
Ccd1vf22Wy9dkgwp9mSdi9/YFu78fN91Q2YuTfLPbFh2ccUd4aZPulSdePXy
pGTZd577sOTOcEqd4vddWXZVcmq5sm+0/2tXuLzEN88OPGFtsuuSse+/sGJP
aDi+0TFbuv77+ZPl/23Sf1PFxclFB8s2m3z+v58v2d71P71qV8m+3/DTUzde
ct5zs5P1D076NrTOfr7k72/X3tzpoeznSYxnZ4w+s+zHL2Wvx2Yfv7XIia9O
SR6bet0rf/TLft6kZdGHi93YMfv5Euu5wg+MPqlt+wlxfTblluJ5M8/8Odlb
eUyNIYuznz85ucOybX+N+PfzJlduHLd9atkhydVLD75186eL/vW8SdMZz2We
NfP5ZFT1FrWPTJv/r+dLej3w6Orq9w4KbzRafe+z22bF50nGFyjW9dgfpsfx
2Pib5/kmn2V0y17v3bYjs3ar6yeHF0LGb+uqT4vzxyUbTrnspROynyeJ68XP
CzU69prpcf1Xvta1z7x/xazwcYl5n9771YQ4n+za9vQBC2aO+tfzJUXzPvly
qYrzwiXT3il5+J4f//V8yWNDG8zo9d6isGfPto5tL/zwX8+TtG/03qLynZaG
K6vWeuTg4U/+9fxI8yLj14x4c2U44cRq085vNuhfz488u+e+Rm1fWx3+LtL7
1LrvZD9P0nJehc8rHfk5zi/MJ+6csWPbjW2z16Pv3zWx6rHjsuZjj/04q+WC
sXF+e6Dz5xdf0Df7eRLrm/zjOr/cdEz2+vT98rXHzfp5fbjt/rWTbjt5yr+e
Nzmux7l5Ko3aEMLJT9Ys1X72v54nueyZ0R0ODt8UDnwyaskDZyz41/Mj+W+9
+6SxQ7LvN7QaXrJmqR+3hu4XX5v/i83Z10uLLz/n8XvzZ/+8GPObEmW2vvfG
D9nr4/pdhi3a9P32UGp8UnnTqOzrp/881fujnhnZz49YXy/689Uitw3MXi+3
bHJ7ne+/3Rnm3HXjYxXezb6eetc/509ZN+Dfz5NsX3hmr8IDdoUzvi9w4cfT
/v08yfqB35fJ6LsnVC817aJnamQ/P1Ll3tVV8jdeF3YPblV6T4klycA65Svk
r7MuNG5asvAxh7PmxffcP6RWwcyw7vjybYf0XpDsumNBuV01FoWJhd6+49pG
7ycf1mnQ4/3ii8KWYfmbX/Fm5+Sz20d/Vf61+WFmRp0Xkm/7hMYvnffA63Nm
hdLND+W94OqRoem7oVK3V38IReYe//HjcxeGM/7u1mdzge9D9bNrzJh3+aJw
TsG3Lv70pC5hxfJrRt3SOSNMO/265a/81jlMahvqlumSEc5cv6753Wd9lhRf
U3lni83LQ8H7SuxvU35O0rLgPx1b/3dTmL2gxrQ3H5uTXJ75Z4MO92wKN7aa
u+yi2xckXd7bf3HFI5vD5+1bjl1+6ppk98Vrqs67ek8YNqnIN1VvW5N8mndx
sZcf2RNmNX30zruey0y2LNv8bPcOe0OBLw4U3pW5LqwbdkXGVXUzko7jfni9
cvPMcMaAPD/V6bUwOX30gs179q0OXf/z6YX7x85JnvooX/Mr260O+2s+lZG8
Pzup+udNv7x80sowp/RlmypfPy355K26L83ZtCJU6tp+aMnMqUnTl4a+3qjG
snD402vO3l83y8m6I6vGV18cdvTrs+j5Cn2Sz0q/MOG2egvCpc/8+VSJDh+F
W5L5t3y7Y3Y45d25pabXHh6erfZzoaTk9FC1Xq2F5w6YGFrWWfzk4J7TQrvf
N5w3otakUOya9u1WPz4x/Djql1vr5JsZSpas27TrOcPCOb/csa5ktwUhX4Pv
l23J90X4Y0m7fH/XWBKuGFR47xMvvJfMWjfs3NUnLg9V1jRetfrFwcmXu7ZU
Hzcj63wwrFjlVhWyzgfXXfDqlLA67Nz3WP3Jtcckow6fPKxm1ry8/55RBUq+
PyZpNa9ggXdrZIa7eny/Z+1fk5KZ7Y5bcPmf60JmuXGdll81K2l1YulKi7/a
GB6/f/u6x9rPT+qfMjpMabc53Fmk5T8ZTy1Kaha5767hj2wN295qOfeDDYuS
H/+760DGwK3h8qV5z6pxb0ZyTcnd9ftW2x6WfHTOlMNtMpKtezePa1d7e9jZ
d9rPjYssTy75OvOtcsfuDO1331KgQInVSbGL8qwu/9nusHjpE++Pz5OZHCo6
57eC1faG6d17nDKqX/bzI66X3rZl9xtVuu8Nn/yxtfcfvdeFPUMeeOXD0UuS
Xr/XaHnS2OznR97q+tppJU9ZFa9Hju36wqs1jlkVMsp9e9eMZEZS4fDhDYur
LY/XHzPmbH1s6VnLQ+lTry9UoPrE5LsnWv/U5amMeL0xs2C9mxpckREO7xvy
cbf3hiX5F9Y5v3zRmfH64vdNi7zUoODM0OO7H+aUvHd8KDbonhk9W0yO1xPH
bv6nWqtqk8POZuHbmt9MC2MKf5xRrNeYeP3wqZlzTyi5enRo177/jkJl5obL
r/326a0VRsbrhTV79e/WpvXI5LWDj/54zy1rQ5HJD32Y75qJ8fpgobt2vDbg
3ay/d55fmn76xrrwydYGv763dlp8XqPlwnyj3687PXn9uEatOz62IdQafnjF
kIozkuMvzdNz1TcbwjsH2n42sVb287+tr1/U5OWHliS3ljjluCOfbwv3v533
lwJls5/3/Sbfo2/uuWFZUqb0d0X2tNkR3ive4Y9aB7Kfx3hh8vYvG120Mjnz
guoXrn1oV5i1fHLV+1dkP39xpMHo3RcMzJoPf7um8JFrFiUnlcl/fcP12c/3
H3vstgnLnl4THrr2/tXVDs9Nuix/t3aVdqvCLxUaH3f6kZnJSe3eOlzs0+Wh
zyXdS896a1IyrFieayd8vDwcf+bfk+95c1Jy+rNrjvvxSEZovPy+P2sNGJkM
e/CFUnf8mBHWHCp/zPmFRyTPfFX1nCfzZT+v/07TEzv/NXRJuLfY00u+P/hj
cuZjV556S5PF4cAPhRqe/lbfpFmFoiP7T1gcuo344Lsvyg9IDp48fE/ZS7Of
3z/rnq5nrZm9IDx472VDN57aMTz71Ls9Ky9fEF76snKbjme+HQ79Vv+NkWPm
xvtJmfcd+evlDXPC2W8+MPyyFUPCrf9Uv/iK/L+E/r2vbPD24jHhuTaX7Lut
ypRwzBNv7j+mydTQovao07f1GheKFx+/4ruHZofPD1zcIpk9Nrz12o4qU9bN
Dlfv6Na60+8/xecnNl/dtFzRJ0eF51sPaXZ4+LzQtWSxajdVHRaObX7PkQve
XhA+u2Xk/MsK/RQqzGj+1kt75oe7bzim3cqHv4n3n/6ZuGf2DX2+Ds/Oual7
q8zFoerbp4wbndk7/LHo6/4PDlocxp7y0d1r728Yn5eonPfKz0c99XoyZ+2S
GVWfWhYWb6zyxMfTs5+/f/XtgSd93GNgMmDHCduLll8VOjx3+4XLO/6UvLj/
9fsH9V8Tar6V/1DLBhOS9v07Nltbdl04b/TY2RkfTEhGHqk7ZlrldeGkb+7b
dOtHU5M1D75Z5Z1560OTaxcfO7HBtOTDYw/OGnHqhrD25c2llg2ZGe83FZ/c
d36JGb8k5xRo+8+lbTaGMz7omnH8Db8kr58w5PW8d28Mx3y5q02TB+bF+0ld
T1x0fOsC85Mmhe94/9dKm8OtDQ41e7lt9vPzn8x65LzdexYmt565qfe6QlvD
sN/GdO6+dnFya/Gva1eouS0kI2/59rjpS5OLSl3zRMlLdoQlA3teUaLhiqR0
63o72qzcGZq2WjT1lR9WJOXPX9K6YMFd4dD6ad2er7cqPs/w1bCnB88dvDK5
/+4VtRYM2RV6j77hojcPr0pqlX9w+Pnv7A6X9L20YqkvViV/lOte6cE7doc+
L94+fnSltfF+09szt5fa+dHaZHKzAdc9XmJvmNxo7O0fdlibvPrxmV+de2b2
8wxXDLps+62XLEnaP77/7oKvZT/P4PrZOYt7Nnrj0kVJo2sbvrjgkuznG1w/
21x9xdDtzecmdzwzuuDxL60O3a5Y/dyAtrOTe36ouLd7txVhb8kXK23NOzWp
s6v3opIDlobeJ5ZYUavgmHh/J/+hmws2LzwuWTimxz3L7sx+PuGB8qef1/2V
7OcTRlxSascH92Q/n+D6W9F6q1tX6jM0fNe/U91d500LZz520jtPb5kUZp7/
fJljHpgQklbP/1KxYfbzB4VbfrNtVtWZoV7tgnfceP6weD/2n6v/uLHns1/G
+6mDFr5+65DH3433Q12vO27BQ0W6vJP9PMKGNzqWKfHGqhBKvPfA+98NST7f
M/XLBk1XhybnJDOa3DouGfJ3m/plPsiab5/60udnPz8l+eCYos+d2iL7+YG2
z+87q+fV68OF1cuN/KtE9u/beHh40ROnPpr9/IDredefX/rCC6/YHC665bP/
FKyc/TyB63mn/zPi+12Xbg3nP9ZlWbJlUXJb0cl/v/XD1nBZ2eIHr5iXkVx8
dr1CL3XZHgpu6HvqdyOy1q/n/n7O482ynwc4+ceNI1++aGc4Z/rjDx17WvbP
exhXZ0fHGhuznwcYP2jBjMIXrgvH/dBz6m2vLM5aL/Y547pKmaFEv7J1hx9e
kPTrWfTF75qsDWV7N+n7xLj5yYQeW/NlzFgUalR8/M/uj/RKzsg7umb+BQvD
sjV3XjNn0WvJjCUPb66/bn6Y3HV58WfbfRmuee3hRucsmhcWbZ49+uTR34b+
5Xt/sHT/rPDH+ze/+/DSEWHD3sNHtlccEkrMLn/tpIoLQ5ErOjxy65ffhbzz
N/1a8OlFodfwqlXrVu8R9iytV6/3ziXh8SevWvBXyVfCxpXFT9918dLwW932
3X+v/EmSbOj+6hvfLQ/FVl755AnL+iQDttx5xZxtK0Lm45c93eieGUmH4xdd
8PCQDeHu8TuuG3jZ7KTNSd1W9du7MbTddmv/mmXmJq1Pbl61xnubQomv8o69
Pc+C5PFTy+/qMW9zSKpc+mzJPxYkj55+/K3XPrMlvHDVo+v3frQ6OeniZzod
3r47XD6vS49JXdYkf1e4c9PXnfaEW9q+eGTodZnJi5+0v/O3RnvDnzfW69vw
7ZVh4Xm7erZ9bXry2xsL3t79Zdbn8OQOtcfln5CcPOmmp1qPWhJK7LiqwqFT
hyQHFm6Z9N4ZM0LlOh+UXN50Qihx9/yO/W6aFNY++9cjn26cHqp88dzXrXaN
Ci+90/DrOvXnhdXT8/9R6omfk2d+r3bSH5vXhnM2F6/yctY42SPvVUWaLVwX
WnTe/t+GS5ckV53VbtiCXdvCq3e2rLds/LLkrDLFp0ycvSPULpTv5Tv7rUwK
Xjhs8ZCBu8L/AXPshsE=
    "], {{
      {RGBColor[
       0.14800000000000008`, 0.33000000000000007`, 0.5400000000000001], 
       EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnXWcllX2wGcYZt55533GWgNdMVABExW7CwXFQlEkBLHWtdZuFCkFFFHs
rrVbEBURRAURO1bXWDvWWFtRd/2dL+f7/IY/zuc+t/vcU/c+Kw89us9R7erq
6o6o1dU1hPteeP4UH0sE3NRSV9fUvq5uk4BPi7q6m8M/K9y1I+2FAftF+nXC
vaiWYWdG3t4BuwZs2j7zVgIej7jpAV2a6uo+CffjgBkBmxnfHDC/Wle3G+U2
prt7wJD43iHiFg9YIqCH7p8CdtRdMuAjy/8x0m8Z/paAWsDmll0N2EKXuGtr
WQflXx/udQF7BGwfcYtZH+XR7v9Vs/wPAx4LeDj6NjpgTMAjuue0y37NDOgX
fZwW/nMDxgY8ajz+qQGjzL8oZdVyjJ6MdjwS30+FOznizg4YETBFd2TAQ7rk
/yDSPupYTfObMpaupZ9vxpr2dm3KeMJ/i76MbcqxHxfusvaRtE/YfuIp//1a
tumBqO+sgOEB20VbF3WMtnKMi4CdA5YJ6BDQK2Bp/T0DltK/HGso1tRnATdH
uTcF9A84xbncKWCf8O8bsEIl0hr/YHyfajzlnaZLPSe7Jsh/umG05diArQO2
CTjDsF0CbqxlHZR/QvvsD3N+nGm3DThel7iT2uf6o44TTbuD8Ys4Fk0tWeYe
lYS+8b1nJfv9QfT1w4A9I6wP89SU621Pvxta8vurpgTW4NdNOV7k+6gh+8EY
t9rGVutmfIn/uCH3wPsNWR974r2G9O/k/qAtywZ80pBzUI16BzC3lRyTG2rZ
buaP8kjHHL8T7rsNuR9w/9WQ+w+XOuj/2w2ZbpPIvynzGevkfsoOeDfW27vh
vyPgzoC7A04LOD3g46h7VqT5JNzPWLO259lw5wbc0ZxhTwXUor33mO+MgC8j
7IuAZwJWC5gT0DPS32v8sIC7Ak61vo1r+U0b7jP+TMuhrlMib9da1k29AGXf
2Zz10w7au3wt9wl7ZKbf9S3Zb/r/YTX7wtqlb+zzvQL2DphtOxdpSXe2bb4s
3MsD3m6XZVxay/Z+XM04wreo5fc78f1jhF8V3/+Nsd/SvFuY5xL7SfzVpvku
0l8R31ewdsO9EjxXy7ArDacdT8d3r3D/He7ntfR3cvzp+79t89KR5pN2iRce
DPisXeIscNWnhuH//zoov5Zt+h9rx3m4S9zJ2PQVr/VxvMCLU8WN7/n9akN+
/yvgoYAiYErAjRE+2e8vqpmHeM4VwiabBngQvMOaZixr6ads6vuavK7bj+tj
/7heWXfv2V78zAvrmbl41/KPYe+ZljX4kevsftLrMl7dW+OcjPnfK87QD017
n+cDY7CP4zfcM+C1qGsSuKIu1ynrc/GWPEtIu6/pdg/Yw3y76T/Lc3g3zyHS
9vMM2dOxHmE+/BtGuS86DveE+xw4LcZhxQifF99vRPj68f2C40y/X7DvnC8v
1fI8ut+9Rf2M7YvOHTjhecY3ylytJb/BD3fWsvyvoo+dWrLetyK8l2u4p3ti
E3HL5e4F1jy46v6AB8RTdwTc2ZA46baA2xvyTDyM/Rhteyv8txr3ifkebMhz
8K8BnWNf39qS6W9pSVxJ/GRx8X3WB26+V/8d4pc7xSu7tEsaCFzVK2Bn8F9L
ln97S+LK220rOPSugLvF17j3iMfvsY5/2SfS3RvrZnyUcV+417fkmn4t4B8N
ua5vbkj6Bv8bDUnvvG48dBBp8R8T4zs42nNsuLeEOyRg62ruG9Kwdwg7wHBo
lb8ENLbP+ZzqOuEc5xwZXsly/l7Lct+wLX8PeFP3loB/6t5qO2603Z85xlMY
g+jX4VHGXS1Jb1LvTZ5XA61r6ZZsH/24Kr4PAc+Ee3eMyzjOinDnBtwT38+G
u0jAoPjeNvZfP9ZfQOeAfQJWCVg1YGKkOTbSXBhu3/B3Mu6s8A+I8PaRd3x8
HxHf54V7TsCh7MVwTw/oF9/3h7t/5FkzYK2AQQFr6J8UcSdFmouLLPebWO/f
1mXduN8FnB9xR0aaCeHua7toa/+ALgFdAwborh4wUJc69rNPpPsqxmNSlDM1
yhkVMDS+R4d7cbgrRvyeAb9GfbMD5gTMD3haP+14PGBGXbbxsYDpAf8JmKb/
l4CnzLNB1NU94HXwQy3TfB3wc8CTpvspYJb+7y17ZkCf+mzPSgF76a4csLcu
c7BYtHtItHv7GP9b4nt0fN9a5JhNt623hX9MhN8e7g+W/UTAj7rUzdkMDmG/
cnYcGnBDQ+J81s9H9UlbsUbBE5yVPTwfr/Qs40yb1z7d58L9vprp5kmjveka
/2t8byzf9E01vw+TXn7DPcH+PzngFPc37qnuleMCjnev4J4gbjgt4PSAwy0b
Hot9dqx5wGsnBpzkHjtB/12WfZq45yTr5vw71j14lPwSfNIRlg1/doy0/tbS
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
tO9W5bbvKLuFNvk26ptuO96ERgm4pX2eJ0eY/5+Gkf9d80HbLhLz8ke0oTXc
18N/I3QMOhTjWUOvODbXt895/bUx6RvsLNDjM/c/2u9ZTYnXGT/OrlfNd0P7
XBfzGzP/a4ZR36XuM8b65sY85zhPwMXgZGTz/7BdN7dPuolw8PlN1kOeN4yn
/+BN5uu9aFvnSNulljac4MjOfv8c7Xky4KmmxBO4Twf8ZD+IY99gt4FtxaDw
rwFeCfgm4DHHnXXXHnoqYNOAJs6rppQ7PtOUtBR7+q+WhW3nYe5b5gTbZeya
P4p18CJ0cJH03YvSeLcaf6J9O8484MvvPZvQX2OLjKxppUp+Y5Nc15pptiwS
RxxmO7aM8F3hj7BrqmR/WEed0BXYv1UrGcYav836oZVXrmTZpIMef0mafI0i
5ZQfhNu1kmuCsdwioNqU/NDmAc36r3VcsQHZqinpYGjBLU2Lf61K4u9fGftK
zhlztXoly8a/diXjfwvYzLGnDs7UZ1vShmizIu2n/xvu6kWG/SvcjWIcNovw
IfH9fpHp3yuSR8FGCjknvF53vz8usr9rh7tOJetknj9on3zOva7BY50n1uwx
+jt7RjNfm0YZr7eknRG4dNVa2kuDL1fx+6Cm5J85nw5oSr4Cvqdbkfk+C/eL
Isv5N/ZW4l3S7e86Zc+t3pRn3c+NyXt3NWyg7hrO5TTXdGnDga7hfc8Q+sYY
zw6YY9m/NOZ+5r4C5Xe1LOohbhP3BPvhwKbk7ekPst9prk9wAzZM2ByByxvc
S5sUaaP/W5FnQDvjrnO9kAf9+HcteQZhx4o9K3clVi2Sz3w13D+KTLNFkbjm
b87HDdaJv66SPA38zHxxAP3E9h99DPTHUMd+XdfZHPd2l0rifdb6apXcK98H
dK6kSxxnLbQK5WAf97V2efPE9eD+Itbh/6AdW9Me4NVa2tX3aMmzinOK84pv
5APbtWSf6S86sJ7arfZsSZ4QGmO91tQz7VmkzLynejT4RdJw5wW90mu1tDH4
Z5F2mY8VqWvuiO6iXeqgl9e/mzYL+KEDXnWtogNdKWBl9Z7kW7Fd6klXNA4d
ErqkB+tTj4Q+iTB0dh0ClkU/25LtAT9jO/16LWnCThH3H+wvsZeM7+/D/QE7
y/j+rj79q8b3t/XpH1Ak/9+zNc+ApR2jnkXaK+8Q4fsWKXvaqTXHjjTLtEv9
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
zo4ldO0qzg1ztar0L/7VjMffyXjm6mnbPkk89bC4hP3/kHV8Lb4o71FNq7Td
l3rMdn9lvkfFEchLuHeI3gN5DbqPWcpRPhFnTbGOz0yLv0+lTTfLvQC+eW9q
s0ra3mETh20td+q4t1feqcPPvbaH9HOXiftv3G3iLhp30rjrBl00xXSNnn0/
hbt4Ne+1cWftfdOSn3tUk83D/SfuQXFHaslqpqMe3t3g/Y2zi7xbtEg17xmh
a0anhY55iWqWTVvKO1SU9anlUceHtre8U3Wf6batZpmLVvMND3gW7k1gn/K5
dbSXdvqhSL4O/u6wInVf6MCQ13GXjjt13HH8rsjwQ8I93LzQX9SBzRG2YYtV
02Vc0Kf1UJZ1qLQZNBp386ZZLrqynsqa6OudjvvRjjO0BveAsAPiLbHyPiHp
2rWm7dmLRdoz3GEbynuV1PGVc44f2h99LvQ/dgK46Ox5vwRdCW8mLFPNcWS8
l67m+OJfqprzhr9DNeOZW+5MfuqcL1vNMPzQ0J+5dtiHX9qWP1VzPlkH7NWv
bG+nao4L4921mvf2uL/XuZp3SLm/uUo147n7uWA/N2e50OaUQf614ns+tF3A
6tUsgzufa1TT/SVgzWq6pCvvdlIWtP/n7om1q1nGbwHbV3NeWe876LI2e+jS
p12rORb0ezvXHXmwR4KnRFYIf4m9E/5PHTvGjPdd0E/x7gSyFtYSa3c3y6Nd
vU1Lnp7VnA/mZ+dqzhlzsk412/t7wO7mo387VXPvkaeX+cizo20nDnkXskDk
XLtYHvUhj2B9Im+mXO4Qz3Vc5uiHBocuhCa9Shea9GpdaFJ4aN5pgY/G3oq3
WdA7Q9dDX0KTci5P8Gy+xnxHVJLeJx6a9Apd6luhNcvkDRhw7qhK0nDgRe66
jagkL3GQdUyJdBMj/eQicehI87D2R7gnppiPOGQ5yEkZG+YHGQHzyZsZ0Fvw
fryrgf1qqZvFRRYDfYyNMjbL0M3YAWDXvIEuds0b6pIOmh2baWyoN9UFd6M3
Rt+AroE3adChw0NiS8730t7vO9vzY2PrpCzSYydP/ktbss3Qh530831FS+p5
0UUeYd2cG+gVrzCc9xe5n4bNBDpn6Mw97Tt54XsZkzrjjpX+gt5CJ4m9KTYC
yK6wYeVeGnp49Afo4qELoLnhFaAb4EngJ6Aj+umHvthX/9PqE7h3NsF88Bzn
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
4IduN6zUZeGW+iVceCB0e8PMc5dh9OdW20i599g/eLIHLJvz5l7DyN9BehD6
E5z9uGN3vm3EFghcCZ8JjgN39tMPPt1P/86WSX29bRflI9+EJ4Zv3c36S57v
LNMtanwpj9/WdVrKUsk/SHqZt8WQK8J/lPLXtV07Jc9JO2g7tlzf26fvxPUz
DMNfymepAxnnjvp72Y/TrPtEx7SnYYw1OB4+r5QH4I5yjOCzznGMxurva9gY
+3qCa2YH5/pE+zPEtcV51d/xPc920w/Gepzlomed4FztZLtK3vqUahvPfbJ1
DDAt5XHmnO18cKbBM5bygxHGoXO9wDr62L+RroHvlId9rx0SNqfl/WFsMfdS
zjpKWdv5yt6QbyHnQibHXT7ukHK37wzvrnHPq5RnId/i3RPugHIX9DTvguE/
xTDukZaysBHK+SZYH/IodGqPKpfCf47ywXHKC/dTnjhOueB5+pFpjbEPfc03
RtnWWMviPhr2GthpnG7bad/+yr/o553a7r1r3Pva3V2pDexz5vvAuNJWA/n4
bdpeYROFzBXZa2m7cbjpDlSuhzzvdu3U3naM3rPuocZPUh53oe0bopzxQmWE
k/Tv4VjCc91h2ymXu7blW+Z7yLdhb8F9SOw4sN+oaJuJjWazdqObaZv5kjak
2Gi+rB+7zlf0Yy/H/TbuuWFHzb1D7uvd4Vt68Cal3Rt2cKeqB0PPhe0eNnxP
aSf6quViH42d9GvaTz2n/Rp2YM/rx6btBf1X20b85Z1t7nDfYBmUi10u90S5
H8rdbuLxn9ac+k3adLH2bbO1b3tGP7bc3DMs7xTilm8L4XIfHnvpjU2HHfUm
+lu0dyvvs27h+DY53pvYpq1MV2hDt5V92Eb/hY4TNuCTbCNjh03eXNt6q+sO
m7w628V8nO9eZw4mWkZpP45b2qE/YbpbLKO8F/5m+7Z70m9odw3vd5V7gv9h
/Mv53kxeEJ0jMutLXeusfXQ/C3RH7RPvkH9n8Qh7kbeuh+kv9UzonY61bu7F
cof5FtvFnU7udpZ3gnHLu9fXWAd3Pq83Hfc2uc/JPc7jLINyj7Fs4nrZFvBW
qfcq9WC46KnQOV1m30p9D/of3rrBngp7LPRC6Ifwl/oh/Pxb5j3HCzth3pPh
bRn+N/O+cdj69jAOHdJG1tEoHgHfYLe5o+k2EvfQxlKXVurWLretR9tvxmLD
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
j6JXZy3T1pUtj7b+R5v29cP9P9xk/h8=
          "]], PolygonBox[CompressedData["
1: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

          "]]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnWW4ldUSgPc+58Dh7PMdA8Uu7Li2ogI2NmJjY2BQAoqgiAkieO0ODDAB
O66BeQ0MVBQDsTCu3a0oeudl3u85/phn9nyrZtWsWbNmrd3x0EG7D6yrVCpX
NFcq9YG7NFYqAwOOCqhrqFQ2DNggoCpeP+Dk5vxeH7BkQI+AnQMejwx+DPgh
4NGA7wO+C3jMb9B9AsYFXBnQL+DqgKsCjvTbFQGnRv6nBHzbVKn8HfR6kfe6
AXPj9zqB1w5YKmAXy146YFfpijyS5s/6jLtWwJz4vWbgfwX8UZ/foP+qz7zJ
9/f6DF8j4Ah5uTzgcPFlAYeJLw3YK2BswJiAngFnSu8d8G/pgwMuCrgwYE/j
nhGwT8BZxtvDb6MD9gs4J+DsgH3FxDsk4GLzOjTgEune8gL9iO39bUD/gGts
3762Me0+IOBawyjvgYD7AxZtiXarRZlF9H3Q4403MGCC9BdN+XtQwDLRRrvZ
7r2CviDg/IBlg97dsNUDDgw4IGB6fY4nxtHL9Tl2oF+J3w2OJXhfIfDyAS/V
Z1z686n4/WvALwFPB/wm/UTAzwE/BTxpOPR//fajY27FhswXeuXAKwV83ZTl
zohvi0XdO0XdD4y6f16fY4txzZglLum/sm7Um3JWC7xqwDfxu2Pg5RqyzFUa
sgz6gHoQNrU+xxZ8P1OfYxH62foci3NMt1/AvvK3T8De5ruHbUpee0qT1xq2
MeP44ICD5Gl/8yK8l33wL8N72b57mRft0lN6RcuEnlafc4M592J99gNz8YX6
xIQ9V59zjDo8b9w/7QP4KNtiX+tzQszp4QGfN2X/wftqwgHy/UV9zmf64CDn
DWNr/4BznRsbhMCqBtQFrI/wkl4r4I9q8BCwdl3iuQEbGrc+oHNAY0C7gE0C
2kp3MrwhYOOANoZt5Dfodeoyv78C1ovff1ez7P0DVg1YLeAA8eoBB4rXCFi3
LtORZr/4vYppNg2oBTQHbCYuArrIY1NAVzHxDgr4V8CaAYdY57X99nvkPSdg
SPzeImDLgPPlo1fABWLyuFB8cMAxAZubZrA8wcvRYsKOsK1p+yPFtOtF5gEv
F4sPDTjPtqDs4wK6BWwTcLx424Bz6rItaL9hAVsbb2jAVtLHWo+tzHdt++Fc
01HG2QH7mlcv25v2OFCZdB5yI+b3UwEdLHuhgIUDHlZeMo8fEn+tTGQsIg9O
ijF7YsBXMW6nGI48eFD8pXL0S9OwVkxzTlzp/GHesB48bDkjmlP2jFc2Ix+R
eawPU8z7DDF5H2A9zlWOv2S+Y81vivKaPJGpV1gmfLAGvGwZ1xgOfZk8Pme+
yM3HnWNg1m36YIGABe239rbdQu0qlfdDR/ggYOF2iT9szH6a3zSMp5aA+ezD
+QzrZn7tHVuF8cZGm4wJ+Kgx17mpyvsLxawDrJeP2I6si49Kny2/j9pOT1gf
+v9J6QvMA/piZTFlXGobII8vERN2sPOMOXZ4Xc555gD9vIx6x/HNuR5uikxk
ngdeJ6BNwMYBGyEX6/Lb2shK8gu8ZkB9QKeADQOqyLWA9QPq/Ab9N+XWZ74V
w6F/Rn4EXiXgl/i9Wn3SvzH+A69en3rNYQG9A25pU6m8F/BuwLKx3m0dc6FP
rHe/1mVc0q9j3EPRneqSX3hd22+HoCMxt+qzjDl1WQ/on+qSl5UDfqxLvFLA
D3WJV5R39Cr0qZfrsv7UtW3AJrZXg23WyTqjb/W27dB7DrF9e0tTPjrWQfJ6
iPQLUb8i8FtRzrcBy8fvjgHf1yUvKwS8Fr8bLf/1+N2uPuk3kLf1Sb9al+H0
54y6xPA4M37X6jPed3WZH2XMqstymwPerEtMvFuj3WfbB+vZBtTt9qA/CHg/
YE7IlycCnx+wZ8CYgDMCegacGTA2YJ+AswL+HbC3mLC9DB8jTAl4MGB0wAMB
90t/FfBlwGkxbn8M/F/Dvgj4PGAPyyTdbgGnB4wK2DfgbMveL+Ac6f0DzpXe
3XSk2dV0IwN6UF7AqQG7+A26e8ApAScH7Gw49H3y8lnAf8SfBtwr/sSyHwt4
1LIfl74j4EPb9M6Aj6TPMu4jttfDAQ/Zfo9In9cm2/+/1um/5ntXwP/M6+6A
j6VJ823AN7b317bvA7YxbXqP/H5s/zxk3IdM97Vl0Bc/yMt35gu/30s/Zjj0
bW1yvDCeWIvQEdFNkRdHOseQH32kn6hLecEcfbIu5QX0U3U5/6Gn1uXcRn78
17jM46f9RrzH/cacHhfwUsCLAc/UpSwg/bN1KePmGF5Vbl0ev6cFPB/AhnNC
wPiAo8TXBgwQXxNwpXm/UJf6yY0BN9SlTgK+vi71nJsMG+y36wIGiSeYR0U5
Sl7gv+QFjGyeGPB2XcqKm8WzzA9Z8Lr5gV+zTMLftGzwTPmaaZqu9bkusH/q
ImZfNcE8kCtXBUy3na6uS5kI/ZhtjKx6ri5l8R+23VzpRw1H9jwiRs79rynr
Msl2fMV8adcZ0uMtH/pI2/qKupR9nZXFfexjwvrJH/wiQ9nH7qF87GIa5GBX
6ZrrYVdl4l6mYX1gf7uv8renYSv7bR/XsP2Nh5ze23jI0c3Ml7XqAOOxZrDX
7SffA6Q7297QnzZl2sK1hbh9XbdYN3q53vR1zrAeHmgZaxgOvZI8whPtyDrA
GkafsY4x1i9yLjFvLnZuQF/i3IC+1H6FfraWfYWOPNSxyBgcZh9C97cv6YNj
DWcMXuaYIK8LLfMp+/IFxzh6MvOZuctegPmPPFjL9Zx94zmGM+7OFjO+zhIz
vi4wb9KfZx7k+0HoEM9FHWYH7usYYdwcVpd7HnSm3nWps0Mzrtg3sN96K6bm
zQETA94WTwp4Rzw54F3xLQGzA24NuC3gwYAzAsYEfBBwe8AdAZ8G3Bvwn4AP
/XZnwCcB9xj2nvndavo9A/YKuD5gcMDRAdcFDJK+JqB/wICA9y2f8iYEDDTe
+ICjpK81LvQDAaPl9b6AUQGnB3wccLc8/S/gLumP5Bf6Fcsmv1ctgzJflz/4
fc1v0DOMO97y9rBuY61fz4DuAYsHLEE5sVc8KeDkgJeDvtrypgdcJf1SwDjp
mQE3BNwY8Kb4poBZYvryDfki3osBV5r+hYArpKfY7vD1fMBlAZcHTBNfYdn9
bPcdAxYNWEw++hpG3MMDjqikzL1eGVzK6+uVtROkpzs+mUelrGd+zXI+Qb/t
N+ZeKd8JK+U79FPRXhcEXFhN2Xq183OGchb5Ote5Wa4z0+pa1x8w69IrpiPN
j85B5tT3zrtyHXjMsFfNm/qUcp94Q0KXOybg1ODnLvvzlGqO0REBJ9o/QwKO
tZ/AQx1nJwec4vgDn2rfHmMa+q+P7U6/Hm3YFbb9kfbrkca7xzxOq+R8A4+s
5Jwc6RxgTh8XcHwl5yJ4eCXnJPiESsqAYcabKL/QtxlO3ZgrJ1mH+ys5t5hv
d1hvwqaEfHowYO/4jS5A27Pm7hDkIo6t7QIWDugQ8Hkl5yr5fSbf0MzzrgGb
VnKed5H+wrjM9SHR7lsEbBkwNGCrgK0Djg7YLGDzgGPExBscsKlhg817M9sY
vLltumFAJ/sAvJFzALyx/UHcLeyHDUzT3/BN7Kv1DUM2dbYOAwyHHhR8dJWn
Y60HdRhmPbrBJ3vegKXj94Mh92fF+rpy4IODXjNgrYBDxGsH9A5YJ2DdgMOx
nQWsH3CY36D7BWwUsHFA34BO0oeaB+n7G75JwABx54ATA3YI2DHgOHncxnmw
U0D3gBEB2xvvhIDtpIcHbCt9lPl1CRgopi2ONz/iDbGNtwzY3vGyiPOJb1s5
RrcO6Ga7tg1oNGz+gAUMBy9oPHB7+6qNaTrlcMX0Oq+fGwzrbH7t7OM643Xx
W3RHZRvzWyhg14ClA5YJ2LmSsn/JgJ0qKVNZD7Y1LnNgl4ClTMO6sXzACpVc
T5YL6BjQwzyIt5t5Lxuwu3g55wa81GyzloD5bKf5bAvkTXf5mhRjamLASpWc
zzsZxjxmrrIOnG55lDNSXqnfKDFhp5ofPJ4mJt5xtjVtc7yYeg8XIwOYc8FC
JYbzvLlYk97cb9RhT9uAdulp26xYSbmzu+10gvkxRkaIqcNJ1oO6Ic8YE4wF
dMeXXKP+VKd7Xjk1znULe/SrMQZfq6bNGvx6Ne3E4DeqaScGz9T2/XzAtGra
xZ8NeK6advHnDMNmPDXgGW3HzxjvL9O9UE173/uBP0AORGMMxUZXTVveO4Hf
raZtmjLfrKYNGzyrmjZW0n1YTZvfe4FnV9P2Bybf3wKelg9s4j8H/qWadnTw
r9W0m8PLi9Uc8OCXqmmbfyXwjGrq/I3uS9Zzz8fEwF4013UYfZ79LHvV9d2b
Vt0XoM+XdjtwW/fRdfWttrp647F3II/SBgYubXt/2IecScDj9GqeLbxcTV45
S4Bf+pJzCcIJY49wqPoyuj06NHZHbF9/qlNgE/tLPeIM92HsrbCh0t5vVdMO
UJVv7Kp8e7uaNln66j3Hxw0BN9pn4JvsM/DN5gWe6Ni63jTkMTngFvMlfJL5
8u1W++/JaupKjBV0TXSTd4xLeuz0vzkGsQlw5sFZB/tNzl04h2FP0Un6UtuG
dhlkXM4q+huX8xzsCZ3NC9vtHMf+AMMJYyzeIU+MzdulGYu3SdMnVwVcbZ9d
E3Ct/XS1NOPxioArHZfgcQErh9B4NwTf3Y7RcebFWdCvjvdfbZunnWeXmxdz
8jJpwtAxL6rmXJ8QcF015/p19sds2/s2x9N4482QX2jm+qXmO9X8Lq7mXAdf
Us05f4nxsNO/bV+xF8b2w5xh342tCJp9OjYkaPaxl9S17msvrWvdm4Kx/bA3
ZY/K/pg98MWmQc9mr8v+d6rhhKGLs9ct98RDjYcuPsQw9Gj2utgo2I+yLy33
uOALLJs5xPkVcxd9Hb37KcPhCZ37XNOXe+ByT3yOYexx2atzflXujYl3teOV
MXiV4xUamd1H+lfLK21pT1vXObYF7VenHeFl2/RJ0/wkf6UN7wnD/jAd7f27
+ZHXi7YH5U+z/rRRaRfDTnaN/A4wjLYp7UBHyndpjyvtc2DmaGmDwyY3wW/k
e715E3aj4fRTaTdn77K/9p3VtO+sIn2A31bXfoT8btKe01aZjr2IPQ97I2xK
2LqgG7TFzLNl1afs21BbTifl+uGuB+X5w/rGw75EfuyxynML2rs8t4CGD/aW
pb0fzL4Q3n+yT+CXPSfx4JU9JzS8U2/oF2t5JsH+EjsUe072oOU5ATTnAevK
6wHao7FD93YNW1fb1UauUdjC4Km0jYEL1wPsdKXtbXnbb2/rTP2wt61sH+zj
N2hsXWu4vh1on0D3NA/SH2R4efYCZt3jbJ/zMHjpL4/0YVf7E14HScN7aRuF
xlbXWfoQ8yvPfNa2/gPMj3h97Gf6uE/IqQ2ruWc4VZv73Z4z/MdzA9Yy1kLW
SfQL9AzO4Es9A/pXZTQ06yBx0WVYK9Fv0K1K/Qa61EX+Vs6z3kOzLvDtL2U9
6xz5Htec+tPsplxDWY/RoVg30Y2gS90ImnWRc2zSI4uJi2xmnUInI97bymvq
Vup2rHfoaOheH7q+wEupD841Hmsc+gd8rxs8/RWbh78D1mtKjPK+flPiasAG
4rqATgH1+NAE9A5Ypynz2DigTUBbbK4BzQFFwCZ+awzY0DxIv5F5kKZjKNc7
xBwZXLTqtei5rL/oeaUOBYbvUt8lXqkToyOz9qFjkQa7098Bf1XSllWlz1wr
iUs8dADaijbdNPioyTe6AzoEfTBVPeU311v66T11hQ/UHS51rX3WPuDcmPS3
GJc+n+S6Sr9N9ts7rt/vm+9Ewxmz6CUfWgb9hh0VH4jOymRkNLoRaw5rDfZW
1jt0pPWV7dBdlNWkQVfqb5pNldvI8E3Mj7CufiNN6QtCvHKfQFugP30kf0//
Q69BN6LPSl3p5WqrPjXduXKZY/G5f+g0pY7zmv2DfvOGYeP9Vuo1Myzjcsc3
eaE/vSBd6mTQC7akTtajSJ2UOY8MeEp+odHXqAs6aqn7lrowmHk/Tt7JFz14
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
Ux5lMT/ecj9KG61Ry/PXn22Pa4rM7zzX0PHuV2f8Y0/LHnfhlhyn7xe5v33D
MN4f5B3C6wIv1JJ5vhu/l2xJ2fZ1/F6iJWXSF0Xq0pPVp8t5xZxiH89+nn1/
T3VW9O1B8sH++Eh1K84L8RHBV+SqIv1d8Hu5ssi7iKRF12XvPald6158ou3E
2GEszbs73pw8UdZkf5MHNoVr5AlbwrXSR9lG0OW+Hbq0WWDDQN5MNh9sG9g4
8F8sbRzQvzrvrw2eN2hJfn6Lb787jsbH96UbUy4sFfg75I9rEGsM8xu7BH32
s3pQi/OedQjZQFrkQ5eW1NPqWK/j90/xu9qSOhnfWUvbm1/p1wnGj/PPSPN1
xNmkyLK/id+nNOZ8/sb5/Y288bsHsrSWvC9gHvhawsuX8vOVv+fFqWUfYWup
FrnO3FSkToZuxjpAH+BLON0+eEX6WsfpK+1afUNLX1HwNPuEdPgcLhJ1no5u
EPmv15Jz4Zdop/1q2SbMqXHGfVFdAb9S/El/LJKf+iLr+r31Xa0lZS8yeK56
MzozegNxuhQ5Rl5zXtUi/lzW5vjeK/AftfTRXb0l/fxOie//U17MaU57E2OW
ub5AkTrqvYG3asn08xe59vQyn/mK1EvvIQ5zD7nZkrr9IbXU7w9h7WFti+/d
ilzr14nfuxfZJrRN7yL1pE3i9+FFjhPG0ZAi+3izlmxH2nONImU4d2YYuy/5
m/kFnu73axtTx0U3PLpIvbGrY/8l4w8tcr1DL96zyDDmBzoSet5a6n3v11If
Bn/o759pO/oy8A9Fft8AmdCSY5ix/IFpGfNnNucbdqxnrFU9HJN/qpNhG6E/
yfNv9z4f11LnRT/F/xgdmrYgbbsi9WDWwgddB/n9ld8+9fevRebzi23wWS3T
fWYcfje6JqCXj3Ks0OfjG3NvQDve2pg6MXrubY2pW0Pf7jt/0Hf4zh/0ZPVX
dOFbTAc9sTF1cXTwSYZD39CY+5k3XMM/ct63OCeo/xDHZmlbvdH1ivWbdRyd
6uMif//RnLZYwllDznEtQ4bNr5wo/eGvV+6je75tv18vL+yBbpZf9grouvhU
sMZ8yj4qfn8S+Jxazin8Zlln+P6tOvCrxn/dtOiW15k3+6pO6tDopzc25l6O
tmDezKqlnwR6OD4JrHM3yQvx7mzMtqLdV40+2yPiHIccMO9XlXv7KftmmQ95
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
8pAf19iXl1g+9f8/JsWkeA==
          "]], PolygonBox[CompressedData["
1:eJwtlmlsF1UUxV9boP3P/w5qtSAKKFhwBytQkIpQCpTaQmWRCmoVCsoS2yKL
lVitoAgKIm6J2wf1gwuJC4lLxC0aNWDcEJWKoBgRkH+FQtlamvo7uX44mXPn
vZl58+6597w+s2omV6eHEDaATuB5C+GCKITytBCeg18bh7AiGcKpRAjziY/A
cxmfA84kbiMeDJ8PuhMPYn4B917npceTfk9jg8AN8LfBNHhOVghvwTOZ30rc
BkYR5xHn81wxzx/latyrYGwJOA/+AqiHb2R9pfCJzF/HvGzu3U88hHgUcZwR
wkmuE4jXcD2N8XrG3wEz4XXgXXgZ46v1HeK7iR8D1fDj/O9s+H1gOvFacClz
Y+IZ8KXgfHgSTIUvBr3hpcxZyfs6eL6aOAKTGFsEesEzGD+m94ORxNlgtt4F
xsJvBvnw5aBH7HusvVZOSuC/gM8iz4FycQoMhS8AZzPWCD6HXwhaGCvhHQ1c
D7KeW/R9MIaxGnAOfBjjxYx/TfI7uB4GfSJfk9Z2EPwG3wny4LngE/0rGAP/
wzzXm4l3w58w/9dM7Qn8YrBFewcma7+03+jsQ2KD38O9uizPkXK1lriAsWbW
uwbeCRQT14Jz4TvNtfEF8S5p1fxdH4Ct8L5gk/4NjIang8LIc9oDvtJ87Afe
/yD8I/B7wvfsV/hA1pCX9DUe4tqPe58y9jHYBm/WP+tfpWn4PrAN/hMYCH8T
TJE+M0N4Q3sDxikXnUN4Df4QqNK7+GYRvLNqjHgh6AlPge3wRnCF/pX1LGMd
+5lfQbzafC93E6+C/wm+If4WXAJvV87gh8Bw+FngNnh/MAFeC0rgq0Bf3n2C
eC98Hxgq7XFvNN+bix7auW5S/hOuue3aK/NcK6fK7augCL6e/3tF+Ypd2zvI
aQPxI2Ae8V7ecT38YTCX+C/iKfDxzK/nOyniG4lj4lTwPe8Kb+PeAXgKDDPP
mXLXThwxPhJM5/ly9jvB2MvmtfMj9T/D/Bv6lnqSetMk871Tj1Gv0Zq0NvUM
9Q5pSFqShqQl5Ui5kiakjVvNtak90l6NBYuTvkdljK0D1yjfxI+q1hhfyHgj
8Xji/eZayWd/K801JW2pplRbE81zpR6XzbObpWH4HvUM+DFzLs1IOy36v8hr
RLWy0bxXqaZUW9KEtDEATJV2wHeRa0bakYalZdXIHPj7qmHphRw0se6c2Hup
nukGHyzNRV4DqoVZ5v+qHqJecqc0oG8RjyC+2ry3qkd2qDeZ96Kt0gT8AdAd
XsX8IvUic+/RnmnvRpj3bnlAIC40z73W+B58iLk3qacdkdZBTtLXeNhck9Km
7vWOvaert5cRDyderhphbiVxYew9S71LmpK25pnXrjxQXihNSVvSrLSrHCqX
Df/32nJ9n/50F/E44jpzr5PHyGt0T2PqOdcxdgeo6OKeIe+Qp8nbpClpa5pq
NsN7gHpBc9J7r3rIGYx9Ze410sBReJN5L1cP+Re+wbzW9Q1963tzr2wB6bwv
LXYuT5O3PS4NRp7D9fDc2GuribgfvH/sva1ZHhN7j1GvkcctgV9lPlc1q9ot
MJ+rnqTeJE1IGynWk6n+J30l3BO7wJ8292ZpQto4kXTtqmfkmOdMuRtATtKI
LzPvjXnqKaod81qTh/0Mb036mHpQN+LLzXuNzix71NvAl5HnTLmTh8pL5cE3
mXuovFQ9VL1Uni/v15ngXvgOcy/SOy4yP8PoLFMJVphrWtqu5Zunm2tMWtM/
dyXuGfu/7GJ+L/iV5lyeK+/VmUJnC3nKUvjf5rUjz5f3yyPkFfLMmfB/zHu3
POmA+ZlJZyeduZbBs2Jfi85cidg9Xd6unlVl7gHyglJ5krRkztWDtsCfNT+r
qEc/Y+7J8mZ53AL4SfPcylNazT1N3ibPqYE/Zb43qrknzc8gOovIQ2437/Hq
9dLgIvhL5mdH1cCL5p4ib9GZT2e//wCNfGJ4
          "]]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["

1:eJwV0ne8jmUYB/CH7HMOIpSM7L139s4uJUXWIQ2ikkhkVZRRVDJKaIg0REr2
LCNFmZWiKYoWMuJ7/fF9f9d9Pffzed/3vq9i6YM7D8qQJEm6j5MpSfJiapL8
Lj+SH9KUHGlJ8oR8kj88q2zdTF2cPZTgS1L1U5ipPmVfFXVz9QSu5E+9qnot
1CX5ilLsJad+GrPUs2lFLuuWMg9/eXefLM1KPuYGWtjTWs7hJdqSW6+NzMvf
3tsvD7CK1bSnpT3t5MuUie+w7hi/U3aQV/GPdw/KQ6xhLTfGb7Onk/yGsnzN
Yb6N7/RsrvzXu9XUN6kn8hSn9arrdVaX4zuO8H18n/4r8ow9NdQ3q58mH2f1
aurdoi7PUSrwA/n18zFP/Z99tdRd1JPiGef0fpQVWcd6utLavlvlfBZwOwX0
bovkvPd+kpXYwEa6x5nb002+SmWuse4hr5Z3RHLBuz/LX9jEZnrRxp6e8hhV
+JXj/EZBz16TF71bW91bPZkp/K9XR6+PuionYg5jTrlW/3V5yZ666nT1VJ4h
oZ5eX1mNk1SP2aSwfiHeUGfgenU/+Wz8JzJSX+9OWSNml5oxh/SniGcL5Zvc
TVHru+J/cEXMHbXYwlbujdm05x65iMUM5Dq9AfE/yBQzF7PDJ3zKINrZc598
i9oUt75fFpODZSEyx3zF/LCN7ewgCw3se0DWiVmKmYhZoYT+EpmVhuoH5TSm
k41GekNk3ZiHOMu4W0rpl+RtdXYaqx+Sz8W5koMmekPjXONO4yzjHimjX5p3
1O8yjLLWD8eZkhJ3Gb+ZnXzGI7S3Z7h8j6U8Sjm9EXH2pMZ9WzeUu/icUXTQ
Gynfj/9DBevRsrx8LM6ftJgB64x8od7NWDpaj4l7kY3jXmUWMlORZXo5aaoe
J5/nBXLRTG98nEOcrzo72ajEcr3cNFc/LmfEXbKCD7gMxhiwtg==
          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{0.05075431034482758, 
       0.31652012544185476`}}, {{0.05075431034482758, 
       0.31652012544185476`}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.12173132183908053`, 
       0.5160962488128332}}, {{
       0.33236350574712636`, -0.06896252380893925}}}]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[2], PointBox[CompressedData["
1:eJxFUg1Q02UcXsjFAvkqUSag0kG3NHd0WiNDHyAaWsANL12HSukZEChwBIQE
CAeIcmDrXH5cQTOW46PW3F2KA/1DsbE54iNgMGDAf+yDjXlsZIoiZwNzPXfv
vffcve/z+/2e5xd8LGv/Zy4UCmW346zcZ1cxTOQnzQ4vCm3IDHr8p/rqENET
v2e5TWOF3OP4/vbIASI5Uyp35c6jYJZ5qKpESYRQty9Riy0IEdZsy7krJ7oM
1zLiKGaI3yM0u+7fJK7napeusOZA7Uwr9KmREBFudP8+2hxKuzd7FTxpwtOA
Qb42aggddRHl48oWnHGlZQXbrAjj7rO7XBEj9UurIDbbDC6lMv0ldjs+6Aol
lEYjKL/c+ajfQkBdmbvYQarhU3PNrTOtAw8qmAstkdNofaPoB9XvnXj1iGpH
lkiDVq/llLl+Gb636bzXCElExqxADr5ANCq9MAObnjaRUN+NxrWs9K0nTSjY
ePSW0FeB0Kbu2InyaVDZjRcplQo894Pe9naiJEOJnb28huC0Ecw2BmScl/Yh
yvJweS9DC4WgoCyuuh9fJFWkGll6cBFoW/yjHz+WrLu9vvp//twvylffPviV
8xeOmqUPd9QasSp3fRC3OXl3woOMCHdUeyXU4dOnU8TBd0cwba9as+n0MPaQ
tU+2+ljhv1pwBKX5pk5PTwtOXP6668yjEZTbTQsR7iTY9Z339DQN2oq9xyZe
M2BikKraXavBYnKd2o1JQpD58zsWuQajYWoiSWzCRIxSFM8bx6W7pRt2jWsQ
Vxr9mytdi3Oe5dnwmoTE6OjQi3TqvXjzQmp2G4kNViWfvKFHeoWhnjVKOvV7
E5nqwH9ISD1ONatipxC2+Zzn3746Zz4861iMkqFDb5A2JZE6CDHn86eFfjPo
KYreWPKC1slNBxoC+LxJtMu4vYdq9M73IsXrM9WBBhx+a55RxNcjZQVGAxi+
n2g+PKLHJtcGc5TYiG2yY7LJqv/ycZ917l/O+wk0znEzJH4Fe0/Gkxh6mc/e
XmbGUkieTF3Xg/AVw+vNKPzucJW+WQ5bMcNjKtWC1jK2MUrUApbju37dnHO+
tWZHhwlzcNflnBhIV8A9qbiJf+AeeEUuOzm2G05uTx5+pMsdfZbXqXn4rP9J
YYltBr1vOn8hzoaP88YCzqrbcH+Lf7x3tB10yZv7Hl8dwBaHfd9ctkM078cW
lGme7T99AQdvKYWnmSr8C62A+nM=
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw9kw8wG3YUxzPd2mIMp6Y9VjYjS29oBUvpXmzKzqgyK0NLhs1UiQ6XW9XM
f6qrTW51aylF/WuNzWjX8uI/JQmJEPEv/lZITlp/amoscSfv7ne/+9y73733
+773Nf062jtMjUAguCiO8u4+qs3YKl7BTwJ//tBfawZkQX/wtm2fY6/+92E2
i1MQRApfK2uVY2ye506U3bKKc351M7LlL0PKaI/Nw/NyXCC8MUMJWQbeqomh
h6ccG4iV7V42MvjtyhHaI4tlXG9SyyZbL4FM5NxTw5ZhJ755tmJdAllaK78I
a2XowAlMciGJgXzqoAt/nwxFFGoLgyOEewdawn/IlaKLjv+67uYsiCONN9nn
pBh57OGlncAlON1T48GMXMRbie7i512jKn7XssvgQboE5Bttr91ACW7cDI/K
NZfCzhpJFmQlwcEEjZd32+ZUnB83PcGvXAQj5YO3FtA/IMvNpGoGhoziQtgD
89ii6ZQhV1+AZPfst7vN5vGbvuzxB8VC8J1lxpzmzGH6pteqP5EHqUo9jGfx
3glxGid+HhbsAzISbaax0sEtQ8ochrQI9bMVBtOYpZVCB+0JCPV+QjXvmEDr
pfam8i/mYNXg05PRx8ex1kEvVNdXDHq6yhjDxg1Xy2c0Plj//s7rJRIhvjKL
6xgq6IO7ocPmbvFCJEbfsate7IUxRfkCRyG6bvUS0iK4sKn4PhgNo86F/BU2
fwoMmrlhU68EuJ5q/6KaKoYohZxDxYPYrl+dqU0cga2ppK6j2nwsdT/ua1fS
DEfGzhS2yAawLCOxmVwhAB+naqtD9QOYVLY0wSWLoKpIcFPDvx//ck4Is4ob
UPFXtRYp6aM8uL/LXGSc8vEIDhgCwm5wcFKmmW39WARK+c4cZiNd8OSx/Cce
+O0uWB9SkoMjR3xGVBzxQiqIvySG+80+/Yuf96J+ETsndmocAq9WKip046BV
3XfXnTvArDzn2OWnnciKyWsIIRXCQcdtOmumA0vnZ2JoxZPA2N+Y9y29Axlq
B+Zp5xDyb7Sn//tZK75f2eU6liKG3Nsnaro/QLxgSqMs63BVvJf36zxECQts
Us3DRCnfZClmX7xW1XaeA+L36mgf65UgYX/9fzvU67jHe3mWB1Mqci7GJMu1
ax9FXUSWxEkxUibWq1ttW9P/gSTTgkZDXhZuidMok45NQNhd+HjkiNx81LzY
wCpwVFiuGuj2ORbP7txGKo6cXL31CPJn+wr3SaqwX9FNpHEzpOZgiG1svYqZ
CWpkX3kDEF+SWy97tgDR8EdLbkktUJ2V0QmZZmsbmVeKIFhh/zVSF7jaHw5P
iR5ChsK+5brd0JdCcjfX+BNq5VctNSd7gLr6pY1AwkDF8mqGej8FVoWfjqt2
MhruGkIAjn+HEzPK6/B/odlaBA==
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.27% Marg=0.00695\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.2270474137931036`, 1.134949712643678}, {-0.3505562321268951,
    1.0410087924734888`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6006106325864277`*^9, 3.600631791493237*^9, 
  3.601214172307225*^9, 3.601373330066465*^9, 3.601385635359026*^9, 
  3.601563388476163*^9, 3.601571808574512*^9, 3.60157267290895*^9, 
  3.601572789367627*^9, 3.602858166897682*^9, 3.60286018871034*^9, 
  3.607434037714691*^9, 3.637565075088029*^9, 3.637566148960614*^9, 
  3.637574082276575*^9, 3.637583618103953*^9, 3.637583710190401*^9, 
  3.6375856927336187`*^9, 3.637589011851235*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

As it can be seen, the decision surface, the margin and the training and \
testing error rates are exactly the same as the ones of the max-margin \
classifier introduced in the previous Section. However, the dual formulation \
used by SVMs allows to highlight the different role played by different \
training points: only the closest to the classification hyperplane become \
Support Vectors.
\
\>", "Text",
 CellChangeTimes->{{3.600677821135819*^9, 3.6006778968400593`*^9}, {
   3.600678723853957*^9, 3.600678731036479*^9}, {3.601385686619454*^9, 
   3.601385761512088*^9}, {3.60138586873499*^9, 3.601385998105983*^9}, {
   3.601386112492817*^9, 3.6013861486885233`*^9}, 3.6015586516546097`*^9, {
   3.602858233015098*^9, 3.602858233795185*^9}, {3.637579458246336*^9, 
   3.637579471458826*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Soft-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.6005166146535053`*^9, 3.60051661822272*^9}}],

Cell[TextData[{
 "A soft-margin Support Vector Machine can be obtained by constructing the \
dual problem of the objective function in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 "). In order to do this we first have to write down its generalized \
Lagrangian"
}], "Text",
 CellChangeTimes->{{3.600516636306747*^9, 3.600516690310767*^9}, {
  3.600516741895606*^9, 3.600516782018572*^9}, {3.600585868042153*^9, 
  3.600585902895199*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["L",
    FontWeight->"Plain"], 
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Xi]",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], ",", 
     StyleBox["r",
      FontWeight->"Bold"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}]}], 
  StyleBox["=",
   FontWeight->"Plain"], 
  RowBox[{
   RowBox[{
    FractionBox[
     StyleBox["1",
      FontWeight->"Plain"], "2"], 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["\[Xi]", "i"], "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}]}], 
   "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["r", "i"], 
     RowBox[{
      SubscriptBox["\[Xi]", "i"], "."}]}]}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6005167837231417`*^9, 3.600516818754175*^9}, {
   3.600517018284396*^9, 3.600517037891486*^9}, {3.6005170907660093`*^9, 
   3.6005170979284353`*^9}, 3.6005173739926243`*^9},
 CellTags->"eq:soft_margin_svm_L"],

Cell["\<\
We can then apply again Theorem 3 to obtain the KKT optimality conditions:\
\>", "Text",
 CellChangeTimes->{{3.600517085607532*^9, 3.600517125031438*^9}, {
  3.600585907463999*^9, 3.600585918802475*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["r",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["r",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Xi]",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   "0"}], ",", "       ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["r", "i"], 
    SubscriptBox["\[Xi]", "i"]}], "=", "0"}], ",", 
  "                                               ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["r", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, 
   3.600513870738564*^9, {3.600517164523419*^9, 3.600517175284357*^9}, {
   3.600517215065008*^9, 3.6005172181227922`*^9}, {3.6005172610847588`*^9, 
   3.600517261443778*^9}, {3.6005189404219*^9, 3.600518966809108*^9}}],

Cell["where the first three conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}, {3.600513867266624*^9, 3.600513867631464*^9}, {
  3.60051726785408*^9, 3.600517268955271*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"], 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"]}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], "=", "0"}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"C", "-", 
    SubscriptBox["\[Alpha]", "i"]}], "=", 
   SubscriptBox["r", "i"]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
   3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
   3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
   3.600158661435207*^9, 3.60015866767249*^9}, 3.600513864747818*^9, 
   3.60051392712012*^9, {3.600517274218824*^9, 3.6005172785205*^9}, {
   3.600517321977695*^9, 3.600517329588914*^9}, {3.600517734285067*^9, 
   3.600517735477496*^9}},
 CellTags->"eq:soft_margin_svm_w"],

Cell[TextData[{
 "and we note also that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"C", "-", 
     SubscriptBox["\[Alpha]", "i"]}], "=", 
    SubscriptBox["r", "i"]}], TraditionalForm]]],
 ", together with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["r", "i"], "\[GreaterEqual]", "0"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], 
   TraditionalForm]]],
 " gives us ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", 
    SubscriptBox["\[Alpha]", "i"], "\[LessEqual]", "C"}], TraditionalForm]]],
 ".\nWe can thus plug eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_w"],
 ") into eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_L"],
 "), to obtain"
}], "Text",
 CellChangeTimes->{{3.6005139229439096`*^9, 3.6005139327340612`*^9}, {
   3.600513998355977*^9, 3.600514040753975*^9}, {3.600514214591071*^9, 
   3.6005142148630037`*^9}, 3.6005173662300177`*^9, {3.6005174084987383`*^9, 
   3.600517410639308*^9}, 3.600517493801063*^9, {3.6005176012168417`*^9, 
   3.600517656733819*^9}, {3.6005176983272676`*^9, 3.600517753274816*^9}, {
   3.600585950168448*^9, 3.600585971146927*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"L", 
   RowBox[{"(", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{"C", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["\[Xi]", "i"]}]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"]}], "-", 
   RowBox[{"C", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["\[Xi]", "i"]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["H", 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}, {
   3.60051411622726*^9, 3.600514161953629*^9}, {3.6005175054397173`*^9, 
   3.6005175537125998`*^9}, {3.600517850817155*^9, 3.600517859816524*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}], ")"}]}]}], TraditionalForm]]],
 ". As before, both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared from the Lagrangian, but once we have solved for ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ", we can compute ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_w"],
 "), while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can again be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ".  Indeed if we expand this multiplication and left and right multiply by \
",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "i"], TraditionalForm]]],
 " we obtain:"
}], "Text",
 CellChangeTimes->{{3.600518014507132*^9, 3.6005180517949467`*^9}, {
  3.600518111150139*^9, 3.600518210961157*^9}, {3.600518714069418*^9, 
  3.6005187146317987`*^9}, {3.600585987954084*^9, 3.600586028364172*^9}, {
  3.6006787835117826`*^9, 3.600678784047868*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["r", "i"]}], "-", 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       SubscriptBox["r", "i"], 
       SubscriptBox["\[Xi]", "i"]}], "\[UnderBrace]"], "0"]}], "-", 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["r", "i"], 
    SubscriptBox["y", "i"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", "0"}],
   TraditionalForm], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600518224733889*^9, 3.6005183447924633`*^9}, {
  3.6005183855059032`*^9, 3.60051842792067*^9}, {3.600518462098566*^9, 
  3.600518480247355*^9}, {3.601568572081274*^9, 3.60156857359829*^9}, {
  3.601568628267521*^9, 3.601568628975306*^9}}],

Cell[TextData[{
 "which has the same solution: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 " as before.\nThe Lagrangian dual program for the soft-margin SVM is thus \
given by"
}], "Text",
 CellChangeTimes->{{3.6005184846577682`*^9, 3.600518599691503*^9}, 
   3.60051872505451*^9, {3.600678799014057*^9, 3.600678827809661*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], "0"}], "\[LessEqual]", 
  StyleBox["\[Alpha]",
   FontWeight->"Bold"], "\[LessEqual]", "C"}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "\[Transpose]"}], 
    StyleBox["y",
     FontWeight->"Bold"]}], "=", 
   StyleBox["0",
    FontWeight->"Bold"]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.6005186525864143`*^9, 3.600518665420229*^9}, {
  3.602858405929647*^9, 3.602858418096335*^9}},
 CellTags->"eq:soft_margin_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ".\nThis dual optimization problem is identical to the one for hard-margin \
SVM, the only difference being the additional upper-bound constraint on ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ". As we can see, reducing the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " has the effect of maxing-out the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 ", reducing the influence of the outliers (i.e. samples that due to noise \
lie in unexpected areas of the input space). Note also that with the choice \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "=", "\[Infinity]"}], TraditionalForm]]],
 " we would obtain the same results as for the hard-margin SVM.\n\nAnother \
important observation is that the primal KKT condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ", implies that the only non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " can only be those for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], "=", "1"}], TraditionalForm]]],
 ", while the points with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], ">", "1"}], TraditionalForm]]],
 " will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "=", "0"}], TraditionalForm]]],
 ".\nWhen ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " is decreased from ",
 Cell[BoxData[
  FormBox["\[Infinity]", TraditionalForm]]],
 " (as in the case of hard-margin SVM) to some other finite value, the \
minimization of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " becomes relatively unimportant compared to the minimization of the squared \
norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", resulting in many samples being forced to have a large ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 ". This means that by lowering the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", more and more samples will satisfy ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], "=", "1"}], TraditionalForm]]],
 " (a reduction of the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " forces the optimization algorithm to compensate for the reduction of the \
functional margin, with an increase of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 "). In other words, lowering the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will result in an increased number of Support Vectors.\n\nUsing ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"], 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}]}], TraditionalForm]]],
 ", the minimal geometric margin can be computed as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623789258648*^9}, 
   3.6016238422875032`*^9, {3.6016240697312403`*^9, 3.601624070807952*^9}, {
   3.601624238015191*^9, 3.6016242450535603`*^9}, {3.602774151954455*^9, 
   3.602774156776572*^9}, {3.607434181731427*^9, 3.6074342053556147`*^9}, {
   3.6074343648118343`*^9, 3.607434365431916*^9}, {3.6074344644258537`*^9, 
   3.6074344679195747`*^9}, {3.6074345179825163`*^9, 3.607434602141087*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], 
    ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "i"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}], "+", "b"}], ")"}], 
    "."}]}]}]}], "DisplayFormula",
 CellChangeTimes->{
  3.601623787274074*^9, {3.601624044969468*^9, 3.6016241505183573`*^9}, {
   3.601624253957592*^9, 3.601624306644099*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623791360347*^9}, 
   3.607434623491053*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074346285535393`*^9, 3.6074346334192963`*^9}}],

Cell[TextData[{
 "We hereby give a code snap implementing this algorithm, using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver where, as before, ",
 StyleBox["KTr", "Code"],
 " is expected to be the matrix of inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Ktr", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], "\[CenterDot]", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}]}], TraditionalForm]]],
 " computed using the training samples\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623791360347*^9}, 
   3.607434623491053*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"train1NormSoftMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nTr", ",", "d", ",", "H", ",", "f", ",", "a", ",", "alpha", ",", "b", 
       ",", "nrm", ",", "margin", ",", "sol", ",", "obj", ",", 
       "constraints"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{"f", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"a", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"H", "=", 
       RowBox[{
        RowBox[{"yTr", ".", 
         RowBox[{"Transpose", "[", "yTr", "]"}]}], " ", "KTr"}]}], ";", "\n", 
      
      RowBox[{"constraints", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"alpha", ".", "yTr"}], "]"}], "==", "0"}], " ", "&&", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", ">=", "0"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}], " ", "&&", " ", 
        "\n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "<=", "regC"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"alpha", ".", "H", ".", "alpha"}]}], " ", "-", " ", 
        RowBox[{"f", ".", "alpha"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "constraints"}], "}"}], ",", "alpha", ",", " ", 
         
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"AccuracyGoal", "->", "1"}], ",", " ", 
         RowBox[{"PrecisionGoal", "->", "1"}], ",", " ", 
         RowBox[{"MaxIterations", "->", "100"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}], 
         ",", " ", 
         RowBox[{"Gradient", ":>", " ", 
          RowBox[{
           RowBox[{"H", ".", "a"}], " ", "-", " ", "f"}]}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"(", 
        RowBox[{"alpha", "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"alpha", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "<", 
               RowBox[{"10", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "8"}], ")"}]}]}], "&"}], "/@", "alpha"}], ",", 
            "True"}], "]"}]}], "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", 
         RowBox[{"Total", "[", "alpha", "]"}]}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha", " ", 
           RowBox[{"yTr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}], ".", "H", ".", 
         "alpha"}]}]}], ";", "\n", 
      RowBox[{"nrm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"sol", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", 
            RowBox[{"Total", "[", "alpha", "]"}]}], ")"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"alpha", " ", 
        RowBox[{"yTr", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"yTr", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"KTr", ".", "alpha"}], "+", "b"}], ")"}]}], ")"}], 
          "]"}], ")"}], "/", "nrm"}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"alpha", ",", "b"}], "}"}], ",", "margin"}], "}"}]}]}], "\n",
     "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{
  3.600587725325886*^9, {3.6005882122929983`*^9, 3.6005882133539057`*^9}, {
   3.600588457252429*^9, 3.600588465845796*^9}, {3.600604239380355*^9, 
   3.600604258229485*^9}, {3.6013862221202097`*^9, 3.60138626867194*^9}, {
   3.601573374294911*^9, 3.601573374464306*^9}, {3.601624324634869*^9, 
   3.6016243470122128`*^9}}],

Cell[TextData[{
 "\nAn example of usage is also provided where, as before, the Support \
Vectors are marked with thiker markers (squares and circles), whille ",
 StyleBox["linearKernel", "Code"],
 " is the function used to compute the inner products between the samples.\n"
}], "Text",
 CellChangeTimes->{{3.600588112937687*^9, 3.60058811849831*^9}, {
  3.600679475821672*^9, 3.600679492899036*^9}, {3.6013861641550417`*^9, 
  3.6013861804462967`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$771 = MousePosition["Graphics"]; 
     Private`p$771 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$771], 2], 
          Union[
           Partition[Private`pt$771, 2]]}, 1]]; 
     If[Private`s$771 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$771}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$771}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$771 = {}; 
     Private`s$771 = Private`s$771 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600587966493536*^9, 3.600588622107139*^9, 
   3.600599060660305*^9, 3.600599756925404*^9, 3.600599943665254*^9, 
   3.600600031844635*^9, 3.6006027823018436`*^9, 3.600603523507772*^9, 
   3.600603945706077*^9, 3.6006129989424667`*^9, 3.600613812248528*^9, 
   3.6006326443401413`*^9, 3.60067111736756*^9, 3.60067164227064*^9, 
   3.6006718037671747`*^9, 3.600672265537353*^9, 3.600672526081514*^9, 
   3.601206370436466*^9, 3.601209437237091*^9, 3.60121146727116*^9, {
   3.601212264723936*^9, 3.6012122908273897`*^9}, 3.601212668288314*^9, 
   3.601213356569628*^9, 3.601214040524703*^9, 3.601214608420601*^9, 
   3.601218004687706*^9, 3.6012862730919037`*^9, 3.601295890068576*^9, 
   3.601296909848271*^9, 3.6012971705533447`*^9, 3.601297662161875*^9, 
   3.6012988951245203`*^9, 3.601298947244832*^9, 3.601304693600175*^9, 
   3.601372885198304*^9, 3.601375277312167*^9, 3.601559771933028*^9, {
   3.60156216665177*^9, 3.601562166764254*^9}, 3.60156311216003*^9, 
   3.601571645190751*^9, 3.601572489481422*^9, 3.601626156335967*^9, 
   3.6028568557890673`*^9, 3.602859724672284*^9, 3.6074305179771147`*^9, 
   3.6074324484532547`*^9, 3.6375647251875*^9, 3.6375655259220457`*^9, 
   3.6375656547789993`*^9, 3.6375660422446527`*^9, 3.637573361150527*^9, 
   3.637581899618166*^9, 3.637582140942945*^9, 3.6375822015744867`*^9, 
   3.637583464295784*^9, 3.637585525938525*^9, 3.637588558709491*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", "linearKernel"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005503261330643`*^9, 3.6005503339339247`*^9}, {3.600588222815317*^9, 
   3.600588256649695*^9}, {3.600588290721298*^9, 3.6005882920536127`*^9}, {
   3.600588658316814*^9, 3.600588734521865*^9}, {3.600588793185359*^9, 
   3.6005888716015673`*^9}, {3.600631456422151*^9, 3.600631462528254*^9}, 
   3.6006732675642233`*^9, {3.601217196322742*^9, 3.601217210173666*^9}, 
   3.6015634594631166`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 1., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    288., {143., 143.23188592730259`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$98130$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$98130$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`linearKernel], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {175., 178.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006318422191973`*^9, 3.600673261291685*^9, 3.600673343449181*^9, 
   3.601214254651011*^9, 3.60121741903084*^9, {3.60156217734977*^9, 
   3.6015622005096703`*^9}, 3.601562274480063*^9, 3.601562323282482*^9, 
   3.601563399612978*^9, 3.601563460363524*^9, {3.601563612036623*^9, 
   3.601563625488894*^9}, 3.6028584609814587`*^9, 3.6028585071417828`*^9, 
   3.602860201154567*^9, 3.6074346521568537`*^9, 3.63756616309482*^9, 
   3.6375836272185097`*^9, 3.637589048050949*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs we can see, the behavoir of the algorithm is pretty much the same as \
the soft-margin classifier introduced in the previous section. Moreover, \
according to what have seen before, as we reduce the regularization parameter \
",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", the number of Support Vectors increases.\n"
}], "Text",
 CellChangeTimes->{
  3.601386276317622*^9, {3.6013912082698927`*^9, 3.6013913663932123`*^9}, 
   3.601558644935019*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2-Norm Soft-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.600433955353394*^9, 3.600433963410952*^9}, {
  3.600510883688518*^9, 3.600510886226582*^9}}],

Cell[TextData[{
 "Another formulation for the Soft-margin SVM can be obtained considering the \
following modification of eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 ") in Section ",
 
 CounterBox["Section", "sec:max_margin"]
}], "Text",
 CellChangeTimes->{{3.600154875125265*^9, 3.6001549181816397`*^9}, 
   3.600155031827753*^9, {3.6001553088687277`*^9, 3.600155366668939*^9}, {
   3.600155430120121*^9, 3.600155445536603*^9}, {3.6001554825240726`*^9, 
   3.600155496361331*^9}, {3.600155582648361*^9, 3.6001555947194567`*^9}, {
   3.600414871766923*^9, 3.600414873146832*^9}, {3.600429222572053*^9, 
   3.600429391214848*^9}, {3.6004296738987913`*^9, 3.600429711036256*^9}, {
   3.600429775116506*^9, 3.6004297773881207`*^9}, {3.600429838787216*^9, 
   3.600429851892276*^9}, {3.600518748509136*^9, 3.600518796228572*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b", ",", 
     StyleBox["\[Xi]",
      FontWeight->"Bold"]}]], " ", 
   FractionBox["1", "2"], 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{
   FractionBox["C", "2"], " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SuperscriptBox[
     SubscriptBox["\[Xi]", "i"], "2"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    SubscriptBox["\[Xi]", "i"], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"\[ForAll]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], 
       RowBox[{"i", ","}]], 
      SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]}], 
  ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, {3.600069619878358*^9, 3.6000696976499662`*^9}, {
   3.6000698340070744`*^9, 3.600069843688924*^9}, {3.6000703147873783`*^9, 
   3.600070318851357*^9}, 3.600070748774111*^9, {3.600155604909068*^9, 
   3.6001556221657333`*^9}, {3.600157793512041*^9, 3.6001577978772*^9}}],

Cell[TextData[{
 "where, for simplicity we have divided the objective function by two, and \
squared the slack variables, thus removing the necessity for the positivity \
constraints on the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 ". Due to the squaring of the slack variables, this is called the ",
 StyleBox["2-Norm",
  FontSlant->"Italic"],
 " SVM. \nThe generalized Lagrangian of this optimization problem is given \
by"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.6001562618603697`*^9}, {3.600157440600864*^9, 3.6001574459197187`*^9}, {
   3.6001578050061626`*^9, 3.60015784252039*^9}, {3.600414886880303*^9, 
   3.6004149465339603`*^9}, {3.600415011024856*^9, 3.6004150335388803`*^9}, {
   3.600429698647847*^9, 3.6004296999379463`*^9}, {3.600430410845685*^9, 
   3.600430426304928*^9}, {3.600433937591069*^9, 3.6004339786213217`*^9}, {
   3.60043403077953*^9, 3.600434038823875*^9}, {3.600519030390934*^9, 
   3.600519034895832*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["L",
    FontWeight->"Plain"], 
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Xi]",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}]}], 
  StyleBox["=",
   FontWeight->"Plain"], 
  RowBox[{
   RowBox[{
    FractionBox[
     StyleBox["1",
      FontWeight->"Plain"], "2"], 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", "+", 
   RowBox[{
    FractionBox["C", "2"], " ", 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], "+", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["\[Xi]", "i"], "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
      ")"}]}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.600156300029234*^9, 3.600156368405653*^9}, {
  3.600156621150298*^9, 3.600156661862521*^9}, {3.600157874303254*^9, 
  3.600157878691687*^9}, {3.600157924287451*^9, 3.600158010418242*^9}}],

Cell["and the KKT optimality conditions are given by", "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.600158028451982*^9, 3.600158032400323*^9}, {
   3.6001719912549667`*^9, 3.60017199222255*^9}, {3.600414981688201*^9, 
   3.6004149850697002`*^9}, {3.60042990556689*^9, 3.6004299270897017`*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Xi]",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   
   RowBox[{
    RowBox[{"0", "          ", "i"}], "=", "1"}]}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, {
   3.600518978995328*^9, 3.600518991933605*^9}}],

Cell["where the first three conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}}],

Cell[BoxData[{
 RowBox[{
  StyleBox["w",
   FontWeight->"Bold"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"]}]}], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox["\[Xi]",
   FontWeight->"Bold"], "=", 
  FractionBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], "C"]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
  3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
  3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
  3.600158661435207*^9, 3.60015866767249*^9}},
 CellTags->"eq:svm_w"],

Cell[TextData[{
 "As before, since the optimization problem is convex and the constraints are \
affine functions, the KKT optimality conditions are also sufficient.\nThe \
Lagrangian dual problem is obtained by substituting the values of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Xi]",
    FontWeight->"Bold"], TraditionalForm]]],
 " back into ",
 Cell[BoxData[
  FormBox["L", TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, 3.6001735723352222`*^9, {3.600430737886001*^9, 
   3.6004307396736*^9}, {3.6004308706986723`*^9, 3.600430873384021*^9}, {
   3.6005190465958643`*^9, 3.600519057388266*^9}, {3.600678954252145*^9, 
   3.600678958763721*^9}, 3.6074347480171423`*^9}],

Cell[BoxData[{
 RowBox[{"L", "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"2", "C"}]], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["\[Delta]", 
        RowBox[{"i", ",", "j"}]]}]}]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "C"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["\[Delta]", 
        RowBox[{"i", ",", "j"}]]}]}]}]}], " ", "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], 
     "0"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}], "+", 
         RowBox[{
          FractionBox["1", "C"], 
          SubscriptBox["\[Delta]", 
           RowBox[{"i", ",", "j"}]]}]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["H", 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}], "+", 
       RowBox[{
        FractionBox["1", "C"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}], TraditionalForm]]],
 ". As before, both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared from the Lagrangian, but ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " can then be obtained using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:svm_w"],
 "),  while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can again be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ".  Indeed, we note that by substituting ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " with",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     FractionBox["1", "c"], 
     SubscriptBox["\[Alpha]", "i"]}]}], TraditionalForm]]],
 ", left and right multiplying the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and summing over all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 ", we can enforce the constraint by commputing"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.600174352033383*^9, 
   3.600174383955019*^9}, {3.600174491817814*^9, 3.600174537941121*^9}, {
   3.600175445275632*^9, 3.600175448682406*^9}, {3.600175506253343*^9, 
   3.600175508667962*^9}, {3.600175871676817*^9, 3.600175927236977*^9}, {
   3.600430909988146*^9, 3.6004309310256977`*^9}, {3.600519074233149*^9, 
   3.600519087924474*^9}, {3.600519135912731*^9, 3.600519219813518*^9}, 
   3.6028587952562847`*^9, {3.6074347855666656`*^9, 3.607434786508792*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["y", "i"], "-", 
      RowBox[{
       FractionBox["1", "c"], 
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}], "-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "-", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}]}], "=", 
  RowBox[{
   UnderscriptBox[
    UnderscriptBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      RowBox[{"(", 
       RowBox[{
        FractionBox["1", "c"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}], ")"}]}]}]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["\[Alpha]", "i"]}]], 
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], 
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SubscriptBox[
              StyleBox["x",
               FontWeight->"Bold"], "j"], "\[CenterDot]", 
             SubscriptBox[
              StyleBox["x",
               FontWeight->"Bold"], "i"]}], "+", 
            RowBox[{
             FractionBox["1", "c"], 
             SubscriptBox["\[Delta]", 
              RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}]}]}], ")"}]}], " ", "=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]], 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "n"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "n"], 
           RowBox[{
            SubscriptBox["\[Alpha]", "i"], 
            SubscriptBox["y", "i"], 
            SubscriptBox["\[Alpha]", "j"], 
            SubscriptBox[
             StyleBox["H",
              FontWeight->"Bold"], 
             RowBox[{"i", ",", "j"}]]}]}]}]}], ")"}]}], "=", 
      RowBox[{"-", 
       FractionBox[
        StyleBox[
         RowBox[{
          RowBox[{
           OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600174127286213*^9, 3.600174151893757*^9}, {
  3.600174192850265*^9, 3.600174297068885*^9}, {3.6001743312244453`*^9, 
  3.6001743320502377`*^9}, {3.600174395426324*^9, 3.60017448222078*^9}, {
  3.600174609257825*^9, 3.600174620294325*^9}, {3.600174700488557*^9, 
  3.60017476750701*^9}, {3.6001748058235807`*^9, 3.600174817131991*^9}, {
  3.600174862424131*^9, 3.600175009763543*^9}, {3.600175081076378*^9, 
  3.6001750843648157`*^9}, {3.6001751300761957`*^9, 3.600175142796803*^9}, {
  3.600175178151023*^9, 3.600175202209634*^9}, {3.60017552263131*^9, 
  3.6001755621461077`*^9}, {3.600175619176784*^9, 3.6001757437281857`*^9}, {
  3.600435176945134*^9, 3.600435180026492*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Alpha]", "~"], "i"], "=", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], TraditionalForm]]],
 ".\nThe Lagrangian dual problem can thus be defined as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.60017522567037*^9, 
   3.600175228536392*^9}, {3.600175718035424*^9, 3.6001757187181892`*^9}, {
   3.600175750944895*^9, 3.600175831350972*^9}, {3.6005143339971437`*^9, 
   3.600514339262733*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "\[GreaterEqual]", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{"\[Alpha]", "\[Transpose]"}], "y"}],
    FontWeight->"Bold"], 
   StyleBox["=",
    FontWeight->"Plain"], 
   StyleBox["0",
    FontWeight->"Bold"]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.602858809278606*^9, 3.602858817579302*^9}},
 CellTags->"eq:2norm_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ". This optimization problem is once again very similar to the one for \
hard-margin SVM, the only difference being in the matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}], "+", 
       RowBox[{
        FractionBox["1", "C"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}], TraditionalForm]]],
 ", which is in this case augmented with an identity matrix multiplied by ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "C"], TraditionalForm]]],
 ".  This has the effect of adding  ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "C"], TraditionalForm]]],
 " to the eigenvalues of the matrix, rendering the problem better \
conditioned. Note that, similarly to the 1-norm soft margin SVM, setting ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[RightArrow]", "\[Infinity]"}], TraditionalForm]]],
 " would produce the same results as the hard margin SVM.\n\nAs stated before \
the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "S"], "(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}], TraditionalForm]]],
 " of the soft-margin classifiers cannot be computed simply as ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 ", since there is no guarantee anymore that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    " ", "1"}], TraditionalForm]]],
 ". Nonetheless, as before, for all the points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "<", "1"}], 
   TraditionalForm]]],
 " we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", while for the others we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 ". Moreover, for the 2-norm soft margin SVM, by construction we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    FractionBox[
     SubscriptBox["\[Alpha]", "i"], "C"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"]}]}], "=", "0"}], TraditionalForm]]],
 ", so that the minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{
         SubscriptBox["max", "i"], 
         SubscriptBox["\[Alpha]", "i"]}], "C"]}], ")"}]}]}], 
   TraditionalForm]]],
 ", where"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625342579255*^9, 
   3.601625346803771*^9}, 3.6016254649026546`*^9, {3.601625513196022*^9, 
   3.6016255147196074`*^9}, {3.601625738411982*^9, 3.601625740020549*^9}, {
   3.6016257793836813`*^9, 3.601625834335587*^9}, {3.6074348083739433`*^9, 
   3.6074348457036133`*^9}, 3.6375806050677643`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[LeftDoubleBracketingBar]", 
   StyleBox["w",
    FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "i"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
    FractionBox["1", "2"]], "=", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"], 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"j", "=", "1"}], "n"], 
        RowBox[{
         SubscriptBox["\[Alpha]", "j"], 
         SubscriptBox["y", "j"], 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}]}]}]}]}], ")"}], 
    FractionBox["1", "2"]]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          SubscriptBox["\[Xi]", "i"], "-", 
          RowBox[{
           SubscriptBox["y", "i"], "b"}]}], ")"}]}]}], ")"}], 
     FractionBox["1", "2"]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["\[Alpha]", "i"]}], "-", 
       RowBox[{
        FractionBox["1", "c"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"i", "=", "1"}], "n"], 
         SuperscriptBox[
          SubscriptBox["\[Alpha]", "i"], "2"]}]}]}], ")"}], 
     FractionBox["1", "2"]]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.601625083220161*^9, 3.6016250859167137`*^9}, {
   3.6016251764652*^9, 3.601625232068491*^9}, {3.601625540218547*^9, 
   3.601625569539563*^9}, 3.601625620222836*^9, {3.601625856881468*^9, 
   3.6016258594445*^9}}],

Cell[TextData[{
 "where again we have used the fact that for all the support vectors, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "\[NotEqual]", "0"}], "\[Rule]", 
    RowBox[{
     SubscriptBox["\[Xi]", "i"], "\[NotEqual]", "0"}]}], TraditionalForm]]],
 "\[Rule]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625579044509*^9, 
   3.601625582859509*^9}, {3.6016258611374617`*^9, 3.601625976382901*^9}, 
   3.607434872065981*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074348777288303`*^9, 3.6074348844254503`*^9}}],

Cell[TextData[{
 "Since the only difference w.r.t. the hard margin is in the addition of the \
diagonal component to the ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 " data matrix, we can reuse the code for the hard-margin SVM, with very \
little modifications, as shown by the following code snippet.\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625579044509*^9, 
   3.601625582859509*^9}, {3.6016258611374617`*^9, 3.601625976382901*^9}, 
   3.607434872065981*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"train2NormSoftMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"model", ",", "nrm", ",", "margin", ",", "nTr"}], "}"}], ",", 
     "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "nTr"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}], "=", 
       RowBox[{"trainHardMarginSVM", "[", 
        RowBox[{
         RowBox[{"KTr", " ", "+", " ", 
          RowBox[{
           RowBox[{"1", "/", "regC"}], " ", 
           RowBox[{"IdentityMatrix", "[", "nTr", "]"}]}]}], ",", "yTr"}], 
        "]"}]}], ";", "\n", 
      RowBox[{"nrm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"margin", "^", 
           RowBox[{"(", 
            RowBox[{"-", "2"}], ")"}]}], " ", "-", " ", 
          RowBox[{
           RowBox[{"1", "/", "regC"}], " ", 
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"model", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "^", "2"}]}]}], ")"}], 
        "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"margin", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"yTr", " ", 
             RowBox[{"model", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "/", "regC"}]}], ")"}],
         "/", "nrm"}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{"model", ",", "margin"}], "}"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.601217585543953*^9, 3.6012175967916117`*^9}, {
   3.6015733486260433`*^9, 3.601573349901339*^9}, 3.60157396561836*^9, {
   3.601574336286237*^9, 3.60157433996602*^9}, {3.601625599750942*^9, 
   3.601625601329462*^9}}],

Cell["\<\

As usual, we report here an example of usage of the considered classifier.
\
\>", "Text",
 CellChangeTimes->{{3.601558789996739*^9, 3.601558793790901*^9}, {
  3.601558840426955*^9, 3.601558870594482*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601217265460456*^9, 3.601217274884696*^9}, {
  3.601217649958868*^9, 3.601217650244253*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$797 = MousePosition["Graphics"]; 
     Private`p$797 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$797], 2], 
          Union[
           Partition[Private`pt$797, 2]]}, 1]]; 
     If[Private`s$797 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$797}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$797}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$797 = {}; 
     Private`s$797 = Private`s$797 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600589617150096*^9, 3.6006001989100113`*^9, 
   3.600600228965989*^9, 3.600600266088953*^9, 3.600600681760092*^9, 
   3.6006007941213007`*^9, {3.600600841457061*^9, 3.600600885139126*^9}, 
   3.6006013500386972`*^9, {3.600601383558695*^9, 3.6006013947936373`*^9}, 
   3.600601889657846*^9, 3.600602173557412*^9, 3.600602279086609*^9, {
   3.600602365064981*^9, 3.600602370242464*^9}, 3.60060278234803*^9, 
   3.600603523559029*^9, 3.600603945739794*^9, 3.6006091865576677`*^9, 
   3.600612999167354*^9, 3.6006138123158197`*^9, 3.600632644445119*^9, 
   3.600671117471401*^9, 3.600671642319047*^9, 3.6006718038665333`*^9, 
   3.6006722657928867`*^9, 3.600672526213133*^9, 3.601206370484069*^9, 
   3.601209437288204*^9, 3.601211467313223*^9, {3.601212264776905*^9, 
   3.601212290857061*^9}, 3.601212668321002*^9, 3.6012133566076183`*^9, 
   3.601214040568482*^9, 3.601214608470071*^9, 3.601217275255761*^9, {
   3.601217646676229*^9, 3.6012176510202503`*^9}, 3.6012180047532578`*^9, 
   3.60128627313862*^9, 3.601295890104985*^9, 3.601296909871706*^9, 
   3.6012971705877943`*^9, 3.601297662203429*^9, 3.60129889539428*^9, 
   3.601298947274419*^9, 3.6013046936347027`*^9, 3.601372885389017*^9, 
   3.6013752773626127`*^9, 3.6015597720353622`*^9, 3.601562166699974*^9, 
   3.601563112196547*^9, 3.601571645231084*^9, 3.6015724895165863`*^9, 
   3.601626156373807*^9, 3.6028568558258657`*^9, 3.602859724714912*^9, 
   3.607430518023924*^9, 3.6074324484962263`*^9, 3.6375647252164087`*^9, 
   3.6375655259622993`*^9, 3.637565654809787*^9, 3.637566042287871*^9, 
   3.637573361187119*^9, 3.637581899663452*^9, 3.637582140975326*^9, 
   3.63758220160777*^9, 3.6375834643307753`*^9, 3.637585526228755*^9, 
   3.637588558780424*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train2NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", "linearKernel"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005503498927317`*^9, 3.6005503500576143`*^9}, {3.600588307237846*^9, 
   3.600588313868602*^9}, {3.6005889274131536`*^9, 3.600588931635717*^9}, {
   3.6005891095272827`*^9, 3.600589127253347*^9}, {3.600589674705143*^9, 
   3.600589752385747*^9}, {3.600589859798711*^9, 3.600589861823804*^9}, {
   3.600589919957633*^9, 3.600589961803607*^9}, {3.600600581791831*^9, 
   3.6006005872282553`*^9}, 3.6006006982191267`*^9, {3.600600957488339*^9, 
   3.6006009936816893`*^9}, {3.600601442677775*^9, 3.600601458020113*^9}, {
   3.600601917129445*^9, 3.600601917290449*^9}, {3.600602290255299*^9, 
   3.6006023161080647`*^9}, {3.600609493626485*^9, 3.600609592687899*^9}, {
   3.600609630505509*^9, 3.600609633516151*^9}, 3.60060971841512*^9, {
   3.600631593542777*^9, 3.600631605389091*^9}, {3.60121723787749*^9, 
   3.601217245142144*^9}, {3.6012172980760736`*^9, 3.60121730959201*^9}, {
   3.6012174024063387`*^9, 3.601217409105876*^9}, {3.60121753241619*^9, 
   3.6012175326047707`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0.5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    288., {143., 143.9957298901707}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$160790$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$160790$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train2NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`linearKernel], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {175., 178.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.60121740986421*^9, 3.60121753326377*^9, 
  3.601298599640164*^9, 3.601558902793015*^9, 3.6015638865181103`*^9, 
  3.602858920663074*^9, 3.602860276956197*^9, 3.607434900961101*^9},
 TextAlignment->Center]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tKernel Support Vector Machines"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.5998959933365173`*^9, 3.5998959950405684`*^9}, {
  3.599899231509494*^9, 3.599899234925165*^9}, {3.60015516447847*^9, 
  3.6001551698116207`*^9}},
 CellTags->"sec:kernel_svm"],

Cell[CellGroupData[{

Cell["Kernel Methods", "Subsection",
 CellChangeTimes->{{3.600520519924685*^9, 3.6005205222261477`*^9}}],

Cell[TextData[{
 "Linear-threshold algorithms, like max-margin classifiers and the SVM \
algorithms introduced in the previous section can only learn linear \
separation functions. However it is often the case that data is not separable \
by a simple linear hyperplane. In such cases, a separating hyperplane could \
still be found by non-linearly pre-mapping the original vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], " ", "\[Element]", " ", "X"}], 
   TraditionalForm]]],
 " into a new space ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CurlyPhi]", "(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], " ", ")"}], " ", "\[Element]", " ", "F"}], 
   TraditionalForm]]],
 " called the Feature Space, where the samples become linearly separable. A \
linear classifier can subsequently be trained in this space.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998461259623`*^9}, {
   3.6005197554764442`*^9, 3.600519852482081*^9}, {3.600519892420924*^9, 
   3.6005199293763533`*^9}, 3.600519997453315*^9, {3.600520031766438*^9, 
   3.600520098523343*^9}, {3.600520221605938*^9, 3.600520222008019*^9}, {
   3.6005202556530447`*^9, 3.600520371355136*^9}, {3.6005204574178047`*^9, 
   3.6005204999975557`*^9}, {3.600520539060892*^9, 3.60052054057265*^9}, 
   3.600520817666068*^9, {3.60067956304256*^9, 3.60067980293848*^9}, {
   3.600679842850666*^9, 3.60067999337082*^9}, {3.6006800587681828`*^9, 
   3.60068005986121*^9}, {3.600680107219975*^9, 3.600680126672*^9}, 
   3.6015589426723757`*^9, {3.60743491618672*^9, 3.6074349195937653`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
0f2KWgpIdwDMBSh5S4Lr3unTp/fs2VPW3cjuTAEAAMhcjGPoz549i46OnjNn
jhjeScOTdKePkZGR/0tC5DpaCgBMFni2WzYHDx6sW7duUFCQluSviBsNAABW
guhwVZCfPHnyiy++YIcZtrpv2bKFv4WlHQBTRqajqu+pLLsGzB2qgZ88eVKl
SpX9+/fTLcadBQAAK0GNJ0ZbCe2uJTUNwcHBPXv2JNGeJ08e2tK+JGB3Slh4
ADALEhISIiMjszsXIMPo27fvxIkT1SOwpQAAgDWgzjbVDBHGqLlfvXp14cKF
Sbe///77N2/eZOmOaVAACLoOrBi6Hzx4EBERkV2Cil9SNsaSxrOzs5s0aRIf
5C1lDC+yWcAPmNwsqpY3bdoUEhKifgsrCgBAS+7C6yoEagj4uKyhjJ6+Diqx
MWPG1KhR49ChQ3Iw1dFM02w3xe+db/GxY8eqVq1K0n3lypWakmf+9iV3X1Kq
8Wdekl4s/5oS6CZ97ZHquq+2ero2zjTLH5gX/Dipw1VEXFxc69at+ZXRlNoy
C9DV27du3Xrrrbfo/f3oo48uX76camJgmrxoPtHTp081+D4BAAykumzHjRs3
tm7dyvuqxQYSSCCha2NjkzNnzlKlSh08eNCYQC1PE2w3KXt0NzmTEmema9eu
LVu25PYi7dOgKGXa57HK8yZHdFrolVB7lzoNLx8Rfx5kFPy88RNLDxi9MiSV
W7RoIQmy2CIqXdebN2/yFJW8efP+9ddfmjIikPW5Aq8EK3Oqo6QmpPslch2j
nwAAI6qVkgX8zJkzK1SoEB4erkoyoHLlypXcuXNTW0kN5TvvvHPr1i0qRp1t
xJSbS9U2KE18fHy8n5+flqTk1SjuL2k1jPb2tEh3LWU7FRcXl46wGP+XjJaa
VQqL0YCMRX3UecfLy8vW1rZMmTLR0dH8QmWxvuK3hv7U39+/QIECVB1RpeTh
4SEDprqcA1NDfWy4Ct20aVNkZCTtiOVEnaMEAACaoUJISEioWbNmrly57t27
Jwch4I2MHDlS4ihWqVJFLS7G9OMAkHKWHKpZfSUPluDg4JiYGDnDy58TWQdQ
tp6enmPHjtUpjTRy48aN6dOnP378WEtNqCNEHshAVL8yfownTJhAr3/BggX3
7t2bxSEZ1beV9h89esS6ndi9e7fqJIZXwMTheo+lO/W56tatGx4eLt9yv0yD
bgcAKOj8CqgJKFq0KNX/c+fOVQfsUP/roOq0e/fuvGhRzpw5GzZsKPWtdHNM
trJVdbLOYUZQE7zoPJSG+i9TpkxJYw9FbYZof+nSpR999NG8efNeVbfzeWJj
Y1u0aNGgQQMS8Jqy+LuaDIZ38PrIIJE665Ne+dKlS9esWXPo0KFyMGuM27qx
Leo7U6XNCzHs2bNHQ2h380GGHcPCwpo3b863j+tk3WRVAADQUqpxrit27txZ
rFgxao/atGmjS2yyKjTrEaFbq1YtmyRIvXft2pUtz1rWTlJLN6oTuOzTRUnm
0yKn69evX6dOHfV6X64WpDGaMWNGxYoVeWJv+jRGQkICbZ2dnUn8qxOE8aCC
jEXVTvx0+fr6du7cuX379rNmzWrbti07mGlJr0zWqGXxE6O8hYeHv//++2xv
37Rpk5byHTSLusg6UWdMjB8/3snJSUuuDI2R+dELAwBoKb0L2K9j9OjRzZo1
a9WqVceOHS9duqQl1So6MyZgqEwCAgKqVavGJndiyZIlYWFhWsqljkyz6MRk
p86BUh8GMVa/PJ6Mg4NDo0aNtOQpzGk0vM+cOTNPnjweHh6vcwmS2+7du9PZ
jh8/zkpeS7nCFNo78Pqo45KkhF1cXObMmTNixAgvL69OnTpt3rxZXqWsn50a
FBRUoUIFXkNt48aNcjzLOhEgfcjdOXLkSO3atYODg7WUz4+xQgMAAN2Qa79+
/RYvXjxgwIDhw4dPnjxZbYlQdahIydy+fbtcuXJs7LKzs9uyZcvzlGR3Tl+I
OudUZzBXs/3y+966dev//Oc/mhIy+l/t7SQtChQoQM+YzkfrlVAHCGJjY0uX
Lv3WW29dv36dWzo8qyADEbkuT2zLli1v3brVu3fvM2fOrFmzhh5mNWXW5EdC
kZBuL1++PFdBGzZskL4zXCxMBJ3znqbUlrSNiIho3749T0ww5fYCAGAiqDaZ
PXv29O/ff9u2bbQ9cuRIs2bN+DjqfyNqEEJ3d/e3336b280iRYrs379fU9Sv
mNxFG5tpP0geA9V738HBoUaNGpJGvWTV6C1aIiAggDRG/vz5SfBoKcMZGQPy
yHGd5f95yvA1z549W758ORX+119/LWH6jNkGIN2ow1Jnz561t7cPDQ3t1q3b
iRMnLl68WKdOHVJfWR9Phnforz/99FNbW1t6BX7//XcNPhUmjPHWDB8+fOrU
qfIR9RUAIC2wLvrhhx88PDwOHz48YsSIhw8ftm7d2sfHR0Qa/CRVVNsI7Wzf
vj1v3rw2NjZ2dnYVKlQ4fvz4i6pfc4wozqKFtpRzfgwSExNjYmL27dv38ccf
kw6/desW6Rm+Lt1zoovQPnjwYFIX1CWURZ1UhS8e9TJJVifmVQckdb1Ikk9U
+Lly5Zo3b56EaEA8DZDh0BO1a9cuFlqk248ePco73t7e2WUvjY6Orl69OvvJ
rF27VsOSeaaHWtHJoCRVUBcuXGjQoEFQUBDXk7hfAIC0wHUIVR1NmjTx8/Mj
CcoREsaNG7d+/frszp0poi6HERsby/uTJ0/miO60pWZUpqpxa67zNVWXyTML
1L5GfHz84sWLP/zww3z58pFUyJ07d8GCBWvUqEEynpdtkjZIlDNf7O3bt0uW
LEnl4+TkpIsMHxoaGhISQn0BKs/g4GCSInSqx48f81Rf+hgYGEhf0V/HxcVx
6B72W+CThIWFUQbozJ9++qmvr6+GxcFBRiOjZvSm79y5k/bbtGnzxx9/0M78
+fMnTZqkJsts1NcqISGhXr16rNtdXFw0pbdrXpWMBaMLNyT35eHDhxcvXtRS
W5MOAACMqBbLM2fOkJqiVmnLli2DBg2iOmTz5s20oxmWpASMsUAGDhxIrWf+
/Plpa29vz6HFU10DxbwGLyRyBe3TRX3//fd58uSpWbPmmjVrypYtW6lSpYkT
J5J0z5kzZ8+ePe/evSu/kuvlZ4zLp0iRIitXrpTSYxv+1q1bq1WrRoXWvHnz
eknUr1+/bt2606ZNo283bNjQokWLRo0a0ZH//Oc/9C8k8vnn4nvcvn17ygCH
MFXLHE0heH2ko03dyV69evFSax06dPDy8qLj586dc3BwyMoaUtct7dSpE/vJ
9OnTx+yG86wBdXBWfPxkLBK3DADwqlAdMn/+fBI8tO/q6jp48GCqW0ihdenS
RWIbQreriGM218NsdQ8LC/vuu+9IPebOnZu2nTt35ppZVLqEgDYvVMfyHj16
cK8kPj6e1DjLbDq+bds2Hmv4+uuv6ckxTlC9d+8eiXxKULhwYQnbKIZBEkJU
XDJgwcbDH3/8MSgoiEO1L1u2jL8i1XT48GGduzvBHjgE5UeX5ywoImDZyPN2
/fp10sZ8sGvXrp6enlqSW1fjxo3PnDmTZf1x3VNNDz8HpG3YsGFcXJxmmAMC
sh0ZHJFZOZqypIXcL3NsIAAAWQbbUbkaoTbo4MGDtLN+/XpqmFhQkUaihgn1
vw7V6VqnD0NCQurWrZsnTx7S7aQzR40aJcl0KU18NVUd3Kzs3r2bhHGhQoX2
7dvHT07Tpk2/+eYbTjBixAi6altbW0dHR/4Vu8Tz9W7cuDFXrlx2dnZFihSR
5WW5WDgITEREBHUHZBVaEiFOTk7iM0xanY7069dP+j6yQisnGDt2LAfSL1my
ZHBwMMzsIGPhJ2r27Nnjxo3jp7pjx47SA+3bt686uzCzUYeraJ8Xb6W374sv
voiKipIM67zRQLZgjCETEBBw6tQpqdyMs+kBAODl+Pv7t2vXjicDbtiwgf1k
qJ6ZOXMmaTBIoFRhUaopc1R5e//+/U8//ZRN7qQ/16xZwwWrzr7MvlynB/FF
adCgAckD6pjIwUaNGrFuJ+7cucNxpAsUKMDB/1XNMHLkSA6VWapUKerd6KLr
8PlJnBcuXJiKju3t1PHhvmRgYGDFihVr167Noz+6dXD4DHPnzs2RzM6dO/HQ
goxCjdzSpEkTUlx8sHPnzl5eXlrSA7lr165mzZqlfQmD10TeGs7bnDlz2Ems
XLly9HKZXQ1j2aiz6bWkp2XevHm9evXSUoYd0yUGAAAjon9WrFhBbZCWJClJ
Z8pA8Llz51q0aIGp7jpkcFOQcO5cCXt7e5cpU4aa0Xz58r3xxhvUprN0V2cK
mFd5Um7Pnj3LBm16VKSfQlrlP//5DxvMqRA6duzI+oG6fuqwLz1CDg4O/NXb
b7/NE0u11CZqDR8+nOU9K/Dq1asHBwf/+OOPpOdv3bqlBspQXUZpu2rVKkqf
K1cu2k6cOFFLae0H4PX5888/v/jiC3ZEoUerffv2hw4d4mf4yZMn1J+9efNm
1uREgrfzxwULFkgcWnq51NE92NtNBJmaevv2baozb9y4kd05AgCYJazJv//+
ezc3N24LSP+wbifBExMT06RJE2qtNDO0EmcXXFDs7036k7RuiRIlzp8/r46W
mhec88GDB9va2pIw7tevn3zVuHHjqlWrysfx48ezfvjkk0/kgSGx/fTp0y+/
/JK/KleuXEREhBoEXlN6NNHR0XRCsZxTAVauXJkKcPv27dLfMcZeYAd7zh47
xusyD0C6kSftt99+c3R0lAebqs2DBw/yo0vv9dixY7du3Zo1WdL1/deuXcuu
ZUWLFpXp8NkVlxLoUMcW6b60aNFizpw55mW3AQCYCFyr37lzp1q1atL9X7Nm
zQ8//CD2nMWLF69bt8684p9kIyLOaYeKjiMlUpNKOvbWrVua4nNidk1qy5Yt
WUuPHj1aXPQbNWrE6y7xA0OPCnu5vP/++xwTkvH39//oo4/Ycb1ChQo8jVdL
uVyvFMju3btJrrOXEf+kXbt2qvVeLTpp/qjjyX/Nc1fRLIKMgsfXCOoPsmMM
R3Zt06aNh4eHJNu0aVPWPHjGqoNeGXpfqKopWLAgu6ixRDS7SsZSoYeHTWQ7
d+5s1aqVVIAAAPBKcK3u7u7eu3dvrlWoMSLp1bdvX5n6d/r06f79+/PQMPhX
1CmT8fHxU6ZMEdPx119/Lf4hmhka3u3t7dmmN378eC1ZMDdu3Pg///mPfDxx
4gR7qhQrVszX11euMTAwkHou7MdStmzZmJgY+ep58mqqz5OhfXogcyhQv1KK
TreQk5xn3759efLkYcf4nj17YjI1yFiePHlC/ce///5b1mJo3bo1L46sJT2H
169fJyVPb31m50QNBs45OXXq1BtvvMHvl4xMaXj+TQa+Ef7+/vTM8FpdMIUB
ANIH1R5Tp05dtWqVHNm8efMPP/wgLtwhISH0UZ1ICF6OWNS1JJHJEpRjGFK7
T5LVHD2O6KIaNmwovutynA6SqJZRhhs3brB4LlWqVHBwsJasxtn7hSNkvvvu
u5GRkSJ+jNN16TyPHz/+8MMP2X7OVveRI0eq+dEZ3ukkO3fuZCcZYuDAgWoy
AF4HfswOHjzo5OQk3UZ6wUmDubm5SbKEhIQOHTrwiqVZkB9+g/j1efDgQfny
5bmTO3fuXOh2E4Tu1JAhQ5ydnTXcFwDAa/D06dPOnTsfP35c1rJfs2ZN3759
xfJJzdOUKVM2bNiQ3Tk1VwIDA5s0acJNKgnRfv36mWMPiB4G6nSwhO7evbvE
YKRLYz8ZLelRuXz5MvVQ2BlGdRhITExs1qwZ6fb8+fOXLVs2IiJCU5xkaIcS
8EfWRSTsS5QoQf/FvQCecHf48GFVNcnJ2Stp06ZN7JJEiSdPnqwp04QBeE3o
4XRxcZk3b57MdI6Li2vRosUff/yhPmZjxozp0qVLFmRGSzmxPTw8nPrF3GkV
ZQg/GdOBKsyLFy/SAyMzl2FSAACkj7Nnzzo4OKjTA9euXSv+7XScdlauXElp
sjWb5oEaw4H3OYyMr69vzZo1ORgLbadNm6aZWzwZEgD0YPBE0Vq1asXGxrIk
sLe3r1KliuqswjZ5Vi9qcDN6qNh4/t577z169EhLWQKqWwudvEGDBpUqVeKw
k9zfoW39+vXZhq+lbPVYwy9btoyLl7YbN27M/CIB1oWXl5ePj4+m+MI1b96c
5+yL3Zu02fbt2zM7JzrJR/9Or0ydOnX44e/du7eW0usMmAK3b9++cOGCllRf
QbQDANIH1R7UyowYMUJT3IbXrFnTv39/NitxtX/t2rXRo0ervtkgVbjtVoM9
Srt5/PhxnphJspakb5bFncgo6EICAgLefvttuoT8+fMfO3aMDzZt2vSDDz7g
Kah0+aNGjSLxQDKb466rzJ07l+V3kSJFqLdoFBUkhLgAqV+TJ0+ec+fO0T+S
epfZqbRdsGCB8Yf8K3pEWeSXKlXq7t275tUtAqaMLlg627Hj4+MbNWpEul03
kyLLpLLOnN6uXTt+/r/77jtjlFSQjcgtYLlujuOtAADTITAw8OHDh7zP1cuy
Zcs40J9qLPX39+cY3eDlGEOdSDHu2LGjYMGCPHesRIkSpOSzJ4uvjtjuOBQk
KfNx48bxlXbo0IF0e0REBH28f//+Z599RhdYo0aNZ0loirOKn5/fe++9R9dO
mnzfvn26xku6OXv27KGuzbx587jctmzZIrNTOcwdh+XRkhpBNfz7999/z8m+
+uorLdl5JuvKCFg0am9R/GTs7e0PHDggabK4qyjTQ5jp06fzUFe9evVec50I
Nze3FStWuLu7086uXbvoHaS6i9qFixcv0reXLl2iI/QKb9++3cPDw9PTk5oG
tbGw5vdOXWBCPa6T7sYEAACQFnQ2YW6bfv7554EDB0qtYs2VcEYhDeiaNWtY
W5J8Jbl77do1NQFPNDPBApcOyN27dytXrkz5f/PNN6ntpiNt2rSpVKkSNdyU
berukXKgr06fPi1BrdXz9OjRg7R3gQIFfvvtN/5WnaJLZ/jzzz/p540aNaKf
k+yn88sirTyxl2jfvj33COQvKFlUVBTJFU5AkkOK0QQLE5gjqer2hg0bknDN
Lku7bmr26tWruW/78ccfUw+aD6bPH2PKlCm5k6Cz8QoUdGa6WA6EQpdcvXp1
nnhSunTpiRMn8qvKvzXNGixrMHZe2NjFt0MsCdZcRACADEFXh8yfPx+6PcMR
O4yTk5MYkEmgUpWuGzw1zQKX6HakyT///HN2Rzl48GCTJk3ee+890tuOjo50
8I033iD9IOY+3bVQMhIDtra2kydPVhU7lUBsbKyrq2vZsmXpJN26dQsLC+Ov
bt++3aJFC44tKds5c+aospxN/fRb6jWQopB1ZzQYtUAGYXyY6YmlruL+/fuz
xSNFhsDkCT98+DDPS6UeLr1o/G26/aipFZBqisM0bdq06XlyyNYDBw7QW1y+
fPlz585pKce2TLP6ykrUCLda0prjP/30U0xMjJayoFA1AQDSja6mXbRoEXR7
xqLGWyYB3Lt3b4l88t133/HEAYlhboL1udiOOG+BgYFDhgypUKFCsWLFSCQU
KFDgnXfeKVKkSMuWLf/44w/5ifjJqBHX+/XrxzZzXT9lxYoV77//PvUFKlas
SHqgU6dOT58+pTRjxoyhg/TVRx99RP9YunRp+kgS3dPTU1PaQRItrDHWrFlj
zDkAr49uBCc6Opp0u7u7ezYO7jxXgsbcuXOnZMmSbBvfs2eP5Cd99Qm97BwA
SuZ6t2nThr+Ki4vr0KEDvYaXL1/WkqfeA4ZKW8ZBCCqr7t27b926VR0c4VrL
BOt5AIBZYBz/hW7PDDgyDxdmWFjYt99+K3Mtf/zxR57XabJx3XW2cS1pdCA2
NtbNze2TTz6hqxg3bhyv0siJdfY3lugc7PHhw4dlypQpWrToiRMnpEBox8/P
79y5c6QE/v77bx8fn+PHj7MeuHr16qlTp+g47Vy4cIHS0LfHjh178uSJ2j46
OTnZ2dl17NiRukW6JxYPMMgQdOKc3tkGDRpwRzXrdbtR9VE/4quvvuLpJytX
rnxJyn+FX1h6QwsWLMjSnWsq0p/UB3dxcaF3zdXVVTPhKit74TqQdqgD1atX
LzZcqHZ4VEoAgHSj1iFsuvnll1+g2zMctermWL6ffvqpjERPnjxZ1mnK5oy+
AIlsSfCYLz8Y/fr1K1euXEhICH+lTl7WNU987XSBmzdvJhkgSyNxGrlwdWRf
tySTOuVNlvfVkiyN1BegbJDml99SeeLRBRmITpxHRUXVr1+f56VmsW7XvVny
7y1btuT6hF4uekFeRx+yj82kSZNIt7O9nbT6559/vm3btiJFitBbbzyzMUtW
C1diwcHB/fv3v3TpkhgoNJP3hwQAmDi65oYH7+bMmQPdnrGovtYiQU+dOlW6
dGn22c6bN+/vv/9uFqEYOP/U+vCI8A8//FCpUiVqoYzeAqQcpJFSffjph9Om
TXvjjTfc3NxEros7DaeUopCRZdn/JwnJSXx8fOvWrd966y1vb29NWUQSw9Ag
Y9E93pGRkd9++62Hh4fxqyzOlTztgwYNYt1evXr1oKCgdDtjSH1F1/jll1+y
yZ0h9U6vm7jM0VYXNkqzYnsyD6ryflxc3JIlSyZOnChfcYlJ/YahCgBAOpDm
RhVds2bNgm7PcIyuJgQbr3gMumDBgqoGME3ECV+O9OnT59NPP+VppC/KuRo3
RpT8vHnzKleurF6yWkSyrz6HxnWaOAPvvPPOiRMn5OS6BhFLnIAMQSfOIyIi
ateuvX//ft1XWfb+SmdW3NLoncqVKxfJ7OLFi9+5c0dN9qrIVVAdlTMJ8ZaZ
Pn26ulCFltLNXrP6UJBc/1y+fNne3l5iLGspw7bDqgAASB/S0Kg1LXR7hqNa
m3XRBpYuXcoR1ezs7MqUKSNe4ibF8+TAFKpLOX81ePDgcuXKRUVFSUp1R2Zp
6b7ip2vv3r01atQYP368unKNKjPkj9SFaOXbBw8eNGnShBpHLjROo/O3wdML
MgSjJudZKjt37tQ989kIZYaldaFChThmY7pRX7T+/fvzsCA7zFB328/PTx0p
y/YLNym4QBwdHTdu3IjCAQBkHlK9zJkzZ9CgQanaNkHGwgXr7OzM5iza1qxZ
89GjR1qyVFYDAmdnRl8MZf6LL77QlLASL8mqapHjLUnuxYsXv+qfsqj466+/
5s6dy1EfsQQhyFRS1e0NGzZ0c3OTBGz9yMZX1cfHp3jx4iywV61apb1eV0Lq
n6tXr1JHQNY+o22nTp2MBcIalR1CrFOsUi0knu1U/v7+/tmdIwCABaJraOjj
jBkzdLrdOivhrCExCXt7e7ZokXQnMcCRIQXxIM2mPL4QaqQcHR0/+eSTiIgI
OfLyn6iNOx95HT9PdYYsAJlHqrq9cePGottNAT8/v8qVK7O0Hjp0qLqg8Cuh
Xia9ni4uLnTCAgUK8Mggs2vXLvpKXmS1HbHa2SVSbmLEeP4aIfQBACBVjAai
n376iXQ7apssQKp3tt1JtORevXpxOBTTb/7+/PPPhQsXShiZf82w6lSgLrP4
SjxPGRNeItWk41QApIVUdXuTJk327t1rOt3G+Pj4Dh06cB3i4OCQ7vPwFfFS
a3SBdnZ2c+fOnTRpEp05d+7crNurVq3KQ12MTqubfsWVSahhrEznwQAAWCQ6
Pxk1BDfIPEQP+Pr6VqlShWPL0HbcuHGaokVJGJvg7eDWmUU7R5jR/q3JNtri
XqeJV2e8ApB5pKrbmzVrxvNSNcXNO3vf00WLFnH3/7PPPuPZ4ul7v9jx7MaN
G/ny5Wvbtq2WNA+3Ro0aLNr5L4YNG/Y8eXUG3VWbYGWVBXB1nZiYqIaOgQsf
ACADMXonEi4uLoMHD7ZaH8VsgYvax8fno48+4mbRzs5u/vz5WtI4tclK01QV
eFoeGx7BF5+ZV/1f9S/4QcWzCjKVF/nJ7N27VxJk+0NIGTh+/HiRIkV4aqqX
l9frdIoDAgLq16//wQcfPHjwgBWpm5ub2NtpJ2/evO7u7rpfWa2TDHPs2LG1
a9em2pcBAIAMQafPSSJOnjx56NChptAMWQOsyWUK2O7duwsUKEDNYq5cuTjC
uTgsmaZ6p1zJbKxXfWDUibevChxHQVaSqm6vV6/erl27TKeepJwEBgbygm6k
q5csWZLuU8XGxnbr1o3Os2DBAi3ZdJyQkNCsWTM1lvu3335LKXmNJ80Qmsza
iImJ6dix4549ezTDOhQAAJBRPDeExZ4+fbqjo6OGoc/M57khbjm1gMuXLyfF
ztGSy5Qpc+7cOc00rHlG1PCMabSz0VXIIuDpduA3RndXVyQEIMN5kW6njrYk
MJGhn9atW/Mk9yFDhqQvM1u3bmXxT8q8evXq+/bt4xdt8eLFhQsXlqgyTKtW
raKiooyzS7K9HLIeFxeXrl27ZncuAADWgkig+fPnDx8+XINuz3yeK8HJ1eAP
s2fPlpaxcuXKDx48MOXCT/t8NF0cSN3BdPwpTO4ga1BfVSY8PLxNmzbbt2/n
j2l3EstsHB0deZpMhQoVAgIC0nGGhQsX9u/ff8qUKRMmTCAhumzZMl77eOLE
iQMGDKDuAP3FoEGDHJMYPHjww4cP0xIG1mJQbRTSU/P392/SpMnZs2fh0A4A
yFR0Uoo+LliwwMnJSealytYUmiQrgVpJah9lgcJGjRqpoRtUsWoNrSTQUlvx
Kt23nnVFGnUmx8fQTYTRlIdQ5imkLzPmQqq6vUWLFlu3blXryex9H9ngv2LF
Cu7yFypUiNcRTsd5jD1ifmxElKrrqalhD2XH4qsmukAe+OMrXbJkCfVrODIt
R8jUYFgAAGQ0z5U1sqXKXbx48fDhw42OBxbfNJsU1BR27NiRh6pp27p16+jo
aDVgi9wONA3WgCqEniWRjpOoHlnSEXj5qcSVy+gEYlUhp1LV7U2bNt2yZYs6
uSPbxSpl49q1a2+++aaNjU3OnDnnz5+f7nnfdF1xcXF8xLgAnPHWq77cFv9g
yMXy63P//n17e/srV65IAqNjFQAAZCwST2bhwoWOjo5qHFpJkF15s05CQ0Pr
168vfqTOzs5asvSSuwPRbg2oI+/yGqZ9nrKqt/mB4d+m5Y2WedPqeaQTIWLe
4ucXGGV5WFgYSbVt27ap72C2FwLJSOpQfPHFF+yF3rlz5/RVEUZPtpeb0NVn
zBrGX3Rd4AEDBkyYMEFLunaOi/s8eeJ8tnflAAAWhnHC+7Jly0aMGGHxDbEp
I77u9+/fr1ChQq5cuThg8syZM7WUCwwhXoGVwNpYU9bqSrsbrc4KqtoJ5Wz/
egbxnUh19V6LfwhTnZfavHnz3bt3m6AwowqcQ8qoaxm/EupCqHIk1TG+54YV
txkTLJYMRO3/+vr6duzY0cfHR31IXidYFgAAvASjbWTFihWjRo16yXgoyBq4
afjzzz+LFi1Kut3GxiZPnjyurq78rVVNBLNydCZTUs737t1L36nYG3nz5s3H
jh3718TGJeyps+Dl5XXq1Cn1OKsXy16vVqfbaSc0NLRly5Z79+41nRdQnpM9
e/bky5ePpDttT548+arnMQ4uqK0A9+BepOGt0H+Pekb8PqpxrtCAAgCyAK51
Sbc7OzurZhYNlU/WwvW/bHft2sXh14iSJUt6enrKfCjT0Qwg81At5HTH165d
W69evePHj//rr4yvbXR0dJ8+fT744INLly7xkX/VV6phnzS/u7t7+fLlFy1a
xPkRx61XuyRzI1Xd3qJFi/3794sh2kQqScoPyUiJ4k53Kh1nkH3jhOhUh2+e
K7z+JZg4co3sEqNiNLOjigYAZCAyoKlWtqQKRo0aZT0zjEwQcYoQabR8+XKJ
DPnOO++wwRNOMlaCThX//PPP9BisW7fu5b/S2UjpKfL39//222+/+eabR48e
8WnTLirEX5fOc+bMmQoVKowePZqeT9UUn+YLMldUjRoSEtK8efN9+/YZp/Zn
I9IL69y5M09pp85FOs4jVZAaQEZ3mapJR524mr5V2MwLKRZdmB3dIAVEOwAg
U+Gads2aNSNHjkSFk72ocfa0pFszadIk9nK3tbX96quv7t69q5nqIqogw+GZ
yGqgv/Xr16f95/ScJCQkkGL/8MMPWbSn6qZuRDe3Th5LLy+vggUL9ujRIy0n
sTyoQCIiItq1a0e6XUs58qW+kmJ/Vr0msqBqpZv7yy+/cDe/aNGiFy5c0JSa
RHvBWAxII3K76Z0KDg7WUJ4AgKxF6hzerlu3bvTo0S8aFVWtav869UZneJGA
t5pivpMELxmvlxxyGnUynW7+lGXr2F69enFEdxLw9vb2YWFh6t1RiwLdLnNE
fTu0lHpYvdGLFi3KlSsXvadqXFDVt1bEtnxFv/ruu+/s7Ow8PT211JQ2pyS9
l2oQDN0TxWmGDx9uY2Mzffp0zZqcmRkqjcjIyA4dOuzatcu47hhXUFSYPj4+
a9asGThwYLdu3SZMmLB58+Zr165xSpkOkLGvqtTPV69eLV26NEv3n3/+WVcz
QGS+JlySkydPdnV1RWECALKXtWvXqv7tukpJ4sLpNMaLME7PURcGZfthWlou
o5lIN8pvDcP0UVFRLVq0EIeZPn36iM+zbvBag1+leaL2bRn1BeEXZ+7cuXT3
N23apBkCwqjhW1UFPmXKlNy5czs4OIjnFT8zErNOfVrUKJHqEjw60/HNmzcL
FSpEp92xY4dmBVJQ142il5HKc+fOnWoauR1PnjyhXnbRokXpTjVr1oxEe/ny
5Wmftr/++mvmdXOeJ0f+iY+Pr1WrFlcUDRo04PWAjNYSkG4ePXpEHTeO2W7Z
9iIAgAnCepiqdGr3Fy1aZIwno4qBsLAwLc0WNm7IJKpkSEgInfzq1avUrEga
Vcm/KHu0vXv3LskPahDluFHhpCVL5gvdnYcPH1avXl2CunPQYAYtsgWg+kcJ
fIRfUpKLgwYNypkzJ916dVqcuB8bB7lIYJcpU4aeFlKMmuE5ISUv7xE9YNIT
VNO8yAhP7zKdtkqVKsHBwRbvgKHT7dHR0e3bt5c+CxcRb+kl/eabb/LkyUOF
06NHD54FcOPGjY8//piO5M+ff/z48c+VNe8yCl1IHxcXl9xJlC5d+u+//zY+
GBn411YINUZ0HzXUtwCALCRVZ5ilS5c6OzurDbe0xdS+r1ixomrVqr6+vvzt
y63c6jg+tRok1z/55JPevXuTeucEIiHozC+X7vRtRETE8OHDv/rqK2MIu3/1
tLEkrl+//vnnn4t0p/ulJd8I9WZZSWlYEi/xgqa7SWrwxx9/LF68ON/3vHnz
VqxYcezYsXfu3NFS9q9Vd2vaGTJkCKUvXLjw0aNH5amQN9dYCfAqmawqCfpI
vWySqWoO2Udu7dq1POfi559/lqxaqozRXVdsbGyvXr1k3SUpGSqr77//ngfF
ChQocPjwYfkJVV/s5GZnZ/fLL79oGf2S6sZlLl++XKJECX5UJH6sZjDFgHQQ
EBBQv379U6dOofsDAMgW1Dp8+fLlY8aMUVtzVUUsWrSIGoLz58+n3W7Djci5
c+cqVapELZesA6IOwacF0vYkNn766aeyZcvu379fU4IeaKnJD8tDrvfkyZNv
v/02L4mYP3/+VatWaUmCQZJlZy5BejFO/xQPqOPHj7O1tm3btt99912ePHka
NmzIy2LS6yBzVHVe03SeK1euFC1alJ4TSubv768pxnPqAJLybNeuXdeuXdu3
b9+pUyfap5N37Njx7t27gYGBAwcObNWqFf1jjRo1ateuvXnzZi2lU5aHhwdJ
U1tbW8pbZGRklhVUtqB7reh169GjB+l2nQzeuXOnTEIpVarUkydPJOoOdbGl
u12mTBkeOszYt1Vi/nBdQbePo8rQPdWUbl0G/qMVQgV4//596rTKkX+1OwEA
QMbyf8nrlRO//fabbvhPdHtiYuKSJUuoIbh48aKWhvpfwoz7+PhQO+Xg4MBW
Pl0AQ3bKfUm9p/rDxMbGjhw5Ml++fNRict7E1CxnS0cJmAUyfkFs3769cOHC
vB5T8eLFjx49qqa07EVwLBuZ9CHO6jdu3Hj//fdJfU2aNElL8m+nm87+7Y0b
N2YduGbNGi3lNG3emTFjhsQg4i6zvGhRUVEuLi7U76ME9FKz2vzggw9cXV3p
LdOS1vwiuU4HixUrRi8d6Xz+IZviKXu+vr7vvvsuZ0Dn6W15DjO66i4hIaFz
587sJ6Ml1z9UpI0aNeIONW2rVq0qvWkqLk9PT9HtuXLl+vXXX7mcMwqpDLVk
q8icOXM4J9SDkAU9wesjTVsa52cBAEDmsW7dusmTJ2up6XZi2bJlpBV5fDCN
8cP9/f0/+eQTat/ZCVaku05gp6X24zRPnjx57733SKyeOXNGU+yHVlJ/crnR
VS9cuFBkQOXKle/cuUMHU51pCMwC9W2S5/np06ekD+kWkyBkB7P58+fTxy1b
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
2rHcYI3omTNnzp075+/vD8F18+bNixcvXrt2DacYCyAxwgEBATdNBAYGPnjw
wG62AgFBraioQu3atduyZQudxipIpNI9I1SqwLzl8ePHkydPLlKkSBoTaH1g
782bN1+6dCkblvNdbNNumF4fU6dOnT59eoy11UdoVByn9+/f37Zt2+rVq9eu
Xbt///6IiAg1W7bs5Uw2bdpE+s/BgwcnuY8sSIoYNGgQVX6gYcOG6CDUyklI
SCczABogGhdG066IGnVm6sqVKy1atBg6dChtq2o1/LMLVrPTsx4+fNirV68c
OXL89ttvqm7f+RTY2bNnMfDhjlvN3Hn5BQLBy4AqwW7cuNG/f//ixYtnz569
QYMGtWrV8vDwyJUr14cffhgUFGS915VmS2IB7Lp06dK0BfOMGTO0pW3q/Lu6
QcatW7eqVav26quvFixYsLAJBEBFULCDBw/irvfff79cuXKIyZcvX9GiRZcv
X65pMAQCu0A9IX375s2bOSaJ8naC2pBDQ0Npw5dKlSpNnDgRraZYsWJeXl6g
zaAxHTt2ZNWZtpXSkydPunbtSjyHF7Jxk2TCj0HBnDlzqlatmjlzZjTAihUr
YlAAUoEGqNJ1Hg7QVL6fn1/evHmRMwqDpm1Ivy94mUAvExkZibEqVXtUPAxF
yZzbiGuInjD9BVHoZcuWoTx//PGHc2NRtTlzCQMDA1u1atWoUSNuPpphvCOQ
mgvNFvc2bdrU39+fG7Vd9b4KXDp58qSnp+fFixeFtwsE7gBusBjOo5fPkCFD
6tSpJ02aRJE0tQ2+XapUqVOnThmKcu/ftlmIC+IDINvWMmjaA9YSbN26FaUi
wk8bSWAcwQtk7ty54+3tjXiQB8jD6OhoVXMoEGhQKwY4aps2bVTebk3j/lB7
fwqDtPfu3RuNol69ejTcLlmyJIa66Lvnz59PTjYaN25MXuOMuJuZnjt3DlSc
2trq1atjbX7n1OZ57do1NGFargL5EBIScvv2bVo6lyVLlhEjRtC0l1UfeO/e
PfT+lPn06dMNMZURvGSgEhJZpTWqwMcff2xYvCclAG/nJ65atQrF2LZtm4ty
hhd3x9qWcv/000/g7apbNuflZ4oO2v/jjz+iwfIlbdiunXLJibdb16UKBIJE
AQmE8PDwZs2akVKifPnytDgdePToEXe1b731Fq2L0eyEDadyg5ONHTs2VapU
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
Sfu26sdUL7Hy03q0WyS2lOYAuwGM903VPLWf8mzQ3tFumGCt9q7k7OIf/LcF
VpuPtWpZoWXi6Feqp507dyZBV7VqVVV94UoJNb+O1syd5Mb/FGlIDw9xtHnz
5tGjR/fp0wfyc+jQobt37ybZq2alPosV+IKkhVhlvcOjR4/Yn4wmK5zc7uTS
C2+Mdh/x/Jm4Eq+1X2tjd14Su7k5F4BGXOHj6vs8B1zsvxjxvj4ncL38Tj7s
s5E3q2C0fnZHolstv91fZjex87eLN4HdbJ2X81/BxUy0L+YobLdi37p1q0mT
Jq/YMGzYMIonrbu2dEv7pPSXIYvOnDkzd+5cdEBg719//fXKlSsvXbrE67AM
B960Yl+O3lvzugYh+cYbb9AmU6odvka81VKp4VibXLVriRprUjWIZeu3ZVmt
yYRYhaKouan98v/Z4KSNu+JELtZm7KS5ttBeliNVVSG9mt331WK0KsqDGq0l
aq+AsGrExSnt8hMrDY6NT9hqFdVRYvUv2F0Por5XrI2hUeEdPd3uRzYU+Wb9
FNbv7ChnuyVkv08MR2TAWgBXBJRWT9Riq/9aExTWpmS9XS2k3Y/jOrid8qlK
zlHObt26kR8t8HZ1q2i7xXNOpWItgz7nZVPz5xZEPnhv3Ljx+eefN2vWrHr1
6iNHjty5c+f9+/fVG59a3EgKkgTUSkISgzb/+vPPPw3HOg1H9d9um7I+7t9S
UCeJn0F74yTeeQ6xSrdoTaY1AUfPtfuIpwpcucWaP4e1V7N2SbGOeyUnX8PR
K1PYbhf8r35xvB0la//srrVRX9l5Prw/hfPyWBOozcTFymM4qAaO0lg7X46P
90EaeMMj7Xc7UuzE+xbO03OZVcqBMqDjKFOmDLqzdOnS4fjJJ5/QJVdc16ps
FnliFLBx48bJkyf37NnTy8sLZP7y5ctqSaxV6IVT9/+Z4MzPnj1boECBRYsW
nTZx4sSJQ4cOHTt2DPEYbpw6dcrPz+/8+fO4hDDFIIyriLx48SIGIFeuXLl2
7doNGwICAgIDA+/cuYOAv78/Ely/fj04OBgyGUOY8PBwdMdPnjwJDQ2NiooK
CwtDJIX/MhETE4MjGAUCuIr0uBQSEnLdxB0TN03gY2K4gU4cj8NzUQZ6NC7R
cxGDz4viIYzA1atXKYC3OGuCXuekCQSOHDlyyMQRExzGN6FXPmoCd+H7YLyD
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
    "], {{0, 461}, {
    1000, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{1000, 461},
  PlotRange->{{0, 1000}, {0, 461}}]], "Output",
 CellChangeTimes->{3.6006800700300913`*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
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
stYWLo0jIcX3Cmgf//jHl8Yftqd/+Zd/MS8Af//2b/9mPO4Tn/iEfX76059e
ou0kpqNL6D6f+tSn7DuP8p1H+c65pDel0ae7E13hncYewQuNZ5w2EsNaOv+E
d3HLf//3f6dH+L9ut3KOv3JrPc0jdprXXL+0kEZiHSFuQEd4Eb/55MV0jN//
+I//OH3kIx8xl/nHPvYx+w2Ir7nmGrvOuPnNNVDGJ9doN4HMnkvPL7mQsPvR
j37UmotNcUsyzdKA0rcEN8w0znGN72COZ3iWZ2ieV33gAx/wZ9bLdf9bcmKd
DiSgBfhnOGc8HjQQAWzGCwz4BD4osvqermc35KZRL5TAZwK9gTE1sbTwxdEG
D0ARCNM6rfF6tSqo0tUEpSUn0rQFWIyMS0CHy/pktBlC6ZuNLXXHwQYYzO9E
DOn973//kpNLgJaGjuTl4dRIehiAbdhznOfT0ZGuJWAnHslvOqL+CzL0WRAS
pTDObK8z/u3C7wBP0L3EbXoVqnLTreL8BapCCt8Rq+tGuFvWHRElsycQX2qH
AR40KmC4hNVwKjNEfgOa97znPXbuXe961xoegoSxd7/73eYr0B+3EAJKt9it
QBat4K/+6q/sPNdTU0seTAjgFt6k1rk1fa7zZcm3dA/Ncg9NQccgLAF/hiRH
yiKfWy9zgBHZ9GGAh8sAeYTmeDXdAP980gVGRW+vvPLKJV8Wp0x/8zd/Yz3x
HpqVRpSPqB6D4/Ntb3ubfef8n//5n9s5gmx8f8c73jG9/e1vXxKwS2B+61vf
yk/7u+Md7zhd97rXNTbL+T/+4z827Sp9X/IjwYBW4OpE3N70pjfZLX/yJ3+y
nN7ylrek4fOTW9JT6Rf/ty0w+Kd/+qfWEtd5E+fSE3RsSW+THOA0ffvLv/xL
6zdj4DbvryGSMfGb5vj0cwnS6VsG0Jb5bh/5yEdOt7zlLW00t7/97acf/dEf
nX73d393qAQ/s5OyVVKfbpwPSIADXui4KB1VhwR0AJzAUSAHqBgnv/lMHU9t
p7vS3OU+YKV7E0hTL/7gD/4g/f/DP/xDA3EaS/rF/6PT61//ejPHf+/3fm96
7WtfO/3O7/zO9Nu//dvTb/3Wb02veMUrTDDiKfvN3/xNO89nurY+vfKVr0zs
gNt0SZd5jGZo8tWvfrX95nx6gvtTV9OZhHV+84yft+8JnMvpNa95TWo6fbVm
dJu/2TzrNMs1vtNrYkTpdWlapF8JCqkFuwesMcJ0Pb2WO47bbyABoYnggKgg
y2+uJ5gZZAQh3pHaXTOUr9mo6FrqRvrF/zPsdwQa4feXvOQlZjz8+q//uv0m
Vo72wXfdxye/uY/rPEPInvvS55IT6SVc5lS6PY00PZjmARABUgAbiDBy4TL1
eGlo3rIBCP18MiiAkwa8yNPssM0HyBJy44/vkCAkCYnyHT4Bf7CZwSTZMlbB
lOGyKJpHE0WnptOvhEtYi7iOph73MOWgVmDOd6gZHGQKTZ1OZOL4s1Hy57hf
gvx0kygOmlryKxE1v4GrYK5PzoEjnuEccAeAfKZnlvzIbawXinTiX+NHGi0w
pgeiOqiE31xdM+o7WqiH62JnojSojGuR3fk8XRqZHjK8CJ30QoQe54lPTyeD
9UI9UE36vmR4if05AZVLONqe//znT7/8y788/dIv/dL0vOc9zz75TbrFC1/4
Qt2TgJnOJNHA/ZzjGn888+xnP3t6znOeY9cgWK7TDtdpR23y27u0Zl3KPQ3d
yrR9KHbe0MFvWn/Ri15kqAqPpJ6lb6kppgnXeXv6W9rFo3aaF9METn2o4bLL
LptOOeUUlPnpZje7mQ3gF37hF+xxOppeZeNdlm+pfd7PjQ6xJUNOAAEAPEO+
CoPlN7eQH0KiyQ1veMNpbW1tOuOMM6Y73OEORgayG1B7XL9RjO/GMQY4M1ZQ
ZIgfPvShD7VYIgkyP/zDP2y/yewhqwVXKrKJ8z/yIz8yPeQhD5ke9KAHTd//
/d9v7lUMHb7TDt8f+MAHWsQD/wbfuUe/dR/nvuu7vmv6ju/4Drvm5xPs0xOJ
7/Cbtu5///vbu3j2u7/7u9XGkg4mZktX6CafPKJX8uill146ffM3f/N0j3vc
w/JreBWfeIWxy+53v/stuSnNK04B2nQ69SD1K6E5XbYe0iSf/KYJcgfoCT2j
53znk9eme5ecSCJCp3jMm09Np2+Jj/MqznHtXve6l32nWZ3n+7d8y7dMd7vb
3aY73elO013ucpfp67/+620k3/AN3zDd/e53t6whzhNe4ly6ts6FpMhzG49y
C3/czi16JDWVunLJJZekkev6N37jN6ZzCVyLs6Zv+qZvstfTnW/91m+1V6Tr
9pvu0j6f/Na9dJvvvJf7Af63f/u32znu5xPgp3NLHl7ScgKTEAMo+EtDT/1I
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
qzc=\
\>"]],

Cell[TextData[{
 StyleBox["\nKernel methods",
  FontSlant->"Italic"],
 " allow to perform the mapping to an high-dimensional space, without  \
explicitly defining ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 " and without explictly performing the mapping. \nIn the remaining of this \
section, ",
 "we ",
 "will introduce the fundamental results from the ",
 StyleBox["Reproducing Kernel Hilbert Space theory",
  FontSlant->"Italic"],
 ", as presented also in ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998461259623`*^9}, {
   3.6005197554764442`*^9, 3.600519852482081*^9}, {3.600519892420924*^9, 
   3.6005199293763533`*^9}, 3.600519997453315*^9, {3.600520031766438*^9, 
   3.600520098523343*^9}, {3.600520221605938*^9, 3.600520222008019*^9}, {
   3.6005202556530447`*^9, 3.600520371355136*^9}, {3.6005204574178047`*^9, 
   3.6005204999975557`*^9}, {3.600520539060892*^9, 3.60052054057265*^9}, 
   3.600520817666068*^9, {3.60067956304256*^9, 3.60067980293848*^9}, {
   3.600679842850666*^9, 3.60067999337082*^9}, {3.6006800587681828`*^9, 
   3.600680084113222*^9}, {3.600680133063142*^9, 3.600680151937355*^9}, {
   3.600680282772306*^9, 3.600680330666135*^9}, {3.600680412869176*^9, 
   3.6006804148508873`*^9}, {3.601558944642812*^9, 3.601558947558786*^9}, {
   3.607434968114339*^9, 3.607434969701659*^9}, 3.637583979270483*^9}],

Cell[CellGroupData[{

Cell["Kernel function. ", "Subsubsection",
 CellChangeTimes->{3.600520117616384*^9}],

Cell[TextData[{
 "A function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{"\[CenterDot]", 
      RowBox[{",", " ", "\[CenterDot]"}]}], ")"}]}], TraditionalForm]]],
 " that for all ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["x",
     FontWeight->"Bold"], ",", " ", 
    RowBox[{
     StyleBox["z",
      FontWeight->"Bold"], " ", "\[Element]", " ", "X"}]}], TraditionalForm]]],
 " satisfies"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, 
   3.599899918703438*^9, {3.599900060655603*^9, 3.5999000719742527`*^9}, {
   3.600521449431007*^9, 3.600521474971568*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], " ", "=", " ", 
   RowBox[{"\[CurlyPhi]", 
    RowBox[{
     RowBox[{"(", 
      StyleBox["x",
       FontWeight->"Bold"], ")"}], "\[CenterDot]", " ", "\[CurlyPhi]"}], 
    RowBox[{"(", 
     StyleBox["z",
      FontWeight->"Bold"], ")"}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{3.600519871893436*^9, 3.600521484232815*^9}],

Cell[TextData[{
 "where \[CurlyPhi] is a mapping from ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 " to an Hilbert space ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CurlyPhi]", " ", ":", " ", 
    RowBox[{
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], "\[RightArrow]", " ", 
      RowBox[{"\[CurlyPhi]", "(", 
       StyleBox["x",
        FontWeight->"Bold"], ")"}]}], " ", "\[Element]", " ", "F"}]}], 
   TraditionalForm]]],
 " is called ",
 StyleBox["kernel function",
  FontSlant->"Italic"],
 ". If X is an Hilbert space (e.g. an Euclidean space), the simplest example \
of kernel function is the one obtained considering the identity mapping ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CurlyPhi]", "(", 
     StyleBox["x",
      FontWeight->"Bold"], ")"}], " ", "=", " ", 
    StyleBox["x",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ", in which case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], " ", "=", " ", 
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold"], 
     StyleBox["\[CenterDot]",
      FontWeight->"Plain"], 
     StyleBox["z",
      FontWeight->"Bold"]}]}], TraditionalForm]]],
 ". \nA kernel function is thus a function that can be decomposed into a \
feature map ",
 Cell[BoxData[
  FormBox["\[CurlyPhi]", TraditionalForm]]],
 " to an ",
 StyleBox["Hilbert space",
  FontSlant->"Italic"],
 " F , applied to both arguments and followed by the evaluation of the inner \
product in ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 ".\n\nAdvantages: if the kernel function is properly chosen, instances ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 " can be implicitly mapped into a feature space of high (even infinite) \
dimensionality where they are possibly linearly separable (or better \
separable), without having to explicitly perform the expensive inner product \
evaluation in the expanded feature space.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, 
   3.599899918703438*^9, {3.599900060655603*^9, 3.599900104759665*^9}, {
   3.5999001615641317`*^9, 3.5999001634212217`*^9}, {3.6005199520162573`*^9, 
   3.600519971664825*^9}, 3.6005200236061497`*^9, {3.600520399904098*^9, 
   3.600520400837484*^9}, {3.600521444500123*^9, 3.6005214648852882`*^9}, {
   3.6006799286419353`*^9, 3.600679942970479*^9}, {3.600680170362831*^9, 
   3.6006802684922028`*^9}, 3.601558949267808*^9, {3.6016394098918867`*^9, 
   3.601639412680696*^9}, {3.637581472690474*^9, 3.637581509678729*^9}, {
   3.6375815614730587`*^9, 3.637581568607192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finitely positive semi-definite function. ", "Subsubsection",
 CellChangeTimes->{3.600520160142*^9}],

Cell[TextData[{
 "Let X be a metric space, we say that a function: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", ":", 
    RowBox[{
     RowBox[{"X", " ", "\[Times]", "X"}], " ", "\[RightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]]],
 " is finitely positive semi-definite if it is a symmetric function and for \
all finite sets ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["{",
      FontWeight->"Bold"], 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "1"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "2"], ",", "\[Ellipsis]", ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "n"]}], "}"}], " ", "\[Subset]", " ", "X"}], 
   TraditionalForm]]],
 " , of size ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 ", the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", " ", "\[Times]", " ", "n"}], TraditionalForm]]],
 " matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["K",
    FontWeight->"Bold"], TraditionalForm]]],
 " whose ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", " ", "j"}], ")"}], TraditionalForm]]],
 " entry is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", " ", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}], ")"}], TraditionalForm]]],
 " is positive semi-definite, formally"
}], "Text",
 CellChangeTimes->{
  3.600520184976275*^9, {3.600521307814665*^9, 3.600521322030164*^9}, {
   3.600521478707449*^9, 3.600521497086351*^9}, {3.60285900845245*^9, 
   3.60285903066188*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[ForAll]", "X"}], ",", " ", 
  RowBox[{"\[ForAll]", " ", 
   RowBox[{
    StyleBox["v",
     FontWeight->"Bold"], " ", "\[Element]", "X", "\[Subset]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["v",
     FontWeight->"Bold"], 
    StyleBox["\[Transpose]",
     FontWeight->"Plain"]}], 
   StyleBox["Kv",
    FontWeight->"Bold"]}], " ", "\[GreaterEqual]", " ", 
  "0."}]}], "DisplayFormula",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5998999945673923`*^9}, {3.599900197057012*^9, 3.5999002496844673`*^9}, {
   3.600521004175788*^9, 3.6005210089374657`*^9}, {3.600521060236018*^9, 
   3.600521063317602*^9}, 3.600521481463724*^9, {3.607435035187615*^9, 
   3.607435040456483*^9}, {3.6074350716912622`*^9, 3.60743508054224*^9}}],

Cell[TextData[{
 "The above mentioned matrix K is called ",
 StyleBox["Gramian matrix",
  FontSlant->"Italic"],
 " of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\n\nWe can now state without proving the main result of the Reproducing \
Kernel Hilbert Space theory: the characterization Theorem of kernel \
functions.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5998999945673923`*^9}, {3.599900197057012*^9, 3.599900229925082*^9}, {
   3.600521078772048*^9, 3.600521081686219*^9}, {3.600680387046007*^9, 
   3.600680396475376*^9}, {3.600680431165286*^9, 3.600680433155499*^9}, 
   3.60155895076786*^9, {3.6028590505959682`*^9, 3.6028590516400557`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Characterization of kernels.", "Subsubsection",
 CellChangeTimes->{{3.600520195189268*^9, 3.6005201969073973`*^9}, {
  3.6005211261606493`*^9, 3.600521128086487*^9}, {3.60052122497523*^9, 
  3.6005212262512207`*^9}}],

Cell[TextData[{
 "A function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", ":", 
    RowBox[{
     RowBox[{"X", " ", "\[Times]", "X"}], " ", "\[RightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]]],
 " is a kernel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"\[CurlyPhi]", "(", 
      StyleBox["x",
       FontWeight->"Bold"], ")"}], "\[CenterDot]", 
     RowBox[{"\[CurlyPhi]", "(", 
      StyleBox["z",
       FontWeight->"Bold"], ")"}]}]}], TraditionalForm]]],
 " if and only if it satisfies the finitely positive semi-definite property.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5999000197286587`*^9}, 3.599900278074287*^9, {3.6005211824337063`*^9, 
   3.600521247768865*^9}, {3.6005212794860983`*^9, 3.600521289748728*^9}, {
   3.600680334392817*^9, 3.60068033556082*^9}, 3.601558952037673*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Constructing kernels.", "Subsubsection",
 CellChangeTimes->{{3.6005208743915157`*^9, 3.600520889399968*^9}, {
  3.6005211310135317`*^9, 3.6005211312860518`*^9}, {3.60052123028054*^9, 
  3.600521231853421*^9}}],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]]],
 " be kernels over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"X", " ", "\[Times]", "X"}], ",", " ", 
    RowBox[{"X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "\[CenterDot]", ")"}], TraditionalForm]]],
 " a real function on ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Phi]", ":", 
    RowBox[{"X", "\[RightArrow]", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "m"]}]}], TraditionalForm]]],
 ", with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]]],
 " a kernel over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[DoubleStruckCapitalR]", "m"], "\[Times]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "m"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["B",
    FontWeight->"Bold"], TraditionalForm]]],
 " a symmetric positive semi-definite ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]]],
 " matrix. The following functions are kernels:"
}], "Text",
 CellChangeTimes->{{3.6005215470135736`*^9, 3.60052181043848*^9}, 
   3.600521960289501*^9, {3.600680350688184*^9, 3.600680352079165*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     SubscriptBox["k", "1"], 
     RowBox[{"(", 
      RowBox[{
       StyleBox["x",
        FontWeight->"Bold"], ",", 
       StyleBox["z",
        FontWeight->"Bold"]}], ")"}]}], "+", 
    RowBox[{
     SubscriptBox["k", "2"], 
     RowBox[{"(", 
      RowBox[{
       StyleBox["x",
        FontWeight->"Bold"], ",", 
       StyleBox["z",
        FontWeight->"Bold"]}], ")"}]}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["ak", "1"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["k", "1"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], 
    SubscriptBox["k", "2"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"f", 
    RowBox[{"(", 
     StyleBox["x",
      FontWeight->"Bold"], ")"}], "f", 
    RowBox[{"(", 
     StyleBox["z",
      FontWeight->"Bold"], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["k", "3"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Phi]", 
       RowBox[{"(", 
        StyleBox["x",
         FontWeight->"Bold"], ")"}]}], ",", 
      RowBox[{"\[Phi]", 
       RowBox[{"(", 
        StyleBox["z",
         FontWeight->"Bold"], ")"}]}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold"], "\[Transpose]"}], 
    StyleBox[
     RowBox[{"Bz", "."}],
     FontWeight->"Bold"]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.600521821322874*^9, 3.600521954172388*^9}}],

Cell[TextData[{
 "Using these rules, it is possible to prove that the following functions are \
kernels ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ":"
}], "Text",
 CellChangeTimes->{{3.6005220003083353`*^9, 3.600522027218873*^9}, 
   3.600522239615951*^9, {3.6375816772219143`*^9, 3.637581681519464*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"p", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["k", "1"], 
      RowBox[{"(", 
       RowBox[{
        StyleBox["x",
         FontWeight->"Bold"], ",", 
        StyleBox["z",
         FontWeight->"Bold"]}], ")"}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"exp", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["k", "1"], 
      RowBox[{"(", 
       RowBox[{
        StyleBox["x",
         FontWeight->"Bold"], ",", 
        StyleBox["z",
         FontWeight->"Bold"]}], ")"}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"exp", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["\[Sigma]", "2"]]}], 
      SuperscriptBox[
       RowBox[{"\[LeftDoubleBracketingBar]", 
        RowBox[{
         StyleBox["x",
          FontWeight->"Bold"], "-", 
         StyleBox["z",
          FontWeight->"Bold"]}], "\[RightDoubleBracketingBar]"}], "2"]}], 
     ")"}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600522034296327*^9, 3.600522125572928*^9}, {
  3.600522159916383*^9, 3.600522173394792*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]]],
 " is a polynomial with positive coefficient, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Sigma]", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 " and the last kernel is called the ",
 StyleBox["Gaussian kernel.\n",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.600522181091859*^9, 3.6005222713596487`*^9}, {
   3.600604367460373*^9, 3.600604407425941*^9}, {3.600633626266096*^9, 
   3.60063365830182*^9}, {3.6006804528314857`*^9, 3.6006804530787573`*^9}, 
   3.601558955248292*^9, {3.607435123162004*^9, 3.607435126578198*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607435131187323*^9, 3.607435145995408*^9}}],

Cell["\<\
A snippet of code exploiting matrix computations to efficiently compute the \
Gaussian kernel (without any loop on the samples) is provided below
\
\>", "Text",
 CellChangeTimes->{{3.600522181091859*^9, 3.6005222713596487`*^9}, {
   3.600604367460373*^9, 3.600604407425941*^9}, {3.600633626266096*^9, 
   3.60063365830182*^9}, {3.6006804528314857`*^9, 3.6006804530787573`*^9}, 
   3.601558955248292*^9, {3.607435123162004*^9, 3.607435126578198*^9}, {
   3.637581717582654*^9, 3.637581717931527*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"computeGaussianKernel", "[", 
     RowBox[{"fTr_", ",", "fTe_", ",", "sigmaSQ_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"D", ",", "K"}], "}"}], ",", "\n", 
      RowBox[{
       RowBox[{"D", "=", 
        RowBox[{"computeDist", "[", 
         RowBox[{"fTr", ",", "fTe"}], "]"}]}], ";", "\n", 
       RowBox[{"K", "=", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "1"}], "/", 
           RowBox[{"(", 
            RowBox[{"2", " ", "sigmaSQ"}], ")"}]}], " ", "D"}], "]"}]}]}]}], 
     "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"computeDist", "[", 
    RowBox[{"fTr_", ",", "fTe_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "nTr", ",", "nTe", ",", "NTr", ",", "NTe", ",", "P", ",", 
       "D"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTe", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTe", "]"}]}], ";", "\n", 
      RowBox[{"P", "=", 
       RowBox[{"fTr", ".", 
        RowBox[{"Transpose", "[", "fTe", "]"}]}]}], ";", "\n", 
      RowBox[{"NTr", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Norm", "/@", "fTr"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", "nTe"}], "}"}]}], "]"}], "]"}]}], ";", "\n", 
      RowBox[{"NTe", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Norm", "/@", "fTe"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"D", "=", 
       RowBox[{"NTr", "+", "NTe", "-", 
        RowBox[{"2", "P"}]}]}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600631896186021*^9, 3.6006319280829906`*^9}}],

Cell["", "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernelized Support Vector Machines", "Subsection",
 CellChangeTimes->{{3.60052057586366*^9, 3.6005205832622623`*^9}, {
  3.600680463724263*^9, 3.600680475089451*^9}}],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Kernel Trick\[CloseCurlyDoubleQuote].", 
  "Subsubsection"],
 " Given an algorithm formulated in such a way that it depends on instances \
only through their inner product, it is possible to construct an alternative \
optimization problems by replacing the inner products with a ",
 StyleBox["kernel function",
  FontSlant->"Italic"],
 ".  The algorithm is thus said to be ",
 StyleBox["kernelizable",
  FontSlant->"Italic"],
 ".\n\nAs it can be seen from equations (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_Dual"],
 ",",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_Dual"],
 ",",
 
 CounterBox["DisplayFormulaNumbered", "eq:2norm_svm_Dual"],
 "), the SVM training procedures depends on data only via the inner products \
of the training instances, as encoded in the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ". We can thus substitute the inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], "\[CenterDot]", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "j"]}], TraditionalForm]]],
 " in the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ", with evaluations of a kernel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "j"]}], ")"}], "."}], TraditionalForm]]],
 " The same argument can be repeated when computing ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 ", while during prediction we have:"
}], "Text",
 CellChangeTimes->{{3.6005205906937237`*^9, 3.60052060725213*^9}, {
   3.600520734263096*^9, 3.6005208082720633`*^9}, {3.60052231125207*^9, 
   3.60052244716322*^9}, {3.600522602075625*^9, 3.600522631488048*^9}, {
   3.600679822312314*^9, 3.600679824486844*^9}, {3.6006805005202703`*^9, 
   3.600680513041226*^9}, 3.637581782629739*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], 
    RowBox[{"(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], " ", "+", "b"}], "=", 
    RowBox[{
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}]}]}], "=", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], "k", 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"], ",", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], ")"}]}]}], "+", "b"}]}]}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.6005224511976852`*^9, 3.6005225680942383`*^9}, {
  3.600522616237176*^9, 3.600522616683543*^9}}],

Cell["\<\
The SVM algorithm is thus kernelizable.
\
\>", "Text",
 CellChangeTimes->{{3.600522576351549*^9, 3.600522581762825*^9}, {
   3.600522634902485*^9, 3.600522689377336*^9}, {3.600632077360847*^9, 
   3.600632141805462*^9}, {3.600633696941916*^9, 3.600633704520831*^9}, {
   3.600680543354413*^9, 3.600680558709915*^9}, 3.600680591255466*^9, 
   3.6015589690049334`*^9, 3.6074352003734617`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607435206105165*^9, 3.6074352116708393`*^9}}],

Cell[TextData[{
 "Following are two examples of using a Gaussian kernel with a 1-norm \
soft-margin SVM and ",
 Cell[BoxData[
  FormBox["\[Sigma]", TraditionalForm]]],
 " either manually set\n"
}], "Text",
 CellChangeTimes->{{3.600522576351549*^9, 3.600522581762825*^9}, {
   3.600522634902485*^9, 3.600522689377336*^9}, {3.600632077360847*^9, 
   3.600632141805462*^9}, {3.600633696941916*^9, 3.600633704520831*^9}, {
   3.600680543354413*^9, 3.600680558709915*^9}, 3.600680591255466*^9, 
   3.6015589690049334`*^9, 3.6074352003734617`*^9}],

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.6006048285290947`*^9, 3.600604832214456*^9}, {
  3.60060492573352*^9, 3.60060493283676*^9}, {3.60063205504002*^9, 
  3.600632055382025*^9}, {3.637589294615818*^9, 3.637589306180026*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", 
      SuperscriptBox["10", "s"], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "6", ",", "0.5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"s", ",", "3", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5998242191740923`*^9, 3.599824229454277*^9}, {
   3.5998252407905684`*^9, 3.599825254780796*^9}, {3.599826597734229*^9, 
   3.5998266032226143`*^9}, {3.599827838897214*^9, 3.599827844368305*^9}, {
   3.599834921347526*^9, 3.599834931257943*^9}, 3.599837534064529*^9, {
   3.599837586265244*^9, 3.599837587236148*^9}, 3.599838156127186*^9, {
   3.599838278004527*^9, 3.599838283845191*^9}, {3.599838320952675*^9, 
   3.5998383940135202`*^9}, {3.6001818323648357`*^9, 3.600181839037133*^9}, 
   3.600184631598147*^9, {3.600193595816077*^9, 3.600193596704954*^9}, {
   3.600414786940836*^9, 3.6004147882576027`*^9}, {3.6006048392177057`*^9, 
   3.60060484081664*^9}, {3.600605120330772*^9, 3.600605236489294*^9}, {
   3.600605278496801*^9, 3.600605370975388*^9}, {3.6006054467664337`*^9, 
   3.6006056337560787`*^9}, {3.600608340073489*^9, 3.600608403369323*^9}, {
   3.600608784741392*^9, 3.600608800561816*^9}, {3.6006138946792793`*^9, 
   3.600613914949931*^9}, {3.600613981095159*^9, 3.6006140038278933`*^9}, {
   3.600631031797982*^9, 3.600631046883752*^9}, {3.600631169968791*^9, 
   3.6006312022651997`*^9}, {3.600632284493023*^9, 3.600632381592064*^9}, {
   3.600632716638606*^9, 3.600632720569006*^9}, {3.600632883363166*^9, 
   3.600632887269599*^9}, 3.6006341300235977`*^9, {3.6012176852743673`*^9, 
   3.601217723056239*^9}, {3.601217774874392*^9, 3.601217829056218*^9}, {
   3.601218048212277*^9, 3.601218049956155*^9}, {3.601218092413991*^9, 
   3.601218094058381*^9}, 3.601218538625985*^9, {3.601639528847186*^9, 
   3.601639529765829*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 1.5, $CellContext`s$$ = -0.5, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 6, 0.5}, {
      Hold[$CellContext`s$$], 3, -1, -0.5}}, Typeset`size$$ = {
    400., {191., 196.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$214775$$ = 
    0, $CellContext`s$214776$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`c$$ = 0, $CellContext`s$$ = 3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$214775$$, 0], 
        Hold[$CellContext`s$$, $CellContext`s$214776$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[10^$CellContext`s$$]], 
      "Specifications" :> {{$CellContext`c$$, 0, 6, 0.5}, {$CellContext`s$$, 
         3, -1, -0.5}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{451., {253., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006139182977867`*^9, {3.600613991571281*^9, 3.600614006333933*^9}, {
   3.600631166222625*^9, 3.600631204383501*^9}, 3.600632361422915*^9, 
   3.6006324038610373`*^9, 3.600632706012581*^9, 3.600632790117234*^9, 
   3.600632828274665*^9, 3.6006328883788433`*^9, 3.6006341308833113`*^9, 
   3.600673411795135*^9, 3.601214296560351*^9, {3.6012177250354443`*^9, 
   3.60121774461922*^9}, {3.6012177771940536`*^9, 3.601217790779821*^9}, 
   3.601217975721672*^9, 3.601218016027615*^9, 3.601218100445734*^9, 
   3.601218427072694*^9, 3.601559005952841*^9, 3.6015718646445913`*^9, 
   3.602859125092246*^9, {3.602860301230935*^9, 3.602860304963408*^9}, 
   3.607435219113673*^9, 3.637564997130847*^9, 3.6375741093416557`*^9, 
   3.637585932828742*^9, 3.637589234152894*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

or automatically estimated from the distance matrix
\
\>", "Text",
 CellChangeTimes->{{3.6006805982005177`*^9, 3.600680602556728*^9}, {
  3.6015590758471746`*^9, 3.601559076617323*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.637588572062921*^9, 3.637588576374981*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$1910 = MousePosition["Graphics"]; 
     Private`p$1910 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$1910], 2], 
          Union[
           Partition[Private`pt$1910, 2]]}, 1]]; 
     If[Private`s$1910 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$1910}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$1910}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$1910 = {}; 
     Private`s$1910 = Private`s$1910 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{{3.637588577236641*^9, 3.637588588173602*^9}, 
   3.637588628986217*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.600613948168401*^9, 3.600613952460599*^9}, {
   3.600613984781619*^9, 3.600613985070965*^9}, {3.600632430678021*^9, 
   3.6006324394629927`*^9}, {3.600632760059959*^9, 3.600632760297097*^9}, {
   3.601217841683545*^9, 3.6012178996634207`*^9}, {3.601217934031218*^9, 
   3.6012179413367558`*^9}, 3.6012181058933687`*^9, {3.601218378597372*^9, 
   3.601218386568543*^9}, {3.601218449702098*^9, 3.601218454101859*^9}, 
   3.6012184852873774`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 2.5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    288., {149., 149.20261718750004`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$349386$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$349386$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[$CellContext`fTr]], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {181., 184.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006139555960484`*^9, 3.6006140124361277`*^9, {3.600631134408229*^9, 
   3.600631156152076*^9}, 3.600632442234915*^9, 3.6006324889386044`*^9, 
   3.600632670795189*^9, {3.6006327915627813`*^9, 3.6006328094417877`*^9}, 
   3.601214371380438*^9, {3.601217883436945*^9, 3.60121790023698*^9}, {
   3.601217942569275*^9, 3.601217968762043*^9}, 3.601218107421936*^9, 
   3.6012184546693573`*^9, 3.601571936310586*^9, 3.602859157011862*^9, 
   3.6375860488656054`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nNote that the only difference w.r.t. 1-norm SVM implementation presented \
in the previous Section is that the ",
 StyleBox["linearKernel", "Code"],
 " used to compute the inner products between the samples has been replaced \
with a ",
 StyleBox["gaussianKernel", "Code"],
 ".\nExamples with the 2-norm soft margin SVM and the hard-margin SVM can \
also be similarly obtained, without any modification to the training \
algorithm\n"
}], "Text",
 CellChangeTimes->{{3.600633734023837*^9, 3.600633762487398*^9}, {
  3.6006806134703293`*^9, 3.600680765709626*^9}, {3.601559081232439*^9, 
  3.601559082916675*^9}, {3.637581822110478*^9, 3.6375818269573317`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train2NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.60063376783984*^9, 3.600633799012179*^9}, {
   3.600634018727207*^9, 3.600634021419395*^9}, 3.6006340741687193`*^9, {
   3.601218354623122*^9, 3.601218368367414*^9}, {3.6012184626827097`*^9, 
   3.6012184719714117`*^9}, {3.6012185142264338`*^9, 3.601218516602757*^9}, {
   3.601626556640802*^9, 3.601626565263352*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 4., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    288., {150., 149.60839843750006`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`c$457765$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$457765$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train2NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[$CellContext`fTr]], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{324., {181., 184.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.60063395696488*^9, 3.600634022691804*^9, 3.6006340748757343`*^9, 
   3.6006734975619097`*^9, {3.6012185016681843`*^9, 3.601218517924493*^9}, 
   3.601559032899728*^9, 3.6016265662634573`*^9, 3.602859184103071*^9, 
   3.637586116663261*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"runSVMExperiment", "[", 
  RowBox[{
  "fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainHardMarginSVM", ",", 
   RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6006337750492973`*^9, 3.600633807983213*^9}, 
   3.6006338717603903`*^9, {3.600633904185114*^9, 3.600633905192507*^9}, {
   3.600633935598153*^9, 3.600633983199975*^9}, {3.601218398120228*^9, 
   3.601218420453926*^9}, {3.601218475151033*^9, 3.601218496491725*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxl3Xe8j+Xj+HGa0tIQqaiotAj1MRpXSVqEpowSEaWMaE8aSFkN7VAqJbKP
cNt77z2OvYnS7vf2fdzP6/zO6fPP5/F63Od9X+c+3s/7vq77fnfOeY1b3dn0
iHz58j19Yr58h/9/eomTnvmrz4Hk5opnNu/YamkyaPrFG7us/jn2+21uuuPM
Ijn9YrGHsr6usz/2w5NeKPW/rvtiv7f8ihKd394bu/ElzX/56og9scu+8Pms
iU/viv3XnKV91u3aEXvG4e/noe25x1+2NXaTw+PV2BL7isLD/rhzwqbYfzfb
Ob/V/zbGnjnq/K+7frch9gcF67347bnrc8Y7vP3SNTnH06DHXVMLr4z97//9
b2nsj/o98X3lHYtiX3XzmrpPLp4f+4slh0eYFXvp2e2bzKkzJXaR6V8+82qN
cbE73Ptg5if0Y+xhvR5pffWz7+fsr/wPmX+Rj4K+9p/W4zeePDT2wlYjTvq7
WRJ72L4Xyxy/bkrsl749/B3Njl3qx4euO/WsBbE7n3igx/IrFsfe0+K1zZ9V
XxY788Oo3LTBytj/9+NquyZ2t3D2vt9uXB974u5NZ66euyH2Lx8PvDG5f2Ps
0rc99XjfTZti1//tug9eb7Ul9jv9j53Q/I+tsSfcPX/H7a9vj33wiA9PL1to
Z+yLDh/Px7ti1zv847xgT+y3Dx/f4L2x16/J/O/TfbF/v3Ji21pN9scu1DXz
DZT+OTYfMxqOvKTSZ4ujD82H5kPzofnQfGg+NB+aj1zjZ3xoPjQfmg/Nh+Yj
jpf6iMeT+tB8aD40H5oPzYfmQ/Oh+Yj7S31oPjQf8fWpD82H5kPzofnQfGg+
NB+aD82H5kPzofnQfGg+NB+aD82H5kPzofnQfNz+2j27d81eGH1oPjQfmg/N
h+ZD86H50HzkGj/jQ/Oh+dB8aD40H3G81Ec8ntSH5kPzofnQfGg+NB+aD81H
3F/qQ/Oh+YivT31oPjQfmg/Nh+ZD86H50HxoPjQfmg/Nh+ZD86H50HxoPjQf
mg/Nh+ZjzoADg/r8OT/60HxoPjQfmg/Nh+ZD86H5yDV+xofmQ/Oh+dB8aD7i
eKmPeDypD82H5kPzofnQfGg+NB+aj7i/1IfmQ/MRX5/60HxoPjQfmg/Nh+ZD
86H50HxoPjQfmg/Nh+ZD86H50HxoPjQfmg/Nx2d9S27+/u650YfmQ/Oh+dB8
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
GR+aD82H5kPzofmI46U+4vGkPjQfmg/Nh+ZD86H50HxoPuL+Uh+aD81HfH3q
Q/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H/vyn1iu
/sDd0YfmQ/Oh+dB8aD40H5oPzUeu8TM+NB+aD82H5kPzEcdLfcTjSX1oPjQf
mg/Nh+ZD86H50HzE/aU+NB+aj/j61IfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8
aD40H5oPzYfmQ/Oh+dB8aD4G7Rk7L9/7e6IPzYfmQ/Oh+dB8aD40H5qPXONn
fGg+NB+aD82H5iOOl/qIx5P60HxoPjQfmg/Nh+ZD86H5iPtLfWg+NB/x9akP
zYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8PLHqiSf6
v7Q3+tB8aD40H5oPzYfmQ/Oh+cg1fsaH5kPzofnQfGg+4nipj3g8qQ/Nh+ZD
86H50HxoPjQfmo+4v9SH5kPzEV+f+tB8aD40H5oPzYfmQ/Oh+dB8aD40H5oP
zYfmQ/Oh+dB8aD40H5oPzUeRTd2O6V9hX/Sh+dB8aD40H5oPzYfmQ/ORa/yM
D82H5kPzofnQfMTxUh/xeFIfmg/Nh+ZD86H50HxoPjQfcX+pD82H5iO+PvWh
+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD40Hzo+P6+3bclv
X+f40PH5edrx+Xna8fl52vH5edrx+Xna8fl52vH5edrx+fn/P/7h5+dpx+fn
acfn52nH5+dpx+fnacfn58bz/NzxeH6ednx+nnZ8fp52fH6ednx+nnZ8fp52
fH6ednx+nnZ8fm5/np+nHZ+fpx2fn3u95+dpx+fnacfn52nH5+dpx+fnacfn
52nH5+dpx+fnacfn52nH5+dpx+fnacfn52nH5+dpx+fnacfn52nH5+dpx+fn
acfn52nH5+dpx+fnacfn52lfczBzAOFA0um25jPWvLEk/r1OfX2B6os6Ntod
dLvD/xw798S+a8hjp11w9b7YLY+r/c37+fbHfq3RldcWmJrTxtfG7/rBl3fc
vGlB7JPGVT3lr1Pnxz53xoSvH+o4O3apM/65bNb66XH/1Utc88S8x/cFnff4
bq54ZvOOrZbG49GORzse7Xi0/Ws/L9+/9v1r37/2/ft5+P6PKLjk1C9aH0i2
jR/f+4o/lySH304PH9of8vbaa049f1OXnPNb3u2+v/j3WNOvt3/bvZ/8e2zt
8kn5HzrtieN5f9n+dmbz9OP2xe3x7yHnGd/PP1/2K9NK3LE3btd5f/62e/8a
r9jh80nLnPH8+2ivL9jmmK49hy+KPaPhyEsqfbY4fr3t2nbfT+nFJ//R5dSc
8bTj93pf/+jWB+pvvnhxfH/Y7vvX9pf3643f/8AZN1aZl7Pdz9/Px89br/xu
2Mtjb9sRGv3R9NmTf/4pOSlzuv9iyc7Y3t/az0M7fu370d7fenW1GT/UfDc7
NH93bcfs74clJx0+nZbYFLtqn3pHnD5gc+x2tUpedujKrbG/+XvnPSuTbbF9
/zpzNct8h2vD+gY/nP3YvAFJ5pt5/dHjNsQ2vj63aM2TOyxYHtafF5qc36V3
8ka7tY1v2boqdtxf2mN+Ovy/JeGY5c/OuumStsHr9f9dnr5aGH4+5qUv+877
Ivh6vfHo8hc/cO68kL2wa7e/7h8Uv16feXh3B6eHFvNqXnvpzyPi1+s73t21
stqMiaHxVUvK1604Ln69tn1gzTLvVh03MRQYefgCmRW+zffzSSsaTY3bte1f
DR3eudWRM8Pmw++X6d+GPs2ePeqY/nPidm37vK6fhTu+nB+7ZrN8L37YfmEY
/PzhCc9DYVZoPHpT9cVxu7b91jMnHypbdGnsaT9fcNXz25eFVlc/e8zIXl8n
N81+s+3U0Svidm37pK+2Dzql66rYN7x8++4GDdeEGod/HOeOSpK6Ay/5psy6
uF3bXvzDY4f9/vL62GtfH3Xn5803hDaZ2cKx10xMPmnbYn+1Otlxu7a9wYPF
uu+ovDH83+4fmZ4UqzGrTPfzN8Xt2vaVlV6Yc9Xxm2P3vuDylqsObA7/98/b
a25S99S1BV9dvSVu17af8e873144ZWvspTvDLbMHZhz88lVmSrQweXf5vi1t
3t8et2vb757S5/UiL+8Is+tUzEyxliSnDrmz1NhHdsbt2vaFnx05qXHtXeH/
plNdlifd3xr2UIHKu+N2bXvtZ5rm++G8PeH9w/PFL1YlJzU94/O7Cu6N2/Vf
h+ebI9Ymc+tMu/b3n/fGr9e2u36Zvzh/8P7wzX3/eabWqPj3xm13/dHOt9r5
VJvPaNcfbT7m/OL80XJDseNqFPwx/v10283PtPmZNj/T5oPOR84323698KLr
uvSLf7/ddvNL5yPnn7x/D95281Pnp3g+yvv3tNPzk/NR3r8v7PzkfJT37606
Pzkf5f37k3nPT/5enM7798fynp/8fSCd9+/P5D0/+XsQ2u+/13l/33re85Pf
d6z9fled9/eL5j0/+X1+2u8v03l/n1be85PfV6P9fg6d9/dH5D0/+e+xdd7/
fjjv+cl/f6f990Y6738vk/f85PPl2udpdd7Ph+Y9P/n8lM77+aC85yfPy3Xe
58N5z0+ej+i8zwecn5yP8t4vzXt+iver0jY/fWTZhbc9NXBHyD73qGsmnzs6
aZ55dxxzKDvsGP1C9Q9WDUmOKn337a9MXBc2fbujz+LLvk6qtCr35YH3V4Rt
P418/JdqPZLMbLr25a8uDQdHzpr/wudvhtaHOTy2KOzJuqFE5bZfhuMPf3v3
zA97q5Z+/daXfgw1/lyWOSPODFu/GfTcU5NGhVerDs8MMTm0fvOsUXWOGh8e
P+2Cn/5XZ0xovrvvwJdunRYG35isqHJwUGh01yX9vntnbjjj8Nup6NvhkhGj
O1f8aXH48v/ekH2SL6uuv+HMsivD1iGHAQ9Pis87+o8/+q4LmZPBlpI/jk9m
Dyx8/xNvZYcCs659e/Dqqcltbz79flaDTWFhx8MTvjlJp5pd2g44Y2u447MJ
uzd9uCCZfNqnd3w8f3sY+sedN3w3aHFSdfc/b23pszMUvW/Tu22mLEvGT200
o9yTu8OLQ9tvq7hqZXLdFxOPebHa3pCdeff+s29N8vLUrDt7nLEv3PFK5gC3
bQ9bHr9+wuUvjUhqnZnZQbnssPrkth/kb/tDsvDZt877tOLasPzNqXVrzfs8
yZx9nyt0wvIw4uWbC69e3DTp+3DmH+jXxWHn1+3uKlrvo3Dt4fnt+gVhS4kZ
pzcb+V0YfF+Lf597b07Y+cvOf9edOzxs+ax63T0tpoVN9Z/85YRmY8LZmaN/
6LoJYcdpN7Su8MyU0PfwdPWCESH72elNG42dHYr93zfQL7SccdzOHgsXheuq
Hf7fa8mWe8r2e7L6ilDl8PoxGZg0yr67/j2j14bD0+ef/peZN1cc2/msItnh
y8Nv96mTkh2FSkxrtm1jeOKieeuf+nlGUnpZuX739d1y+GoxKf/J85OHP632
8i0NtodXa3QpMr3UoiT7qf5jel2+M2z55qzH3qmyNGlUu8Afa//ZFW4/euC4
u2uvSNZe/GjFS+bvCYMPn86brU4+O+OspfNG7Q3m+3E+nrbrq/m/7dp264E4
X0/bdusD27Xt1gu2a9utH2zXtls/uD5q12frCdu17XF9kF4vteuv9YDrp3a9
dT0yH3Y90ryVOfLQSX2K5lx/zH9dfzSP33Q7e1qHrjnzY/Nd1xvN6/lnV335
4Xw51xfzW9cXzfMdi4eeVXJ0zvXEfNb1RPPe9aOph05rtzFeT8xnXU+080HB
dqWvevCmnOuH+avrh3a+qF7l6lNq/7s1vJqZLWxtuzOeP4etXlRg1t+7YlvP
autZbf2rx92WOUG+uz92h2klTnpmzMZ4Ph6eOd3Uv3lzbOvNuN5N2/tt22H+
C7fE80/+59/7ddAHW2Nbn3q99vqzDp8fGm6LX3/l4cvj+Tnns7Mfe2f0j/3X
x+tDy3P+mLP0vFXx+uD9Zn1nvqSdn/Y0evGXT5ZMiN2yyrry2/pPiu8/6z3v
V+18tmXqUTtnFJsR++EvmpUuvGtmfD+3OqN66z/Lzo/vT+s/72ftfLhn79cD
q+fP6e9X162xa/vC+H7f0fex0mv6LYnvX+tB73ftfNr8hTlNS7fP6QtbvHTU
3IbLo4eHy/ZYP67Iqvj+tj7kQTsfZxc4cE7B7atjf/FLvzGDFqyJXvY0rF9j
/k3r4/vfepEX7Xz+w20n7GxfJqdPmvDw6Ol9N0RPl5V6ovSEf3OunwP+ntf0
hAWb4nzJ+pAX7XrQfMcrRw3JyunpjVYsOqrMluhpy6TsG/7usjXOp6wXzb+0
60n/wb3W930yp4+5aNegX7Zui/Mr60fzMe36U6rLL+fsqZbTr+W7Y/f1WTvi
fMt60vxMu171bXJf/cpn5PQRKwdd0rXLrjgfs740X9Oub+dem9X7ta27Y78y
9JTmy+qn17st6+N60vMMXXjcvKYbnl+X/JC/2ejRtXPa/U3rT+cP6ze+zUds
17xbr9r+0et7n7y/Us75zPpVz6kw6tNrJu2ObT2r3S+M5790favdH9TWu7p8
icyKr1zO+dD6V7vfqq1/nR8/Ln5Uv+2vbopt/avnzs7874Qtsa1vnc+uygxX
suWG2Nazzm+fz5p4KOv71bGdv6wPnY+s/5xPrOecD6zPeLbe4tH6iWfrH/Mv
81ltvcSb9ZDrm/WP7ea/2nqJL+shXqx3vP+tZ7yfrVe8P/M+LzK/sd4wHzbf
8X7V3p/+vVx/4v2IdD5kvWI+bX4U78embT7l39f4/n3Nn6x3zMfj/db0+9fm
X94Pxnd/4j/3W9P7GdZL5vfuV+S9/+r+hvWU+b/7F3nvx7rfYb1lfWC766/7
Hdp6zPXY9dv72frMesL9ENdj13ft612fXc95cH22HnF95sP11vrE9ZYX10/r
FddPflwPrV/44cn1zXrGdtcv80Xt+ud65nrFh/Wj9Y7ro+uP65n29a5Hrl98
WX9aLxnP9cj1Tft61yfXMz6tX623jOf65Hqnfb3rletb/Dxmuv61XrPd9cr9
CG197PrlfGU+4fxjPuB+IQ+x89wP5Mt62f0I9wO93vrZ/Qn3A/mxnna/wvvb
/UJetPW2+xl8uV9ou/sb3t/WW+af2vXB+sv73XrL/FK7flh/ef9bb5k/atcX
6y/vd+st80Pt+mP95fphvcWH9u9p/eX9av3k/a9dX6yn3J9yf8v7R7sf4H6L
95v7W7a7/+Ln73xmu/ef+Yzrg/mO64v5jO3mO7abz9huvmO7+Yzt5ju2m8/Y
br5ju/v7tpvv2G4+43pkvuN65vzt/rL5iPWQ87H7x95/1jfer+4Pe79Zr8Tn
Ven9X+8v6w/vR/d3vZ+sJ1xfeeXN/XPzKdcP71f3e73fnI+db92f9f5yfvV+
dD/WfMb50vnQ/VfzG+c/62s/b89PtPmJn398fpvOT+LzkbTNP8wXPE9xPvN8
RJtf5J2POL+Zv2g/X/ML/x7mh7xr10PzST9v80Heteuh+aOfj/mV+w95fx7m
S+6H5j1+96vcH3W8vj/3G43vfmP8eaTXB/cj8h6/5wvej/bneM2Xvb/sv0Ld
g2U33LcxHp9//znD2564sf7w+PysavHrT/tt/4i4/rr/9APVfyo7Kpl235+/
fdB63X+el73zSpup5d7+Prmx5soupxy18j/Pxwasrti9a5VPE9e7MrvrvFn8
10/j9e2S6XtvWv7Ld/F6dt2WLZve6js8NJ5/11uFa06O16P4ecumf4+r+OGU
cOWVR1RuXPCn6M39lWXFP35hfoc5ocodd4Wljw4Oef9e/F9nXTr9nq6Lwsgh
pd68dtIbIe/fPz268QM3XLVmeVjXv3PPKZf3+8/f8xoxKn/TO5usDW817f5H
vQnD//P3KTZNvbfW77s3hK7n1GrXueiEeP64o817m8c8kfP7Muvclv+oIT9M
i+eDAlfOvnxp09n/+f1Q1a+tM29H+e1h4uoDpz9QOOf5jfnTwE03/lbqfztD
1fIlnyn65+L//Pet+77Kf2jL0bvDwSGnPlSnQs7zmfj3bErfeEKD/nvC1qf2
rt+0JOfzuFtuumzt09sz8756X9zz89FZyciiLS/de9eucFupbwpP+Cwr2Vji
unU1Zu0OV50/8uhJf2S2P1j46Xq194bJZYu8WPWM0UmF40qe/3ObfeH51re/
/MLurOShZ9q3bHDj/tD0m4fb9HshKxlXauuli8/+OTxX4+f7spNRycYnVvW8
7vDvQytz5LsDTvgx+XnxxkUnd9gUJjxcq/rGlUOS+ddXL9K+8PrwYvPdi4df
/1UyotyY65+uvDKc0HFFq8I930jO7vTWGdu7Lw0H2m+rddb0TqHLoZrTpm+b
HAq82vyk7PrjQ7cfKta+svWYsPFg+WGf3zktrOo5vfqSC38MN+V7rtANW+eG
zivbn3Z/v3fCyV2L3fzSxMWhwItzTmpdpU+ys/Hs+58uvzLsaHFh8fELhiUn
dujXpvV368L1L/crMOTD8cmiE4vVzX4nO1S79ovTCj8yJfnwwCefje+1KXTM
nOsOlZydtBi6+oNbK20Nd95QoedFfRYn5YufUuTy/jvD55XaX31rjzXJlLpH
5BtQal9otvChdp9/sDmc+FK7JVvuGZY063xe8Sf2bwkLh/39yxU7hyfl/y4/
vs6U9aFTk1Ne71jzm+SN76u1nVk5O6w4tsS7n5f6Ibmxd6MeYxouD69Uu3XB
7vnlQr0T3/+maOtp4bjLBgys/fiYUOyMuqes7jQxbL5lQKjde2LI/1vrkbcs
nxCq9a5a/5oak8K1f9d9Z8hLo0KFVY0bLp01I1zVpHvzn2uPDMccfdk/O3vN
DHfuG1/s8gcGhgZX331wTKP5of+VA46e/tWX4bz8P500+fSFoWWvXke9f32L
ULl+/7rXnLw0/LDs0oK1+3RM5ty69/HSzywLjQ/+0v/4s75O5s98YGyZjqvC
gBljb+3camByYpfmV23fszr88cTKx1/8cmTS5q17Lpv31Prw97evV7j10Oik
8749x55fYUNo0vvpWg3OnZicddrUhsuu2hhKPlrj8ltGTk+aZ007u/i2zeGW
d+evPVhkRnJo18Wblpy4JUw5smizyT/OS94edn3DdztuC0c1rN/svK8XJhcm
p7+3v8WOsOzcVffcc96i5MgxSzdeM2pHeG1u3z/P+XpJctKwIhu+vmFX+K7C
9A1lT16aFKzzZP8pL+4Kbaf/s6DU+uXJJ8WOGNO9wJ7Q4/p+kx+6f3XyY7uq
9bqN2RtumfDnh3UXrE0ufuTFOctb7Atrq46q1brOuuTLHees6PfavuD+VO1O
/U/b/8OoOD+qVPDGMQuHjorXlyvHdN44q9WgOD96usS8J2s+MjSZUrXvkP+t
3fyfz199tb9doyOf75us/OKv3hc32vCfz1utLjWyYdXfHk5qXTimwqs9Vv/n
8wqL/x7a8NojXgozCzXecmRWzucXss8+4rkNfXI+v+DzDIWaVriv0D09w2+P
v/zrUz8titfrjuctbXrNXwviet/9gna/j232VeWvwo+vt3rmgofmx/VK1TfW
3HPlvDlxve9+wYJTv93cue+P4Yj6TQ4+UGxWXK+M/OXE2Z9/lvN5B+uVqxv+
fVTrk3M+//Bq8UvfPFggCfe26TKwVIOp//k8xK5JGyeecP/EMHfQR3UKFBr3
n88/vDL207veqzMjFJs1rOVn64bEzzvMrjH/4hH3ff2fzzf0qDu48cxCC0Lp
I65t2OpQr/j5hrLPFPnnxl/bJ3k/zzD41neOvefipWHUoEsfrVDxs/h5hvd2
PVZv2W3f/efzC88/OanlxZ+tCsdu3/D5xVlD4+cXrjq+ef1bVmT95/MK1Trt
evzRnuvDxY+3HNus4Pj4eYU9RZNHK1w7Kc4fzBfWlKtzSo8bctZDHSvVX/dH
l03hixk7Bz109+T/fH7hmB3v3vzR9Jz75Xd/1adAh9+3hA9v25f11BU5n1e4
olSRE47P/u/nE46ZdczB/OdsC49cXPT7Gc0W/OfzCT+82rnKRVfvCLV6/1O+
f5XF//k8QuWq00+4ptSukD20+E2PNlj2n88fDGw84NTRq3aH3ocqzD1lQ87n
DY6r275Dx8U5nzew/mpd/Jrq5ZrlrNfuuaPeUQdP3Bcqjbyy+6D5q//zeYRH
W1YdVvThfeG3Nzq2n/TQjtDprXW3//XTqKTr3In5fs+c9xr/UKX/kF+6hUvq
j7isyQWLwvOVCu6vUrpfeGDNv8sP7JsXztn94+uT+w4Ov9Wan++Cc2eGqoOO
PmnNnaPCdfUm/bzqhzGhxYi5s7ZdPi38W+T0RZePGxKOvL7kpiLj5oTXnpt3
+7EXdQ/L+pf+svD3i8OAC2cMqHpin+Tgt4vbPlJ6ZVhf5f7Xn/hwWFKzdtu/
KvdcFxZ2Pm5121fHJ8XKTjun+WvZId/kVdt7DlmQLLtgRLl7Z2wPa8+//eQy
KxckY/f1ueCtjdvDI5+XODffG4uTrSUuu+2L93aG06pdXLHB1GVJuVcf/25X
293htM3Xd+g9fVnyQcPnXyjRbnc4+fdHSzxy8apk2HXtT2l/+d5w2V91jrri
re3h1Fa3nDC8wqjkubZl5jcunh0+vPvTYSePHZhcv+m5AX1LrA13Vvzzge/q
fpG8UHnjE+NeWxueadp/VZm7+iT9D5S78NVFi8PEz4/qWv7UD8O68+YWX/TG
gvBs7W3Fvy80IJzW7+GXW/06O0zoWbv4s02HhZl/9f2kx3vTwvQJ9bf1KT8m
PPTH8gvfqTU+FB9yUuWXd04OywtduKfPuGHhUL9KL3x6V2ZeWeyG2zZc9kmo
PPjRkk0eXRS6/t6mw9bL30+uHlVq85bFy8OY7ivuKjj5x6TtO/fuvbnm2tD0
uEoHV52SWV/kmzLtxg0bQpcJd3e6YvqkZGidbiP/l5lvX/Xpk20/mDEpubTZ
yKGzMv3uIxu6TGkxMyn2/N3FpnTfEt7/7tcbyueblUw+1CbfqTO3hMFlfmx5
w6T5ydft3phe9qLt4eYKMwdf3WdRUrlR1k87CuwMbcrnK/v40KVJ1rP3nlBt
1a6w5KEuVU/LvzLZ9HyxaWd+sic0LDzl8j6Xr06ubtJ+52Xf5HyeoF7dC7+4
qk1W/LxA0Xfyb6+3NSt+PqBWx6cKtC88On4eoOGaAfff+W9WfP7/yMVHrG7/
TVZ83l/7o0Kjzz49Kz7fP7iq4OiyNw+J97N/b15k0orHc+5Hjyo0bsbCVt/G
9dxHxX4bvevAu0m/Ud1bv5b/+3h/aMiDLV59+MHvwrNrG224YeL8kG/Ulq9+
/75ZfB5fqvWnjzV5oGno8Gun87qfvTQM2P/X6Aeq5nz+tHr+DxtNuvfrZOys
srPe6b4qfH7E88+3mDMy3u+pvu/S9xpmj0xm//r98PdeWx8eTbbdt/HinM+P
Hju7bbdeZSYmVz6zYdzmqzeGah8cedobXafG5+lHzm5Wfsfx05KZXb7t9uh1
m8M1PcaVvOLGaclXlXsffPruzaHl1iqPb/1iTrz/0+m5d+a33jInue3fsqve
W7s1rJl39+lrws7w+xVHnl7+iqxk/9YLrij56c5Q6Yt6XUbdn5Ucd2/NKTN3
7go3Njjr612zMttLXzT04Im7Q5kvz/nu/cVZye/XVG57xet7wuO96y2sVWh0
8seNh34r1HVPmNBj7KG5mb63eKXRnY7dF1668fsi3Y4fnSy6aMwL552wL5z9
7cZ5XxYcnYzou75a9pR94aQl57UZPD0r+fPa2ud8v2Jf6D3niU61xmUlN9dZ
26L7S/vD73e3bdqodlYy++U6RQoN2h/u/v7qZn9flJV8+e3Kj2bU2xjemTmx
boWTD//es1dKf7BrY2jSos/ZM377MTm//+W3VSq2OTx1UbHkrsFD4/P6Nu+0
m1Kj/IikyOzP5lzxxZaweVSRgjf1HJ7sKHbm/Jmfbs1cR95LDnw0IqncZVL1
r3ttDZW+/fafK3rkPL+fOPCnDt0/HplUbdcpe3qlbeGVMvVqvnDxyKRE2eTC
Tj22hTfu6FT5ovYjk9/fq1+g7ovbwzELnn/l74tHJd2+/+nCD9dvCyf1LFut
5PCRyZTVxT+v9vH68L/bu4zv3PvrpFCzCdU++nllKP/a3I8fOrlbUuD+Zm0K
Xr4qPNRk1bEPrOqerLu3fvmfHs75/HbX95r2bP7IhPBB61N/Pi2ZFGZtfmD8
hstH5TyvH5Uvf7feI8Kbvd9stfvEWaHhpWc+2GvuD+GTtYNuqF9sfhg7/Naq
p87vG5/HPzJ7Z+EGa78KR9Z7qO7kpQvCri5H1n3080/DmrLH3PxUtUXhnzsu
X/VCvT7hrV96314rWRiqlth774O/vRqK7htwSatWS8Lqry+pfm+vt+Lz+AHn
t7yy8J8dkt37j9lctNWyUKnekae+mP1e0uKYE9b0mr08PF1/bOnv/umW9B5c
+6I3L1wempXr9/vWm79MCu577OLuG1aGVXNvv67tvYPi8/hbKrWrO+q8gcmr
Xzz5R6s1q8M5bT+bt7TXj8moal8M71dxbeg75uTpt187OLkhX/VXy362JtQ8
VOLNCvePSAa/cWrxipevD21PrDS7wPaf4vP4ZTcfWL545OikyhtLO55zwYbM
+7jm6bWXjk06D5617trFG8LU8geOa91xTPLRIzVq3tJlQ5i4q9lfjzSZkGz7
/NZuL2/OzE92j/jxipenJNvqV2/Y89NNoVG3q7d9WGlq0qZk+ccrbt8UWq5+
7ZOwJOfz3NseP9ihd7cZyZ9vvTvi3Wu2hOb5Z5921L+zk6XzXn+pT+et4eTB
3/4SjpqTHDen8fe93toaXrju0ofmnp7zPH55oUOdBp45Lznn1yazbqu5LdR9
evDXK7+dn1R74I+VPQtvD0efM3XwkzXnJ6s7/Na/+5JtYWqFhfOKTs/5fHfJ
C28o+WrJRclt31W8tk/WjhBeWXDHx+NzPs994cS6Jzx72dKk5cHs/w15Z1dY
Vr3QKysKrYjPJ97sPum1GtNWJE//UHND9kt7MtfNZWcOa7UiOX/z7e9+eOee
8OTzw4vW3pTz+ewz663+smO7dUm19VU3/P5WzvPy3uc3fHbvmVnJwmbbOy+u
tCOc9NhvY7P7jUp+/Wtb6d7Dcp6Pe17+5GO3NtnZZlTyxC0dXmhYdFdoVrDH
mqO6ZMXn4/vHru42aHhWckmvHcM/HL07nNr9wqUn/5YV7yc3fmBUq3uOHZ0c
n934+2237w13THmrwV1n5DwfLzGhXrcVp45Onnj+4wbPPLIvPF3juM9r7M+K
95P3lqrzy+ZVWUn3fZ1PyT5/f3ilZKmt43pmxfvJr/VosnFV06zk1XvueeDI
FftDxTZvbXv4iKz4fLzomOd6dTzxx2R5obsmffHqptC4+5K5YeWQpMPEZn+9
3SHn+fi3Rd5u8s2wzaHcPU2fOPr5nM9/Z5+5ufvEwv2Tp+ZUGra9Q87z8rrb
jz3nrpIbQnJVjQ3lVn0bn6eWveW7sc9c1Sk58tLR1aeXWh0aNSo87dHq7ydX
XXPg6Pu+HB+fL7rfO6R97Zv+2T4p3HzWubU/bT88Pi90//rmXeu/q1l/Vmh+
3ob91ft9Ep8X7lpUssqs09+PzwdvXTD++WVDc/7+7w8nvPb0Gf+Mjc//3nml
8K8T35+c3FauQr+zr9sUdl3SeWiLfDPj/T/Po17Kfr3yjMZbwlMVv9q566ZZ
SZ1Bx+0YsGlL+PG1c/fu+inn+XjRV077Od/LOc/H3V+e9sLDJ7QevSM0/CP/
/S+/lfO83P3lnx487txR7+8KLYa0qfLLwZzn56XaP9P5mr9znp97nn7Msaf/
+eLb+0K3N88/+Pz07PBZv4OFG5w+OGnRpPTaKXW2hL5//zaraOXhydLHu3xc
oeS6cGj87a2eWto3ubHit6+9OnBDaNj6so0Lj/s+qZN97sdjb10Rrlg+pfrw
W59Kbjrl3uV3nLsmLD+ny7pZb3+cPLmvx4ROfywKq7uevuWOzz8PFc8dtLrn
2PmhZ/4ZU2r3GRjuvazcM33emBVWPdKu38B7R4SDja6+If+wSeGDKxr1rfr0
hFDzp6yeu14eFwZ+deSt08+eGnZcOKHJdW1Gh9bHP7+/2dvTwxPlL8kqtXtI
OHNO06kzPp4TLtm/4pjxo98Ls2+99LjqZywO92YvKfxl7U+SQidOKjOi44rQ
+/Eny1xy29CkWIFfxzz919rw0itlOt7TJ0lu+GZ0s0srZYfejSsP/mH9tOTB
Y4qub9Zrc/in9+iGocqC5Ll/X6vZ/pnMvPr+u6697LKFSbVHviy+7MwdYe8x
ny1oe+7i5LiuQ4tPvm9nuLH/K8XuL7kkObt7+00XHNwZGu0pWvGEa5YlhwaX
Pq/uRbtDj2n3FXrwzuXJ9m3Nz8k/bnd4+PcGR9Z4d2XycpdxT5+0eU/olf3A
xbdcsTZ58aanmza/eV+Yv/PjzKJ1SbjmsfYbB3zTMzx2ymflz717Yai2r1HZ
4r36h3uG/O/yGq3mhlNW3ff1vpeGhCVNHylTcdL0ULhKuftq1Rsd7vrruvZt
L5oappQqVeWbruPCcVtP6n3231+H/A0mjjvrsQVhz/Ijd9/9Sctkd6ldM+vM
XBo+alR2dZnGA5JnX19ceW5YHV65tsHMJY9lJRfclP3WnlXrQ7nnZo7v/sfE
ZF79USdd3nNjmPnBDy2OnDU32Vuy3tXXldsWLuxwy1ePjV+VXLHh1Fdub783
bFlZ4bq7D65OLmnaY/Rn+feF/wftDrFt
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnWW4lFXXgA+cOTNz5jxjYLdgt2JgCyoqYostCja2IgaY2IoBfhYIdgcG
djd2vPYrdr92Yn/rZt3Pdfixrj27a+21Vz17uu920FYHdm1pafmuvaWlNcLR
Ee4SsGvACZGxWcDmAScHbBWwdcCJAVsEbBlwimkDAk4L2CZg24DTDbcLONV8
8kbaHvVPsg3anbXR0nJZR0vLTfH7AeufEXBljGNspF8V4U8dWebmSH8iwkc7
Mu/FSktLl7YYfMB7kXdppL0f4UuR3rUt816oZP6/ER4feZs6tzWrLS0HBRwY
8GbkNaJMe8CN0cYNAQfHorxRybR6wOuVDGsB/4nf1QjbAl6tZFgJeK2S+eS9
HL9b23Ich9nmIdHmNxF+HfByzHsN+z8g4H8dObbjnD/rt33AWpF3sGPdttnS
MjDq7VO0tOwW5QcHdGtk24x73vj9SiXHQt/3uQfsz73uGfHb7Yf1uMOQPb8t
4FjzJpnGvn0fbX8X8Gq03y9gXEfuz53mgxd3u6/gy96Rv1dH7u2tET/Gdg+I
MV0WcGnAQQFXBFwe8G1HlpkYcKBplPsy0v8M+CLgD3/PF2VmjHb/it+bxO/7
nR9483mkT4j0zxqJJ4zzkBjn56QFnB/wVuS9GfB3rNOM7Zk2U4Rrx/oe4lpf
EGkXBkypt7Q8X0nc+Sdgncg71HLg46XiLe1fYPnVIm//gP0CBnTkeEbWWlo+
iT7Hx++PI1y/keXpf4uOTP8myt/lWrKO97iW7BnzuMS57O/6TQh4K8bU0Za4
+078bkZYBHzkWrL2HwbcYrxP9DuaMdfzTP3oHD5x78GLTw3Bi49tg7zPTAMv
Zm7N88ZZmy/aHBZtXBFpj4vn4Pt1MZ7/VnJcs0TeB47lWtPermQdyl5p3WGe
O8LD/X2NZZnr5/YP3s3eyLVnHF+Jf6zZxCj3UcCHAV92zTUl7+go3zPgjFjn
W8z/IOBmw/cD/mcbnJUfOnLdGPcX9klba0cboyKvX6zhTDG+KY7hU9Yx4Fzz
zoxw43quNWk317PeWQFzxO+POzLO7+3iXA+Kdg8ocq7sIft6tfOGPl1aSVrD
+V4g+v06+vyG9W/N+TP2BVsz7duAG6PcewFTmFv0MzzgP5G/YCN/t1UyHGH6
/K3ZxtfOBTwZHmN7l3MSY5mhLdeoW4Qzt+X6zRrhLG1ZdozlWUvSKMf+Uw+8
ZBwztWVbjIs2iE9wTtDLeVtzz5jPbK2Jx+DglZWkxdDgq1wP4jc4P8Z4vSF9
Xl5JWgydvsyQtbvCNsjr1pr4y/6yPu8FHBUwd2viGXs+a2viLOOYpzXTGB9r
R9lqhLO35hg5Q3O25vnhrMzVmiFtzdGa+eTdJK6xBj/Hfk+N/fglwr1jLcYG
XBzwc7RdibQHqxm2BTwQv3/pyN/kj4x6XeL3ao08x61F4mzXIn9zV37QyPrU
LfPA6akdWXfLWt47f3n3QOP/7Uh6fGzUbYkyKzey3xbbIe8f6TX32N8dnW38
LU3mTqLM0V0z/Nff3B9dHdvxER4a8UMC9y+O36Pj9+Hx+9z4fTI0JX6fF7/P
4H6L8PQix3RYM3Fo3YA+4tB6xmcwrXfAMVH+wCh/cJRvxrh7V5N+n1okLbg2
whMDDo/fh0aZE+L3YfH76ghPCRgev4dG+rHx++D4fVWERwUMid9XRHhSwJHx
+5oIRwTsH7+vLBKv13dMhX1yt1Qjr+aaM9Zh8AUBi0XaWVF37+hr7YgfEnCw
9Q+3XC3qr17Nu6VeTb6BeHs1+RjifaPckQFHBKwTcKhtneN6zhXtV6Jcr4BV
AtoCVjXOeg21Th/HRbxqn5RbKNo5NdrZPdpZxH3ZM36f0pFzY15LRHhupA+J
9Ivc0yci/M0yW0WZYRHuGekHRpln4/dz8ftLcCFgd2hgpO8fv3eN3/vF7xfj
93/i99QIDwoYHL/3b+YaH+Eagc81+3kywkejzPsRjpeuwA9OjvjTkf5pkfSo
t+v0TMSfifTPyQ94Mn5/HOFTAY/H7w8ZY8AL8ft/Ea4f8Hv8/rVIOrdBW679
bwFLxjotEfBGW+4Ne/VOlPs0yv83wusj/V3oYsBenvWLAvY0vBA8jnLfR/mv
I9zDtAsCdjc8Hz5TnGB/Xm/LfohfDU8Q8CZ8aVvuMXv+H/eS+FXmM8Zr4RsC
3g64znERv8Y02nqlLdtoDdjN/v+PsjHGdwLGiGe0e2XAvgHjAy5xb6637f3k
WcgbYv64gH0Mx4r3tAFfONh+znOfb7AtcPRq+3sv+p8SsFiM7YFYr3vj94NF
npnrnN9DEb8v0h8uEq+vdX5DDWnrO2hqlPm+yHurr2f45bacd9eAp+P3HwG/
uy4dkdao5jpxzomzrg3PJesI3SGPeVD/KffwmYDJrvcM1Sx3qXv2ims82Tqs
75MBT7g27NvrrtHr4sJ5tk25y01jzy8zpN1f2xI3Fw/YHTyOs7JKM/v507mN
d84viXfPOlbCvwP+chy/2d7zAf8G/NOWtHBZ7grHMdVyT7lmU23rL/ub4FzL
/ljjLgHP2d7f4gh5L4ojhC8YUralmnjzgmPhDD3neEkjn/FdbD5528ecd+Ne
iDWYs5H824zc87EeH3QkPdsu6NQZAacHfBw89wcBUwK2Ne20WvJZ8FvwYtC1
kwNOqiVvvH7AevBl1n2iPftYN6BPwDa2cWot26XMKwGPB5zbnrL4FNPGBGwd
5U6xD3iSDQM2aE0epq/9DbA9ys1iPnmPRf1zbHcmx8U4ZnAsvQNWijp7B+wV
sHLAPsZXCNgjYPeAVQKGmHeJshWy4PhYx/4RDoqwV+Ttaznm9LFz7xnxPW3r
/oifFnB6wB5Rb+6AdWIMq0Xe/gH7BazoWPa0Hdbx1YAHA84IODPgAdsgDv2H
9p/IHdRM+j/tHoi8s53/qrbN+NAfPKE8Nc7fY5U/Hld+eSzaeDrCHrHPT/j7
+y7Z9lPx+xHTJptO/Mn43b1r8u7c5WsFPNaR/dHXU1Hmmfj9Q5dsk98LdU1+
fx3rUJY6GzXy/pnsWMbazqHtKWM9rnz0SMTPcp70z9i+65I06mppHPznxgH9
WlNe2CJg89bkXUnbSP5/S/MejrZG2e5DrjfxabhuucecL33NZhvgJTxwf/uD
n7orYMlG0sNrpcvIGfM7FvjqzQI2bU2eeRPrz20a8XkdL+VYs2ddw6vbcz2G
BnwWeXcETAo4JuK3BkwMWKiZeLor/GPEbzMP/Lo44KKAbcUl8HI7cYo4Z2Cs
5XZwDViL4wJut60TAiYF3BFwVMBNATcGDA+42fjx5lNnRMAt5p0YcBd6lICj
HS95I02b5Nyuac+5buMYT4UmBJwScLJ6u9Ge8YGG56jLG2PezqadbZ17Au62
jXuNn2QaYxpgP+RzbiYEjPdsXxIwLmAr26LelobMaSf7AX+2d81Y032sN9Zz
ON62drTsKMfLuAe5t8wbHSBy17ziyx2u6QnuwbHuySTTyvUb6XjudmzlvE92
XneZf5JrcIpzvs+QtR7rmWMMy0sLdwtYrpn8JHzlNe7TYQHLRt7ggEGUsSzx
pZp5nuErl2kmnwm/OU7ac6X4cZxzu9b2hgVs7lyY2xEBNwRc355y8nyejyPF
O/ION/8627hWHBpmGnHOwDGuHTL/AtIA8HK4eHq9bR1hvWHGbzG/xNmjbYv+
GUd5Do6yrRtsgzzOLmf4CWnb09I36NaT0lXoxZvxe1Bb6uve6Eid3Tumwxui
a/lUncN6jdTvoX9DPq4oI4+2DPqXb6uZ9l0123jL9l/vyPafCxnhefSnHakf
fj1+vxa/X2skr0v5d9QdUge9IPzO2x3J80zxN3wR4Tumv2ib83bNsSFLI0cj
s6ODQxZGduEOQ4b6vSN/c5cREkfGJ84dB4+BfN9VeR/ZCP0ssjXtVJWDLrN9
9HvoGH91DQbY5om286NjoBy/0Yk0GqlvnU8dH/2gJ/nFdtAJoDdlzd+rZ9ov
to8O4Xvlfeb9qnPvEXX+A89Z6dTnzt819SjoXl5rTTkTvem+1UxDL4NuaoFG
xvnNvKY4ZnSp8GwL1FLfTDo659XVqe8vf36Ndw9rA38Hv9Yryp3qmhOeZjvf
qlN+QP3afcbR133UkXq9r9URkodcyBzBnQ8D3u1Ivctwx3+U8f9St5oyC7gx
xf7hOxlTL+c9pJrr9Jprtaj4Bn6+5hr2qmR79IU+c61Gjg1dIuHH/qZd1mfB
Wuo+/2v5M53LnFGmdyPP0jTdneNhHUbZzpmeH8qMqKcO/ktxg/Arf6Pj+c59
R8bYKWDHaurZl4+1Xy5gmYgPCti1mjIb+TsELG3aLtWUoQcG7KwsvbNtLWU+
ecsGDLatVVyzfQKWR7ZBTq2mvn6FNvs2jTo9A/YM2CNgpYC9A/YKWNk2iK9o
GuVWsCztYttZPWC1ttQZvBjzndxI/Tu83pptKUdu28gzRP4LltkqaP42Ee6h
zm+7gI6AIuDb4GUWjHV7nn3uSD6x3fbWaMs2aOunLplHmYW7ZrvkLRK/n/U3
ZbhboLPQ2JcjfKkj86lHHz92ybrP+Zt77Hn7xdbRsy3XDrvZim0Zx5a2knF0
iOgBsSm80kibFvYsaBA4QD5x9IPYfdAL8hvd4HOO6VnzvzGdMZL+c5fEJfSG
9EFddIvoGKGl4Bx2RAA6gj2RPsjHbvWntOUL6RO2Ge6FlxqJq7RxgennOw76
XrRr2inh9+HJsVt2N/6FtIq+sK31ClilLe184MKqAQNif3eMtvYqkh68Ik34
yvNCvwMj3Lkj7Vdt1qOtuvsMbmEXpa8FuqZ9lBDc2NZxse/bGbLv2xsy/lbH
tTJ8NnxJ9HN9kXbaBZ1PV/PZS2g7MiQy6x+eT84i8vrSnjnO27kB53gOzw44
y7NLOMozeo55h7amPIdcOdQQOXNe5TxsoNxHW3qPoFuFxkHfdrC9M6UHYwJG
q09D94HOZ2wlbbrcv9B8bI0juiZtGO1Yt1IuRz6HRpxnW2/aBnIR/W/lGLA1
Ifthy7rKMTKPa5zDYa15b27TkXfxAwHbx+/TI7wVeSPg2IDbDI8LuN3w+NbU
P23dkTp7bJO0xf2LrfHKgCuqKXPSL7awDZtZfoNm9rmt/fKbutgTsUFeZf37
oSfcIxFe7diHKg/R/wmtSf/ORxdVzXO6l+tWyrfgFrRvbMDF1aQf0BHkLOzM
2Jv7d807di/vX/RM6JvQRUE7x1m/1E+xZ7RB+99LZ56yTegNcegPfZO+sHRj
sH1B1y+xXe7G8cbhESYY72Z57BGDnR/73V9ZdC5l0TmMo/tAFzOT+hHwH30J
eogZxNf1zJ9ZuXNeZdUt5ZEXUOcys/X7KUvTxw7N1GsMLVKWns86mziWuZWT
0ePM5tmYwTFtav48ytOz2e4GjnFWZeB5HNPSjdQPopO7JeIjAo4OuDNgZMCJ
1I9z0i9go4CNi7T//RnhBtjpsOEFzEGe5bDrYR+daN6GlSw7m21saD3S+gY8
DC8b8EM1fRkuD7ismvYk6B+8NHQdug9tXx/bH/a3SqZBf7mzDrDepdXO+wya
xr33jGUO8qzQx0eO8dZK6oTRn6DT/wn+F7yKsD3y1gxYg7EXeb5/L/J+/s37
d6bIWy9gXXw3AlYPWA1fD+utPp2d+BbHvr51sOFhZ71Ju+N12iGx4WK3vtZ5
9rXOO6Zdpw3wJtudoi3zxulsmcQneXbZy4dirDvGWpwT4RaBYztxD0bYv5m0
aOMINw3Ygfu0mX12c68OE8/WlSZtIq4db7iZ/Wwmvo80BH9vCDgC+TLg+oDD
jU8U16B9NwcMF/9uCjjK+LXSzmGteSfCKyMLXGcabXEvv2g6+eDMPF2zXc4t
5/gkzx50fX9xhPNf8kDgy3DPFefmwUauw6hG3rfcu/OIjzv7e0Z/g6cnOtct
HfsGtnWkNIL4sY5lE+fdz/GNsE/i4Olkadow13s957meNOMIQ9qtimurVlJn
zllGlw+/eWHABQH/bc31Yu3fbM37CRr/rmnsz1umcV+9bcjav2NI/TtiXBvH
fPeJsDd4E7/XiXCEeA0e3hl5m0T6QREeJq6Cx2s3s+5aEU5qZN39kEta04eD
O+tw8RbcnuK4bgx4w3zGDa+4ofzecPvkDAwJuCRgXCXtAtiK8HPBfoHPED5B
8AQPVdMmfqn55O1SpH4PPR/2i32tv0gz+eqlivSvwf8GH5vS5oQNqrSrYWfj
XC3Tkb45pU2utNERYp+/0LLkjTWNtnYust6C0WePZrbTvZn2iyGOaZhrw5qC
832Vmw6ppE8DPg4HG+Kn8HFr8hbwFMdI56B3B1TSpwF/EOyEL3l2oLOcI/ji
g2wDP4iPPKu0tVIzcb9njPcL74m7Aj7wDHOHfGhInUMr6YPC+O6GlseYj0Be
dFzwOJ8awmus2sx7e6Ui+V7Gxhz3q6SfB/bYnZppQ8eWfpT7D9070hC6h7wP
XqETGCoOMo41msmzrKxNuJ/y5v6uB32gb9400odGeITtgZfLN/NcLhd135dO
Mef3xFPiB7pmrO++jhe8PNq155z0bOZdtHyRti3OK/Y9ZH/kfHQ7+4jL8Koz
eR7op6OSZ5Uzyj1CGmMpKpnGeZ2hkmee8z1jJUPqNyuZT9497DP8WyNp/Pvu
4VyV1IN/3pr3PjjEXnGPs6/gAvfBB+7zbOIH5RqVpC+Mb85K7ittwRt84j5z
n74hHbpR+gi9fN5zwpnA1nipZ3d3aRh8J3Y8zgNntLRNwjsiY18kvXvZ/NI2
OMG20PMgM6BfKm2BtPW0a4+99AX7Jw+cPtF7Yy/5WfrA/neRY33G88+Znmwb
xJ81jXLIIg9Ld+AHXpeeoUvCloydeWAzfT/wAUH+eTTgEWWjR6zfP+oeW8lz
DD9Rk7+A7uNLxD2AfozfvbwTqpZbw7Ks/XriE7jTu5I4Ab6sXUncAo/WquRe
El/HNMqtaRvkwevMaFt9bGNG++PMMc/Lpbv4ad4YY1u5I+182OCx62OTX7aZ
vPyyMfe5K4l30JUbzMcfpbS1s15LN1MOWKZIO9Aw21q8me0v1ky5jL2GVqM7
e817cpB2xkWbKcPhcwDft2QzbVBLFylvHGze1ebTNz5u6OPgfa9wTpRruF6s
zW9F0hZozIyuEWtTjXgRdduayZ/+B/mpmnTlCOkW9BE6Dr1ET4y+GN0yd9X3
1dQ5sxb4FWzg2qxvHNp0uG1xN3DvcldAv+h38UbSnRHSoevMpw7353DzShp6
lPRyqG3dZBrlGFezI8cGD/2a82Ef8EnC56i8h5gPsvTjAY9Vk/4earuc1WcD
nvF8E04uz5h5W8d6Lk9/zdzj9Zxz14jXYwybFSm7voG8GPBuI8cHD9QlytSi
TEsz4+jdobPwJaQv3Mh1Ro9P3hW2wXywF9A++gR0rd06Ug+/eZFr2drMu/QY
zyTnfjf5AGjJYOPIQ9A+aCH0HN3rEPFimGvb1zVn795opM2Ashu63qw7MtXs
tsVYB3tn9LdtaDb6cu4z7jJkrNmsgw54mi64kfItsvGx6tz4zV2LL9Ir/q41
c3+3UL47yvHRDmNDn7yJfc7tGjBPxoKeFtvGP65Lf8teKr6/Us078GjrnSNe
QO/Wdw3ASWwp6KtpC78n+C70ydsX6Ts7bzPp2OGuIz56b7huG4nLwx3XMfa3
Y5G+y/M3cz2Pthxrhi6DcwuNf178mynKzY6erZl+Ofjf4UffXqQOFl3szEX6
geAP8qs+Xas102a9pOe3YT187JYTL9i/5cUX4t2KlPeR+9EFwpfCf56sD+EM
kT6/PoeD4/fc+hnuGr+P0weyEr/n1Z9wUPweqV9iezN1ggfY7qq2DT85U5E+
w/gOryiPCl+KvxI6cfTZ+NGgv0Yv3tU0dN744KATR4+OXw56PvTu+OWQhh5w
LWkktBJd8B7OuYttoCPHtwZ9On3MWOS3CXyj0NOxUAc/Hvqnv2aROlJ0pWva
NndMi+3R1hqmMWd0SS+4r0frz/lvkbrLvZ0zfO5B0iz4P3hN+EH41Jk7UkcC
D8fZhae71Hz46I5mlmk0k9fb1/qXmQ8/WDSThmxVpG7p6YCnqsl7gWPQOHi/
OTrStnK+tJByMzczfUCR+scnA55QP/WU8dGmQWcP0zfyziL50AOd28KeD/jJ
2fU1he/oJS5M86erpJ8j38TMqc/qLlFmVn1W4bvR++7j2q1ivWn+d9I41gj7
D3YpzuwEz/3L1cTTtxtJJ+CHfvBuG2/+SwFbFrne9Wbq6Uh7sZrtMy70tuNM
Y1/R/UO7kAexZ3KWsR30kb5y13Cm0LOXthdC9OXgDzYSbC/gA/YJdNvgHjaM
FvEWekacM9JiuQ+K5BngHThTbfaxsm2gR8dPHNziPhziepV6f/KxA8CvwcP1
so/nnWOvMr8t6SDpjAO/88tt970i5VPk1MVdV2jMePkfeF54BXxM8bP/wDRs
efAN3cxD74X/UOnTSjiDd+3MlsP/94uASbX0MeqwDmmfmw5N+9txruEas74T
1Dmjt17L9aY+dUi7s5ZlaGfady6FPGEzfYkZC/7apS8+83/DdYVvgq6t5t7i
qzvec4xNYKxrCu6AQ+A4OA1u45c9p/fUxuL+JdaHfqwhjhxg28TftE94GXhe
8KzkownXcf/G2l9hGvz1W9aDt8J+i40fG26H+fCRr0pfmOdc3p/T7tYYayt6
jyLPay9pOffMcm2dPMdy3i27eg/hk763+F2e3ZXFQWjfiuZtWiSN+Eef4RU8
B7vbHnHuf8YADwBdZy/Xlk73tK2DXDPyXnEfmA930bvyZvs5dvZsXfe29MGf
SZz7qEg+H35/noDu0e/czVynQ6TV2CpIX6ORMs6B0tw1pXkHSqeRhVZ3fQ82
7wDTqLddkW3M2cy0A6w3zX+j0cm79ZK+IYf0ceyrWXY/YdVKpz5uP++DfT3f
5Tnf13YOtH/GC58Fv7Wh81tbvDnUsLdjX8u8oab1ma7cIaYNNX6Y+fCb8FTw
tfC0w0yDh4LngveCD4U2vyUdGe5Y4KcOt+z6rt2ajgMeqp9n50jbYA4jrEfe
NkX6SczazPbQI8CbDpXWsI7vN5LPxp4PcCaw/0OnoXfQ0arnnzj0lbNafh9J
CK5Blznn5FXEP85Tw3PL+cPfAR8G9CyfFanPQa8DXefcUh+aBX2hDj4pP6s3
4MwyTmQB+LL3HXP5bSd1yu85GSs0jj7L77EI0d9Dz9D1o6fHz4ixIOdxDkhD
l/+RPAG6IL5Z+cjfh3jmoNnMhTLwDJwb6pXfRRGW31oRYn/4oki9E/on6D5p
5TdYhNhD4At6yOdzDzBexnoj8nak34RerkgdILpAfMDRIaI/xL8HG1M39UeT
1A/ybRt2Luxh2JDxz+quLRm/LeyHfNOAXgC5Hx830rlf4Wt+C/hVXmeqcXy9
HrUMPmDUgV5g58RWiq2TfPrijhxYpD/suCK/lUG/j88X8scvAT9X83sU7LL4
szxun+TxzQM6KXRO6GN+qqa9im9ZsJviOwMfiw4LHRI883PG4ZNL/3f4cvhz
vvvB7wubG75e+Ljzu/R5Jyx93gnL7wYI0TOtLC/eKh/dxTjfzWDj2aCR6498
xh2CjZrvGrBTwydP7/9OWPrOE5bfKxCW320QMn/kD/SG+AH96ViY29/Ojzmv
4rgqynU/u158W4KtF7su8hS+xeV3D4T49rI26IhZG75nII3vGz5TL8ldjZ4S
fSX6K757IB/c4XsJbPzl9xOE9PGpukhk5w/VY6K/RM+GLwJ+B8hetzXSfvuB
+k362LBIn4MjlPNubaS//yfqNJGv4SOwecBrvKdOFp3YsspC7D+yEPtHHH+k
cs9L/Sx8BHLPzY20Rd9W5O9bi9TVkg9/gQ6XtqnD9zqsJXOGXtImNJNvdMBT
1nqDIn3Z9i1SNvutrVNWmyp+LacsV8pYf7d1ynyEpXxGCO4gL05s5LezpZ8H
c0P2ahEXP1IvzFrjY4DszDds2Hb5zgxZeHVxovwWjbDdcuBE03KkNWyjw7ze
RfqaLVqkbN0wb1XPavnNWdU+0EWi/0Q3+Y56cPiyt9Sno8PjO7PrOfvtqZsm
rdRVE1If3wD2lTXr7RjBQfyw0G/ihwVOsQ/s847eZ8SR5/4ED5hLkbrJBYu0
o6NT7M9ciqTlCxQp2/0uvVuzyDtnviJlwj/M2zF45cUCFse3PGBR429rD5im
vy2Sp+5RpB6UNUAXWvrGlb5yhKV/HGHpT0dY+twt4/zRg6JXRXZZo0g9xzzq
6pgvPjj4pazlvvUp8tuFJYv0IWH9wLW9pV+l3xwh9GN/9w8cGWIavo37ucfT
vics0pdztiL9OnqZhy0AfC3971a0D3Q6/4Df1fz+fh33cPUieaK5itRB/uU+
rVbkHThHkbrIv83rVeQ3E7MU6W+wuvh7kPjKnHd3fpyhnt6V9SL1pNXYi7Za
ysQV/Gdr+c3iuEb6cCDXdom0llp+pzi2kd8XIQd3rWUe8v0ljfSF2qPsp5oy
NO1RjvWoeB6Qk2nv32ravdB1zVCkTo6xMA70nrVajg8dE7Se71yh9ewnttNR
7i14jT7lX9cUWx26w6Lo9OviHKAzwGaMLe5j7UmzyWNMks8YI56BXxe7Z+DF
eaaV/jiE4M4Frm9p397DPT/ffPLQ49ZrOZ+xtgd+XSI+lX5A+4pT48wn71Lx
r/QlISx9Ug50ny+yT8Z6pbgOnbvCfOJXmQaujRX/+3iuz3NOfKsM3eE710ny
TNx13N/YknnbAX+NZfTZgP+Cd8EXEVp1rvTqTm0m1IenwWeBNwMmOD/mA+8z
2vLwUWMcR2ln4j582D0mDk/KnsOXPmp+qa8lRK//0HR4AZ822nYfN5/4z9an
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
          "]], 
         PolygonBox[CompressedData["
1:eJwtlnmwj1Ucxt/rWs973nDJLt2SJSRjZBciy7XeG0JGXTtla2GoptEkRCOj
TGjfu8mVNVtRTdO0SFooS4nSYkka1bR9nnn645l5nnPO7/s773c9+cXTCqeW
SZKkFJQFe2OS7A9JcgB8Am8IalZMkiVpkozNkmQq+ib2SsF6+MtgEXwOZ7rC
PwOH0UfA5/Am4BB7K/j9RH7/KrqEvWEghU8Bo+FrwWvwy8GMSkmymvOTOb8P
/RV7B8Gn8PqsLYRfz34BvAFYjB6O7g/vm3lvO2u7OL8A3A1/HWyHPwVWw8eB
2+FPglXwMWAm/CrwShnf6XF4o+hvW4bN8djeo2/Ut4GP4X1YG8beNvSb6CfA
ymAfTZM99nuwXw+brdEfgr3s/QF6wAvAxfAp4C/Z0zfCJ4I/4eNAHnwNWAcf
C4bAe2KzLbZLo/dGgcrwD8Ae+BnQHT4ejID34nwHzvdEVw5eWwu/BoRgm6fg
w0GXYB/L16N1J/hy0BA9Et0t2Ofyve6ou/bFfhf0Legbg30gX9yqOwf7XL6f
DoqDfS7f74iOTSG/fwA+FLRFzwMXYm8N+iX4Q+BReOfM/7UevQndCd0HvQ/9
UbQN2RoMesr3YCB8C/vb2Hs72lZv+Qx+EHwPPwEOyR+cH8D5zeit0XfQXYpY
6wX/grVv0EfBftkC98OfBy/Cr818dit6J7o7uj96k3IQ/Ub03lDWHoyOoWKp
mCl2B8Ax+HHwZXTMFDvljHLnanQBegN6c3TOKHe01pW9FeilwT6T7x4GS3Q3
UBL9n/rvIaA357uBfvCN7G9RLKNzST6VbyuBO9DNwWD2moFTOfwf+jH4deoP
qX0i3/ykHIfXJd9/hDdQfyjvM1Uzx0SxOcnaIuUiukbqGClW5UBM7TP5rh9n
clPXnGpPd9bd51Xgu7SHbhL8m/LwDFwZbLMKvA7IT12jqtVaoGPwWl34WWyc
VzxAgP8C0uC1X1VrnJnA2eroCegXwJ3B39RZtascQ7fgzCXwBFRI7VP5NoCq
qXNKuVUxsy+1lsLrY+O3ctQ4OqIHobPUPU+9r67qqZzXKrBfGH1WPVa9tjZ4
n8ZdkbUyyt1orh6uXv6PenjwnXIy9zD1MtXwctUiekHqmluMbp+5NxUQv3bw
2uC+YJ8N013B78E+kq80EzQb1DOWqVdH524D4pOv2o2uDc0QzZIRyqfUPW62
em10bmpGaFbcwP7c1D1xTnRPVW9VjV0KPwPOBfesk/Af9P2KFTl5QneL7gVz
uf95+L9garAP+itX1ZPLOqf+jp4xmjXqcavR09Al6Om53BN9AXpOcE4VRc8w
zTLF/BH0YPSo1D21WL0EvAc/y32+gx8Bu4Jr5rB6B3gLfRr9tXwDZgfnQKfo
maXZpZl6mc6CncE13RT+DLg5+Bvaqz/pe3PtM/nuOfRtwTnTEV4t/v8tqX0/
AIxIbVO2G6PbpJ7Jms35mXNZZ3R2FtideiavZP9Z2QvOuQ7RM16zXj6aD2+U
uTfIZpPMPVK9UjN4YfQM0SwZyf4g1Xp0rhWji9Abo2dzPc0s+M/Rs0wzdAy8
X+ZZv4O13dE1q9pVTpxW7kf3HsVEsZkcXbua6ZPgs6JtK8aK9Yzo2b8ObFC8
o3NHNa/aVw4rl1UjqpWn0ZOCfd4u+g2jt4xq4lz0G0VvFfXMe6PfCHorKAfv
in4z6e2kGVg1+j/135qRedEzTbNN/1E9+k2kt5FmahV4C/kjxznULPNM0WxR
zOtEzzjNOvWoi+BlOTMzuEcORDePzj3lZNPMPpQvNSMaR888zT7lZL3oN6De
grJxT/SM0KxQDtSCX6Geib131AOxl5e5t2uGVYO3Ur3muEZbZ34D6S2kGdEG
fRz9brCNY9EzTbNNOV4DXiNzr9eMrgn/Nvq/5IOj0Tmj3NEbSW+lltG1J5st
NQuie4NqslXmGa9Zr562FL4q+i2gHFeu/wesFW68
          "]]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
AV3LObep00bl5EGUsXE5eQ3+LuWcw/CGbuWcq8zL9WwTcesaT717WEfm8Yam
pYwFyznnmIe9y8mD4EnMyRH6exlG2d3FQXmsmexZ9nH9qpZzvrHGzR/ufOWU
cfdWVkCuZt/P/rqTcstu7psHKkOsrkse5hj7fuSALsoqg91b72uedQIGBewf
sK7xBwR01iVubeP3q00ZeA/LXtV6IbexRsAr4Z2sKfAy/Kw7zD3GDmsH8fDa
VcyHfMZaQ9iq8gLkE+SGlY2nvHNsB/LN2bqkY01c1fnNerqy83st60s7V1D2
Q0ZEDkamRO6cXMlvZOEb4vv6gMVjbK6njAe92ikTIneurxw4VHpcFnCp5Vzq
+ge9xhp3gHs3/BvUtsmRHe1D6oQeZEfLQH5G1kXurLc86oK+oIv9s7ztQH6t
M564ZttE/rJp6cMaXfq5UdzUpUGXMkrG088dxE2d5nccM67ZG6zkXES+WMy5
9oT7GOK/aUmZBJnh25aUH5AZnnT/8Zv7JPZS/7oX+cO4F9xL/ePeYo57jefc
o8xxj/KP/qfdo/zhfuQv/d+1pKyCfPK49ZpVk3tI5tO85dwTsnbSPvZRzGH8
7FdbyzkPf2hJ2Ym9GvtJ8s1Tzj0a6yT7u+9bUhZCvnrJ/SJte9n9H372qOQD
L/XoJJ9jb7aQ/IP94SLyNvLAK9exHj3lPa3ysp7Sbm155DzyNeKQAReVL/4Y
ddo+oKkl5bLFy9ln0I98c/calQxHnmiMdEuUU85gf0hdFpJevSyjYl3gYewd
4PusA+wJuuqvNww+WqfbRV7WW1wl27e2dFzXNreIG37crAuvbdKljFrxkYc1
ahfXv4vkowPd8yLvIS/2iOKimaVqQPcUeef6uwU06+8dMF/A/AG9AubVv3HA
PPp3CVghoGNAT/HFslzaSJd0GwY0iXfdbOZcHWwX3VhKS30sZ4GA7QOWDVgu
oL9uu4B+AcsYt1nAQgELB+xq+SsGbBqwoHHrBwQJSg0B61kO/g0Mawzoqkv9
NrF88u8mvk4BR9ge2n2UtIA2uxu/UsDB4qKth0hH6LpXwKoBqwUca703D/g2
iPFVwDMBA8K/iun2EN/KAXvqEneQ9aaMLyLP0wGrx/cO0qZ9wHHi3iLghIAt
A7YKGGa9qNPh9hPtOdI20Z7DSjkmiDteHOQ/1HYQN8J+gk4nirtvwDHSnbYd
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
3clv7gtD405+Lxt5Vorv3e2HJbmjFvgXjvCl4nunCF883CUCtmvM+CVMc6H3
usHPuRvlcs52jGVzl7Z/5F84vucJfP3ie774bo7vreO7Ib7/rea7StCkR7hL
R9wK8b2r/GZ570lyZ3IF20U5Hfxe3m/S7Bx5luOdGmgYeR+I7zENCffH9xnh
Puj3Qw15zsR5E3ox9LOcY51fnzpsdNlz6jKOcPRpt6nfJnyFyH8P7W9IHHeb
F903adCN/lqfaX4Rx12mWT/qOT7SXRPusQFD43uPqHMnx/zN4V5ezXWW9XZc
fF8Y30Pje3npckO45wScEt+bR/iQatqIDg33zICT4nuTCG9nv74f7vBqvjPM
e8Poy2+zLWtE2L2VrC8yBDID8gJvXN1gv/wceWdHulnVvN/IHoL9w/fhnxnh
P4V7QMAe8b1j4N8/vneN7/7xPTC++8d3v9ak/QPSH/dBv3uIs6fuFL+fdr2A
57NHmeKd0qMpL/y7taZ8Q50PqMtxdL115n0uvplzz9neZ017i+lxb/UbGtxn
n9Jv9/qNHEU6aEP5U63bj6518MbPmpP3vSN8LH9fJuq5S+B4KNz5o64nBK5l
43upgMfRXzL3I+zUluQf1UhzTHwvHeFrtWR6xu9qLRlOH23m3GSOdo6wkdil
RJpuLTk2mAu9WnIscUcUHso342sr59fceVbNOfRYNXkufKFjNdf4uXMvvnu2
ZDhzemt5xVyeEXHzRPseD3fFavKAaeF2CPgi2jG1mjydsddOvnuBMkKXlgyH
h7BuzHJd4L4v94AneD+Xe7rc7Z3k3du3vWfLfV7u8R5sWu7mH2Ja8hf39bm/
P9y03P3lvu+14h3rndjnzfOG92av8a4r/iu838o913Heh31JvNyh5a7s5caD
i/uLV7n/pvzXTFfYAr1pfV83Dh5JW+CTrLOzXVsbg25HwYuDbksErI6OGd4J
nWNjcydrQTXnzRnh3hdQF2OzZ2vGkebAcO8K+CC+h4V7f8DYSLNxa445xl7v
1hyXjM8+8b0de7uo0/KtWR7l9orvu5nzMYcOC/de1s347t6ac/1WbdKn2u9b
RPgb1eStr4f7SjXnz8vhvlVNXvNmuB9Wc+38INz3qjkm3g330WquM5u25rhk
fG4Z3+9Uk6e/Xc09/4Xu+7GFhc9gz7uIdIAe8FP46sLV5EGkqYKPs/KWtjdD
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
          "]], 
         PolygonBox[CompressedData["
1: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
mpm9Qj1VvbVH+L+Vo3Pgb4W9S54r7/0fZaZWDw==
          "]]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["

1:eJwV0nl8z3UcwPEfSWXOFCI0sdkMwxTKfeUKs8ZS2Bwzx0xbKKXodlR00B3d
t6s7V9GhA12u7juV0EGH4/n+47nX5/3eb3ts3+8nuWBKdnG5RCJR4kt+5USi
FW2qJBKb9Wd+orU5M76n7+iP/ECmuaW21Lf1e76jhbmFNte39Fu+IcPcXJvp
m/o1X5FuztA03aRf8gVNzM30PkaRYm5KKs+ak/iTv9jPHxygEr+zj9/ozl5O
ItvPjtGz9T3txq+M5iy7NtpW39Vf2EOWubWeyGDnAu3Jc1Qhx26cdtD3tQd/
097cjiznygxxHqsrWE41cu3G67n6gR7iIOeY22pVLnAu1F5MoCj+Vu5nEhN9
f6KupDpDzZP1AabEZ8zFuooaDDOX6INcwmTzVF3NyeSZS3Upl1JsLtPn6c30
+L120+I5UpMLzTP0PP6hD//Syb4jLzifwnDny3QZ7TiVi+wu1778Rz/+p4t9
Z150rsXFzjP1oXi21OYw/dnCVq6kxOeu0KMM4Ajl7BJ05SVzHUY4z9KH491x
GuXtztdtfMjVTLW7SivoQD1OK3I83XjZri4jnWfrI/H+qMcJdoP0Iz7mmnjm
dnPiPurguFeaRCW684rd6YxyvlYfjftB/bhHdtn6CZ9yPaV218Vd0SFxJ7U6
1ejBq3YNyHe+QR+jIw3jPtjl6HZ2cBNldjfqa6xhHj3t5sb75Iy4J+aa7HTe
xW6SKbCbH3c23rdzbrxj7U0v1prXcXPcFfMC7UyjeMfm2nzm/Dm3xv0z3xLv
RofGe9N61KUP6+3OZLTzQn2cJ2jMGLtFcd/jeTrnxTPUfvRlg7kJY51v0yfj
zpHCOLvb417Hs3MeHs9LB9Cf182pFDrfoU/xNE0Zb3dn3Ot4Vs6NSI57xRt2
aRQ5L9ZnuItp5iW6Me459zDd7m7tSjoTzPfGvY3/2Xlk/J9xv+JecgzWHK8l

          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.32237787356321845`, 
       0.9015788980636272}}, {{0.05075431034482758, 0.31652012544185476`}}, {{
       0.05075431034482758, 0.31652012544185476`}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.12173132183908053`, 
       0.5160962488128332}}, {{0.18803879310344818`, 0.0704673706009224}}, {{
       0.18803879310344818`, 0.0704673706009224}}}]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[2], PointBox[CompressedData["
1:eJxFUg1Q02UcXsjFAvkqUSag0kG3NHd0WiNDHyAaWsANL12HSukZEChwBIQE
CAeIcmDrXH5cQTOW46PW3F2KA/1DsbE54iNgMGDAf+yDjXlsZIoiZwNzPXfv
vffcve/z+/2e5xd8LGv/Zy4UCmW346zcZ1cxTOQnzQ4vCm3IDHr8p/rqENET
v2e5TWOF3OP4/vbIASI5Uyp35c6jYJZ5qKpESYRQty9Riy0IEdZsy7krJ7oM
1zLiKGaI3yM0u+7fJK7napeusOZA7Uwr9KmREBFudP8+2hxKuzd7FTxpwtOA
Qb42aggddRHl48oWnHGlZQXbrAjj7rO7XBEj9UurIDbbDC6lMv0ldjs+6Aol
lEYjKL/c+ajfQkBdmbvYQarhU3PNrTOtAw8qmAstkdNofaPoB9XvnXj1iGpH
lkiDVq/llLl+Gb636bzXCElExqxADr5ANCq9MAObnjaRUN+NxrWs9K0nTSjY
ePSW0FeB0Kbu2InyaVDZjRcplQo894Pe9naiJEOJnb28huC0Ecw2BmScl/Yh
yvJweS9DC4WgoCyuuh9fJFWkGll6cBFoW/yjHz+WrLu9vvp//twvylffPviV
8xeOmqUPd9QasSp3fRC3OXl3woOMCHdUeyXU4dOnU8TBd0cwba9as+n0MPaQ
tU+2+ljhv1pwBKX5pk5PTwtOXP6668yjEZTbTQsR7iTY9Z339DQN2oq9xyZe
M2BikKraXavBYnKd2o1JQpD58zsWuQajYWoiSWzCRIxSFM8bx6W7pRt2jWsQ
Vxr9mytdi3Oe5dnwmoTE6OjQi3TqvXjzQmp2G4kNViWfvKFHeoWhnjVKOvV7
E5nqwH9ISD1ONatipxC2+Zzn3746Zz4861iMkqFDb5A2JZE6CDHn86eFfjPo
KYreWPKC1slNBxoC+LxJtMu4vYdq9M73IsXrM9WBBhx+a55RxNcjZQVGAxi+
n2g+PKLHJtcGc5TYiG2yY7LJqv/ycZ917l/O+wk0znEzJH4Fe0/Gkxh6mc/e
XmbGUkieTF3Xg/AVw+vNKPzucJW+WQ5bMcNjKtWC1jK2MUrUApbju37dnHO+
tWZHhwlzcNflnBhIV8A9qbiJf+AeeEUuOzm2G05uTx5+pMsdfZbXqXn4rP9J
YYltBr1vOn8hzoaP88YCzqrbcH+Lf7x3tB10yZv7Hl8dwBaHfd9ctkM078cW
lGme7T99AQdvKYWnmSr8C62A+nM=
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw9kw8wG3YUxzPd2mIMp6Y9VjYjS29oBUvpXmzKzqgyK0NLhs1UiQ6XW9XM
f6qrTW51aylF/WuNzWjX8uI/JQmJEPEv/lZITlp/amoscSfv7ne/+9y73733
+773Nf062jtMjUAguCiO8u4+qs3YKl7BTwJ//tBfawZkQX/wtm2fY6/+92E2
i1MQRApfK2uVY2ye506U3bKKc351M7LlL0PKaI/Nw/NyXCC8MUMJWQbeqomh
h6ccG4iV7V42MvjtyhHaI4tlXG9SyyZbL4FM5NxTw5ZhJ755tmJdAllaK78I
a2XowAlMciGJgXzqoAt/nwxFFGoLgyOEewdawn/IlaKLjv+67uYsiCONN9nn
pBh57OGlncAlON1T48GMXMRbie7i512jKn7XssvgQboE5Bttr91ACW7cDI/K
NZfCzhpJFmQlwcEEjZd32+ZUnB83PcGvXAQj5YO3FtA/IMvNpGoGhoziQtgD
89ii6ZQhV1+AZPfst7vN5vGbvuzxB8VC8J1lxpzmzGH6pteqP5EHqUo9jGfx
3glxGid+HhbsAzISbaax0sEtQ8ochrQI9bMVBtOYpZVCB+0JCPV+QjXvmEDr
pfam8i/mYNXg05PRx8ex1kEvVNdXDHq6yhjDxg1Xy2c0Plj//s7rJRIhvjKL
6xgq6IO7ocPmbvFCJEbfsate7IUxRfkCRyG6bvUS0iK4sKn4PhgNo86F/BU2
fwoMmrlhU68EuJ5q/6KaKoYohZxDxYPYrl+dqU0cga2ppK6j2nwsdT/ua1fS
DEfGzhS2yAawLCOxmVwhAB+naqtD9QOYVLY0wSWLoKpIcFPDvx//ck4Is4ob
UPFXtRYp6aM8uL/LXGSc8vEIDhgCwm5wcFKmmW39WARK+c4cZiNd8OSx/Cce
+O0uWB9SkoMjR3xGVBzxQiqIvySG+80+/Yuf96J+ETsndmocAq9WKip046BV
3XfXnTvArDzn2OWnnciKyWsIIRXCQcdtOmumA0vnZ2JoxZPA2N+Y9y29Axlq
B+Zp5xDyb7Sn//tZK75f2eU6liKG3Nsnaro/QLxgSqMs63BVvJf36zxECQts
Us3DRCnfZClmX7xW1XaeA+L36mgf65UgYX/9fzvU67jHe3mWB1Mqci7GJMu1
ax9FXUSWxEkxUibWq1ttW9P/gSTTgkZDXhZuidMok45NQNhd+HjkiNx81LzY
wCpwVFiuGuj2ORbP7txGKo6cXL31CPJn+wr3SaqwX9FNpHEzpOZgiG1svYqZ
CWpkX3kDEF+SWy97tgDR8EdLbkktUJ2V0QmZZmsbmVeKIFhh/zVSF7jaHw5P
iR5ChsK+5brd0JdCcjfX+BNq5VctNSd7gLr6pY1AwkDF8mqGej8FVoWfjqt2
MhruGkIAjn+HEzPK6/B/odlaBA==
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.27% Marg=0.0177\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.2270474137931036`, 1.134949712643678}, {-0.3505562321268951,
    1.0410087924734888`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.600633817859412*^9, 3.600633879575737*^9, {3.600633916698587*^9, 
   3.6006339915512037`*^9}, {3.601218489652751*^9, 3.6012184974546328`*^9}, 
   3.60155905782364*^9, 3.6015719848275137`*^9, 3.601572961195009*^9, 
   3.602859191746373*^9, 3.6028603327363863`*^9, 3.607435246854671*^9, 
   3.6375663428422832`*^9, 3.6375742022727137`*^9, {3.637583922046226*^9, 
   3.637583926164082*^9}, 3.637586133285777*^9, 3.637589376085411*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["", "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tConclusion"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.5998959933365173`*^9, 3.5998959950405684`*^9}, {
  3.599899418576304*^9, 3.599899421983275*^9}},
 CellTags->"conclusions"],

Cell[TextData[{
 "In this notebook we presented several max-margin and SVM classifiers, both \
in the linear and non-linear setting, partially following the exposition in \
",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". We have exploited the Quadratic Programming functionality of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve most of the optimization problems presented. With the help of \
dynamic interactions, as dataset drawing and direct manipulation of the \
algorithm parameters, this Notebook can help understanding the algorithms and \
the role of their parameters.\nThe implementations provided here could \
virtually be used to address any binary classification problem. It is to note \
however, that in order to extend the applicability of the methods to larger \
problems (with more than a few hundreds of examples), it would be necessary \
to abandon the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver and implement a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " interface to existing and efficient C++ SVM implementations."
}], "Text",
 CellChangeTimes->{{3.600633087076248*^9, 3.600633575187806*^9}, {
  3.60066866290123*^9, 3.600668954013122*^9}, {3.600680784775477*^9, 
  3.600680883372558*^9}, {3.600680966600589*^9, 3.60068099644777*^9}, {
  3.600681077199624*^9, 3.600681094620131*^9}, {3.601559105921438*^9, 
  3.601559198545088*^9}, {3.601559249982498*^9, 3.601559282462489*^9}, {
  3.60162661258946*^9, 3.601626632824834*^9}, {3.602859200950872*^9, 
  3.602859222123472*^9}, {3.607435279179245*^9, 3.607435281253655*^9}, {
  3.637581868498744*^9, 3.637581869905108*^9}, {3.637583980164358*^9, 
  3.637583982248032*^9}, {3.6375842030551443`*^9, 3.637584203566497*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.5998994728452187`*^9, 3.599899474304348*^9}}],

Cell["\<\
\t1.\tNello Cristianini and John Shawe-Taylor. An introduction to Support \
Vector Machines and other kernel-based learning methods. Cambridge university \
press, 2000\
\>", "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellChangeTimes->{{3.6016267198091307`*^9, 3.601626780317151*^9}},
 CellTags->"00004F53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"Presentation",
WindowToolbars->"EditBar",
WindowSize->{1920, 1056},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->(FrontEndExecute[{
   FrontEnd`NotebookApply[
    FrontEnd`InputNotebook[], #, Placeholder]}]& ),
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->"/home/marko/print.pdf"},
PrivateNotebookOptions->{"NoteStyle"->"NumberedNote"},
ShowSelection->True,
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Creative"}, "NaturalColor.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["DisplayFormula"]], 
   Cell[
    StyleData["FigureCaption"], CellMargins -> {{54, 24}, {10, -5}}, 
    TextAlignment -> Center, LineSpacing -> {1, 2}, 
    ParagraphSpacing -> {0, 5}, LanguageCategory -> "NaturalLanguage", 
    ScriptLevel -> 1, CounterIncrements -> "FigureCaption", FontFamily -> 
    "Times New Roman", FontSize -> 12]}, Visible -> False, FrontEndVersion -> 
  "10.1 for Linux x86 (64-bit) (March 23, 2015)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "intro"->{
  Cell[16598, 370, 315, 8, 135, "Section",
   CellTags->"intro"]},
 "linear_classifiers"->{
  Cell[24569, 545, 571, 12, 135, "Section",
   CellTags->"linear_classifiers"]},
 "fig_geometry"->{
  Cell[35960, 846, 71955, 1189, 363, "Text",
   CellTags->"fig_geometry"]},
 "sec:max_margin"->{
  Cell[120006, 2347, 578, 12, 135, "Section",
   CellTags->"sec:max_margin"]},
 "margin_bound"->{
  Cell[120609, 2363, 151, 2, 67, "Subsection",
   CellTags->"margin_bound"]},
 "theorem1"->{
  Cell[125814, 2511, 1772, 53, 131, "Text",
   CellTags->"theorem1"]},
 "eq:max_margin_hard"->{
  Cell[146760, 3104, 1158, 39, 79, "DisplayFormulaNumbered",
   CellTags->"eq:max_margin_hard"]},
 "eq:1norm_svm"->{
  Cell[190904, 3975, 1705, 48, 163, "DisplayFormulaNumbered",
   CellTags->"eq:1norm_svm"]},
 "subsec:hinge_loss"->{
  Cell[217184, 4582, 207, 3, 67, "Subsection",
   CellTags->"subsec:hinge_loss"]},
 "sec:svm"->{
  Cell[271947, 5959, 467, 10, 135, "Section",
   CellTags->"sec:svm"]},
 "primal_problem"->{
  Cell[274806, 6019, 1226, 38, 116, "DisplayFormulaNumbered",
   CellTags->"primal_problem"]},
 "eq:dual_problem"->{
  Cell[279868, 6179, 844, 26, 79, "DisplayFormulaNumbered",
   CellTags->"eq:dual_problem"]},
 "eq:kkt"->{
  Cell[287289, 6400, 2242, 75, 236, "DisplayFormulaNumbered",
   CellTags->"eq:kkt"]},
 "eq:hard_margin_svm_L"->{
  Cell[293112, 6565, 1491, 54, 84, "DisplayFormula",
   CellTags->"eq:hard_margin_svm_L"]},
 "eq:hard_margin_svm_w"->{
  Cell[298666, 6757, 878, 25, 172, "DisplayFormulaNumbered",
   CellTags->"eq:hard_margin_svm_w"]},
 "eq:hard_margin_svm_Dual"->{
  Cell[312080, 7163, 1511, 54, 136, "DisplayFormulaNumbered",
   CellTags->"eq:hard_margin_svm_Dual"]},
 "eq:soft_margin_svm_L"->{
  Cell[421519, 9285, 2038, 72, 84, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_L"]},
 "eq:soft_margin_svm_w"->{
  Cell[428100, 9509, 1194, 32, 214, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_w"]},
 "eq:soft_margin_svm_Dual"->{
  Cell[438627, 9858, 1376, 47, 136, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_Dual"]},
 "eq:svm_w"->{
  Cell[484086, 10998, 971, 30, 229, "DisplayFormulaNumbered",
   CellTags->"eq:svm_w"]},
 "eq:2norm_svm_Dual"->{
  Cell[500647, 11500, 1336, 48, 136, "DisplayFormulaNumbered",
   CellTags->"eq:2norm_svm_Dual"]},
 "sec:kernel_svm"->{
  Cell[531851, 12241, 582, 12, 135, "Section",
   CellTags->"sec:kernel_svm"]},
 "conclusions"->{
  Cell[840335, 17851, 509, 11, 135, "Section",
   CellTags->"conclusions"]},
 "00004F53"->{
  Cell[843173, 17913, 347, 8, 39, "Reference",
   CellTags->"00004F53"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"intro", 844949, 17963},
 {"linear_classifiers", 845041, 17966},
 {"fig_geometry", 845141, 17969},
 {"sec:max_margin", 845238, 17972},
 {"margin_bound", 845336, 17975},
 {"theorem1", 845429, 17978},
 {"eq:max_margin_hard", 845525, 17981},
 {"eq:1norm_svm", 845642, 17984},
 {"subsec:hinge_loss", 845759, 17987},
 {"sec:svm", 845856, 17990},
 {"primal_problem", 845949, 17993},
 {"eq:dual_problem", 846066, 17996},
 {"eq:kkt", 846173, 17999},
 {"eq:hard_margin_svm_L", 846287, 18002},
 {"eq:hard_margin_svm_w", 846406, 18005},
 {"eq:hard_margin_svm_Dual", 846536, 18008},
 {"eq:soft_margin_svm_L", 846667, 18011},
 {"eq:soft_margin_svm_w", 846794, 18014},
 {"eq:soft_margin_svm_Dual", 846925, 18017},
 {"eq:svm_w", 847044, 18020},
 {"eq:2norm_svm_Dual", 847157, 18023},
 {"sec:kernel_svm", 847277, 18026},
 {"conclusions", 847375, 18029},
 {"00004F53", 847467, 18032}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 1321, 31, 19, "Input",
 CellOpen->False,
 InitializationCell->True,
 InitializationGroup->True],
Cell[1891, 55, 971, 15, 19, "Print",
 CellOpen->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[2899, 75, 806, 10, 124, "Title"],
Cell[3708, 87, 150, 2, 52, "Text"],
Cell[3861, 91, 444, 6, 38, "SmallText"],
Cell[CellGroupData[{
Cell[4330, 101, 102, 1, 45, "Subsubtitle"],
Cell[CellGroupData[{
Cell[4457, 106, 98, 1, 67, "Subsection"],
Cell[4558, 109, 12003, 256, 732, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16598, 370, 315, 8, 135, "Section",
 CellTags->"intro"],
Cell[16916, 380, 7616, 160, 949, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24569, 545, 571, 12, 135, "Section",
 CellTags->"linear_classifiers"],
Cell[25143, 559, 1816, 45, 53, "Text"],
Cell[CellGroupData[{
Cell[26984, 608, 536, 16, 56, "Item"],
Cell[27523, 626, 228, 6, 53, "Item"],
Cell[27754, 634, 291, 6, 53, "Item"]
}, Open  ]],
Cell[28060, 643, 1466, 29, 89, "Text"],
Cell[29529, 674, 1011, 29, 41, "DisplayFormulaNumbered"],
Cell[30543, 705, 1831, 50, 57, "Text"],
Cell[32377, 757, 690, 20, 41, "DisplayFormulaNumbered"],
Cell[33070, 779, 2887, 65, 241, "Text"],
Cell[35960, 846, 71955, 1189, 363, "Text",
 CellTags->"fig_geometry"],
Cell[107918, 2037, 1103, 28, 128, "Text"],
Cell[109024, 2067, 865, 22, 41, "DisplayFormulaNumbered"],
Cell[109892, 2091, 2411, 69, 163, "Text"],
Cell[112306, 2162, 746, 22, 41, "DisplayFormula"],
Cell[113055, 2186, 2574, 56, 311, "Text"],
Cell[CellGroupData[{
Cell[115654, 2246, 1433, 34, 19, "Input",
 CellOpen->False],
Cell[117090, 2282, 2755, 55, 470, "Output"]
}, Open  ]],
Cell[119860, 2340, 109, 2, 52, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120006, 2347, 578, 12, 135, "Section",
 CellTags->"sec:max_margin"],
Cell[CellGroupData[{
Cell[120609, 2363, 151, 2, 67, "Subsection",
 CellTags->"margin_bound"],
Cell[120763, 2367, 1948, 49, 89, "Text"],
Cell[122714, 2418, 560, 15, 41, "DisplayFormulaNumbered"],
Cell[123277, 2435, 1615, 45, 89, "Text"],
Cell[124895, 2482, 535, 16, 43, "DisplayFormulaNumbered"],
Cell[125433, 2500, 378, 9, 52, "Text"],
Cell[125814, 2511, 1772, 53, 131, "Text",
 CellTags->"theorem1"],
Cell[127589, 2566, 880, 26, 69, "DisplayFormulaNumbered"],
Cell[128472, 2594, 2264, 54, 304, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130773, 2653, 179, 2, 67, "Subsection"],
Cell[130955, 2657, 2382, 78, 164, "Text"],
Cell[133340, 2737, 1291, 36, 65, "DisplayFormula"],
Cell[134634, 2775, 1397, 28, 126, "Text"],
Cell[136034, 2805, 998, 34, 65, "DisplayFormula"],
Cell[137035, 2841, 1363, 20, 89, "Text"],
Cell[138401, 2863, 997, 32, 65, "DisplayFormula"],
Cell[139401, 2897, 3228, 82, 245, "Text"],
Cell[142632, 2981, 1148, 37, 106, "DisplayFormula"],
Cell[143783, 3020, 2974, 82, 109, "Text"],
Cell[146760, 3104, 1158, 39, 79, "DisplayFormulaNumbered",
 CellTags->"eq:max_margin_hard"],
Cell[147921, 3145, 4664, 111, 218, "Text"],
Cell[CellGroupData[{
Cell[152610, 3260, 2096, 31, 50, "Subsubsection"],
Cell[154709, 3293, 2428, 39, 126, "Text"],
Cell[157140, 3334, 2462, 69, 430, "Code",
 Evaluatable->False],
Cell[159605, 3405, 1049, 18, 237, "Text"],
Cell[CellGroupData[{
Cell[160679, 3427, 468, 8, 60, "Input",
 InitializationCell->True],
Cell[161150, 3437, 5440, 102, 435, "Output"]
}, Open  ]],
Cell[166605, 3542, 1910, 31, 348, "Text"],
Cell[CellGroupData[{
Cell[168540, 3577, 1866, 30, 93, "Input"],
Cell[170409, 3609, 15701, 268, 419, "Output"]
}, Open  ]],
Cell[186125, 3880, 1649, 26, 311, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[187823, 3912, 179, 2, 67, "Subsection"],
Cell[188005, 3916, 2896, 57, 237, "Text"],
Cell[190904, 3975, 1705, 48, 163, "DisplayFormulaNumbered",
 CellTags->"eq:1norm_svm"],
Cell[192612, 4025, 5058, 138, 458, "Text"],
Cell[CellGroupData[{
Cell[197695, 4167, 173, 5, 50, "Subsubsection"],
Cell[197871, 4174, 1631, 26, 126, "Text"],
Cell[199505, 4202, 3538, 95, 578, "Code",
 Evaluatable->False],
Cell[203046, 4299, 1270, 20, 163, "Text"],
Cell[CellGroupData[{
Cell[204341, 4323, 356, 6, 60, "Input",
 InitializationCell->True],
Cell[204700, 4331, 4286, 86, 435, "Output"]
}, Open  ]],
Cell[209001, 4420, 1118, 26, 274, "Text"],
Cell[CellGroupData[{
Cell[210144, 4450, 3271, 52, 96, "Input"],
Cell[213418, 4504, 2854, 53, 529, "Output"]
}, Open  ]],
Cell[216287, 4560, 848, 16, 163, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[217184, 4582, 207, 3, 67, "Subsection",
 CellTags->"subsec:hinge_loss"],
Cell[217394, 4587, 1265, 28, 89, "Text"],
Cell[CellGroupData[{
Cell[218684, 4619, 879, 26, 52, "Item"],
Cell[219566, 4647, 1249, 42, 52, "Item"]
}, Open  ]],
Cell[220830, 4692, 669, 19, 52, "Text"],
Cell[221502, 4713, 548, 17, 41, "DisplayFormula"],
Cell[222053, 4732, 1302, 35, 91, "Text"],
Cell[223358, 4769, 944, 31, 84, "DisplayFormulaNumbered"],
Cell[224305, 4802, 3965, 115, 259, "Text"],
Cell[228273, 4919, 489, 15, 41, "DisplayFormulaNumbered"],
Cell[228765, 4936, 632, 11, 89, "Text"],
Cell[CellGroupData[{
Cell[229422, 4951, 2162, 55, 19, "Input",
 CellOpen->False],
Cell[231587, 5008, 6766, 135, 519, "Output"]
}, Open  ]],
Cell[238368, 5146, 1118, 17, 126, "Text"],
Cell[CellGroupData[{
Cell[239511, 5167, 641, 17, 52, "Item"],
Cell[240155, 5186, 1009, 28, 54, "Item"]
}, Open  ]],
Cell[241179, 5217, 16, 0, 52, "Text"],
Cell[CellGroupData[{
Cell[241220, 5221, 173, 5, 50, "Subsubsection"],
Cell[241396, 5228, 210, 5, 89, "Text"],
Cell[241609, 5235, 3228, 91, 541, "Code",
 Evaluatable->False],
Cell[244840, 5328, 225, 7, 126, "Text"],
Cell[CellGroupData[{
Cell[245090, 5339, 199, 4, 60, "Input",
 InitializationCell->True],
Cell[245292, 5345, 3366, 74, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248695, 5424, 3946, 61, 96, "Input"],
Cell[252644, 5487, 2388, 46, 529, "Output"]
}, Open  ]],
Cell[255047, 5536, 384, 9, 163, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[255480, 5551, 256, 3, 67, "Subsection"],
Cell[255739, 5556, 1957, 44, 200, "Text"],
Cell[CellGroupData[{
Cell[257721, 5604, 173, 5, 50, "Subsubsection"],
Cell[257897, 5611, 686, 14, 52, "Text"],
Cell[258586, 5627, 1033, 33, 84, "DisplayFormulaNumbered"],
Cell[259622, 5662, 1189, 24, 126, "Text"],
Cell[260814, 5688, 2770, 77, 467, "Code",
 Evaluatable->False],
Cell[263587, 5767, 333, 8, 126, "Text"],
Cell[CellGroupData[{
Cell[263945, 5779, 202, 4, 60, "Input",
 InitializationCell->True],
Cell[264150, 5785, 2828, 66, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[267015, 5856, 1697, 30, 96, "Input"],
Cell[268715, 5888, 2119, 43, 525, "Output"]
}, Open  ]],
Cell[270849, 5934, 1037, 18, 163, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[271947, 5959, 467, 10, 135, "Section",
 CellTags->"sec:svm"],
Cell[272417, 5971, 1766, 33, 163, "Text"],
Cell[CellGroupData[{
Cell[274208, 6008, 114, 1, 67, "Subsection"],
Cell[274325, 6011, 478, 6, 52, "Text"],
Cell[274806, 6019, 1226, 38, 116, "DisplayFormulaNumbered",
 CellTags->"primal_problem"],
Cell[276035, 6059, 1565, 42, 128, "Text"],
Cell[277603, 6103, 1830, 62, 84, "DisplayFormulaNumbered"],
Cell[279436, 6167, 429, 10, 52, "Text"],
Cell[279868, 6179, 844, 26, 79, "DisplayFormulaNumbered",
 CellTags->"eq:dual_problem"],
Cell[280715, 6207, 1126, 33, 89, "Text"],
Cell[281844, 6242, 2988, 91, 131, "Text"],
Cell[284835, 6335, 2451, 63, 96, "Text"],
Cell[287289, 6400, 2242, 75, 236, "DisplayFormulaNumbered",
 CellTags->"eq:kkt"],
Cell[289534, 6477, 2493, 53, 165, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292064, 6535, 111, 1, 67, "Subsection"],
Cell[292178, 6538, 415, 9, 89, "Text"],
Cell[CellGroupData[{
Cell[292618, 6551, 161, 2, 50, "Subsubsection"],
Cell[292782, 6555, 327, 8, 52, "Text"],
Cell[293112, 6565, 1491, 54, 84, "DisplayFormula",
 CellTags->"eq:hard_margin_svm_L"],
Cell[294606, 6621, 1445, 48, 109, "Text"],
Cell[296054, 6671, 2340, 79, 196, "DisplayFormula"],
Cell[298397, 6752, 266, 3, 52, "Text"],
Cell[298666, 6757, 878, 25, 172, "DisplayFormulaNumbered",
 CellTags->"eq:hard_margin_svm_w"],
Cell[299547, 6784, 416, 11, 52, "Text"],
Cell[299966, 6797, 3267, 111, 297, "DisplayFormula"],
Cell[303236, 6910, 3167, 88, 166, "Text"],
Cell[306406, 7000, 4458, 135, 408, "DisplayFormula"],
Cell[310867, 7137, 1210, 24, 89, "Text"],
Cell[312080, 7163, 1511, 54, 136, "DisplayFormulaNumbered",
 CellTags->"eq:hard_margin_svm_Dual"],
Cell[313594, 7219, 3887, 71, 143, "Text"],
Cell[317484, 7292, 1479, 54, 87, "DisplayFormulaNumbered"],
Cell[318966, 7348, 4382, 98, 128, "Text"],
Cell[323351, 7448, 2964, 90, 203, "DisplayFormula"]
}, Open  ]],
Cell[CellGroupData[{
Cell[326352, 7543, 238, 3, 50, "Subsubsection"],
Cell[326593, 7548, 5101, 120, 274, "Text"],
Cell[331697, 7670, 185, 5, 59, "DisplayFormula"],
Cell[331885, 7677, 1039, 18, 200, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332961, 7700, 177, 5, 50, "Subsubsection"],
Cell[333141, 7707, 1124, 26, 129, "Text"],
Cell[334268, 7735, 4252, 116, 689, "Code",
 Evaluatable->False],
Cell[338523, 7853, 547, 12, 126, "Text"],
Cell[CellGroupData[{
Cell[339095, 7869, 85, 2, 60, "Input",
 InitializationCell->True],
Cell[339183, 7873, 3509, 76, 435, "Output"]
}, Open  ]],
Cell[342707, 7952, 1212, 23, 274, "Text"],
Cell[CellGroupData[{
Cell[343944, 7979, 3800, 56, 93, "Input"],
Cell[347747, 8037, 72341, 1210, 419, "Output"]
}, Open  ]],
Cell[420103, 9250, 808, 15, 200, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[420948, 9270, 107, 1, 50, "Subsubsection"],
Cell[421058, 9273, 458, 10, 89, "Text"],
Cell[421519, 9285, 2038, 72, 84, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_L"],
Cell[423560, 9359, 213, 4, 52, "Text"],
Cell[423776, 9365, 4002, 136, 332, "DisplayFormula"],
Cell[427781, 9503, 316, 4, 52, "Text"],
Cell[428100, 9509, 1194, 32, 214, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_w"],
Cell[429297, 9543, 1240, 37, 89, "Text"],
Cell[430540, 9582, 3955, 131, 297, "DisplayFormula"],
Cell[434498, 9715, 2020, 70, 129, "Text"],
Cell[436521, 9787, 1391, 45, 105, "DisplayFormula"],
Cell[437915, 9834, 709, 22, 106, "Text"],
Cell[438627, 9858, 1376, 47, 136, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_Dual"],
Cell[440006, 9907, 8510, 212, 515, "Text"],
Cell[448519, 10121, 2391, 84, 170, "DisplayFormula"],
Cell[450913, 10207, 3302, 45, 52, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454252, 10257, 177, 5, 50, "Subsubsection"],
Cell[454432, 10264, 3888, 65, 129, "Text"],
Cell[458323, 10331, 5088, 141, 763, "Code",
 Evaluatable->False],
Cell[463414, 10474, 452, 8, 163, "Text"],
Cell[CellGroupData[{
Cell[463891, 10486, 85, 2, 60, "Input",
 InitializationCell->True],
Cell[463979, 10490, 3409, 74, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[467425, 10569, 4041, 63, 96, "Input"],
Cell[471469, 10634, 2236, 45, 529, "Output"]
}, Open  ]],
Cell[473720, 10682, 482, 11, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[474239, 10698, 162, 2, 50, "Subsubsection"],
Cell[474404, 10702, 847, 16, 52, "Text"],
Cell[475254, 10720, 1696, 53, 126, "DisplayFormula"],
Cell[476953, 10775, 1166, 22, 126, "Text"],
Cell[478122, 10799, 1826, 63, 84, "DisplayFormula"],
Cell[479951, 10864, 645, 8, 52, "Text"],
Cell[480599, 10874, 3259, 117, 258, "DisplayFormula"],
Cell[483861, 10993, 222, 3, 52, "Text"],
Cell[484086, 10998, 971, 30, 229, "DisplayFormulaNumbered",
 CellTags->"eq:svm_w"],
Cell[485060, 11030, 1361, 28, 89, "Text"],
Cell[486424, 11060, 4042, 136, 297, "DisplayFormula"],
Cell[490469, 11198, 3805, 114, 155, "Text"],
Cell[494277, 11314, 5154, 158, 408, "DisplayFormula"],
Cell[499434, 11474, 1210, 24, 89, "Text"],
Cell[500647, 11500, 1336, 48, 136, "DisplayFormulaNumbered",
 CellTags->"eq:2norm_svm_Dual"],
Cell[501986, 11550, 7590, 200, 430, "Text"],
Cell[509579, 11752, 2635, 83, 203, "DisplayFormula"],
Cell[512217, 11837, 3455, 63, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515709, 11905, 177, 5, 50, "Subsubsection"],
Cell[515889, 11912, 3120, 47, 126, "Text"],
Cell[519012, 11961, 2042, 58, 282, "Code",
 Evaluatable->False],
Cell[521057, 12021, 215, 6, 126, "Text"],
Cell[CellGroupData[{
Cell[521297, 12031, 200, 4, 60, "Input",
 InitializationCell->True],
Cell[521500, 12037, 3736, 79, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[525273, 12121, 4631, 71, 96, "Input"],
Cell[529907, 12194, 1871, 39, 529, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[531851, 12241, 582, 12, 135, "Section",
 CellTags->"sec:kernel_svm"],
Cell[CellGroupData[{
Cell[532458, 12257, 104, 1, 67, "Subsection"],
Cell[532565, 12260, 2703, 48, 200, "Text"],
Cell[535271, 12310, 183468, 3014, 499, 97512, 1603, "CachedBoxData", \
"BoxData", "Output"],
Cell[718742, 15326, 2900, 52, 163, "Text"],
Cell[CellGroupData[{
Cell[721667, 15382, 84, 1, 50, "Subsubsection"],
Cell[721754, 15385, 1677, 35, 52, "Text"],
Cell[723434, 15422, 535, 18, 41, "DisplayFormula"],
Cell[723972, 15442, 3874, 93, 348, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[727883, 15540, 106, 1, 50, "Subsubsection"],
Cell[727992, 15543, 1676, 60, 92, "Text"],
Cell[729671, 15605, 1974, 37, 79, "DisplayFormula"],
Cell[731648, 15644, 1917, 35, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[733602, 15684, 223, 3, 50, "Subsubsection"],
Cell[733828, 15689, 2179, 45, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[736044, 15739, 215, 3, 50, "Subsubsection"],
Cell[736262, 15744, 1589, 56, 89, "Text"],
Cell[737854, 15802, 2927, 117, 227, "DisplayFormula"],
Cell[740784, 15921, 757, 17, 52, "Text"],
Cell[741544, 15940, 1663, 63, 136, "DisplayFormula"],
Cell[743210, 16005, 659, 16, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[743906, 16026, 173, 5, 50, "Subsubsection"],
Cell[744082, 16033, 509, 9, 89, "Text"],
Cell[744594, 16044, 2086, 61, 504, "Code",
 Evaluatable->False],
Cell[746683, 16107, 16, 0, 52, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[746748, 16113, 172, 2, 67, "Subsection"],
Cell[746923, 16117, 2131, 62, 240, "Text"],
Cell[749057, 16181, 1426, 50, 87, "DisplayFormula"],
Cell[750486, 16233, 400, 8, 89, "Text"],
Cell[CellGroupData[{
Cell[750911, 16245, 175, 5, 50, "Subsubsection"],
Cell[751089, 16252, 541, 11, 89, "Text"],
Cell[751633, 16265, 267, 4, 60, "Input"],
Cell[CellGroupData[{
Cell[751925, 16273, 2378, 43, 131, "Input"],
Cell[754306, 16318, 2765, 52, 555, "Output"]
}, Open  ]],
Cell[757086, 16373, 196, 6, 126, "Text"],
Cell[CellGroupData[{
Cell[757307, 16383, 124, 2, 60, "Input"],
Cell[757434, 16387, 1768, 51, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[759239, 16443, 1119, 23, 131, "Input"],
Cell[760361, 16468, 2245, 45, 525, "Output"]
}, Open  ]],
Cell[762621, 16516, 679, 13, 200, "Text"],
Cell[CellGroupData[{
Cell[763325, 16533, 994, 21, 131, "Input"],
Cell[764322, 16556, 2022, 42, 531, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[766381, 16603, 679, 13, 93, "Input"],
Cell[767063, 16618, 73180, 1223, 430, "Output"]
}, Open  ]],
Cell[840258, 17844, 16, 0, 52, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[840335, 17851, 509, 11, 135, "Section",
 CellTags->"conclusions"],
Cell[840847, 17864, 2189, 41, 274, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[843073, 17910, 97, 1, 135, "Section"],
Cell[843173, 17913, 347, 8, 39, "Reference",
 CellTags->"00004F53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
