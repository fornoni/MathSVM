(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   1051503,      21593]
NotebookOptionsPosition[   1031062,      21017]
NotebookOutlinePosition[   1036009,      21157]
CellTagsIndexPosition[   1035071,      21129]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"$Path", "=", 
   RowBox[{"Join", " ", "[", 
    RowBox[{"$Path", ",", 
     RowBox[{"{", 
      RowBox[{"NotebookDirectory", "[", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Get", "[", "\"\<MathSVM`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}], "//", "Quiet"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
     RowBox[{"loadData", " ", "[", "\"\<banana.mat\>\"", "]"}]}], ";"}], 
   "*)"}]}]}], "Input",
 CellOpen->False,
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.600092953254756*^9, 3.600092955367569*^9}, {
   3.600093561777714*^9, 3.600093573991499*^9}, 3.6000936160971107`*^9, {
   3.600093655594242*^9, 3.6000936633743477`*^9}, {3.60041483141713*^9, 
   3.6004148351879187`*^9}, {3.600525085388228*^9, 3.600525090629882*^9}, 
   3.600528824845894*^9, {3.600543944567115*^9, 3.6005439558129797`*^9}, 
   3.600588170045826*^9, {3.600671000405999*^9, 3.600671016591625*^9}, {
   3.60067207858484*^9, 3.600672100077403*^9}, {3.6006724181907578`*^9, 
   3.60067243328294*^9}, {3.6375854261910458`*^9, 3.637585427189118*^9}}],

Cell[BoxData["\<\"SVM Package Loaded\"\>"], "Print",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{3.601212290049609*^9, 3.60121266748938*^9, 
  3.60121335565849*^9, 3.601214039708928*^9, 3.601214607518528*^9, 
  3.6012180037848454`*^9, 3.601286272243084*^9, 3.601295888966861*^9, 
  3.601296909161872*^9, 3.6012971698767357`*^9, 3.601297661411908*^9, 
  3.601298893956583*^9, 3.601298946571395*^9, 3.601304692965095*^9, 
  3.601372884558834*^9, 3.601375276779317*^9, 3.6015597711291647`*^9, 
  3.601562166047846*^9, 3.601563111281438*^9, 3.601571644905724*^9, 
  3.601572489132666*^9, 3.60162615552444*^9, 3.602856855184366*^9, 
  3.602859724095646*^9, 3.6074305172060204`*^9, 3.607432447940103*^9, 
  3.637564724629726*^9, 3.6375655252913218`*^9, 3.6375656538818502`*^9, 
  3.637566041831627*^9, 3.6375733605461493`*^9, 3.637581899228078*^9, 
  3.637582140264697*^9, 3.637582200929224*^9, 3.637583463981867*^9, 
  3.6375855246920357`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["A hands-on introduction to Support Vector Machines", "Title",
 CellChangeTimes->{{3.41783940236821*^9, 3.4178394062050323`*^9}, {
   3.435291780155868*^9, 3.43529178092163*^9}, {3.468557035897552*^9, 
   3.4685570550125637`*^9}, 3.5442382141880083`*^9, 3.544238351303344*^9, {
   3.577353300017419*^9, 3.5773533139229527`*^9}, {3.5773537360629873`*^9, 
   3.577353752656562*^9}, {3.577360010706706*^9, 3.577360032241975*^9}, {
   3.5773623107856827`*^9, 3.5773623335992813`*^9}, {3.577366518781762*^9, 
   3.5773665255746326`*^9}, {3.6006674743663063`*^9, 3.600667515305976*^9}, {
   3.6006724810398617`*^9, 3.600672484136705*^9}, {3.60067811062516*^9, 
   3.600678199962726*^9}, {3.600678268573207*^9, 3.600678294242147*^9}, 
   3.601298617085761*^9, {3.6074354021223297`*^9, 3.607435406715845*^9}}],

Cell["Feb 3, 2014", "SmallText",
 CellChangeTimes->{{3.511439683975197*^9, 3.5114397034510307`*^9}, {
  3.544238057548271*^9, 3.54423806068119*^9}, {3.563082604004828*^9, 
  3.5630826078039503`*^9}, {3.5762506934144382`*^9, 3.576250700712188*^9}, {
  3.577360043793089*^9, 3.577360047111844*^9}, {3.587640689382739*^9, 
  3.5876406916604958`*^9}, {3.600522942653962*^9, 3.600522947743492*^9}, {
  3.600675320404994*^9, 3.6006753342597103`*^9}}],

Cell[CellGroupData[{

Cell["Marco Fornoni", "Subsubtitle",
 CellChangeTimes->{{3.577360037879161*^9, 3.577360051866151*^9}}],

Cell[CellGroupData[{

Cell["Abstract", "Subsection",
 CellChangeTimes->{{3.4685570921061563`*^9, 3.468557093653076*^9}}],

Cell[TextData[{
 "Nowadays computers can be trained to perform a variety of tasks, \
traditionally associated with intelligence. Recognizing people, classifying \
webpages, recognizing human speech, performing online trading, are just a few \
examples of tasks that can be performed by machines. \nBehind this very \
diverse set of abilities there is a branch of ",
 StyleBox["computer science",
  FontSlant->"Italic"],
 " and ",
 StyleBox["artificial intelligence",
  FontSlant->"Italic"],
 ", called ",
 StyleBox["machine learning",
  FontSlant->"Italic"],
 ", which deals with the problem of constructing and studying systems able to \
learn from data. In a ",
 StyleBox["supervised",
  FontSlant->"Italic"],
 " machine learning setting, problems are directly specified by sets of input \
data, with associated desired outputs. The goal of a learning machine is then \
to learn a mathematical model able to reproduce the desired output on the \
training data, while preserving ",
 StyleBox["generalization",
  FontSlant->"Italic"],
 " abilities on unseen data. This approach results to be very useful when the \
functional dependency of the output w.r.t. the input is not known, or is too \
complex to be modeled exactly.\n\nOne of the most successful machine learning \
tools that is widely used to solve classification and regression problems is \
called ",
 StyleBox["Support Vector Machine (SVM)",
  FontSlant->"Italic"],
 " ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ".  The key assumption of this model is that training and testing samples \
are generated i.i.d. according to an unknown but fixed distribution. Given a \
set of i.i.d.  training instances ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         StyleBox[
          SubscriptBox["x", 
           StyleBox["1",
            FontWeight->"Plain"]],
          FontWeight->"Bold"], ",", 
         SubscriptBox["y", "1"]}], ")"}], ",", 
       RowBox[{
        SubscriptBox[
         RowBox[{
          StyleBox["(", "InlineFormula"], 
          RowBox[{
           StyleBox[
            SubscriptBox["x", 
             StyleBox["2",
              FontWeight->"Plain"]], "InlineFormula",
            FontWeight->"Bold"], 
           StyleBox[",", "InlineFormula"], 
           SubscriptBox["y", "2"]}], 
          StyleBox[")", "InlineFormula"]}], 
         RowBox[{",", "\[Ellipsis]", ","}]], 
        RowBox[{"(", 
         RowBox[{
          StyleBox[
           SubscriptBox["x", 
            StyleBox["n",
             FontWeight->"Plain"]],
           FontWeight->"Bold"], ",", 
          SubscriptBox["y", "n"]}], ")"}]}]}], "}"}], "InlineFormula"], ",", 
    " ", 
    RowBox[{
     RowBox[{"where", " ", 
      StyleBox[
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "InlineFormula"]}], 
     StyleBox["\[Element]", "InlineFormula"], 
     StyleBox["X", "InlineFormula"], 
     StyleBox["\[Subset]", "InlineFormula"], 
     StyleBox[
      SuperscriptBox["\[DoubleStruckCapitalR]", "d"], "InlineFormula"]}]}], 
   TraditionalForm]], "Text"],
 " is an input and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["y", "i"], "\[Element]", "\[DoubleStruckCapitalR]"}], 
    "InlineFormula"], TraditionalForm]]],
 " is the desired output, a SVM predicts using a real valued function ",
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], 
     StyleBox["X", "InlineFormula",
      FontSlant->"Italic"]}], 
    StyleBox["\[Subset]", "InlineFormula",
     FontSlant->"Italic"], 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[DoubleStruckCapitalR]", "InlineFormula",
       FontSlant->"Italic"], "d"], 
     StyleBox["\[RightArrow]", "InlineFormula"], 
     StyleBox["\[DoubleStruckCapitalR]", "InlineFormula"]}]}], 
   TraditionalForm]], "InlineFormula"], "InlineFormula"],
 ", parametrized by a vector ",
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], " ", "\[Epsilon]", " ", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], TraditionalForm]], 
  "InlineFormula",
  FontSlant->"Italic"], "InlineFormula"],
 StyleBox[" and a scalar ", "InlineFormula"],
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "\[Element]", "\[DoubleStruckCapitalR]"}], 
   TraditionalForm]]],
 " (",
 StyleBox["bias",
  FontSlant->"Italic"],
 "). This prediction function ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"]}]], "InlineFormula"], TraditionalForm]]],
 " is chosen to maximize a quantity called ",
 StyleBox["margin",
  FontSlant->"Italic"],
 " and it is linear. ",
 StyleBox["Kernel methods",
  FontSlant->"Italic"],
 " can be used to extend SVM to the non-linear setting, without modifing the \
analysis and implementation of the method.\n\nThe goal of this notebook is to \
present the very basic theory of linear classifiers, max-margin classifiers \
and Support Vector Machines and to explore the use of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve the optimization problems that arise",
 StyleBox[".", "DisplayFormula"],
 " Following the presentation in ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ", this notebook explicitly derives, implements and compare several \
classifiers, demonstrating them on synthetic 2D-data generated by the user, \
with visualizations involving direct hyper-parameters manipulations. It can \
thus be considered a hands-on introduction to the topic."
}], "Text",
 CellChangeTimes->{{3.4178394136694803`*^9, 3.417839428740713*^9}, {
   3.435291790854022*^9, 3.435291847713936*^9}, {3.435291966315791*^9, 
   3.435291977441812*^9}, {3.435292037892099*^9, 3.43529205339745*^9}, {
   3.435292093987976*^9, 3.435292116665512*^9}, {3.43529216806837*^9, 
   3.435292168632934*^9}, {3.468557118215548*^9, 3.46855718512158*^9}, {
   3.46855721597228*^9, 3.468557850172822*^9}, 3.4685583296453753`*^9, {
   3.5114393871615458`*^9, 3.5114394394283047`*^9}, 3.5442380739013147`*^9, 
   3.54423811926757*^9, 3.544238181361961*^9, {3.544238219239573*^9, 
   3.544238219600222*^9}, {3.563082613137628*^9, 3.563082617149609*^9}, {
   3.576250708729867*^9, 3.576250710544142*^9}, {3.576250746308978*^9, 
   3.5762507601422777`*^9}, {3.577353720714952*^9, 3.5773537245951014`*^9}, {
   3.577353755031596*^9, 3.577353830618239*^9}, {3.5773540172759666`*^9, 
   3.5773541162480803`*^9}, {3.577354152066833*^9, 3.577354413093473*^9}, {
   3.5773544432664547`*^9, 3.577354529607409*^9}, {3.5773545645004063`*^9, 
   3.577354609881363*^9}, {3.577354646693754*^9, 3.577354719256816*^9}, {
   3.577354804577231*^9, 3.577354815180592*^9}, {3.577354859759325*^9, 
   3.577354878122208*^9}, {3.577354937657115*^9, 3.57735497397362*^9}, {
   3.5773551128436937`*^9, 3.577355124374435*^9}, {3.577355287847395*^9, 
   3.577355291745131*^9}, {3.577355331502981*^9, 3.5773555238018637`*^9}, {
   3.5773556441864843`*^9, 3.577355680529611*^9}, {3.577355764746146*^9, 
   3.57735603616667*^9}, {3.577356067609832*^9, 3.577356088698545*^9}, {
   3.5773566127012033`*^9, 3.577356646538927*^9}, {3.577357259521092*^9, 
   3.577357262049225*^9}, {3.577357426760705*^9, 3.577357749278442*^9}, {
   3.577357796111245*^9, 3.5773578084046593`*^9}, {3.577357892477436*^9, 
   3.577357900054429*^9}, {3.577357991703231*^9, 3.57735800683899*^9}, {
   3.577358336912718*^9, 3.577358356808399*^9}, {3.57735841721972*^9, 
   3.57735849711208*^9}, {3.577358566418222*^9, 3.577358587755087*^9}, {
   3.577358622872891*^9, 3.577358733602942*^9}, {3.5773587638068533`*^9, 
   3.577358768925439*^9}, {3.577358808147798*^9, 3.5773588098055563`*^9}, 
   3.577358901440624*^9, {3.577358941533095*^9, 3.577359165805587*^9}, {
   3.5773591962207117`*^9, 3.5773592177684097`*^9}, {3.577359248474031*^9, 
   3.5773593667376966`*^9}, {3.5773594331034393`*^9, 
   3.5773594896816797`*^9}, {3.577359523693625*^9, 3.577359534295063*^9}, {
   3.577359620018565*^9, 3.577359678937852*^9}, {3.577359798296011*^9, 
   3.57735998655851*^9}, {3.5773601049909*^9, 3.577360237113104*^9}, {
   3.577360270767872*^9, 3.577360311467051*^9}, {3.577360856695126*^9, 
   3.577360857977613*^9}, {3.577360929098216*^9, 3.57736095463447*^9}, {
   3.577361698337792*^9, 3.577361771468536*^9}, {3.577361809866765*^9, 
   3.577361875240674*^9}, {3.5773619792408257`*^9, 3.577361982504136*^9}, {
   3.577362428808133*^9, 3.577362524010764*^9}, {3.57736260183395*^9, 
   3.577362609007038*^9}, {3.5773631916012077`*^9, 3.577363194621887*^9}, {
   3.577363443192843*^9, 3.577363497664022*^9}, {3.577363577378818*^9, 
   3.577363580696754*^9}, {3.577363666202127*^9, 3.577363668237071*^9}, {
   3.577363743420475*^9, 3.577363761484745*^9}, {3.577363871084654*^9, 
   3.5773639581458473`*^9}, {3.577363993050496*^9, 3.577364010484871*^9}, 
   3.5773641351947107`*^9, 3.577364201631631*^9, {3.577364306749485*^9, 
   3.5773643334205103`*^9}, {3.57736441377666*^9, 3.577364488304467*^9}, {
   3.577364523400754*^9, 3.5773645248374968`*^9}, {3.577364582099708*^9, 
   3.577364591155931*^9}, {3.577364621168502*^9, 3.577364661622953*^9}, {
   3.5773647598942966`*^9, 3.5773648991330013`*^9}, {3.5773652346321173`*^9, 
   3.577365236397955*^9}, {3.577365302172237*^9, 3.5773653024409237`*^9}, {
   3.5773655683095427`*^9, 3.5773655851660433`*^9}, 3.577365637306139*^9, {
   3.5773656911417418`*^9, 3.577365717371419*^9}, {3.57736585258633*^9, 
   3.577365852839656*^9}, 3.577366675224243*^9, 3.577366729881351*^9, {
   3.577366799324977*^9, 3.577366807334918*^9}, {3.577366876537867*^9, 
   3.577366878036584*^9}, {3.577367027497939*^9, 3.577367034261444*^9}, {
   3.577367087240992*^9, 3.577367089335643*^9}, {3.577367169963922*^9, 
   3.5773671704316463`*^9}, 3.5998996090176907`*^9, {3.599899692790882*^9, 
   3.599899718820017*^9}, {3.5999117123308287`*^9, 3.5999117350698566`*^9}, {
   3.599911780274081*^9, 3.599911781937955*^9}, {3.5999118178722878`*^9, 
   3.5999118223204803`*^9}, {3.599924786788741*^9, 3.5999247907428427`*^9}, {
   3.5999824626267967`*^9, 3.5999824865906353`*^9}, {3.599982518201003*^9, 
   3.5999826042331457`*^9}, {3.6000003857849197`*^9, 
   3.6000003884372997`*^9}, {3.600667542168519*^9, 3.600667641114686*^9}, {
   3.600668540601487*^9, 3.600668595923644*^9}, 3.6006754649573*^9, {
   3.600675520062149*^9, 3.600675601239461*^9}, {3.600675681972083*^9, 
   3.6006757348788013`*^9}, {3.600678216351714*^9, 3.600678261538052*^9}, {
   3.6006783078520327`*^9, 3.6006783573405323`*^9}, {3.60067840334352*^9, 
   3.600678559458737*^9}, {3.6028560933902903`*^9, 3.602856093727703*^9}, {
   3.6074285100030327`*^9, 3.607428510388282*^9}, {3.637557072823853*^9, 
   3.637557119311878*^9}, {3.6375571727361917`*^9, 3.637557173731791*^9}, {
   3.637557208739818*^9, 3.637557209268497*^9}, {3.637573339934503*^9, 
   3.637573342011644*^9}},
 TextAlignment->Left,
 TextJustification->1.]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tIntroduction"
}], "Section",
 CellChangeTimes->{{3.5998938857987137`*^9, 3.5998939022215014`*^9}, {
  3.599894124600873*^9, 3.5998941509689074`*^9}, {3.5998942049690657`*^9, 
  3.599894208887265*^9}, {3.599895819252528*^9, 3.5998958414230003`*^9}},
 CellTags->"intro"],

Cell[TextData[{
 "As computers are applied to address increasingly complicated problems, \
situations arise in which there is no known method to build a model able to \
produce a desired output, from a given set of inputs.\nConsider the task of \
recognizing hand written digits. The goal is to estimate a function that will \
take numerical representation (e.g. a raster image) of an hand-written digit \
and that will output the identity of the digit in the image: 0, . . . , 9. At \
first glance, one would think that a possible way to address such problems \
could be to hard-code some rules to perform the recognition. Unfortunately, \
this approach would demand huge human efforts to analyze a representative \
dataset of digits and to find stable patterns that could be used for the \
recognition task. Moreover, due to the large variability in the hand \
writings, it may produce poor results when applied to digits produced by \
writers that were not considered during the rule making process. Finally, the \
skills acquired while addressing the digit recognition problem would not be \
transfered to other unrelated problems like, for example, automatically \
recognizing spoken words.\nA more modern approach to tackle such problems is \
to use machine learning to design general ",
 StyleBox["pattern recognition",
  FontSlant->"Italic"],
 " algorithms and to study their generalization properties. These tools could \
then be applied to any pattern recognition problem (such as the above \
mentioned digit recognition and speach recognition problems), with a \
comparably very limited human effort.\nPattern recognition algorithms make \
use of a set of training examples of the form ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"(", 
     RowBox[{
      StyleBox[
       SubscriptBox["x", 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"], ",", 
      SubscriptBox["y", "i"]}], ")"}], "InlineFormula"], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], "\[Element]", " ", "X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], "InlineFormula"], 
   TraditionalForm]]],
 " is a numerical representation of an input instance and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["y", "i"], "\[Element]", " ", "Y"}], "InlineFormula"], 
   TraditionalForm]]],
 " is an associated desired output. \nSuppose that the training examples are \
drawn from a given distribution \[CapitalDifferentialD] on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"X", "\[Times]", "Y"}], "InlineFormula"], TraditionalForm]]],
 StyleBox[". ", "DisplayFormula"],
 "The goal of a pattern recognition algorithm is to automatically learn a \
function ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["f", "v"], ":", 
     RowBox[{"X", "\[RightArrow]", "Y"}]}], "InlineFormula"], 
   TraditionalForm]]],
 " (where ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]]],
 " is a parameter, or a set of parameters to be estimated) able to produce \
the desired output ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " on each training example ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["x", 
     StyleBox["i",
      FontWeight->"Plain"]], "InlineFormula",
    FontWeight->"Bold"], TraditionalForm]]],
 " and to perform well on other (unseen) example drawn from the same \
distribution \[CapitalDifferentialD].\n\nOne of the most powerful and widely \
used tools to solve pattern recognition tasks is the Support Vector Machine \
(SVM) ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". Over the last 15 years, this class of algorithms have become the de facto \
standard in several fields. In this notebook we will present the basic theory \
of SVMs and present some simple implementations using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".\nAn outline of the notebook is as follows. In Section\[NonBreakingSpace]",
 
 
 CounterBox["Section", "linear_classifiers"],
 " we introduce the basics concepts of linear classifiers. Section\
\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:max_margin"],
 " presents the theory of max-margin classifiers and the resulting algorithms \
and implementations. In Section\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:svm"],
 " we introduce Support Vector Machines, the related optimization tools and \
several implementations. Section\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:kernel_svm"],
 " finally discusses the usage of ",
 StyleBox["kernel methods",
  FontSlant->"Italic"],
 " to turn the SVM classifiers into non-linear ones, without any modification \
to the learning algorithms and the analysis. We conclude in Section ",
 
 CounterBox["Section", "conclusions"],
 "\[NonBreakingSpace], pointing out some possible extensions of this work."
}], "Text",
 CellChangeTimes->{{3.5998943087684813`*^9, 3.5998943271227007`*^9}, 
   3.599894407253346*^9, 3.5998948280174227`*^9, {3.5998951864442167`*^9, 
   3.5998951952238407`*^9}, {3.599896658295856*^9, 3.599896727209674*^9}, {
   3.599898813372349*^9, 3.599898816683291*^9}, {3.5998988627056*^9, 
   3.599898898867103*^9}, {3.599898937396241*^9, 3.599899016660832*^9}, {
   3.599899055552977*^9, 3.599899152596859*^9}, {3.5998992798243923`*^9, 
   3.5998993971280947`*^9}, {3.599899542183464*^9, 3.599899564379373*^9}, {
   3.599911881099936*^9, 3.599911974310871*^9}, {3.599921388866708*^9, 
   3.59992147049356*^9}, {3.599921722923037*^9, 3.5999217446395407`*^9}, {
   3.5999217874217176`*^9, 3.599921801417346*^9}, {3.599921897618664*^9, 
   3.599921905508203*^9}, {3.599921954931614*^9, 3.599922668857256*^9}, {
   3.599922705859602*^9, 3.599922924914104*^9}, {3.599922955624147*^9, 
   3.5999231184498*^9}, {3.5999231516651506`*^9, 3.599923241315639*^9}, {
   3.599923271374123*^9, 3.599923528304927*^9}, {3.599923562720948*^9, 
   3.599923778621764*^9}, {3.599923847071067*^9, 3.599923922580636*^9}, {
   3.599923962088328*^9, 3.599923988851654*^9}, {3.599924043221188*^9, 
   3.59992432636644*^9}, {3.599924358925447*^9, 3.5999244579349737`*^9}, {
   3.5999245088907957`*^9, 3.5999245206387987`*^9}, {3.599924565204747*^9, 
   3.5999246010434227`*^9}, {3.599982401872068*^9, 3.5999824378881817`*^9}, {
   3.6000004010460987`*^9, 3.6000004116739187`*^9}, {3.6006681285910587`*^9, 
   3.600668182653831*^9}, {3.600668232106468*^9, 3.600668284999237*^9}, {
   3.600668330536263*^9, 3.600668478955243*^9}, {3.600675783976914*^9, 
   3.6006758428460817`*^9}, {3.600675894162828*^9, 3.6006760349611263`*^9}, {
   3.602856353983424*^9, 3.602856355009945*^9}, {3.607428556074897*^9, 
   3.607428569902584*^9}, {3.607428954011552*^9, 3.607428974018379*^9}, 
   3.610027973954509*^9, 3.616701571920931*^9, {3.637557258513633*^9, 
   3.6375573888018293`*^9}, {3.637557425528923*^9, 3.637557456285863*^9}, {
   3.6375575215561743`*^9, 3.637557573154581*^9}, {3.637583943040402*^9, 
   3.637583964267373*^9}, {3.637584066449935*^9, 3.637584067015843*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tLinear Classifiers"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.59989587689098*^9, 3.599895892048147*^9}, {3.599895942273438*^9, 
  3.599895956106649*^9}, {3.599983213882422*^9, 3.599983223053462*^9}, {
  3.5999952940499563`*^9, 3.59999533593959*^9}, {3.600001907096558*^9, 
  3.600001907988482*^9}},
 CellTags->"linear_classifiers"],

Cell[TextData[{
 "Suppose we are given a set of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " training examples ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["S", "InlineFormula"], 
    StyleBox["\[Congruent]", "InlineFormula"], 
    RowBox[{
     StyleBox["{", "InlineFormula"], 
     RowBox[{
      StyleBox[
       RowBox[{"(", 
        RowBox[{
         StyleBox[
          SubscriptBox["x", 
           StyleBox["i",
            FontWeight->"Plain"]],
          FontWeight->"Bold"], ",", 
         SubscriptBox["y", "i"]}], ")"}], "InlineFormula"], 
      StyleBox[",", "InlineFormula"], 
      StyleBox[" ", "InlineFormula"], 
      StyleBox[
       RowBox[{"i", "=", "1"}], "InlineFormula"], 
      StyleBox[",", "InlineFormula"], "\[Ellipsis]", ",", "n"}], "}"}]}], 
   TraditionalForm]]],
 " drawn from a given distribution \[CapitalDifferentialD] on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"X", "\[Times]", "Y"}], "InlineFormula"], TraditionalForm]]],
 ", where:"
}], "Text",
 CellChangeTimes->{{3.5999833201968613`*^9, 3.599983333359153*^9}, {
  3.599983411766436*^9, 3.599983429731062*^9}, {3.599983469021221*^9, 
  3.599983699442152*^9}, {3.599983985304085*^9, 3.599983987420415*^9}, {
  3.599984055365138*^9, 3.599984095786604*^9}, {3.5999841276182547`*^9, 
  3.5999841634915257`*^9}, {3.5999841954486227`*^9, 3.599984283340876*^9}, {
  3.599984338350649*^9, 3.5999843408194103`*^9}, {3.599984373328288*^9, 
  3.599984388233059*^9}, {3.599984566838851*^9, 3.599984567148521*^9}, {
  3.599984694295349*^9, 3.599984694951599*^9}, {3.5999954171135883`*^9, 
  3.5999954338568573`*^9}, {3.599996209204809*^9, 3.599996266625684*^9}, {
  3.599996305172275*^9, 3.599996367763781*^9}, {3.599996444071846*^9, 
  3.599996462310013*^9}, {3.599996661334001*^9, 3.59999666841422*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  StyleBox[
   RowBox[{
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], "\[Element]", "X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "\[Element]", " ", "Y"}], ";"}]}], 
   "InlineFormula"], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.599996715715584*^9}, {
  3.600000424125843*^9, 3.600000430480761*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
   "X", " ", "is", " ", "called", " ", "the", " ", "input", " ", "space"}], 
   ";"}], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.599996714110073*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"Y", " ", "is", " ", "called", " ", "the", " ", "outcome", " ", 
   RowBox[{"(", 
    RowBox[{"or", " ", "decision"}], ")"}], " ", 
   RowBox[{"space", "."}]}], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.5999967110155077`*^9}}]
}, Open  ]],

Cell[TextData[{
 "In ",
 StyleBox["binary classification",
  FontSlant->"Italic"],
 " problems (problems with two classes), the decision space is defined as",
 Cell[BoxData[
  FormBox[
   RowBox[{"Y", "\[Congruent]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], TraditionalForm]]],
 " and a ",
 StyleBox["linear classifier",
  FontSlant->"Italic"],
 " can be defined in the following way:"
}], "Text",
 CellChangeTimes->{{3.5999833201968613`*^9, 3.599983333359153*^9}, {
   3.599983411766436*^9, 3.599983429731062*^9}, {3.599983469021221*^9, 
   3.599983699442152*^9}, {3.599983985304085*^9, 3.599983987420415*^9}, {
   3.599984055365138*^9, 3.599984095786604*^9}, {3.5999841276182547`*^9, 
   3.5999841634915257`*^9}, {3.5999841954486227`*^9, 3.599984283340876*^9}, {
   3.599984338350649*^9, 3.5999843408194103`*^9}, {3.599984373328288*^9, 
   3.599984388233059*^9}, {3.599984566838851*^9, 3.599984567148521*^9}, {
   3.599984694295349*^9, 3.599984694951599*^9}, {3.5999954171135883`*^9, 
   3.5999954338568573`*^9}, {3.599996209204809*^9, 3.599996266625684*^9}, {
   3.599996305172275*^9, 3.599996367763781*^9}, {3.599996444071846*^9, 
   3.599996462310013*^9}, {3.599996661334001*^9, 3.59999666841422*^9}, {
   3.600676055582761*^9, 3.600676093519527*^9}, {3.6028563850033283`*^9, 
   3.602856385365007*^9}, {3.63756005606686*^9, 3.637560057624992*^9}, {
   3.637560217609866*^9, 3.6375602187926617`*^9}, 3.637560309064089*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox[
     OverscriptBox["y", "^"], "i"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}], ")"}]}], "=", 
   RowBox[{"sign", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["f", 
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], ",", "b"}]], 
      RowBox[{"(", 
       StyleBox[
        SubscriptBox["x", 
         StyleBox["i",
          FontWeight->"Plain"]],
        FontWeight->"Bold"], ")"}]}], ")"}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.599984391909471*^9, 3.599984400633883*^9}, {
   3.599984585296199*^9, 3.599984662219262*^9}, {3.599984803758453*^9, 
   3.599984813777051*^9}, 3.5999954402745743`*^9, {3.637557831401524*^9, 
   3.6375578562072363`*^9}, {3.6375593933864117`*^9, 3.637559394153325*^9}, {
   3.637559476361559*^9, 3.6375594822094307`*^9}, {3.637559798022852*^9, 
   3.637559798718795*^9}, {3.637560777886765*^9, 3.637560800588523*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["y", "^"], "i"], TraditionalForm]]],
 " is the predicted label for a given sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 ", using parametes  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}], ")"}], "\[Epsilon]", " ", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"], "\[Times]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]]],
 ", while ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], 
       StyleBox[",",
        FontWeight->"Bold"], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["b",
        FontWeight->"Plain"]}]], ":", "X"}], "\[Rule]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]]],
 " is a parametric linear function, defined as"
}], "Text",
 CellChangeTimes->{{3.59998470550469*^9, 3.5999847184918623`*^9}, {
  3.599995380838723*^9, 3.5999953847721653`*^9}, {3.6375579352423964`*^9, 
  3.6375579531649437`*^9}, {3.637559089793523*^9, 3.63755918088489*^9}, {
  3.637559225614257*^9, 3.637559314737771*^9}, {3.637559389430121*^9, 
  3.6375594510826883`*^9}, {3.637559492836709*^9, 3.6375596551386023`*^9}, {
  3.6375596967675*^9, 3.637559709104871*^9}, {3.637559762603465*^9, 
  3.637559764617177*^9}, {3.637559805293641*^9, 3.637559855297859*^9}, {
  3.6375598982607594`*^9, 3.6375599401862307`*^9}, {3.6375602460849648`*^9, 
  3.637560282315172*^9}, {3.63756032571612*^9, 3.6375603329679117`*^9}, {
  3.637560407198728*^9, 3.637560416593088*^9}, {3.637560824370755*^9, 
  3.637560839111212*^9}, {3.63756323623885*^9, 3.637563275448161*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], 
   RowBox[{"(", 
    StyleBox["x",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["x",
     FontWeight->"Bold"]}], " ", "+", 
   RowBox[{"b", "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.599984726788556*^9, 3.5999847764296103`*^9}, {
   3.5999848163245077`*^9, 3.599984820955571*^9}, 3.599995450163426*^9, {
   3.637559663616598*^9, 3.6375596641818447`*^9}, {3.637559859958955*^9, 
   3.637559861838345*^9}, {3.637560845157565*^9, 3.637560845442911*^9}}],

Cell[TextData[{
 "We refer to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " as to the ",
 StyleBox["scoring function",
  FontSlant->"Italic"],
 " of the linear classifier, as it provides a classification score for each \
sample. For brevity, we also sometimes refer to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " as to the classifier.\nThe geometry of this simple classifier can be \
understood by looking at the 2D visualization in the following figure. The \
points whose vector projection on ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " is grater than ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "b"}], TraditionalForm]]],
 " will be positively classified, while the others will be negatively \
classified. The equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], "+", "b"}], "=", "0"}], TraditionalForm]]],
 " thus defines a (hyper) plane separating the positively classified points \
from the negative ones.\n"
}], "Text",
 CellChangeTimes->{{3.5999848374383993`*^9, 3.599984853455332*^9}, {
   3.599984885735837*^9, 3.599985006272943*^9}, 3.599992786541381*^9, {
   3.599992831736384*^9, 3.599992906070362*^9}, 3.5999929741867743`*^9, 
   3.599993588724721*^9, {3.599993630655571*^9, 3.599993638290903*^9}, {
   3.5999938017619667`*^9, 3.59999385156149*^9}, {3.599993899101679*^9, 
   3.599993967704577*^9}, {3.599994078570162*^9, 3.599994083576499*^9}, {
   3.599994142489312*^9, 3.599994222918152*^9}, {3.599994259188177*^9, 
   3.599994278147274*^9}, {3.599995387200259*^9, 3.599995394053111*^9}, {
   3.599995470257247*^9, 3.5999954848046083`*^9}, {3.599998898143688*^9, 
   3.599998898467804*^9}, {3.600676141246665*^9, 3.60067615059121*^9}, 
   3.601386017267371*^9, {3.637557676688958*^9, 3.637557678075529*^9}, {
   3.63755771390899*^9, 3.6375577407034397`*^9}, {3.637559459727026*^9, 
   3.637559461548736*^9}, 3.637559530016273*^9, {3.637559659615926*^9, 
   3.637559660778345*^9}, {3.637559864308524*^9, 3.6375598839855556`*^9}, {
   3.637560000137486*^9, 3.637560016566737*^9}, {3.637560094699978*^9, 
   3.6375601526531*^9}, {3.637560284909622*^9, 3.637560306533741*^9}, {
   3.6375603436605043`*^9, 3.637560377416593*^9}, {3.6375608302942247`*^9, 
   3.637560842871337*^9}, {3.6375609618068333`*^9, 3.6375610182851067`*^9}, {
   3.637561053747444*^9, 3.6375611560891867`*^9}, {3.6375611945261307`*^9, 
   3.637561283777487*^9}, {3.637563188260047*^9, 3.6375632205032263`*^9}, {
   3.637563290262705*^9, 3.637563339425099*^9}, {3.637563445093539*^9, 
   3.637563459392502*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    TagBox[
     RasterBox[CompressedData["
1:eJzs3Xd8FVX+P37S6UUIhBIICTG0UAIIqBRlASmKu6yAgqgg+pGy67qoCwoL
CMgqoiCyKIoVpClI7y0EloQEkpBGei+EhJIKgfm9v3k/8v4d5oYWktz2ev5x
H3OHmzC5d+bOa868zzltJ/39L2/Y1qhR45816eEvr73/1DvvvDZrtD09eXrW
zCmT7GjhRfr3DFr4f8vand24cYMXbt68KY8AAAAAAGA6bt26RY9bt26VNdev
Xzfe5gAAAAAAQDkotyclJTk6Om7ZsqWkpIQb2xHdAQAAAABMzfLly2vUqDF7
9mxapuguZTMAAAAAAGAibt686enpSbm9ffv2soaLZwAAAAAAwEScPXuWQru9
/f/r0ErLhYWFxt4iAAAAAADQ+89//uPg4NCoUSPK7a+//rqGUhkAAAAAANMz
cODAUaNGde3atUePHl5eXhgEEgAAAADAuGSUGG5OLykpiY+Pb9as2apVqzp0
6PDDDz+4u7sfOXKE/hXpHQAAAADAKGROJV7g6H7w4EFPT8+zZ8/6+PgcP368
S5cuH374oZE3FAAAAADAinFQ182IOnDgwBdeeIEW3N3dg4KCPvjgg/79+2sY
vx0AAAAAwKjUaZWKiorq1KmzaNEiWnB1dT1z5kxoaGibNm1SUlKMvZkAAAAA
AFZKV7JeXFy8b9++Vq1aRUdHX7x40d3d3dfX98aNG127dl27dq2xNhIAAAAA
AFhJSQkvLF68+Omnn75161ZycrKLi8vevXtp5Ysvvti5c2f0SwUAAAAAMArp
kcrL169fHzhw4MSJEym3x8bGOjs779q1q7i4eM2aNXZ2dpgvFQAAAADAKNRh
ZEhMTEydOnUoq9PysWPH6tWrd+jQIYrrqamplNs/++wzY24rAAAAAIC14iZ0
fiwpKZk1a1azZs3y8/PpaXBwsLOzM+d28tJLLz3zzDP8U2oTvfw4AAAAAABU
EYrcUtlOvLy8JkyYwMtnzpxxdHQ8cuQIx/JNmzZ5e3tLyzxq3QEAAAAAqh+F
8+Li4jp16nz//fcczkNCQmrUqMHt7fT06tWrHh4eO3fuzM/Pl2Z2ggAPAAAA
AFDVOJNTYqfHwMDA9u3b8zKtT0pKsrOzO3DggLxs+PDhCxYs0JTBZ7Sy9G6U
jQcAAAAAsB6SumfNmjVo0CCtdOolWpmVleXo6Ojn53fz5k16euPGjZUrV3br
1k0rzfm8xpjbDQAAAABgZTi69+rVa+nSpZLGU1JSbGxsQkJCpHU9PDy8Ro0a
tEb9WZ5lFQAAAAAAqo6k9JycnC5duqSnp2tlUTwpKYlS+rlz56SCvbi42Nvb
+91336Ukz+U0DCXuAAAAAABVraioiB7ff//9Zs2aaWW16/RIGd7W1vbEiRNa
aTLnNvm///3vFN3lZ6UY3ihbDgAAAABgPbi1vHfv3jNnzuQ1nMNTU1Nr1Khx
5swZaU6n9QUFBfXq1QsPD9eUuVaR2wEAAAAAqlpxcXFUVFSjRo2OHDnCOZxb
11NSUii3BwYGyitLSkqKioq8vb2//PJLLrBBYgcAAAAAqDaZmZmff/65uoYC
eXJyMuX2gIAACeec6jdt2rRz505Zg+gOAAAAAFA91DFhJIpzbv/f//6nhnNe
kMZ29EgFAAAAAKgelL25LyqPyi7rExMTbWxsTp48qWtUVyddAgAAAACAaiBt
5rpJlGh9XFycnZ3dqVOn1JWawYDtKJUBAAAAAKgGJSUlHNo5gZeUooXY2Fh7
e3vJ7ZzwJd7zKzUM3g4AAAAAUPV0w8KoLeec23n8dnU9LauTLmkYVQYAAAAA
wHgiIyPt7OwOHz7MLe0I5wBwT3IDTr408NUBAABQpeice/78eRsbm3379mk4
8wLA/VFv3iG3AwAAVI/IyEgHB4ddu3bJGpSyA8DdIbcDAABUs+Li4rNnz9ao
UWPz5s1aWWLH+RcA7k7KY1AnAwAAUG3CwsIcHBx+//13rSy3o70dAO6CB6fi
xI5OMQAAANWDzr+BgYG2trbbtm3jE7GxtwgATJ0utxt7cwAAAKxFaGho7dq1
Dx8+jCIZALgfPK0DymMAAACqWXBwcJ06dfz8/JDbAeBB4RsDAACg2qSmpjZu
3Pj48ePqgMzG3SQAAAAAAFDdunXr4sWL7u7uISEhxt4WAAAAAAC4o9TUVBcX
lzNnzqC9HQAAAADAZCUnJzdp0kTN7QAAAAAAYFJu3bqVnp7u6emZkJCgoYsZ
AAAAAIBJunHjBuX2jh07ZmZm8lMZ3g0AAAAAAExHamqqp6cn53YAAAAAADBB
N2/eTEpKateuXVZWlrrSiJsEAAAAAAA6t27dysjIcHZ2DgsLk7iOOhkAAAAA
AJNCWT09Pb1t27b0qCGxAwAAAACYJMrtqampXl5eV69e1VAhAwAAAABgqtLS
0tzd3TMzM9HYDgAAAABgsrKzs93c3CIjI7mxHekdAAAAAMDUUEq/fPlyu3bt
AgMDObGjVAYAAAAAwNRQVs/OzqbcfuLECQ2N7QAAAAAApio1NbVNmzaHDx/W
ynI70jsAAAAAgKmJiopq1qzZvn37+GlJSQlyOwAAAACASbl582ZgYCDl9mPH
jhl7WwAAAAAA4I58fX2bN28eEBBQUlKCIWUAAAAAAEzT0aNHKbefPXuWQjsl
downAwAAAABgaiio+/n5NWvWLCgoiNcgtwMAAAAAmKDz58+3atVKcntJSYlx
twcAAAAAAAwlJye3a9cuJCREK21+52oZY28UAAAAAAD8/yilZ2RkdOjQITw8
XMP47QAAAAAApiozM7NXr14pKSkYuR3gIfHtKj6Ojh07tnfvXj8/v0OHDp07
d47WJCQknD59+vjx42fPnqWnRUVF6s+iRA0AAADuggLGxYsXn3zyyStXrhh7
WwDMlYzFJNn72rVrGzdutLGxqVFq/PjxtHLZsmW0TCuXL19+9epVfuWNGzdw
vQwAAAD3REkjKSmpU6dO2dnZHB5uljL2dgGYGb5dxY98BBUWFq5fv56D+tKl
S+mfFi9eTE83bdpEWV0rTexqdxKkdwAAALi7xMREd3f3ixcvGntDAMwYR3FG
iV26ijz11FOU1b28vMLDw2nhzTff5H+iGM8/wnU16o8DAAAAGKLwwLk9KytL
bQM09nYBmBlO42r85ub34OBgLpWxs7N7/PHHuZBG+pJIMTxyOwAAANxTWlpa
mzZtKL0jrgNUDOVwPnzkIJLr3+Li4gULFnB0//TTT+U1ugFXkdsBAADgnii3
N2vW7Ny5c9evX+c1qLMFqAB1QBg5iCifZ2Vl2Zbq2rWrvMZwQQ5AAAAAgHLl
5OS0a9cuLCzM2BsCYK7KTexSA/Pqq69ye7uNjc3HH3+sKc3yUuuOu10AAABw
T6mpqV5eXhEREcbeEADLIeMyrV27lhL7L7/8MmnSJI7uPDexFLrz64uLi424
tQAAAGAW0tLS3NzceF4YNPoBVIDavVQ9iK5du9awYUO6LqblvLw8Z2dniu6D
Bw/m13NhjLTPo8QdAAAA7i49Pb158+anTp3SMGMjQGUoKCjgheeff56COl0a
a6UH1/fff29vb09rvvzyS34BZ3V5PQAAAMCd3Lx5MzMz08XF5dixYxp6pAJU
iMy1pJUdRPQ4a9YsGxubnj17ystOnjxZo8zixYvVF2u42wUAAAB3VVJSkpGR
0bp166NHjxp7WwAsAVe/5OXlzZgxY+zYsbNnz87JydFKj7W9e/eOHj164sSJ
w4cPnzZt2tWrV6VaRjcsJAAAAIAORQWed8nX11dWot0P4IHQISNTKWlldS98
HHEljDrIKq8pKiqSn9VwqwsAAADuQ3BwcOvWrU+cOKHesgeACtAdPupkTJzY
Oa5zRxJubJfLZFwvAwAAwN0dP37cxcXFz88PuR3gYfAoMbr2c90IM1pZaKf1
d3kNAAAAgA6lhf379zdr1iwoKEhThrMDAAAAAACTsmvXrvr160tu13C/HgAA
AADA9OzevbtWrVohISFyix+5HQAAAADApFBWP378eJ06daKiojQkdgAAAAAA
k0RBPTQ0lHJ7ZGSksbcFAAAAAADuKC4uzsHBITw8nJ+iXyoAAAAAgAlKTEy0
s7OLjY019oYAAAAAAED5bt26lZCQ4OTklJmZqZWNLA0AAAAAACaFcntKSoqN
jU1ycrLunyjDqxO1a8pc7QAAAAAAUJ0omSclJdWsWTMuLk6dcp0b3mXmx+Li
Ygw1AwAAAABgLJTG58yZY2Nj8+abb8oa+dfCwkL1xdLwDgAAAAAA1Wn//v01
atSws7Ojx44dO/r6+ko4l1r34uJiWkZoBwAAAAAwltmzZ3Not7W1tbGxoYXX
XntNu0MHVUR3AAAAAACjiIiIsLe3tylVoxQF+Pr16//0008c3YuLizWDghkA
AAAAAKhm3333HYV2bnUXtObpp5+mVK+VNbPfunULXVMBAAAAAIyC0nhOTg4F
9fHjx9evX59b3W1tbTm9Ozg4/Otf/+LGdsyjCgAAAABgRDExMXZ2dpGRkTdu
3Jg2bZo0vFOGp9xOC5TnN23aJI3taoAvKirSreHqGvpVaJwHAAAAwWlB7UCH
qADwQOggOnv2rK2t7fHjx3nNvn37evbs6eTkxOnd0dGRB5z585//nJSUJBG9
pJSmRPebpdS+qzgeAQAAQCvNCerUMBjpAqAC6PDx9/enWH7kyBG5BKaVX3zx
RYMGDbjVXa17nzdvnvqzukfBvVlxVAIAAIAhJASAigkNDXVyctq7dy8/5fZz
cvXq1WeeeYZr3SW900LPnj39/Pz4Nbp7XpTeyx1AEgAAAEDu2vMCus4BPBCK
2b6+vrVq1Tpw4MD169c15U4WH02HDh1q1aoVJXbK9tJflbz++uv0egrq3LQu
iV1+nC6lkeEBAABAK2tg57vzt0ppqKcFeHBHjhyxsbGR9nYVJ/OCgoJXXnmF
x5nhuvfatWvTY7169Xbt2iUXy/RitXQNByMAAAAwXXdUhASAijl58mStWrX2
798va3g0GG5+FxTRvby8ZJRIivq8MGLEiJSUFG51l+iuIbcDAADA7aQWFyEB
oAJu3bp1+vTpBg0a+Pr6aqX9SdVDiZc5k/OLP/zwQ66TkQFnOMl/9tlnUjDD
jyhaAwAAAFFQUJCWlqZrFQSA+1dSUhIWFtayZcuQkBCpUb/7VXBqaurIkSN1
48wQHx8fbrSXnE+/jX8VH6TSFI+6dwAACyOdm1SGZxNdebOGkglrQmEgKytL
HUkGTXwAD+rChQvNmzc/d+7cfb6ej7Lt27c3bdpU2ttlzJkJEyZcu3ZNU+6F
0es5t2PIVgAAy6N+w2tlX/KGo4XcKZwjt1uVgoICXkALHkDFREdHu7i4BAcH
S66+y/WvWjlz5cqVd999l0M7z7LKkzQ5ODh89913Wll7u/rbdF/vAABgAdT2
c+32kUOEmtN0rwfrIZ87GvEAKiYhIaF9+/ZpaWn89J6hWr5v6ZGOu7CwsG7d
ulF6p7jOAZ6WbWxsnnzyydDQUHk9vVJK2vB1DQBgSW6VkXAus3vw97/6MvUF
YD04Xej2ELTjATyopKSkxx577D7vWMkhJgv8PfzTTz85Oztzq7ug9D558uTC
wkJ+JX914xIbAMCSqAMaSLcmXSy/U0rnMwhKZayBNOLpBoQ04iYBmKO4uLge
PXpo991vVNfJVM3hr732mmF/VVdX1x07dqhNMYjuAACWR77buZcTZ3VuupF/
opzGQw0baRvB+NDSDvAwEhISfHx8NIO7V3fCJevqyDNSA1NcXBwaGtqzZ09u
eKcM7+joyEl+4MCBGRkZOFoBACyP2gu1oKDgwIEDc+fO/eijj+bNm7ds2bKr
V68GBQXNmTPn7bffnjVrVn5+PkYCBPRLBagAitCJiYnc3l7uzU0d9UAr96Ar
KfXZZ5/ZlNK1vc+fP5/bYQAAwDLwWYNb1HkksYiIiObNm/NoY4MGDdJKZ+6j
p7Vq1XrrrbcKCwvVSktuC0J7jjXApOoAD4m+LWNjYzt16lQpv40PSW5IoV87
efJkmVaVM7yDg0OLFi327dtX7re0jBipKRcRuCQHADB96hgylN53797N3/8v
vPACrfnmm2/o6erVq428lWA8ulZBzM8IUAF01MTFxXXu3Pnhf4/hcl5e3p49
e5ydne3t7WWYd14eO3ZsTk6OWiov1Y9yPY7EDgBgLvgbmweQ0UrLJhcsWODg
4EDf/Nu2batVq9af//xnY28jGNkthbG3BcBcJSQkdO3aVb1rWYFfIoXr/KVd
VFQkU2+QuXPnqjUz3AhD3+crVqzQytrnNYMCe9kSBHgAAJOlq7GU6E68vb35
a799+/YZGRn0TxiXwJrxPXT1bjuqZQAeVGJiIuV2mcKswrldF7alEoZ/M10d
PPbYYzy6u5TNkL59+0ZERGhl6V2tkNRwRAMAmA/J5DJizJkzZ/ge61//+lf+
J3yrWznd3XlcxwE8KMrtXbp0yc7OfsjfIxOtqo9qDQw9fvbZZ61ateKaGfoy
l2Fnpk2bdu3aNV27Os/KquF7HgDAhKkzYOoGiqGnLVq04M5N58+fx5c5AMBD
SkhI6NSpE6X3h6w30/UxkcoZ3a8tKCiYMWOG2uTOmjZtysO8a0p7u/zmh9kw
AACoUtLqIoPDUIYvLi6eMmUKfb3XrVvX1tbW29sbVc2A+naAhxQbG+vl5RUV
FfUw8Vgtj79+/bo6q7Us5+Xl8QKtOXXqVM+ePen73NHRUbqsUpIfMGAAbYmm
3GZFcTsAgOlTy9rZ0aNH6Yv9m2++OXToEDe5z5w501ibB6ZAhv2UpzjFAzwQ
OoKio6M9PT3lDmaFL4TVEWDU4Xy12xvM1VlZV69eLaUy0vBO3+3vvfcev4ZL
ZXBcAwCYLLlDKkWS3GLTuHHj/v3784lgzJgx/FUfFxdnzG0Fo9INAU2neEzp
AvCg4uPju3btevLkSc1gIJcqxQdvdnb2iy++qJueiaK7l5fX0aNHyy22waCv
AObFsN+6XIyrA8Di7rmZUj81Gd33lVdeoS/z3Nxc/sa+cOEC31ft0aOHjBiJ
NhlrYzieDA55gAdCh8y5c+fat28fEBCgGSO38/f2/v37XVxcuGCGv9v5cdSo
UXRZIZsqTfqGN2QBwJTJmbq4uFidM5EbZpHfzJ0MI6CVNr/PnDmTvsAbNWqU
kJCglX5jb926ldvbCUV3X19fTdkrsANYJzr2dd3ZAOCe6PvTw8OD0rusqYZ+
oGpo58OW1ixatIhHDLOzs5PKmXr16q1cuZJOCrqZkdE0B2AuuA1W7pTJguEh
jE7o5ki9KOPl/fv3b9++fdOmTZcvX+b1Z8+e/frrr3/77beffvpp6dKloaGh
uq90jAdoDXSDV9A3Q2FhoRG3B8AcnThxQpfbqycPy9Gq9l29evXqwIEDKa47
OTlxbucW+McffzwyMlJO92hvBzAvN0vJU6mmkAAvKQ5Nr+bueilelg/dsL5R
7Zyo4ZLNOhj2S8XnDvCgAgMD3d3d/f39+Wn1HETSi1wdpF2+6r///vs2bdqo
De/cDj99+vScnBzt9sHhAcDESSUzHePqpbc6z6YMIQXmiOfIVkckkA9U166u
KV/71VmZCaaAj3p0UgOoMDp8wsPD27Zte+rUKcNv1yplmL11g7dPnTqVo7tu
mPd169ahQxOAeZGmdVqQshn+JxlQApUSZkoy2M0y8lReoLuxog4AiPQOAHCf
6Cs0JibGw8MjMDCwOv9f3cyqugo3ieVnzpzp1auXtLfzgpOT0+jRoxMTE6tz
gwGgwiiQ//7777Nnz161atXcuXO//fbbrKysb775ZtGiRfPmzdu4cWN+fr5h
2ANzwR+ZtLdrSvUjN63r+p/q5lTFIN5WC/3UACogISHBy8srLCxMq946Q/6S
VyfI1kq/1Q2baNatW8eF7lwzI5Uzc+bMqYbtBICHt3LlSr76psf58+fTGrr6
5pnXPv/8c60sy+EkbqbUZK42yxjextWdX3C9Zj1uGTD2FgGYpezsbA8Pj9jY
WC45M81DKTU19cUXX1RzOw8U2a5duy1btvBrdENDS72Nrm0HAKoZH5uffPIJ
3zXbsGEDHaSDBw+2s7Pj+ZE1JHYAAIB7oXMlRWJXV1fK7bLGNG9ZUg738/Nr
3rw5T8zEDXec4ceNG3fhwgXNoD5W19PNNP8uAOtBF9p0wHbo0GHt2rW0sHDh
Qmkr4IIKlLgDAADcCZ0x09LS6GRK6V0z4WIztfu5tNpJqzs/Llq0SFPGl+MX
c+GNaf5RAFaFMnlERIT0NB8zZox6L0yd0wEAAADKlZ6e7uXllZGRQedN02/s
KigooMeUlBQujhU83nvnzp3PnDnDKV2NBHw9gvpJAKNQv1jee+89R0dHOlrX
rl2rlTWz8yOurwEAAO4uKSmpTZs29ChrTPDsqZuhg/u0/vLLL02aNOGaGRkx
0sbG5qWXXsrNzdXKxoQ3wT8HwNrQkcg9Fvfs2UMHqa2trY+Pj9onBccpAADA
3XF9u7u7e3JysrrSiJtULl0Bj9qWvmzZMkrsFAN0I71v3LhRNz4w2tsBjIsO
yX79+tWtW5cPUh4SSmbh0TBfKgAAwJ1RoL148aKXlxfndt1c5KaDt4qHiOFH
OtdzCx4tnz17dtCgQdxTlZvfOcMPGDDA19dXw2TKAMbG19qzZ8+mA5MO2IkT
J3J0Dw8P18rK2tUADwAAAIYyMjJcXV2joqLUOcdNkLp56qOM93jw4EG1yZ0H
i3Z0dFy4cKHp1+0DWDyK6HRIvvHGG1ppt5o6derQ0/79+2vKND0omAEAALgT
CsPZ2dnt27fncSDNtFFaNjs5Ofndd9+VEWYkxru5uW3dulUr6x+njjCjVtjq
/nzkB4DKQgdXz549GzduLGUwy5Yt43Fc58yZwwembt5kAAAA0Ll48aK7uzvP
l2p2uV03fTbJy8sLCAjw9PTkSMBouWbNms8//7w0zpeU0W4feo6Hr0c9PEAl
ys3N7d+/Px2J3bp108quiOfPn8/3xWrVqjVp0qTLly9rJlyqBwAAYAoyMzNb
t24dGBho1s3LtPG63m2UCmRedRlwxsHBYfHixepfyg19UkjD/2TY9g4AFUbX
y0uWLPn8888XLlwYHBzMV8fLli2bMmXKrFmzxo0bN3PmzEuXLuGgAwAAuAs6
gVJud3NzCwgIkDXmNZ6DurXcWCf33BMSEp577jlub+eaGc7wjz32GIUHyeoy
Og1iA0AVkcOt3M4mfCMM97kAAADugk6U2dnZnp6ep0+fljXmdd6UISLVO+wy
9RItHDx40MXFRW14pxjv6Oj43nvvaWWhXf1ZqZMx6xsQAKZDN60SHXQy3qPE
eBPvFw8AAGAKcnNzvby8Tpw4YWFhlWMAx/KCgoLp06dzaOe5GomDg0OTJk0O
HDjA+UE3cLRZzB4LYC74aNK1qxtOymBejQYAAADVLCcnx9PT8/Dhw+ZVHiP4
BoFkAH4qY8ppSlufv79/165d7ezsuMsqV87UrFnzueeeu3TpEv82nolVs6Dr
FwBTwIFcvmToQOOO4eqRq74SAAAAdLhOxsPD48CBA3Kf2owiq25T1RY8br7j
9j215XzNmjU8N5OUzXDlzPLly2W0GQ3hAaBSSfmZ4QjtMng7HXTqVMgAAACg
Exwc7OzsfOjQIWto7+I/LT4+fsiQITLIDIV2TvL9+/cPDAzUbi93V5vuUTkD
AAAAAMZy/vx5yu379+/XDCpOLRX/jbt373Zzc5Mm95o1a3LD+7Rp0/Lz87Wy
d0NuQMg4k9bwFgEAAACAqUlNTW3Tps2OHTsMpxC1SJzJeWbG3NzcqVOn2tra
yiRNvODi4rJ+/Xq5oa/Wz+A+PgAAAAAYxaVLl1q3bv37779bQ25X52ZiFM4j
IiL69u1LcZ0CvJrehw4dqnajkypcRHcAAAAAqH7Jycn16tXbtm2bVhpizXRU
mQqQVnQe1OKHH35o0KABF7pzCzw/Ll68mNM+vzPW8/4AAAAAgElJSkqqWbPm
3r17+all51LubVruDC+0Mjc394033uBxZqRyxs7OztXV1c/PTyttabfs9wcA
AAAATFZGRkbdunWPHz8uI6hY8HgyTBK7jCCtzpEaHh7eqVOnGgpbW1u6tJkw
YUJ6erpmBe8PAAAAAJiglJQUCqVnzpzhlmQLLm7XlMhdbtGLzNB048aNFStW
UFzXjfHu6Oi4Zs2a6t9sAAAAAICkpCSKo5GRkdbT3n4X8rcXFRUlJib279+f
ojsldp5clctmnn766aCgIMn8au2Nrt8rimoAAAAAoFLcunWL0qmDg0NUVJRU
fVthblcHrpcF7ri6bt26li1bqvOrcun7e++9Zzg6DdN178VsTQAAAADw8Ci3
Ozk5RUdH81PLrpO5CzW3665cKMBPmjRJBorkoWZIu3btdu/eLemdF9SULnM2
AQAAAAA8JB5PJi4uztgbYmRqxpZldabUoKCgbt26qQUz3PA+YsSIS5cu8Q9K
M7sM9q5Z8aUQAAAAAFQibm+PjY3lp9YZMrlORtc8rhbPcHTPz89fsGBB7dq1
bW1tOcBzdK9Xr97XX39NQZ0b6nmBf7ygoMAofxEAAAAAWBIKlgkJCVLfziUi
Vhjd1XZyXXTXSnO4zJFKr0xJSXn11Vd5hia1y2rPnj3Pnz8vP46ydgAAAACo
RNwvNSIiQs2uxt0kI7ql0MqmUtXKe09++eUXNzc3Tu/cZZWr3z/66CMK9lpp
bue31Ar7+QIAAABApUtOTtaNA2mFdCldU8K23IAoLCzUbh/4vaCgYMGCBfTu
SXTntnfK8zt27OAfl4Z6AAAAAICHER8fX69evdDQUOuskKkY9RonODi4X79+
6hCRnN6HDBnCvX1lMlb5KS6hudMNDh5/EgAAAABAUHSMjY2l3E7hU1Yivd+T
1K5zt9Pi4uJffvmladOmFNe5+V3q3ufMmcOv5NB+/fp1/lnDN1kdggYAAAAA
QCcxMbF27dp+fn7G3hAzo066xHmb1sycOZOyuoODg9rw7u3t7e/vbzheDf8g
Dz6D3qwAAAAAcHdpaWmU2/ft28flHGhsvx+SrtXydR77MTg4uEePHur8qmzy
5MlcIZ+fn3+nn9VwswMAAAAA7iA1NbVevXq7d+/mp1J0DXcnMVuGateUCvYv
vviCh5eRunc7O7s6deps3LhR/SX0U/KGo38BAAAAANwJhcbk5OT69ev/8ccf
vAZN7veD61u00rAt3U7Vf6U1kZGRw4cPV/ur8qCRvXr1on+SF9NvkNZ7NLkD
AAAAwJ1Qbm/YsOGWLVuseRzIiim3hZyrX/iRXvDbb781b96ca2Y4vfPCggUL
rpfSysK/huJ2AAAAALizlJSUxo0bq7kdAf6e1FHcKbrrBmnngRwlhBcWFk6d
OtWuFBfP8GPbtm0PHDjAP8v5H7kdAAAAAMpFQTEpKalJkya///67OXaN5E3V
bbDaDK6mYrUESJbVCvMq5e/v37VrV07sNqW47f2ll15KTk7mOnneYGl+v8vf
CMYiw3XK8cLkI5OrOaNsHgAAAFiw9PT0Vq1a7d+/X1OmDTX2Rj0Aw4lNmTp7
Ef9FnOG5+Fwr61JazRv5zTffNGjQQJ2hiZP8qlWr+DXyStpm+hNkJSZjMgXl
hnOZZlduu6j7GwAAAECl4H6pzZo149zOzKup8E4dadXpjUpKyes1IzWK8n+a
n58/evRodYhIHua9W7duQUFBmkHew9DupoZTumF/ZPnX6rwkBAAAAOuRkZHR
smXLY8eO8VPzyhtSZ64Wk1y7do2z09///vf+/fuPGDFi4sSJ586d49zLDdeS
jaX5vUpJARL/X8XFxfSGd+jQgRvbObdz8cyECRP4xeogM+Z1B8SyxcXFBQYG
BgcHHzlyJCIigj5QuubduHHj8uXLaUHdl8zrUAIAAADTR7mdAmRUVJRmhklD
kjDncK4toYVPPvmEknCXLl3mzZtHSbhmzZr09PXXX5c5j7SyYFw9f7KuFpq2
uaCggLb2jTfeUMvd+ZEuo7Zv386bx1M1yU9Vw6bC3f3tb3+zLUUf1ty5c+lj
euaZZ2i5bdu2a9eu1Up3RfVTAwAAAKgUFB2TkpJ69+599epVzTy71OlKjsmh
Q4coR3Xt2lXWpKWlcZv26NGjtdLmbvU3VFsdsuFgj7QmIiLiqaeeos2jbeYB
3tmf/vSns2fPyuapVxxgXGPGjOHP6Oeff6ZP8K9//Sst85j8ajcE1LcDAABA
5UpPT6fczrFQN+mnueCwxGmclps2bUo5ys/PT1ZSuFq9ejVnLQ7D3CJabX+p
lMdoSuG9+m7/+uuvdevWlZoZmWv1iy++UAv1wRTQweLu7k6f0dChQw8fPkwf
2S+//KKWu9+p9B0AAADgYaSkpHh4eCQkJJhpaNf1M92+fTunX/q7+AWce+Pj
47kKZezYsbzeKINelju/Eud5SoMzZsyQ9nYZKPLRRx89ePBgdW4k3NOGDRv4
Csve3v65555Th99Xhx4FAAAAqERJSUlt27al3G5YcGJ2aMtfe+01jruZmZlc
Vc4J6sqVK/Xq1aP13bt3l9jM434Y/e9VLz18fX29vb3VJnfOh2+++ebly5fV
Qia146p2e+dcs7v4MhfqoKMU17nKfffu3fIRyCsxbqc50l1QG/2bAQAAQCc5
Ofmxxx5TG9vNcbxBKVmfNGkSt1RzvbEoLCz08PCwt7enRw7zpvNnyiDt/CnQ
pn711VcODg48xSr9LVz3Xr9+/TVr1ugmitK17hpOLAWViC+O+PPas2cPX1j9
9a9/lReog/Dj/TdHN8rINRo+RwAAMBFFRUUpKSl9+/bVDEZTNBfq1tLZdunS
pZymAgICrpfSysJt27ZtbW1t//SnP+n+TCO2TnO6lg2gqw/pzEjLL774Iv8t
jo6OUj8zYMCAM2fOaMqg9PzjlPb53oG0yaPVvSpwQzq9vX369KHdia4E6XHH
jh2aQbduvP/mSL3teKuMcTcJAABApKWl+fj4UBox0/p2JjE1Li6O8+2bb77J
/8Qn4tzcXB4N8tdff9Vun4nJFP5kXfueRIWwsLAePXpIkztFRG6Bnzp1qtr5
0TBaYDCTqiA9oP/1r3/RZ3Hq1KlOnTrRx9GqVaucnBwNLe0WgY4stQjNFL4f
AAAAWEJCQteuXeU8ZV4lnerWcgEJ/SGDBw/mfp3x8fGSz//3v//Z29u3bNny
2rVrmmlkda10+2VLDOt2eOPpBZ999lmtWrXU/qoUGikrbtiwQV5MYVJtftdM
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
tHXrVt0MXPfcK9RdKyUlhX8hXQXwv/IoNwAAAFCJTpw40aVLF57sntcgxVkS
+jTVme5nzZp1/PhxzWDmSgz6YWHu0tBNGXvUqFEcs7n0nZP8sGHDzpw5c5+D
wXJjPv8vtF+98sor3Ok1NTWV/4nds90eAAAA7hOdUoOCgh5//HF+Sukdod3C
6DoPSojiZlKpdsB4fdZAPnR63LNnT6tWrXhiJhlzhoL3v/71r3v+HrVlnh4P
Hz7Mv2fJkiWyF8mFA/YrAACAyhIVFeXj46MpLWM4z1oY3Zh++HyFWtHNOVOO
Aqks4noPiykeU7udpqWlffDBB9LezkPBkG7dum3bto1fo9tb1B1Jkrm3tzf9
Bjc3t2r5CwAAAKwUnZTDw8O7du1q7A2BKsTDcWsWFD4rkZRhG745uj7altRl
Wy5PKHvHxMQMGzaMh4iU6G5jYzN48GB1eFi1F7OmFNJs3bqVS25+++23av87
AAAArEtUVFSPHj2kpR31EpZEZtI5e/bsuXPnNDS2367cKC59LWlBSrUto37s
LoVwq1atcnZ2lv6qjo6OPMz7V199RW+CvCe6aqucnJy6detS2n/mmWeq7a8A
AACwWhcuXOjTpw/inAW7du1aixYtvvzyS2NviClS70S8//77o0aNev755/v2
7Tt8+PDTp0/zCyxsaBSZGVm3/tKlS5MnT5Ymd657p6deXl7h4eHys2p7+4wZ
M/jFkZGRlnFpAwAAYMpiYmIGDBhg7K2AKvTRRx917NhRZsNEvlJxCk1OTm7d
ujVl1J9++snf33/t2rXc7Dx79mx+mdQamTV1ZCFZyVFc/sBdu3Y9+uijMkok
V7+Tt956q7i4WO5E0EJsbCy9jP7pww8/NMqfAwAAYG0iIiIGDhyoKb0XLamO
FyhrURA9f/48P0WJu4qrwkiXLl0ooB48eJDfHzoE1q1bZ1tq06ZN/GILyO2a
UjolT9Uwz8uXL1+eN2+eNLlLeq9Xr97OnTu1sku/oUOH0vpGjRpxB1VMsQQA
AFClKIqcPHmyZ8+eGEnGUqnjtyNZlWv58uWUz729vTUl1tJC165dKZe6urqq
pd0WQw3w8idrpVd2/D2QkJDQt29fHhySB5zhuvfhw4fn5OT8/PPPPPXqypUr
MUg7AABA9Th06FDnzp11Y0SAZZDBDNVYhYgleIfv1asX5c9Ro0bxU7nx9PXX
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
SZOKFy9Oct3Pz08EPL2OGjVKn5iZmck1xdqq06VQXwAAwHPZs2dPo0aN9B64
duQS7a0qU9Xp6elnz541bM7tWnOCa0XfOlm1xzt1UA5IEeCtyEMuT/ilS5ee
e+45WakaHBzMzjN33nlnXFycrghSU6hJp5bK9BHaeeChWB9duOwCn2Lt2rX1
6tVzdSk8DG1jpw6R+1brKlSIyeuH1/lqmSExq023F+028DIks6pVvW/durVm
zZo61Aw7vfft2/fkyZOmswQdr6aAfgMANxq7TT3af+AjUC8wZ84c9pMxoDOv
BW3jpf5RB3vUdmAXlMy7MEl06yOKOHjA69GDVtlJD/yMGTNuvfVWXq8qPjNB
QUEjRoyQYwxVNaj66JxNBfcDAAAA3CC+/PLLBg0a8DYmm64HVpi8RlWcru2G
fQPXREZGBt9Mnu5fsmTJuHHjPv7449jY2NOnTxtQIMBLMfm3iOrW+d0yMzO7
dOmiTe78GhMT8/vvvxu22qHbdjRNwAtAsw98E+oFhgwZUqtWLWnVURdyg+49
2dJ+4sSJTp067dixQ3xK9ZEgb4i0YB+kadOmVa1aNSoq6s0332zfvn1gYKC/
vz/tdGkZAch3rB4vaWlphlpEs27dusjISDG5S7SZzp07UyXiw6Rth2IHng6P
YRFMA/gmL7/8MuddspplgBNYkKemphpZvedrr71WqVKlc+fOpaSk/Pnnn/Hx
8QZu5g2CZcaqVatIqEdERNA955u/dOlSNi1KtHwAvAzt4iKL3HW8R5YuvD1i
xAhZrEqvQUFB9FqyZMnZs2ezdJe4NC76NQDcGNg3VUKbGniqgS/Rt2/fqlWr
it0GUjM3aKdr3mYBWatWrdKlS/v7+//3v/81EEzmupH7TBvly5enO/zHH3+I
PxJBTy/tLFKkyPnz5zG1AXwcqikHDx5s1aoVq3dqiHSY93379hnKRM+niEef
bs2AO4NYQEbWQHX37t3nzp0zoNiBj0Gt9GuvvRYZGSmxUFAFconkNCG5SBsT
Jkxo1qyZzFD36tVL4syA64Ru48yZM+mulilThic45Mb++uuvbFT88ssvXVpG
AFyPWF1+/PHH4sWLS35V2Rg0aJBeQS/b2nMG419PgQQ8/YPsMeVT8BhTcqMg
hQfwNd59913S7SkpKYaKsAdyRE9YG7amIzQ0NCiLlStXypG4pdcDS4tnn32W
VEe1atWM7AFkjh8/7p9Fx44dcZ8BMGxVJjEx8cUXX2RjO9sT2PweFha2aNEi
OVirvvT0dBcUF+SaqzbkLf3XPviv6WEmz8aaUgMD4N28/fbb4eHhFy9eZKcO
PPy5gdsNajB1Hs/k5OTbbruNesZbb701IyOD7yTsANeD3L0nn3ySbyzntNKD
ppCQEPqodu3aLiwnAO6ANpWzet+1axeNdv38/GQqsHDhwvT6yCOPpKam6kg1
POyV7GbAPTFJd5+Fb4LdJAUAeDf0zA8YMKB8+fLa6oI2IUfkFm3ZsoV6RvYy
WrFiBc9Ht27d2lBhIV1YTk9HPJGGDBlC9zYgICAuLo6nR+XGVqlShfZ369bN
lQUFwD1g24tef0qvo0ePJt0eHBws6p3N78OHDxdXGdgZPAh0K5DrwGeh6v/q
q6+WLl2a59rQdOcSvkWHDx+mIc+kSZOMLG358ccfc4c4cOBAw9awYP7uOuEx
0aJFi/je0k3m/bKMrkiRIrT/999/h50QANbhkhVOGvPExMSOHTvKMlVeR09U
r1593bp1fAq0EPAUTK4yEC3Ap3j33XdDQkLS0tLg3H5NUEPRp0+fKlWqyOqY
du3a8eIvdh+VHOXQ7XmGG2cO1VupUiXSG9HR0byf7+r69evphleuXFn+BQB8
GasThQRvJ5YuXUpNFot2bXvv0qVLcnIyH49ewG3hVVToUBi6G7DVAB+EWoAR
I0aEhYVJPBmQG7hrW716NYdWy8zMvHjx4k033cTRksVHlGUnmtnrge2H1Ftt
3bqVxcawYcP4I9pZvXp12hkXF+fSMgLgFuimxtTsaLe9N998U6zu9BoQEMB+
79999x1kIXB/ZGipExnguQW+w4QJEypUqGDAPcYBOpOsqWXQTqRLlizhDOP1
6tXjT6kTbNq0aZUqVerUqTN8+HD4IOUBueHsx7V27dqyZcvSfe7cufP7779/
3333lS9ffsWKFQYabQByQmYAjayFOTExMeI2w8FUiQYNGuzcudNQLZWe8zKy
+yTkpjWjLzUdJmtg5VLawk97tAsEQvwBAICJGTNmVKpUSd5C/5jgPiUzM1MP
7UWxy85nnnmG553feust2hMVFaVjrxFt27aVJWDIWphLuNPXnXtaWhoJ9UGD
Br300ks//fTThQsXDBXIFwDgCMmsKhuLFy+Wxaoi3f38/N58802egRUJrTW/
IDE9HH2jVvjS3EkwKH2ibl35GEwBAwCAFWoeFy5cGBERIQ0sxKRG7oZOVkKq
W5w35DUkJIRnnLdu3VqtWrWaNWvOmjVr/fr1pOfFiXTcuHE6zBpudW6QJ1P6
cd4jLu5YTweAc1hg66okLVhqaurLL7/MPjME2xkCAwPLly8/depUOd7IHrVA
Kp1zY7he3cNC3WSr51Lp5pTqtTZrINAfAABoqG1cvHhxlSpVxBXE1SVyL0QZ
8jZvfPTRR++///7ly5fFFEz7WZkXKVKkcuXK7du3l/jt9FFMTAz3iXfccYdc
GZO/ucF6l/QASibcDYQUACAXWE3cvGfHjh3UcHEjxoZ3ztbUsWPHo0ePymHW
ZYC56TI4o7T2eePraFXPlnY9FkCNBgAAu8yePbtixYq8bQodBvQN4deUlJQK
FSr8/PPP+phJkyZxdHF6DQ8Pv3TpkqG8aEaOHMmzz0WLFmX7EnVSuMm5hyfZ
ZaqdDXdaMMAJFgAnaA2s5/vE648PmDJlSqlSpbixklnCwMDAoUOHcptmqPjw
ubG3iz43bAqf2s+FCxcOGDBg0KBBr7766scff3zy5MkVK1a8/vrrffv2HT16
NIe1keE51DsAAJiYMWPGnXfeaagFRGgnNTLFnJGRQR3Q0aNHe/XqxR+JkmzT
pg0HkyHpHh8fLzO/3G1Rl8Q94B133GFSm674QR6GTo0qUx7yEc/ga8M7AMAu
2uhtjRvD9oSLFy/27t3b6vF+1113rV271q513UnV0yZ9qbk7duyoVq0aR7Dp
0aMH7Vm+fDm9LV68+Pfff286GFPAAABgYubMmZUrVzaUXEdTKVhXXUlCE8Pm
9kkHlCtXjvqd4ODgJ5980lA3kI+8++67/f39qSt85JFHtJ7Hfc4R6b6txj3t
MAMvLwByxGq7dmRGiIuLq127Ni+rp2aN1XtAQEDPnj1PnTplWNaYOEF7somM
P3/+PBs6OnToQBX5/fffp+Zx27Zt4nZoOgUAAABDDeNPP/0UGRlp2JNGQPca
JkuvbM+ePVsymGzdutV0TGJiIvdQBB0pF4R9+JrQa+Lsmgrx3ALgiKs2+K2e
w9J79GtGRsZHH30krjKSp6ly5crcjmlB7uSrTS7xEjFm1qxZbHJ//vnnaXQw
ZMgQ02yvNUQkAAAAYt68eTVq1OBt+MmYkL7DbkIT9p/55JNPeCq5efPmOtI7
nzt37lz+NCwszHRZ3GcAgNtCDdTBgwdbt24tol1eW7RowTYKmfaymu5Nwluv
POXjO3TowOFrWrVqZZ3ZhG4HAAAr1FqSbr/rrrv4rdUOA7hjok5nypQpRvbY
MrxdvXp17n2WLl2qnTPZXzQyMpKdZL777jtrChIAAHA3TAu9f/jhh5IlS/Ji
VXGbCQoKGjZsmNjPdXomWYeiVbd1vvL48eN8qZdfftl0PF/H5DYDAACA2sm5
c+eGh4dLyA5Xl8hNoZ6lefPm1lQgdAPZDaZEiRKmFVV0M3/55Rc2T7Vs2VJH
SDBNWwMAgFshbRQL8uTk5P79+1NTxjYKCTgTERGxePFibvrsmtkN5RtjWNKn
Fi9enG34nPWYv8hakvz6kQAA4GlQ6/rzzz9XrFgRKyUdcfnyZepKGjRoQN2T
6SPqgJYuXSrK3FCWdlLp6enpt99+O31KrxcvXjSyTPe6z8LdBgC4JxKpSfZQ
Z7F3797atWuzaJdFPUS3bt1Yb+v8qqb2zbqnb9++FSpUqFq1Kl3hzjvvpCuI
0YM3qAwwJQEAgIYa0hkzZoSFhbE1GErSBPca1KFs375duhJDZRLp2rUrzx0P
HjzYZGhq0qQJfVSqVKl9+/YZyt9GLo67DQBwQyRLqc5qKp+OHz/+lltu0QHe
/f39ac/EiRMNFRaeN0wWIWkkY2Nj6dz58+fv2bOHM1/079/fUGmRBUh3AADQ
fP3115UrV05LS3N1QdwRFtvUy0hPJB+xu8tdd93F0dJGjBhh2LqY+Ph4GgrR
zubNmycmJhq2la1iTdLqHQAA3ArJ9aw9+nTkVYJktp+fn1jdeaNu3bqkww2L
2JYIkLw/PT395ptvbtasGWt7znBBV9u2bRsfz4uDDBg3AADAwieffBIREcGO
HMCKrD+VvkyHlxkwYAAv1KpZs+bSpUvnz5//wgsvcBc2atQoI3sAQ1PkNIRK
AAC4IbwsVLZ1ag9W2tysrVu3LjIyUkR7kSJFZJ1pWlqaZEOTNpCvk5qa+sQT
T9Bh586d48smJSWVLVuW9pQvXz4hIcFAxC0AAHAAtajDhg276667zp8/r3e6
sEhuhSnKmVbacpeo83rsscdCQkLq1KnTokWLBg0avPHGG6dPnzYdz/O/YkRC
lwQAcHO0jd0UbUzWoo4aNUqSq3KkdyI0NPSXX37RJzIk2gcPHkwHVKpUafv2
7Xy1v/7669Zbb2VvmXbt2qWkpBiqqSygnwoAAB7CO++8Q4IzLS1N2kkfbCpN
6b/5bWJiYo0aNVasWCHeMnKMPlEmkc+ePVvQ5QYAAFdz5MiRTp06cU5V8Xsv
VKjQvffeu23bNlmtzwfTnt9//33nzp3p6encqCYlJa1evfrkyZP79++Pi4tj
I5LMcvpgfwQAAI6gJnHkyJHR0dHUhPp48HarQ0vfvn2rVavGcRK4E7EmGdGW
c5P/JwAA+ALsA/Pbb79VqVLFpN5pe/jw4dJOSmsp60/FHsIbbGw3LOZ9AAAA
RlarOG7cuDp16nBrac0g7yPIgik9Czxs2LDJkycbtriO+mDTuQVYUgAAcDvY
snHlypVXXnmFje06UGS1atUWLlzIR0qeC1koZLV4SNIl+BMCAICJ8ePHR0dH
Jycno4UU6a7TiFBPZPKTsZ7Fst83hzwAAMBwG7h379769euLaPf39+eQ7//9
738vXbpkWKzo/PZKFoatRZWP0K4CAICGdHuLFi0k0K5vIhJdXtkcZD2GOxGe
9tVaHf0LAMCXEfs5N4yTJk0qXbq0qHeW7iVKlJgyZQofb3U7NL2FKQkAAKx8
/fXXHTp0MHy7kZTuhkX75cuXeX9GRoY1kozcKB0hDQAAfBaTWws3m2lpaT17
9gwICPD399cCvk6dOlu3bjWUg6JoeG0wQesKAAAmqHWdOnVq+/bt5a1ry+Mq
tLV8y5YtM2fOlNRIEqzYrkpHzwIA8HE4vyovNeVX3aIuXLgwIiJCp2di+vfv
z/n+xOPdGiBXhD0AAADm+++/b9WqlQ6W65vqnd2EqNOpV6/e+++/zztNCZIk
97d2vzRtAACAb8INpk5Ux1Kc9owfP55dZfiVLfAhISE//PCDnCLIW6z6BwAA
E0uXLiXd7upSFChWp3TR519++WXlypUzMzNh5AEAgOtE7CH0un///oceekhE
u3D//ffv3r3bsK0tMmyeijrOjI4w48v2JQAAiI2NjYmJ8R27scndRbuvU69x
4sSJw4cPGyq8MAAAgLxhMphfvHgxLi6uVKlSnF9VzO+FCxd+5513DJu3jKFE
u4h5EzCtAAB8EGohf/nll8aNG+u1lq4tUr7Ck7Ymezu/ZQuP7mWQRwkAAK4T
WXnKtnd+ffHFF9ndnXU7C/iQkJAlS5bouLtyim6rrW7wAADgI1ADGBsb26BB
Ax/R7SZMMl7CyBjwqwQAgOvDmjuJ2lXxXY+Pj3/wwQdN+VUDAwPbt2+fkJBg
2CztklZDXGVM7TYAAPgUy5cvr1+/vu/4yThCj1wQxAAAAG4UsozItP6U9kye
PLlcuXIs3TnaDEn3okWLDh8+XAfykgZZHGkAAMA3Wb16daNGjeStdzeJMs1q
+pl0E4YMGYK4wQAAcKPQueoMlZjJyO6FmJSU9Morr+iVquz9Xr169bi4ODnX
1Cx7d1cFAAB2oaZv3bp1TZo0MXwjCKQ4Ser8IFeuXClfvvxzzz1nqGjthuP1
UAAAAHKJlusMr/pnVc8CnhrkjRs3RkRE+GWhw7z37NkzNTWVT6Q2WVxlCvpn
AACAG0BtYFxcXLNmzQwVnNzrm0Rtb6eOgDqFBx98MD09XT51XdEAAMB7sPq3
mHKqGrbFp7x/4sSJItrF771s2bKTJ0/WhhS00gAAn2X37t2s2wXvbhJNDpYI
GgMAAO7D/v37u3btas2v2rp1a/pIB6UxbKZ7GQsgngAAwOvZuXNn48aNeZsn
NL1Yt3Mjf+XKlX+yMODKDgAAboPMe86ePbtevXqcpEmHixw4cGBycrKR1Zjr
CGAIrQAA8BE2b97coEEDMWJ4vb1CEiqJlzvaeQAAcDliNeL+6OLFi0OHDhV7
Owl4Uu8BAQGVKlWaP3++nCXRZsQaAwAAXsyGDRtIt/PCH683PrOHpAj1lStX
inkHAACAy+FIvPI2Pj6+YcOGOtoM2947d+6clpam3WZMzTsAAHglpNsbNWp0
7tw5VxekQKGuYe7cudWqVTtz5oyrywIAAOD/ITZzSZxKgvzrr7++6aab2Oou
6p0YN24cT6HKRKrXTxkDAHycP//8s3HjxidOnBAzhRdb3emniU2mdevWPXv2
dHWJAAAAZEMnWjJsCZvOnTvXu3dv1u065kxISMiWLVvkYMTvBQB4N2vXrm3Q
oEF8fDy/9e51qYZtFjUzM3PChAkpKSk6ljsAAABXwU2xKTiM6HDeHxcXV7Vq
VU6rKj4zQUFB3bt3P336tAE/GQCAt7NixYro6OjDhw/zW+9u9KRHkBWpEO0A
AOAmcAdkzY6q32ZkZEyePFlM7rwREBAQHBw8Z86cgi4xAAAULH/88UfDhg0P
HDggcRFZzZpireTeaZBO+emnn9atW5dPBb5+9NgEuh0AADwL7qQeffRRiQ8p
bjPNmjXbsWPH/7KQXkx3ZNzHIW4kAMBDId1eu3bt7du3WyNocYMmEVecS3c+
mNvDuLi4gwcPuqEk5iLxcifJ34fUSwAA4EGI8I6Nja1evTq7zbCGZ/P766+/
zkdy887H6y5Mp8wu8OIDAEAeIR27ZcuWxo0b79mzR/Zw9iXZPnToUG6C4mqV
npyc7IainXnjjTeoqTetewIAAOBZcMdEyrxPnz461Ay7voeFhS1dutR6lmRr
SktLK9DiAgDAdUPaddu2bbVr1968ebNpP29cuXLl4MGDEmLLCSL1TT7kbsVf
f/1VsWLFjRs3GjaPIAQNAwAAd8a5Kwt3TwcOHGjbtq3Y28X23r59+8OHD0sX
5sRtHgAA3B9qD0mWN2zYcN++fYa95pGaNbFOOGnixElGp65zwyZx0qRJr776
qqtLAQAAILdctWHdr7evXLny1VdfFStWjES7XrVKe2i/Pl47ybhhPwUAAE7Y
vXt3hQoVNm7caNfNW9o05xYPU/wuQ+XOcCvElZF/LFpsAADwCBzFKDbNmdIx
ffr08ff3DwwMFPVOb6tVq7Znzx5Z3CRnYV0qAMCDIOF6+PDhiIiII0eO8DpN
XoYvLaRkkc6NPwkfwxchheyGLihcJJ5B4NkBNywkAAAAK1bprtOkamPRypUr
o6KiJESkBJwZPHgwJwfnS7mnfQkAAJxw8uTJWrVqJSYm8ltT1lRtb8/ROm06
wD2bRJNQh24HAACPwJHJXfab2vNRo0YVLlyYEzOJ03vx4sXZbYZBFwAA8CxO
nDhRu3bty5cve9kiTfk5NJpISUlZuXKlq0sEALgBaJOCTqmZmZlpSs0gM4Cy
ah5OEb4DG47+/vvvjh07imgXt5kWLVrs3LlTP0XSX8hbk/FKpqRd9YsAAIA4
duxY9erVOSKWN3Vq/FsyMjKome3WrVvXrl1dXSIAwPViUk2iqS5fvrxmzZqe
PXs++uijjz/++LBhwy5evMgfmdbIu+c8ILiBWNefLlq0KCwsTKS7RIwcPHiw
3V4vNTXVdEFZG+VNvSQAwBM5cuRI5cqVk5OTZY93tEuyzHbLli233Xbb7t27
XVseAMD1w/JJAoywCCeVVaNGjfLlyz/11FPjxo178sknWZtNmzZNTvSOZg3k
HrGlS18wYMAADu3OcWbY753DvPPB7C1vWttlmqbBuA8A4FoOHz5cqVKlS5cu
yR5v6uCojd27d+/s2bMNRI8BwPPRrguir5o2bUoyTKo56bSJEyeyV/OiRYsk
Sq2BRsA3EGltChTJeQZbtGjxH0VwcDC9du7cmRd5scuokX1mRyc0KbifAQAA
9oiPjxd7u6NVPx6HNd4vEqQC4DVoET5z5kzSXY0bN+aPWFklJSVFRkbS/pYt
W/Jhku/eZYUGBUhGRgard4mooNc7zJgxo2zZsuL0zob3wMDAsWPH6otI6nDD
tjgCzw8AwOUcO3asSpUq7AvqTeu2RKXnJtkrAMAj0K7LJKvS09Nr1qxJouuZ
Z54xbJWdBduQIUPYjXnHjh36ClhX6GtovS193KVLl3r27CkB3iXRanR09IYN
GwzbU6TdbKxpSgAAoOBJSEioXLmyxIH0JvScJpwSAfACTKqb6jhn2Hn66adN
2mz8+PEsxubMmSMazAUlBgWOTMdIs69zixi2FB7EH3/8Ua1aNZHuHC6S6NGj
R3JyMit2sbqjEwEAuAPHjh2rVKnS2bNnvcbSbmS1tPHx8dSVczwZuLYC4B3o
usyeD7fccgsJrY4dO5o+/fHHH1mDLVy4kC2u2iseeDd6Xsbk3yL+M7Jz2LBh
PDVDozw/Pz82vN90000zZswQ6S6nox8BALgQaoLOnDkTHh5+6NAhQxklXF2u
a4AbYR1il98+/vjjrVq14p16YRpwQ0wrEYwsO+qePXvOnz9v7WSBz2IK58iP
RFhYGAmtqlWr6mPo07lz57IA27p1qzw8MJmakCjlvgzdBOoBW7durePM8MND
O7lzNGwTuLrHkbvnnvnBAQBeycmTJ6nLO3z4sOHJ+taq23v27Ll582b6LeKd
CNwc0+OXmJiYlpZm2pmbvL3Ai5HVhQzV9+7du/Oiwj///NNQun38+PEkvWrV
qiUmUzw5JkxNvTetb7pW+NmYNm1auXLlxGGGBbyfn9+QIUO4Z+EFFKYHCUFm
AAAFyb59+yIiIvbv3y9tkWc13dQdc7NJG9oSwp21GEPS09NdWkyQM+LGYE2b
oh9OqC+fRbQ3R27nx+PAgQOkskhcde3aVSQ9fdSsWTMSXRMnTtSnG/Byt8Cx
tjClxckHSZn36tVL52Zi9R4ZGTl//nw+0uSshfWqAIACg5qadevWVahQYefO
nZ7oJGO1oWl3RG5RTWuLgBtiMqqb/lMoCmCFVx3ygzFr1iyWWJMnTzayKvt7
771Hb/v378+Dej2KByZQubT3FG2TdN+6dWvt2rXFW4Yt8LTdpUuXkydP6geJ
LUIYDAIACgZqbRYvXlyqVCl2KTE8sP3Rpg+OEqB7an2Mx/0038GRgd2k2CEw
fBweievIrlTZ+alYsGBByZIl/f39W7du3bhx47Jly44YMUIaARm2YwyoMU1j
+XKSC1PEGH5g3n33XRbtHOa9UBaBgYEzZszgI3Uvg/4FAFAwLFq0qHTp0hs3
buS3Htf4/JOFvN2wYcOJEycMtW7IyN66AnfGiaUdHjKAsYaHkojcsbGx48eP
nz59ukwgivucCDPodo013IoPIneAXtnsIzeE45LpGO9sga9Ro8bWrVsN2xOF
pgkAUGAsW7asQoUKf/31l+GBxigZZZAyp23qrCtXrsxjENMAxLN+lw+iPZP1
fqspHn+lzyL+b3Z3sueMVuk8ASfLXiCurEht4ibU8ElvIr3wQTpBEvD05PDO
hQsXhoeHi+FdXgcOHEjPGB4tAECBQa3N6tWrK1WqxBniPDG+sV4T9Oyzz7Zp
08a6wNYTf5evoZMS6pgh0O1A0INxbSO9mj02u16qw041OuKHx00p5h9Xs/IQ
0a07e/bs5s2bd+zYcenSJVcXyjWYeg3rQvjU1NQPPvhARDuHMGK/9y+++MLj
TF4AAA/ln3/+WbRoUZkyZXbu3CkzyJ7b/sTGxiYkJLi6FAAA4F5Y3ft5GoJa
/nr16tWoUaN58+YRERGlSpXq3LlzSkqK9Qo+ON4xxY2h17///vvuu+/W0Wb8
srjnnnuk6zEtgtYDTJjlAQDXCbUk8+fPL168ODVHHm2UlglNTFkCAIBdTG3j
smXLSH+GhobymiASnBxEhQT8hQsXJFqXjzeqskhK1kxNmzatQoUKEiJSYs4M
GTJEFk3rVVemwAgQ8ACA64F0e1BQ0N69e/mtZ7UnpnRLPmgRAgAA50jDqI0z
iYmJRYoUId3+yy+/iDI/c+ZM0aJFSYI++OCD4lzky04g1LPoXkaiPtLNGTp0
qFjd2QIfGBgYHh4eFxdnqPxfci5veGK8ZQCAWxEbG0u6nfOlGh7YnrB9wzT5
CwAAwC68gHfKlCl+fn4lSpQwsuv5AQMG3HTTTSREN2/ezMezC6XHdQ03BFmj
alotxUue9+zZ07ZtW/F1FwHfrFmzHTt2GDbTut3sIbAyAQDyxtq1a4sVK3bq
1CkPzZdKTJw48ccffxSTu2dNGQAAQL7CutFk6e3UqROJzDp16ugGk46JjY1l
34+RI0fqoIg+2K7qqKHa8K6hAyZPnnzLLbeIaBen97Fjx8p45x8bcrUC+xUA
AC9jy5YtpUqVSk5OdhSIz805ePBgiRIlZs2ahZYQAAAcoeU3tZY1atQgcR4W
FmZkD7BJfUFQUBCJzx49eliD5PsgchNMS015qpf7nbS0tBdeeIHd3QWS7lWq
VPnjjz+cXxYAAK6Jv//+u2zZsh6ajoTK/NVXX3Xv3l1nVoKABwAAKzpi2AMP
PEDasnDhwuyzLc0m6UnS7cHBwQMHDuQ9Ppu3TtaTOuocTeOa7du3V6pUiZep
as+ZXr16nT592rCNj9BDAQCuh127dpFul7cep96TkpL0TIHHlR8AAPIV0/If
fh08eDBHRNmyZYscSUL02LFjHKI8NjZW+2D7pj+29VeLw4w4wBiq66FB0LBh
wyTGu0SbKV269PTp0w2nowAAAMgNe/fuDQ0NlYbIPZsU60wlAIDjWiA6NMgN
2hkmMzNzyZIlrCo/+eQTQwnUMWPG0M5y5crpeDJ4tHKD3KX4+PiHHnpIRLsE
inzwwQcPHDhgZJ/dkA337HwBAO7G/v37SbfzttvqdkMF0TWyVvf7pvEHACsm
TeW2VRi4Fgk/zm+pLW3Xrh1JyhIlSiQmJho2MVm3bl1SmD/99JM8SGhsrwmJ
kDBp0qQ77riDbe/0yktW6YZ/+OGHdG95WESvOq+TAdsUAMAp1HocOnQoJCTE
UEYV9+z3JVAMB+AysuIPu7REALgYDjHH2+5ZbYE7YGrYRRmeP3++devWJCar
Vq06d+7ctWvXPvPMMyQs33//fTnX5AcCnGAd4FAn1atXLx1nhg3vDRo02Lx5
s46BZsrNBAAAdqG24uDBg2xvd3PdbtjaNF7FP3jw4BdffNHVJQLAlcA0B64J
kYVaK37zzTf3339/mzZtOnTo8PTTT2/atMlQdhLWlnjScgnPCPNSX2HDhg2N
Gzdmxc7rVTnyTL9+/c6dO2dkWd3lXLftfwEA7gA1EXv27AkJCdGK3Q3bDVmG
z53IsWPHatasOWvWLFeXCwAXw3G5YaYDThCJridoDCXj2RhiKL9rVpLaJR7k
iL5RtM33kG8+vY4dO5YDbIrTO1G6dOn58+c7uggAAFjZtGlT+fLl09LSDLdU
7IKOnbtz587Ro0e7tjwAuBxTFy/Z6gHQUJupYw9KEk8ju2WYHx5Sm6bAj6w8
3bl3cBP0IiypiTp31alTp7p06SLR3SXmzP3333/o0CEsTQUA5IbVq1eXLVuW
Z+vcudOXjkMaN5+NKgyARiSZSZ4BoLEm6dATrKw5tSONKb8qyBEdeIfvG6/G
0ilTaWPFihV33nkn6faAgIBChQqJEf6jjz4ybDofAAAcERsbW7p06RMnThju
vShGwt5qL3cAfJyzZ8/u3bv32LFj0t278+gbuARZW2oKXWKKGKOXSfJ+iXli
QMDnAp2nyXS75JbyTU5NTe3Xr5/4zAQGBrL5PTw8/Lfffiv4kgMAPIgFCxaU
LFnyyJEjhtvodrsdhBgSodiBLyOV9MyZM88//3zlypWrVKkSGhpatmzZUaNG
sX1PW0rhPAOAe0KD7vvuu0/UOxve/f39u3btmpiYaPKQt64+g/MSAD4I1fq5
c+eWLl163759stO1vbzdtkhyhUyYMEGaMhcUDgBXYDKTEocOHaLhdpkyZZYt
W7Zz587FixfTNnX6rVq1unDhgqHkPeL4AeDOfPPNN9QFi687G95vueWWESNG
8AGyGMEayRP9IAC+BtX62bNn33777bt377a2CQWPSV2Y3r7yyitdu3Z1RbkA
cCWmjDlE1apV/f39t27dyrKcBrPnz5/n4HJdunQxVN0x+S0DANwHXqVFr6++
+qoY3jnYO4d5X79+PR9pDcJPlRrrWQDwNagRmDVrVkRExN69e90wmfVVGyRL
Lly40LJly9WrV1NLZYpmBoDXI2G0MzIyli1bRn36bbfdlpqaaqgwIMOGDWNj
HedSly6eY0W6ruwAAPtwxeRJZJLokZGRYnIXDd+rV6+EhAQ+niq7aHXrNBwA
wBf44YcfqlSpIh29206mU8t2+PBh3uZCYt098B107/zoo48GBQVVr16d30o/
vmnTJu7x33jjDe7fJZCFAZM7AG6GTrdk2PzYx44dK+mZGBLwRYsWnTlzpmnu
DIodAN+EdHtYWJiWxC6X7nbLwMtRTWlBAPARtEdrdHQ09eY1a9Y0pcWh0Td1
8STdxZ3MJAwAAG6FKfgM1+XExMRWrVqx25v4zFC9vvfee7dv325kl/pwlQHA
p6DmYt68eVWrVj158qTsdPko3qTbrVod9nbgU+gqSQ9/3bp1ixQpQh06DWYl
ryXtP3/+PIekeOmll9LT000GdvTvALgVbIyiKixOqjoy52+//VayZEn2liE4
2Du9vv3221y1OXgUAMCnoLZi+fLl0dHRSUlJbpWsTUpCYiM1NVVLDp2AGwBf
QMeFpo2hQ4dyV37s2DFDrTw9fvw4z6qvXr3ayF5HUF8AcEOsPuq6I7506dKz
zz7LJncW8PxarVq12bNnGxiMA+C9SDtAojctLU0nWFy/fn316tUTExPdpGfX
7RgViQrcvn37M2fOsGlCm+LdZ5QBQL4iUeAY0ufcfX/33XecI5Xrwrp166iL
L1y4sKvLCwDIO7KQnI1UNAwnoS7u7uI58+STT1LPaDrYyJ4ny5RkHEvUAfAU
dLWVXp618caNG6Oiomhcb03r4JJyGjYbAgv1cePG3X333ZJrSf8Ql/vzAOAS
qOdt3bo1Sfdy5crp/W3atKHefP78+a4qGADgRqGT1WZmZn7yySfsBSduM/R6
8803f/nll4bjNOJio4NlHgDPwkkyox07djRo0EDquzsYsdnfj0syc+bMdevW
yUfQ6sA3kRErL0k7f/48VVtenbp06dKkpKQ333yTPdtdXVIAwA3AGrD97Nmz
Xbt2FY93sb03bNhQAkWa0HIdxi4APAtHgWJ2797dtGlTqc4u1+2yUl7P/XGD
41Ye+AAUGDK7ree4qaaMHDnyzjvvDAkJiYqKioiIoEGu68oIALgxmGzjnMHE
sCn5BQsWUK0nuR4cHMzS3c/Pj8T8a6+9Jq4yuqHQMWdoP6Q7AJ4Cd/3iZCIC
eO/evaTb9WGuKZ/6dlkmz60NO/ZY86hCwwMfQY9YdfQJHuSmpqZeuHDBFCgV
AOChSCY19mvlt2lpafwp1/T333//Pwo2vAcFBS1cuJB1vkmu8x4X/SAAQF7Q
ut1Qc3D79u1r3LixkX0ZiwsLKXmfHS2fwWQf8E1MNjTeoE7cNFmG8SwAng7P
L8u2Dvdq2Ibn27dvb926teRX5VRN9Nq2bdujR4/yuf9kIdcxMLQHwEOwmtm1
bm/UqJGhlIBr+31S7FSSOXPmjBkzxlBThAgjA3wW3dWmp6cbWbY47f7KJjj6
CLUDAC/AmhSV95iymdDbxYsXBwQE3HTTTWx4Z/Xu7+8/cuRInZ7JwLgeAM/E
aprbv39/w4YN9UcutGaLT3vFihVnzJghAw1tY9eh3V1VTgAKGJkuN2wqnefQ
DRXqzUCnDIDnYxXtEhjZsHV8uqYnJiZ269ZNvGU41EyhQoWio6NjY2MN1YGi
fQDACzh8+PDdd98tbwtGtGulYd3/1VdftW/fnsUJUsIBAAAAjuCedNWqVU2b
Nv2Pheeffz4lJcVQC1T15LXO0Oqi4gMArgGqs3///TevS9WOc/mNONqJgV2H
mZUU7Sza4c0OAAAA2EUvWn/vvffYVaZQoUJ+WdD2rbfeOn36dH2K9p8XdxoA
gPtDNTcuLq5evXoF79wuJnc9Jyj53I3sjgEAAAAAsAtrb56k3r9//0MPPcTG
dg72zq/33HNPQkIC96p8pCx0RVcLgAexatUq0u0F7/bG7YY0F2JyNxn8EbMd
AAAAcIQ2mEsKxQULFtx6663iLUPSnSO9v/3229olxhSqAgDg/vz222+NGjXi
iswiuQB0smm5jWSLOHnypGGzt8PvDgAAAMgRU6fJSv7SpUuvvfYaZ2XS5vfy
5cv//vvv7IYqmZhgHwPAI6CqGhsbS7qdI8gV2IhbS3ER7cOHD4+JiZH97EID
IwAAAADgCOlPxblUenPas2bNmvr16wcEBOhoM0SvXr0uXLhgqGDLAAD3h6O/
NmzYMCkpqYCH29TUsEsMtxjHjx8PCQnp37+/kT0jpIF4jwAAAIBTnPSY1Nt+
9tln2mGGNXxwcPDo0aMLvKQAgOti6dKlTZo0SUxMlD0F6ZfCgwUS6mfOnKEG
RC9yl5LA5A4AAADYRfpNq5ur7j33799/3333icc7SXd2m2nevPnevXvRzwLg
EZAwXrFiRUxMTHx8vFHgi0BFtBtwYgf5iWTv0hPKLi0RAAAUBDpmO/W2y5cv
Dw0NlSRNwjvvvKN7f2ktTVlWeSocIh8AF7JmzZpmzZodOnTIKNiVKVb7ANbF
gHzif1mgrwEA+Bqs26UBJOmelpbWv39/NrYHBQWxgPfz8ytbtuz8+fNZmfPK
Vj5FG/TQigLgclavXl2vXr19+/YVTCQZjayFwXp2kN/g6QIA+BSm2OymlCj7
9+9/+OGHdZwZTtjUtm3bc+fOGdmTlbOSlwQr1HdDwAPgEqjqrVmzJjo6+uDB
gwU8oJaQs3PmzDlw4IABZQXyE50OuCBDJwEAgAvRzR0nWtLhl6dNm1asWDHx
lgkODmbb+8iRI/kwkev6ggX+IwAA/58NGzY0bNiQA6czBVArxQ7w+eef33LL
LefPn0dTAPIVvcYZuh0A4AtIV2tq8bR0T0hIeOWVV9jkrp3eIyMj9+zZY1hM
eaZY8QCAAmbjxo3169c/e/ZsQYoZWRXYtGlTajHQAoB8hR7spKQkeYvU3gAA
X0C6Wu7f/8lCmj7tHLtly5aqVauKt4zQp0+f1NRUw5ZRRU4s8J8CAPi/UO37
66+/oqKizp8/bxRsUBdeJrN161bZgxAfIJ9IS0s7fvw491m8RtVA1wMA8AGo
0bPb1lH/K0vMxBlmxIgRWrSz+b1MmTJTp07lI+kUbj/RXwPgKmiUHR0dnZyc
bNiL/ppP2HW3AyD/IOlu2EamCDoKAPB6MjIy9FvTEja95EeTkJDQqlUrSavK
0r1QoUIdO3bcvn27oYLMFMBPAABYOXr0aLNmzWSV6A1H2gotlkzCyVEDAgAA
AICCQfrrxYsX165dmwNFivMMvb711lum7tuueLDaADG/CcCNgnR706ZNZb7s
hsPmdLm+npiTPajRAAAAgAuROO3cTaelpb3++uva5M4W+Hr16i1btkzO4piQ
fIrObSfXLOB8jgB4PfHx8Y0aNRKP3xtev1i382UlHuzTTz+9detWWSljqKwQ
AAAAAChgtOTmLjs9PX3Tpk1NmjTRup3p2rUrfSoHy7ohE9zFo3MH4AZy5MgR
Gj7nU3w8PQqQK8+aNSs0NPT48eOODgAAAABAAWPXnZU2xo0bV6RIEZLr7PfO
r8WLF//mm2+0nwwvWDMsKVbRuQNwAyHdXqdOnXzS7VY/9rS0tA8++OCzzz4z
bPNrhnKeAQAAAIBLkFxL3CmL5KauPCEh4bHHHmO3mUKKBg0abN682bDkyNBG
OfjJAHADiY+Pr1Wrlg7oesO/gq4pzm9G1tSbdUINQ3IAAADAtYg7qzir6/56
zpw5YWFh4jbj5+fHryNGjEhNTdXBJa7akLcF+CMA8GaOHTtWo0YNmd66sWRk
ZOgcN7Qtc2oyNuc9qNQAAACAq9CmM5PBXD7iJaijRo1ibxlS7BxwhggNDY2N
jeVens/VM/jo4gG4UbBuz7+VI5zpxrA5vOnIsTKKh58MAAAA4A44cXGRrKkJ
CQmtW7cWq7vEnOnSpcuFCxfyL7I0AD4OVcmjR4/WqVNHpsNubEoarc83bty4
e/dupLwBAAAAvIDvvvvujjvuYMVOkIBnJT9hwgQ+wOTubprZhxEegDxAo2bS
7RcvXswPRa1XlEdHR0+ePBnZUQEAAABPhzVDWlpa7969/bJgAc+296ioqB07
dhjZ06PLuWK3h3QH4JqgirN3797atWsnJibynhteidg9ZujQodWrV+dc8wAA
AADwAtglZs2aNdHR0eLrLjK+a9euGRkZhk29S4QKVhpwpwHgWiHdvm3btnr1
6l24cMGwpUi4gdeXUcDGjRt37drF2/BmBwAAADwakd8kGzj4zAcffEDSvVCh
QoGBgRLmPSQkZN68eYZND4ilnYHrLADXCmdDO3Xq1I1V7Ixpgiw/vgIAAAAA
LkS6+ISEhCeeeILkutjemZiYmP3792sNwBY8qAIArpXFixdHRUVx9lLmhvuf
c/XkVwyuAQAAAE9HkqKa5tCpl58xY0bJkiUlwDub34ODgz/99FN2m8nMzMRK
NwDyANWvyZMnV61a9dSpU4Zt2uuG1yYsPAEAAAC8DK0WxHLOMj41NXXw4MFs
bOeVqvxat27dBQsW8JHp6ekFX2YAPB3S7bVq1Tp58qSRD5b22NjYgQMHGspz
HvZ2AAAAwNORzCyGzTpndXrZvn17gwYNxOQuMr5nz57Hjh0z8kF1AODdUF2b
Pn066Xa2t8vOPFzKFOKJXpOTk6tUqTJy5EheMw4XdwAAAMDr0XnSqev/6quv
ChcuLGHeOcZ7sWLFPvvsM32YbCPLKgCOoEoxceJEUtdnz57VO6/1OpK2iWU5
v9JAu1evXjymZukO0Q4AAAB4MeJtK/PstOf48ePdu3dnezvb3sVtZtu2bXyi
NvGZXHb/zQIyHgDiiy++CA0N5TiQXCnyVjXkLKmnV65ckeisXOluTIkBAAAA
4JY46utJkMfFxbHbjEAangR8t27d9LmXL18uuOIC4Gl8++23ISEhycnJxnXo
dpPXur5CWlqa6VPEbwcAAAC8GJIBmZmZOme6fDR8+PCAgAAONSMxZ8qXL79w
4UI5Xm+IMoG9HQBi7ty5d9xxhwxv81YvZGXKP1nQtk6RZihhj3WpAAAAgLdC
GkA7qFOnrz3YWWPs3r27ffv2klaVZHyhQoVou02bNn///beEl9SChC/lgt8D
gJuxdOnSihUrSnXIszeL9opZvHhxUlIS1zhZbKLfAgAAAMArsQoJreRFxi9f
vrxs2bK8TFXM76Thx48fbygrIqkL+NkCIMTGxoaGhhrXt3Bbr0NZtGhRnTp1
2BnGtK4E0h0AAADwBThUhfa/ZV8X8ZVlW1///v052oxASv6uu+7666+/2IPX
ULIBAh6ABQsWlC5d2lD1Is+uMlyh6tWrN3z4cCP7SlWr0xoAAAAAvAyTOzoJ
A2ukd5HuvEESvWbNmhJqhi3wxIABAw4fPqwvDt0OfByqAmvWrLnjjjvkbZ6D
yYi9nQYC/8viRhY0T1y8eNGwlQ2VHQAAAHA3RD+MHj36tttuI7kuwd7plfb8
+OOPYv3T4t/A0jngk6xbty48PJy3r1PimnIWu9C0TkP4tLS0kydPar84mPoB
AAAAd0OcZy5cuPDEE0+w4V083ol27drt2LHDdAq72SCuO/A11qxZU6VKFf3Y
50G3SzganVnJ5VWJxxHXE5QeAAAAAPmHSA4xG65bty4iIkKiu4vTe58+fXRo
GkMlZoW9HfgOy5Ytq1y5st6TN4lLw2QR7S6vRFqrYzAOAAAAuCfsCS/hIkWZ
Dx48mEV7UFAQS3d6W7FixSVLluiQkgD4GgsXLqxUqRJvs59M3vIude7cefPm
zXrgfCNLeY3Yjf6K8TgAAADgnlAfLb7uzLZt29q2batXqnLEyPvuu+/AgQOG
LVMMAD7FTz/9RANY3s5zPrJJkyaR+D937pyhXGXcbSzsbuUBAAAAfByxtDPa
fsge7J999tnNN98sGZoIVu8ff/yxnIXQE8BHoEd9xowZYWFh16lp+/XrN3Xq
VHnLdc2F9m1Zjsqzb7C0AwAAAG6IzqvOxkPew0KCXxMTE1988UVW7Gx7Zxea
6OjoNWvWwOoOfAeqIN9//33lypV1GJk8qFyqWTpauylSk6swzbhhPA4AAAC4
GzlGd+SP/v77bx3mnWU80a9fP1jngO8wZcqUyMjIpKQkw1ZHnD//1xl5BgAA
AAAgb4wZM6ZEiRLsKiOG95tuumnixIlsnBfjoY6VwRvWPQB4FvTofvrppxUr
Vrxw4ULuT5ENl1vUAQAAAOA7kPA4derUk08+qRersoxv1arV8ePH+TBxthF/
ABHtMM4Dz4Ue5mHDhoWHh3NqUSMn5xbOjEDVgTeo7iQkJGDcCgAAAICCgd3g
ly1bVqdOHTG8y+urr776rw05xRQxA7oFeC7Dhw+vW7duWlqahE7N8XmW6Ogt
W7Z85ZVXCqKUAAAAAPB5eBWqhHAfNWqUhJoRt5nw8HBS9WKH1GnTTeFrAPA4
3nvvvWbNmkmoc+f2dp0W4ZdffomMjOQYqgAAAAAABYMOW71nz5727dtLqBmW
8UFBQY899lhCQoI+xbTQFQBP5J133omJibmmfEnsJLNz585Vq1YZcBUDAAAA
QEGhVXd6erqRJV1+/vnn4sWLS7QZWbX6+eefSw5WQ7n7uqjsAFwvH3300X33
3cfbOTrJUGWRQKniLQYAAAAAUACQ/Bb5kZmZqWNIJiUlPfPMMxIfUhauNmjQ
4LfffjNgZgeeDz3w48aNe/TRR43cebYzpskmVAQAAAAAFBjaciiChHdu3Lgx
OjpafN35lejfvz+HzoNoAR7N2LFjH3nkEcPyJMuiD9nD25zRzLhu9xhrRiRU
JQAAAABcD6zex40bp93debtYsWITJ040qRftRaMX8VnTPwHgckgqf/nllx06
dLCazXUOJlmCTdVh9+7dgwcPlseY0xzk7asNeJoBAAAA4LrRQuLy5cv0mpiY
+Mgjj0iAd5LubHtv3LjxoUOHrKZCk/evXZM+AK6FnvNvv/32vvvus1q89djT
sD3AdECzZs1I5/NOXg+SZ0d3ujjHn4RuBwAAAMD1oOWEqJq5c+eGhIT4+fmZ
/N5ffPFFWa8nIfXYo8Bu4HcA3AF6PmfNmtW6dWs9NyQfWY8/ceIEjV4PHz7s
/LBcQl+XkpKSm/iTAAAAAACOMHm5GzbTInHx4sXnnntOTO5sdQ8MDKxcufKS
JUv4GG29ZOkOiyJwTxYtWnTPPffwts5NYCgXL/GZoT28TaNUUdp5GI3KuVKt
AAAAAACuBxEk2rOFd27evLlu3bra5E6vQUFBDz/88JEjR0iWsOOuaB7DpoLo
dPjJAPfh119/bd26NW+LnNY2cKslPC0tzci+fONakWtyNTHtBAAAAAC4JkRF
6MAaJtPi2LFj/bKQKJFE0aJFv//+e0MJm+tROADkK6Tb27RpY+S07CI1NZU3
+DCpCGKBzxs5euYAAAAAAOQGHe9OPNXFZ4ClS3JycufOnVm9/0fRqlWrI0eO
SCIn7esOAQ/cBHomY2NjWbdr07dhifdy8OBBU0wk2nmdzu1Gdocc6HYAAAAA
5AHxaTGUYtcfmSJvrFixIiwsTEQ7Z1ktVKjQ22+/zdLdGg0bAHdg8eLF7N+u
TehG9jiQ8fHxtWvXxtMLAAAAAO8gJSVlyJAhrNu17b18+fILFiwwKX/tWgBH
GuBCYmNj27VrZ2T3k9FR2emxrFGjRu/evV1QOAAAAACAG41onoMHD957770k
14OCgug1ICCAw8488MAD586d42PEbok4M8C10OO3ZMmShx56yMjusqIPIH76
6SdS8lhPDQAAAAAvQLsQkM754osvbrrpJjG5k24PDAwMDg5+5513+BjO5SRn
cex3RHcHBQw9q99//z3nUdK6XacxhXsMAAAAALwJTgTPAa55T3p6es+ePdnk
Lp4zJOAbNGiwY8cOPoYdZmByBy7ks88+u/feew17+lyUPCaGAAAAAOB9iBRn
p4KVK1dGRkbqKJGBgYH09umnnz579qxhcyT+559/oIuAS3j33Xc5frvdkIx6
UTYM7wAAAADwAkxBrY0sFXTlyhXe8+GHH7LVPTg4mNU7vS1VqtQPP/wgGZoM
rEsFruCtt9669957r2ZhZE9bMGbMmI0bN/JbvVIVAAAAAMCjMYV5F/jt0aNH
W7RoYY0206FDh82bN8PeDlzFu++++8ADD3B+AUPFZt+0aRMNLffu3ctx2vF8
AgAAAMA7EE9g7UughRAzf/784sWLi3TnMO/E22+/beSUsBKA/ODzzz/ndamp
qal6/Ni1a9dhw4bJMwknGQAAAAD4AlrznDx5snfv3lbDe4UKFZYuXapjeojl
k080OSrA/ulNyBBPu6noj/LJz/zKlSvffPPNww8/TBen159//tnIim5E356e
ns5Rj+DHBQAAAABfQCsxkT0pKSnr1q1r1aqVVu/s+s5h3k2ZK00LBuUt7PNe
gyn9rt7Py5zlT7/h4nn8+PFt27YlcV6rVq3FixfbNbAjLxgAAAAAfAfJGq91
0YgRI/z9/QsVKqQN78WLF//mm28MS1YmMXvqWB8F+htAfqL/VlMKJP0k3PD8
RxMnTuzevfuWLVuaNWt2+vRpvrg8bIY9dy8AAAAAAK/ElLzmqg3ef/78+W7d
upFcZ/UeGBjIGr5evXq7du0ybDFqTKZOWQNbwL8F5BMSxp//U+s6ZT1xcwOh
bxk/fvyjjz46derU+vXrX8kiISFBDiA9b9ieNy3mAQAAAAC8D7Gx86pVVuw6
KyWxaNGi22+/XUzuhQsXZiX/8ssvp6WlWR2b2X3CFb8G5C88TBP1Tk+Idovi
T2/gX0+X+vnnn1u0aNExC3r73HPP9e3blz995JFH7r//flN8SAAAAAAAL8a5
0JJPP/74Yx3jnSlZsuTq1atZ4cuR8DT2MkgVm4L/G2p5ssnQfWOHbMuWLatU
qdItt9zy7bff7tixIzQ0dMOGDVQYEu1169ZNSUmBXxYAAAAAfAEtsTIzM7Xe
Tk9P14eRKKIDtm3b1qFDB5Lr/v7+It1pu1OnTgcOHOCLiHyC34LXIFMw7DBz
5MiRkydPGuovZsN7fpi+SaVzPt/jx48fO3aMQ8q0bt06JiaGH1EumB5WAAAA
AAB4JeLeoJcZsvTiOHuiiGQ14rJlyzjMOwsq1vABAQG8XlXWLQIvQ56QMWPG
tGrVikZwU6ZMOXHihJGftu5NmzYFZnH+/HkjK9jRfffd17ZtWxbtEn30egaJ
uS88j1+uZic3J8oCASP76m8pv/MpKlPIJrvFNhVGe6/p/eLpZA3gabpajnvk
9FzeBCeH2b2T1p05fpeTf+Sa/jLTkbm5/86v4Lwk8lDZvay4peX4pU6+2lrs
a62zpsvanVaze6McXcr0VlbQ5PikOblXufwJduvOvzZy/ONyvKajfz+Xj5/d
4x19OxVYmhe9ECnHL3LyiDo62BSMwsmN0m+5hNb9poNNf66TYtj9FdZHwnqw
bkCsX6d/nSnUnvwER99rqFtk+t7ct5CGvVuXyxNzxMmD7ejbZaf1nutt0121
u20qid2vk+Otv9q0DNPRtt6gBlM/EqbAKdaCSWwWUyFzj35grJ+a6o7dE/We
q9ljM5purKMT7e6UP4jk0wsvvCAmdxbwRNOmTf/8808+WK9eFH0ivY/1YeaC
6e7J2jVYK52Twpsem6s2r3vnddnRs+ToFCdYDzP9cY7+aLvfqPfzQ2j3JljH
X3YXIDipws4rKf9Bu3btGjFiRMOGDcuVK/fggw9OmzbtyJEjujDypdoSLl96
Va2AcOJXQ4ft3r2bnquHHnqI3tIYoXbt2o899lhaWpqhHiq7f+tVe+hPHX2v
o+OdVGRHT6DuUhnTI6H/VkeNkhyZt8W/jqqMKZ6n6Rj+LusCZLvF4OMdDZ2c
lNl6Kev1rW1FjpWUy8OFd/LtV206xEn1t57i/IJ2a5Z+7B2d6OSt6SHRwkzj
vFOwjuN4/Gi3HZZbpz+1PgnOf5SjFt4q/Kx/rvP7bPdv1Xv0s00H5y3fdx7q
Wu6vfFUNE5wIKrt9Pf9BVN30zzRNOMqaNWmC7P4XJpwUOMdfZN2pK7K1Rjt5
tGSno+Ll319j/YrcfJejY+w2lY7sJKa6bPepyOWeXBbSebvh6CJXVUNk6toc
ncUPodyNHJ83+S5TH62/0foHXbXXUxg5PZx2nyv9LxhOb7v1wdYXMf1qvZ8q
rLWns+6xu6FvgrVhN5VEn8Lbq1ataty4scR45/WqRN++fTMyMuTg3Pg/262Y
0hbJcMPuX2C3aucG000w3QfrXyZ/hOl4Rw2vk0ohukiXxLDcB9126cP06MY6
FDVd09H+q5b2U+80lZz+RFPXwH/rX3/9NXz48Hbt2rVs2bJTp07Dhg3jGC9G
dqcpU1Flf45rKxYuXEhP1Lhx4+htVFTUE088wadcvnyZC0DX1KmXcv8k6Gpi
91YYju+hYe+pu2qLZm/6B60jKcNeK3fVMdZTrI+u9Wp2f4L1kdOLi53/WOtO
u4ra+aNoGstcVaOb3Ndfu/fHWk5Hd9LuFzna6eiRMOkKuwfnHrkPpsfpqhLq
+tXJc2LYezhzU4Acj5e+5mr2uvM/G7rwTq7mRKnmplQ5PiqObov+1PlZjr6I
RwF2v+WqrUpa++6r1zItZThoHBzpPVP7L8Vw8nsd3QE9lDM9Tna/2npNRzc8
xxZGhhiSEMTJ7XI+2LGLbnMcjYb0D5EjtQHW0XOlz9WF18fYLbP1HlrLYD3M
yOmW5v622P26vJ2l3+bmanKLHA0qTSrd+khftYwdGJOA4VbrX9uElLVG65KY
yu/8uXX0HDr6+Xb/R+s8juy/ausUrJ86Ko/dL9I6XILvjRw5Urxl6DUwMDAg
ICAkJOS7774z1MDfGuDd7veaTCWOjnSO6fnXFc10zdw8YLlvcq9aOl+5gukB
s3tjpcDOTcFGdutKjo+WtUJd6y8ylfmfLAxbLeBKkZqaumDBgocffrhixYp1
69b99NNPd+zYwZauf5ULOr3ymE5bhJwUYNeuXfRElS9fvlmzZgMHDtRPoJGV
O9X5FfLWiTi6iKMOJced1maHN3IZMdXUF9i1FVjL7KgX+NdmSrX7RboR+9fe
OMj0u/SGtRnPsZyOCm+61ayX7DZxebi+nGWaDbGWXO+xHub8+narnt2SO+p9
eEObi53fz9zcB7u/JZefWo+8qnSj84ad74aTdShX7ZmbHN15Rx85wVGtt3sp
/ej+a5k1y0MBclMXcvO38j00VQS5bzmWMw81UU4x/TtO1LX+uqv2hJlUZ0cF
009XjvdNXzY39VT/F7n/H50cIy4Z1q+Qt3bbf10Mw3aHrRLF9Lt0mU3KwfTV
+hm2FiyXD8ZVB6Y8Jjf33O4jZLcYdj+6ajFcS0nsNj7Wt0b26m/3Zv6rhuSm
68uXOpmjtL7Vv0I7sP2r7FTy66wFNmH9FYb6a/R3mf4p/Vab0OlLExIS7rnn
Hra6k2gXC3ybNm2OHDmib6P4NjgqmN09zh8qw3GraK2YpgPsGs/1U2p6BuTP
tV4w92owl/97LrH7/NttY62F1D9ZHiG7BTZtWOuaYRudXbp0afTo0Z07dw4P
D69fv36PHj2mT5/ObvBappocrR1x9OhRnsQZPHiwYasChq2HMv1G61hAnnZr
L6N/lL5ddrWctBvWf0q+1FQkR7VPV0A513qYSbXavTmmn2D366w7tXbSxvar
9npY63Uc3cMcz3LUwjv5a+xex0k5TX+9o6+znujkJ+iG3dpEmCbgrJfSdYr7
d2tzZKrCPLA1LHpAxsumnybFc1K7rSXUVUOfYvoJ+rsc3Xbr7bLeB+sea5Ux
lTzHRlL/NaY/xe51HH2X3cI7+oG5bOevZu+O7dZx65+Yy1th9xTZ0NZFffz/
bGvZ7BZAsP4vjpopa3mcvDWcpvmQ7slUI+zeN0fXNx1mKr9h7+/7N7tFXT7V
9fp/2ZcPmP4108X/l30pk7Vxc2QrsG7/q5Sek5/p6PfarYmmB8Z6D3OsL0b2
dkkfIH+iqaEzjdavOjCY2MV69/TPlCbR0bl6Ll6Ug6Pj7d4xJ+XUukIjV5ON
3PyDpsfGyO4OLd4F0iBITTH9BXIdPcDnDeu9oj0//PDDLbfcwro9KCiI5VaR
IkWGDx/+r83YclV1Fqavtv4djmqoPl5e5ZlxdH808utM18nx3uormDauKjeJ
q7mQQI5qjb7V/7P5QclvtNsLO/+W3Pwc0+/i/9eUllT+O9PFrWME/ujChQsL
Fy5s3759aGhorVq1SMnTE5KYmGioupNjHBjS7QFZ0OldunTp0KHD448/3q1b
t06dOj3yyCOPPfZY9+7dH3300Weeeeapp56iA7p27Uo76VM6/vEs6IAnn3yy
Wxa9evXq16/fgAED+vbt++yzz7755ptDhw7l1/fee++jLOhxpT2DBg3qlwWN
F954443XXnuNzqLX119/nT6iPW+//fY777zz1ltv0bn0lna+lsXAgQPplCFZ
0MEvvfTSc88998ILL/Tu3ZtLQhtUTio8lfn555+nT6kk/6e9O4vdoujSAB6v
TLwzXpiYeKlRVNzGBcF9QRnFcczEjOMk8ylmoiYIo/HqS1QiBpVPUUZwQQVF
dgRZlM1tZBFUHNxYVEDZRQFZVBLlP7/0k3+n532B70smEyGp56JSXX3q1HNO
VXefquq337vuugv/2267TSExtBnFkJtvvlkVJcqJoU05hgMHDkT44YcffqTC
wAqDBg169NFHHeImz5bIPFlBubzyxx57bOjQoWTokVdF6mxsf+CBB6QDBgxg
GhnWsahfv3533333f1SQ4UZkknIRMxmrrT9X4D0k77nnntQCp6iNh4cMGTJs
2LBnnnlm+PDhL7zwgsxTTz31lwqme0888QQB9J599tmXXnpp5MiRL1R4+eWX
x40b9/rrr48fP175888/P2LECOXEnn76aXUZ+J8VHNIspZaxTGZLDIlFek2K
T7pPSsAhAXkkeZI3+GTw4MHxD8JPV5ChXKMvvvgiSs8995zDFEq1iAbyjHJ2
woQJxv+kSZMmTpz4ZgX8Z8yYMXXq1BSazzKEEhapQq267FISw1/shEIyCMQ/
T3ZCXgm/1VRllGCCDw2vvvoqGq671157bfr06TjMnj171qxZb7zxhjx6zqJK
uVbIy8TVY8aMQVKVmTNnzp07978qvPvuu++8886cOXNYQSEZPEeNGhWfPF8h
naVdZ9mYdl+rQKFTyKgyshPpzXhvaCdYygnEMFEL1TcqII/A+xWQiSH0cyyv
MieEUy6D6oIFC5YuXfrxxx8vWrRo2bJln3zyyYcffqjwrbfeIpO+MKikkydP
loYwA6Xx0qwKMhQq1MqUKVMIs44tOpEJOihdCfHA6NGjOYGMKji//fbbGv3o
o4+Q+fTTTz///HNMlMyfP/+9996bN28e5cjUHBwyENX/7gTyixcvVl2GOTzA
ujBMzzbZ6jJ5GuZX0NDChQs1hIkMMlokltEYWyZU4Ao+j0N4lU6taEu7OHzx
xRfIa/3zCpgo/+CDD4wN/iQ5u4KMEsayMfZ+9dVXa9euXbNmzTfffLNq1Sp6
aFuyZAkylCODrVoZn1TlMOMN/8UVKFRL62rFdeoyKvLpGpylDhXioAlVVq5c
6Tmyfv166bp163744YcdO3Z4Esl89913uKH02WefxRBqud1ocYi5ugRUJJwq
W7du3bJlC21ff/21WvhoBT3yiyp80IlPKhAIcx4jH0/W3nOWpEYZpfV4Ix2n
JALS5cuXa3H79u27d+/es2ePdNeuXaz4ocLGjRvj1XSQVlasWKFk9erVmzdv
Rvj7779H/tdff1XLc1mJKrqDCXoEGZRSMRl65Gkgs2HDhi0VqNq0aZOKVNEg
j5KzUkpUYZG6TJZBOBx4WEXtNn+R0QxWlTvLCqoMEpyldCr5qYKzv/zyC/I7
d+7UKNtVVx5vYIKkDvquASXpNWA7Gdro6eiMigUeP//8M4X0cEjtRsNDGjOV
h9h+f+fVHrrs3bt3TwUtqoWePDHk8cybxi0LFwqdRUMVXtIiPvJMSN9xNT1s
Vx49+XFf7UbmOJshwcx0dwYGE6RYNT8Oua/6MmRL2EazgKTlK5H5f9UEbE20
B66JVKllDjIyyCCs3bwR0dEWabcvMdXmqB4lCX3b3y5ohvp/Nb5tmSA0ZxkH
WUupg/l2mZZNsZZ8OyU+aU5Ymsu/TcmDvGh0kJnmfmWa+ZZp1L627dp9jZWH
loUCzD3gxNKnnHLK8ccff+WVV3rYuTCzrvhXPwXj8ScUEYMlrEp0LUqRisqc
SswmFXA+9NBDojJhpOhRKuYUVAvPEkWDkFIqABY/i0Ll76tALLGl6tTKOEWA
Hu0K6pSTcZiIV4yUOBMSiHp2izSYJhpJKIKSIDCxIg2J+bUioBWxJwJP0Ig2
DliJ850SEv9bBZG82DixfeJkU4A777xTya233urwzgr/XkFG9ZQkxhZUm0pk
cqHpfhViqakBhdplSCLDxI0JoRXygOqJvak1s6A2sw/EZPpUwFY+VB1K5c2e
brzxxt69e/99BVOSzD5k0I6YzL9UMJ9KdXpS7jCaGSvVLiYmAhyIDzIc5TDz
IykrjIcEsUJuzFmtruZMfAy866+/3owPH3cnE6IbbrjB4VVXXXXxxRdfcskl
11xzTe8KkQnMN5WTueKKK2R69uwpf/nll6ty4YUXSuUVGsxSwqmlIYabl2na
VIsVmaMx00Qy08xM0GKFtH///jookz6uZpFCAvToI5ovvfRSzVGOybnnnnva
aaddWuGyyy6T4u/sRRdddGGFHj16dO/evVu3bhdccIFy3BhFBvlevXrJ/0Mn
6M8/l1HrrG5SiKSewpnTMkHOXDg9mLkkEOPYf66gnKvZYoTowT9V0IPqck7a
xRNDrNwBzqxw9tlnn3/++QpjBebOnnPOOZ4UZ1Ug4PC8884jlhRiFMI087+6
8vE/W1CKzzO0YmAYYn711Vf/YwXlrIsVmdqjjb+hxQTXlOrxPHdRjhtWXbt2
PfXUUzn/9NNPP+GEE0488cSTTjqJOUrOOOMMFuFMpkuXLieffPIpFWQcpqI8
MSboHfbir1NkWBEvXVlBcwYbG+WNpTDEVtc4bAonjyFzWJ37hm7K1QQszaDV
UEYFhlid0YnTG4gJqJ7WCfnaLvzTNfrICIwhOkV3dKsgo4lcFFgZSzhntSQ+
Ty8At3NsTMh156yuQTVd808VlBDQhNa1azCEFapcelIFLkWsa4V4WJpTMiGP
re4zzDJO4mGN3liBV3NpS43SCGiaV5mgEFUy5HNp5BLOyJHmFqeirqltzPKR
O4xy1WnjFvzDE/kTKmSEOGRR3E5GH+ksrpZndcjLMI0tPMy9DEmH8nmu9FwR
oEXtIoO89NoKiMXMeJsMSvLxcC5PMumIjDRKcs+MCbmN04+MHsFHitvfVciQ
Dsn0VEZOLlg8eRXhOBmoyuCn8LIKucFq5YYKCBjzfJhbZW5BvO0UApyjLiW5
b8SK3HVxri9tSpwiw2N6H5/cWJKeV+GcChnA51bInTZ3Ufn0/nUVNCGfwZyL
UWGGtHt11t9uq5DL0AXolAszNxNVjGqZLCpGT1YXcxfNjSh5VmTYhDw3MiQO
zw1HPvfGCyrIG0UpJxOjYiBDqMolgLMWuTqOyk2GM+NhAkcddVRelalX3Y84
4gjlWWlkTh7NsTo3GRl3Wszde7NG6jD3W81lmCXNTTuHBgOLpHkuYIItzvE8
YEWS07iL2jy1KUzAkPLcK7K2WYcfqOoIoY5HaqJBwYCYzbNVCEFM1yRu+dcK
SpKJFbWZuYqbF871FTJEc1/NYE5UEOuUZJygREn+JFTmT51Az6lYoSG9L6Mw
4wdJbLOuiHnWfhW6t7NI8CM8EAvlAQd1xJVHduKu3PnTxXmKYZXAJvc0hPmW
51mhRD6XXu4VqsjnjhcTKDTGjjzyyPrrQ56SB3lvqo78mxO05oS9OWuod5Hq
s80ZxIFwkElTs4l9bX871T6h+73tJdhauGWKHXmG11ux7RsZLZQ6DrC/2TJv
amm6ZUuxLo8t+cpru/KmWD3/2u97RE2G+91JP/ge1oFab/bdgTzQcraZae/H
g6Cpvzm0Wtpq2VFqeUuzPb+vsTucBYSOAwzdFhOaO7nNhYIM7+bW236ta9nj
rnlm0v1750vFzRn3722/e2ouC3R0vpyzr7GZWDu5zjR/u9Sy21sr+a3zVzC1
kva3JtpHgopZL/qlQpazfq2gsFZ7oK3qev0nS1V7G2iufTU511d61sdCIM2l
dXp+rkBnlpjqdaGOzt/vRHkW07Iatn379h07duzcuVO6a9cu1X/66aeoipLo
qZ1f95TqWWQLB3VVpEe+/teM/S59ZHmT8ixaZlnvxx9/3NUJOmNFXJTVwvDJ
92rCnKSKOGQJMSvVUSWf5dAsrNUek6mNin4p4fBPLQpzCvZV74axJU13dN4e
yUcYtm7dmhazDIvJtm3b4sy6XxxmZTWswpaSZKQ0ZPW1Jk9JljRrh0D6JWva
UUsnyWhIPk1EJvbG5N+qL2vF0ujJEne8B1n9pjOFyYDWN2/eHD9v2rRpy5Yt
WU9ev369RsNTxY0bN2aVmwz5rDMrzKp4VlkJZG2cfLov68k0kFEeL4VSRhdz
4sbYCNFPMvSyy7C5E1mBjwzgkI2JL7/8MrsM9Rr+mjVr8MniPKC3du1akspX
rFiRhX21Vq1alerLli2Tl1m+fLmS1atXM00TKjYbldHounXr0hfcqDC7OdHz
UQVN0IMPJVlOzx/BZEH76wqoLl68eP78+dlVnDVr1rRp0+bNm7dw4cJFixY5
hWQ2mD6rkHx2N7LFkMySJUu0GMO16HDp0qWYKJGm6dDIkn7cmxHF7ToLf9oo
yabY+++/P3v27DfffDPbbSsqYK7TeQ9/KXu1lW2aqVOnTpgwYcyYMWPHjpWZ
NGmSkuyNzpw5MztZ0uwrZXtu7ty5CqULFizI/tfjjz9+9NFHJ4AXyc+ZMyf7
dFjFdhzWVP/gk05hV9yenaPsLXLgxIkTEUBj8uTJaEyfPl1D2f/iljiWJBqE
X61Q779nJTZ70MGIESMcZitt/PjxjGJRvb+WLVctjhs3ju3OZucxu67ZvGOj
5tiCZ/qLOcYGi0I7jsq+8KhRo7J3P2jQoEceeWT48OHZYc/+KXM0ly1OzTk7
ePDggQMHhnkWllNxyJAhpg/ZBB86dCgDhw0bxpaRI0dm3zl7yq+88golCukf
PXp0ziphMhrqZvd2ypQpWtfRdWcxKuaTR09z2sorIlnSFOr369cvS83mMgMG
DMDw0Qp5iyDb9w4Rznsj5hEidnOZrCKK280KE7GL3k0P8en4G16VKSgoKCgo
KCgo+P+GiVXfvn379OkjOEzJ3/j+ecGhhuZCXLMTm0s9LauvdUVzsfvvv79r
167HHHNM7969TTqUtHzSv6CgoKCgoKCg4I9Fds069vdmeMHhgubeZUrq/frf
Oj8HWp/KCxibN28eO3bs7bff3qtXr7POOqtbt24PPvjgunXr8tuQJsp4KCgo
KCgoKCj4w1F/0Cz4/QBfqys4xNH+GmrHAb7Q9e23344ePfraa6897rjjxOr9
+/cXvW/btq3jf39ysIyEgoKCgoKCgoJDDS3fjC04fFG/KlOvrte/CxOZjxkz
5qabburRo0eXLl369u07bdq0PXv21D+pO8j7UWW9vaCgoKCgoKDgkEL7f1EV
HC6oP6jS/F7Ehg0b5syZc99993Xv3r1nz559+vR58sknV65c2XGAz3S0fHSi
DIOCgoKCgoKCgkMKLf8nWKK1wxR1x+3du3fGjBl33HHHmWeeeeyxx95yyy3T
p09v/rFX3d0km5+h2++6esvXDgsKCgoKCgoKCv4Q7Peb0n8Ik4L/CxJ415+h
vvfee6+77roJEybs3r27+c3hWn6/vVwvs//e+KvcgoKCgoKCgoKCQwHt/9XS
Ud5nPpyRt2XqV9bb/82nLml5LepAi+olgC8oKCgoKCgoKCg4XPA/j0CbrQ==

      "], {{0, 601}, {1000, 0}}, {0, 255}, ColorFunction -> RGBColor], 
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True], 
     Selectable -> False], BaseStyle -> "ImageGraphics", 
    ImageSize -> {517., Automatic}, ImageSizeRaw -> {1000, 601}, 
    PlotRange -> {{0, 1000}, {0, 601}}],StyleBox[
   "\"Geometry of a linear classifier.\"", "FigureCaptionCentered", 
    StripOnInput -> False]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        StyleBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], Background -> RGBColor[1, 1, 0]], 
        DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"Background", "\[Rule]", 
         RowBox[{"RGBColor", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}]}]}], "]"}]& )]], "Text",
 CellChangeTimes->{
  3.599992537217804*^9, 3.599992635051611*^9, 3.599992744228339*^9, {
   3.599993594079843*^9, 3.5999935981414623`*^9}, {3.59999362851158*^9, 
   3.5999936542686567`*^9}, {3.5999937689082937`*^9, 3.599993770279931*^9}, 
   3.599998786154839*^9, 3.599998887014358*^9},
 TextAlignment->Center,
 CellTags->"fig_geometry"],

Cell[TextData[{
 "\nLet ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalChi]", "(", "r", ")"}], TraditionalForm]], 
  "InlineFormula"],
 " be the indicator function of the predicate ",
 Cell[BoxData[
  FormBox[
   StyleBox["r", "TI"], TraditionalForm]], "InlineFormula"],
 " and let ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " be a the scoring function of a linear classifier. A natural measure for \
the performance of a binary classifier is given by the 0/1 istantaneous \
error, which for a sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 " can be written as"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995499436138*^9, 
   3.599995539266868*^9}, {3.599997582821453*^9, 3.5999975860480633`*^9}, {
   3.599998976253676*^9, 3.5999989914597387`*^9}, {3.599999170742371*^9, 
   3.599999173138685*^9}, {3.599999714269641*^9, 3.5999997234665003`*^9}, 
   3.601386016087184*^9, {3.63756129218629*^9, 3.637561333457786*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", 
   RowBox[{"(", 
    RowBox[{"h", ",", "i"}], ")"}]}], "=", 
  RowBox[{"\[CapitalChi]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["y", "i"], "h", 
       RowBox[{"(", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], ")"}]}], "<", "0"}], ")"}], 
    "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999944603634357`*^9, 3.599994493588257*^9}, {
   3.599995527890851*^9, 3.599995607101728*^9}, {3.59999759190174*^9, 
   3.599997605387134*^9}, {3.599998685361197*^9, 3.599998685502387*^9}, 
   3.5999987301762114`*^9, {3.5999989185448513`*^9, 3.5999989188784037`*^9}, {
   3.5999989939314337`*^9, 3.5999990018287563`*^9}, {3.599999423831132*^9, 
   3.599999448026225*^9}, {3.600000447372196*^9, 3.600000448986864*^9}, 
   3.607429382585763*^9}],

Cell[TextData[{
 "As it can be seen, if the sign of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], ")"}], TraditionalForm]]],
 " disagree, the prediction will be counted as erroneous and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "1"}], TraditionalForm]]],
 ". In the other case, if the sign of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], ")"}], TraditionalForm]]],
 " agree, the prediction will be considered correct and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "0"}], TraditionalForm]]],
 ".\n\nUsing the error function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"e", "(", 
    RowBox[{"h", ",", "i"}], ")"}], TraditionalForm]]],
 ", we can now define the ",
 StyleBox["risk functional",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 " of a classifier ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " over a distribution ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " as"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
  3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
  3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
  3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
  3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
  3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
  3.599997646412861*^9}, {3.5999987264237432`*^9, 3.599998748160718*^9}, {
  3.5999989206421623`*^9, 3.599998967244173*^9}, {3.599999031887761*^9, 
  3.5999990785253983`*^9}, {3.6074293768330593`*^9, 3.607429631218378*^9}, {
  3.6074302685756474`*^9, 3.607430273193674*^9}, {3.607430379106879*^9, 
  3.607430398069633*^9}, {3.6074306202107058`*^9, 3.607430620210925*^9}, {
  3.637561416089044*^9, 3.6375614250470753`*^9}, {3.637563519716991*^9, 
  3.637563520313816*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], 
    RowBox[{"(", "h", ")"}]}], "=", 
   RowBox[{"\[CapitalDifferentialD]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], ",", 
        SubscriptBox["y", "i"]}], ")"}], ":", 
      RowBox[{
       RowBox[{"e", 
        RowBox[{"(", 
         RowBox[{"h", ",", "i"}], ")"}]}], "==", "1"}]}], "}"}]}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.599999082706435*^9, 3.5999991473256493`*^9}, 
   3.5999992125321608`*^9, {3.599999450499954*^9, 3.599999453716419*^9}, 
   3.6074299688686123`*^9, 3.607430001086486*^9, 3.6074301179761*^9}],

Cell[TextData[{
 "which is the expected error rate of the classifier over the set of samples \
generated according to ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 ". This quantity represents the true risk that a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 " generated according to ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " is missclassified by the classifier.\nThe so called \
\[OpenCurlyDoubleQuote]",
 StyleBox["generalization ability",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] of a classifier can then be defined as its ability \
to have a low true risk on ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 ", and thus have a low expected error on samples which were possibly not \
considered when constructing ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " (",
 StyleBox["unseen samples",
  FontSlant->"Italic"],
 ").\n\nSince the distribution ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " is often unknown, this quantity is not directly measurable. Moreover, the \
error function used by this functional is non-smooth, its gradient is zero \
and it is thus not very tractable, as can be seen in the following figure.\n"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
   3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
   3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
   3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
   3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
   3.599997646412861*^9}, {3.5999987264237432`*^9, 3.599998748160718*^9}, {
   3.5999989206421623`*^9, 3.599998967244173*^9}, {3.599999031887761*^9, 
   3.5999990785253983`*^9}, 3.5999991505011597`*^9, {3.60067619505227*^9, 
   3.600676195415215*^9}, 3.60138602053524*^9, {3.607429643154152*^9, 
   3.60742965332517*^9}, 3.607430075464189*^9, {3.607430119374009*^9, 
   3.607430338750307*^9}, {3.607430408471323*^9, 3.607430461779922*^9}, {
   3.607430546133355*^9, 3.607430579954646*^9}, {3.607431805744916*^9, 
   3.607432028681036*^9}, {3.637560644871584*^9, 3.637560645260613*^9}, {
   3.637561443933708*^9, 3.6375614927949877`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"err", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Full", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".5"}], ",", "1.5"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Background", "\[Rule]", "White"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Thickness", "[", ".01", "]"}], "}"}]}]}], "]"}], ",", 
   "\"\<Error function e, as a function of: \!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{
SubscriptBox[\"y\", \"i\"], 
RowBox[{\"h\", \"(\", 
SubscriptBox[\"x\", \"i\"], \")\"}]}], TraditionalForm]]]]]\)\>\""}], 
  "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.5999944603634357`*^9, 3.599994493588257*^9}, {
  3.599995527890851*^9, 3.599995607101728*^9}, {3.59999759190174*^9, 
  3.599997634142555*^9}, {3.599998769467708*^9, 3.599998882743507*^9}, {
  3.5999990056548223`*^9, 3.599999008217857*^9}, {3.599999195190351*^9, 
  3.5999991997650547`*^9}, {3.599999331756563*^9, 3.599999344516803*^9}, {
  3.600092833145628*^9, 3.6000928702255983`*^9}, {3.60009296960063*^9, 
  3.600092970173424*^9}, {3.6074305028656063`*^9, 3.607430508832467*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Hue[0.67, 0.6, 0.6], 
       Thickness[0.01], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBWIQnbx+wvv//7/vZwCDD/Z1qrcOpLUj+LNmK086y4fg
z7/fkR/I+Q3OF7sQ7K8p+hXOPxEQ7HJa9Quc76GpWqKs9BnOt1oXs+y8/ic4
/1dXmrCR5kc4/+v3JVPj1D/A+UeUJpnsy30H51uz1m/WTnkD509xMDd3rH0F
5yfPiXj6av4LOP/8cjlOxlnP4Hw5ng2G+7c9gfO5FJ6df7nqEZyfE9I6Y8WK
B3B+wuH7p+Um3YXzlWz/BR5tvAnnr8zY/HD3tqtwftbnjTHdsy7C+Xp1rJFs
yqfhfOHKK9zTZh+G86+n5Gitf7wNzi9l/t6r2LkOzi+v0uo7OXUenH8vX9k0
xqMfzr/WfuzXhQh/OB8AvXOlrw==
        "]], 
       LineBox[CompressedData["
1:eJxFz21I0wEQBvA5s0XkQMVwk0wNoyhGoC5touYLivlCWzMjy1FarrSBlk4l
YeG0xaZ/QQsXuilprYnWejHFSelYg8o022LQbJiNNU3LLRcbywri7uB4+H05
nos6I2CXkUkkUvrf/ZemFr1npqgghfR/VIy+2m1jbHCXsPvnnJEHtpj5w735
5eBoFpMveCkAx+aL2iOU1eDa4bwjy2ENYLo1dg/H2Ag+vUVGtmSLwKTE6k/p
AWJwhjylK6hRCu7UaCiZxa3g6i/BrKQdBFjnE6sE3nbwOUZFs2mkE3y/LSH1
zoFu8CadYpwS1wMu+bU58eJBBfjGA0cYTaEEJ9NGg6z9feABB9f/0qMBsFDW
ZpNMD4Fb+SIT79oIONCVyxo8OgW2XtbH1TS9Aq+M5k3WGmbxfksvr1RiBMes
q0OEt83gec1OLavcAubesl5fIqzgnn6pNvfmAv57svJbQN0ieJqnustusoGf
BNJPuSvs4N3yKDsl1wH21DT51Jxl8JInnHovYQWsPN/yPnzXdzBx+LWUFvMD
TBWo06ZC18ATGc+0T+lOsK+yhFlIdYH9KO+69vnQzOyqyRzSOvb5OGgPXUNn
VBiIvHW0zPs5QexBR9LDJS6yG5x1XLJ3LgTdMVt2gYhHM/QRy1vr0ELuoY60
q+gXi9ykehH6mL9M+lWCbkj17jfI0YaxD5XicXRwjjNU+xxdbKZOuHToVXcm
tfQNenv846G0eTRP97awfgGt4iz9fmhDJ1VFF0Stopv9kt1FTvQMcUJBuNH0
yCtZBi/67DCxurGB/gMrHxCb
        "]]}, {}}, {{}, {}, {}}}, Axes -> True, 
    AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> 
    GrayLevel[1], BaseStyle -> {"Palatino", Bold, 16}, GridLines -> Automatic,
     ImageSize -> 600, Method -> {}, PlotRange -> {{-1.5, 1.5}, {-0.5, 1.5}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], Automatic}],
   "\"Error function e, as a function of: \
\\!\\(\\*Cell[TextData[Cell[BoxData[\\nFormBox[\\n\\n  \
RowBox[{\\nSubscriptBox[\\\"y\\\", \\\"i\\\"], \\n\\n   RowBox[{\\\"h\\\", \\\
\"(\\\", \\nSubscriptBox[\\\"x\\\", \\\"i\\\"], \\\")\\\"}]}], \\n  \
TraditionalForm]]]]]\\)\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{3.6074305182405767`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.601386029889903*^9, 3.6013860331555233`*^9}, 
   3.60743052878615*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tMaximal-margin classifiers"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.59989587689098*^9, 3.599895892048147*^9}, {3.599895942273438*^9, 
  3.599895956106649*^9}, {3.599997812882894*^9, 3.5999978173844213`*^9}, {
  3.600001523801238*^9, 3.6000015293877583`*^9}, {3.600001797005638*^9, 
  3.600001802768417*^9}},
 CellTags->"sec:max_margin"],

Cell[CellGroupData[{

Cell["Margin-based Generalization Bounds", "Subsection",
 CellChangeTimes->{{3.6000018604500504`*^9, 3.600001896893854*^9}},
 CellTags->"margin_bound"],

Cell[TextData[{
 "In the previous section we have introduced linear classifiers, the 0/1 \
error function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"e", "(", 
    RowBox[{"h", ",", "i"}], ")"}], TraditionalForm]]],
 " and the risk functional ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 ". Starting from these definitions, a more optimization-friendly performance \
measure can be obtained by using the definition of ",
 StyleBox["functional margin",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Gamma]", "i"], TraditionalForm]]],
 ", of a classifier ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " over a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
   3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
   3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
   3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
   3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
   3.599997654536499*^9}, 3.599999465685328*^9, {3.599999741572907*^9, 
   3.5999997654585238`*^9}, {3.6000013609599867`*^9, 3.600001361172513*^9}, {
   3.600001563186242*^9, 3.600001626437427*^9}, {3.600676347164753*^9, 
   3.600676371773777*^9}, {3.601586899455288*^9, 3.601586910593154*^9}, 
   3.6028564935711327`*^9, {3.607429719504444*^9, 3.60742972158954*^9}, {
   3.607430604408039*^9, 3.607430656303341*^9}, {3.637563102385953*^9, 
   3.637563124193836*^9}, {3.637563496670677*^9, 3.637563497522789*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Gamma]", "i"], "=", 
  RowBox[{
   SubscriptBox["y", "i"], "h", 
   RowBox[{
    RowBox[{"(", 
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], ")"}], "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999959493023653`*^9, 3.599995953719469*^9}, {
  3.599996014195363*^9, 3.599996034756254*^9}, {3.599999769055859*^9, 
  3.599999772772359*^9}, {3.600001653935862*^9, 3.60000165485928*^9}, {
  3.600091396276722*^9, 3.600091400954399*^9}}],

Cell[TextData[{
 "Note that whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], ">", "0"}], TraditionalForm]]],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "0"}], TraditionalForm]]],
 " and the sample ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 " is correcty classified, while if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "<", "0"}], TraditionalForm]]],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "1"}], TraditionalForm]]],
 " and the sample is missclassified. \nWe can than define the ",
 StyleBox["minimal functional margin",
  FontSlant->"Italic"],
 " of a classifier using a scoring function ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " on a training set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", as"
}], "Text",
 CellChangeTimes->{{3.599996048918401*^9, 3.599996060837015*^9}, {
  3.59999618849629*^9, 3.59999619102376*^9}, {3.59999771033974*^9, 
  3.599997750823564*^9}, {3.5999977831216793`*^9, 3.5999978863941708`*^9}, {
  3.599997995922997*^9, 3.599997999004837*^9}, {3.599999476675037*^9, 
  3.5999995251109858`*^9}, {3.599999778635126*^9, 3.5999997804083443`*^9}, {
  3.6000016490258417`*^9, 3.600001673828826*^9}, {3.60158691936445*^9, 
  3.601586922364491*^9}, {3.602856522113866*^9, 3.602856523214366*^9}, {
  3.60742973303699*^9, 3.607429835232155*^9}, {3.607431069027816*^9, 
  3.607431085163354*^9}, {3.637563146992399*^9, 3.637563165012268*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["m", "S"], 
   RowBox[{"(", "h", ")"}]}], "=", 
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["\[Gamma]", "i"]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999978955436907`*^9, 3.599997988866353*^9}, 
   3.599999793796834*^9, {3.600001681671842*^9, 3.6000016844109898`*^9}}],

Cell[TextData[{
 "Using this quantity we can now state without proving the following result \
from the Generalization Theory of max-margin classifiers ",
 ButtonBox[Cell["[1]", "Citation"],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". "
}], "Text",
 CellChangeTimes->{{3.6000021520783777`*^9, 3.600002156522519*^9}, {
  3.60742984679766*^9, 3.6074298490243063`*^9}}],

Cell[TextData[{
 StyleBox["Theorem 1. ", "Subsection"],
 "Let ",
 Cell[BoxData[
  FormBox["\[ScriptCapitalH]", TraditionalForm]]],
 " be the set of linear scoring functions having a unit weight vector ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", on an input space ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ". For any probabilty distribution on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", "\[Times]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], TraditionalForm]]],
 ", with support on a ball of radius ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]]],
 " around the origin, with probability ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "-", "\[Delta]"}], TraditionalForm]]],
 " over ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " random samples ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", the error of any classifier using a scoring function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "\[Element]", "\[ScriptCapitalH]"}], TraditionalForm]]],
 " with a minimal margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", "h", ")"}], " ", "\[GreaterEqual]", " ", 
    "\[Gamma]"}], TraditionalForm]]],
 " is bounded by"
}], "Text",
 CellChangeTimes->{{3.600002045349361*^9, 3.600002064902932*^9}, 
   3.60000216302361*^9, 3.600002197076413*^9, {3.600007053813912*^9, 
   3.600007054102824*^9}, {3.6074315808767147`*^9, 3.607431582604834*^9}, {
   3.607432079682301*^9, 3.607432101606476*^9}, {3.63756335849697*^9, 
   3.637563374431131*^9}, {3.637563405298534*^9, 3.6375634281897793`*^9}, {
   3.6375635551548777`*^9, 3.637563593847636*^9}, {3.637563632802895*^9, 
   3.637563640810668*^9}},
 CellTags->"theorem1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["err", "\[CapitalDifferentialD]"], 
     RowBox[{"(", "h", ")"}]}], "\[LessEqual]", "\[Epsilon]"}], "=", 
   RowBox[{
    FractionBox["2", "n"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"64", 
         SuperscriptBox["R", "2"]}], 
        SuperscriptBox["\[Gamma]", "2"]], "log", " ", 
       FractionBox["\[ScriptE]n\[Gamma]", 
        RowBox[{"4", "R"}]], "log", " ", 
       FractionBox[
        RowBox[{"128", 
         SuperscriptBox["R", "2"]}], 
        SuperscriptBox["\[Gamma]", "2"]]}], "+", 
      RowBox[{"log", " ", 
       FractionBox["4", "\[Delta]"]}]}], ")"}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600000006374289*^9, 3.6000002062180643`*^9}, 
   3.6000002573346148`*^9, {3.600000475231299*^9, 3.60000048884702*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Gamma]", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 "and provided that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", ">", 
    FractionBox["2", "\[Epsilon]"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"64", 
      SuperscriptBox["R", "2"]}], 
     SuperscriptBox["", 
      SuperscriptBox["\[Gamma]", "2"]]], "<", "n"}], TraditionalForm]]],
 ".\nThis bound tells us that the generalization ability of a linear \
classifier trained on a set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " composed of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " random samples drawn from \[ScriptCapitalD], is directly related to the \
minimum margin acheived by the classifier on the training set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ". We also note that the generalization does not depend on the \
dimensionality of the input space ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ".\nIn other words, this theorem tells us that whenever ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " is normalized to one, a classifier with a large minimal functional margin \
\[Gamma] will also have a low true risk on \[ScriptCapitalD] and thus perform \
well also on unseen samples drawn from \[ScriptCapitalD].\n"
}], "Text",
 CellChangeTimes->{{3.600000213585745*^9, 3.600000221727106*^9}, {
   3.600000261689476*^9, 3.600000292450082*^9}, {3.600000520930485*^9, 
   3.6000006628593903`*^9}, {3.600000859861929*^9, 3.600001272563404*^9}, {
   3.6000013728450623`*^9, 3.600001439133802*^9}, {3.600001709608714*^9, 
   3.6000017098448877`*^9}, {3.600001781941401*^9, 3.600001783769779*^9}, {
   3.6006764429267817`*^9, 3.600676445095525*^9}, 3.601558704488698*^9, {
   3.602856581445754*^9, 3.6028565916141043`*^9}, {3.6074307306914167`*^9, 
   3.607430760664345*^9}, {3.607430803758081*^9, 3.607430888817957*^9}, {
   3.607430919063895*^9, 3.607431044586088*^9}, {3.607431105422138*^9, 
   3.607431144164812*^9}, {3.607431268806119*^9, 3.607431350873888*^9}, {
   3.6074317901328917`*^9, 3.607431791885376*^9}, 3.607432142163611*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: hard margin", "Subsection",
 CellChangeTimes->{{3.6000018233736467`*^9, 3.6000018292632837`*^9}, {
  3.600511116033592*^9, 3.600511153981496*^9}}],

Cell[TextData[{
 "Recall that the functional margin on a sample was defined as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["\[Gamma]", 
      RowBox[{"i", "="}]], 
     SubscriptBox["y", "i"], 
     RowBox[{"h", "(", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"], ")"}]}], "InlineFormula"], 
   TraditionalForm]]],
 ". For a linear classifiers this definition specializes to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "=", 
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
   TraditionalForm]]],
 ". This quantity obviously depends on the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", as it is affected by any rescaling of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ". In order to remove this dependency, instead of forcing ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " to be normalized to 1 (as in Theorem 1), we consider the ",
 StyleBox["geometric margin",
  FontSlant->"Italic"],
 ", which is the Euclidean distance of the point to the hyper-plane given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], "+", "b"}], "=", "0"}], TraditionalForm]]],
 " .\nFor any ",
 StyleBox["correctly classified",
  FontVariations->{"Underline"->True}],
 " sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 ", the geometric margin can be computed as"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQfS52Y2rppVeO65hXpIPou/fe5oPo68o/CkA0x4nu
6SC694P+PBDtEyezGER7LP66DEQ/6luzBkRvaXbdCaJ9T8n8B9Fiv54alwFp
vYfHw0F0w+mZCSA6Qdg1DURzumgXgegZuiwVIFrl/UcwLeFV3w6iX3F1gmll
rx0zweqcjWaB6JiKuvkgev8xkUUg+tdig5Mg+lT3gcsg2k5pyV0Qffj/2/sg
+onM5fjqq68c536RTgDRLRsOpoDonvMO6SC669kNqYUPXjkeuTdFA0TLLPGp
BdF/v9eD6TW9rFZSUq8dZXxd7EC0W2uoK4i2e5cDpgFdQLL6
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    FractionBox["1", 
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
    SubscriptBox["y", "i"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], "|", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], "|"}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.60000405249175*^9, 3.600004093162671*^9}, {
  3.60000413469939*^9, 3.600004162886248*^9}, {3.6000042185678997`*^9, 
  3.6000042203326073`*^9}, {3.600004436032797*^9, 3.600004463584036*^9}, {
  3.600004545307625*^9, 3.6000045933056927`*^9}, {3.600004705129046*^9, 
  3.600004716759162*^9}, {3.6000048170476103`*^9, 3.600004829213614*^9}, {
  3.60000499390374*^9, 3.6000049958444643`*^9}, {3.601587007749618*^9, 
  3.601587028944851*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " has the role of inverting the sign of the projection, in case the sample \
was negative. As we can see, this is basically a rescaled version of the \
functional margin defined above, making it independent from the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\nThe minimal geometric margin over a set of examples ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " can then be defined as"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005147477468*^9}, {3.600005887337599*^9, 3.600005971401277*^9}, {
   3.601587422816578*^9, 3.6015874927953777`*^9}, {3.607431704532465*^9, 
   3.60743176222755*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], 
    "."}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.6015874543083487`*^9, 3.6015874979330187`*^9}, {
   3.601587531451908*^9, 3.601587553132724*^9}, 3.601587593340803*^9}],

Cell["\<\
Using this definition and following the intuition provided by Theorem 1 (that \
we should select a classifier with a large minimal margin) we could thus \
define the following max-margin objective function, maximizing the \
generalization ability of the classifier\
\>", "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005147477468*^9}, {3.600005887337599*^9, 3.600005971401277*^9}, {
   3.601587422816578*^9, 3.60158744344695*^9}, {3.6015875835414953`*^9, 
   3.601587584494212*^9}, {3.601587647951623*^9, 3.601587653187126*^9}, {
   3.60158768521929*^9, 3.601587687820085*^9}, {3.601587737498707*^9, 
   3.601587737953657*^9}, {3.607431559672174*^9, 3.60743164211471*^9}, {
   3.637564204633869*^9, 3.6375642278032227`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], 
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600005137443612*^9, 3.600005170947382*^9}, {
   3.600007440536175*^9, 3.600007441317205*^9}, {3.602778391536978*^9, 
   3.602778399922*^9}, {3.602778480605424*^9, 3.602778482625045*^9}, 
   3.6074316295513077`*^9}],

Cell[TextData[{
 "for any linearly separable problem ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " (a problem for which there exist a linear scoring function ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], ">", "0"}], 
   TraditionalForm]]],
 ").\nThis is a non-linear non-convex objective function, which is very is \
difficult to optimize. A way to ease the optimization could be to impose ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], "=", "1"}],
    TraditionalForm]]],
 " (as also suggested also by Theorem 1), however this would result in a \
problem with quadratic constraints (Second Order Cone Programming), which is \
still not immediate to solve.\nAlternatively, since we are considering a \
linearly separable dataset ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", instead of normalizing ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " by imposing ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], "=", "1"}],
    TraditionalForm]]],
 ", we could equivalently rescale it until ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", "1"}], 
   TraditionalForm]]],
 ", resulting in the following optimization problem"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.600006296152946*^9, 3.600006338062229*^9}, {3.60000639992452*^9, 
   3.6000064036079407`*^9}, {3.600006887328807*^9, 3.600006926233221*^9}, {
   3.600676541491768*^9, 3.600676547884078*^9}, {3.601587689418614*^9, 
   3.601587713721084*^9}, {3.6074316248336983`*^9, 3.6074316635456877`*^9}, {
   3.607432234252885*^9, 3.607432276677658*^9}, {3.637564262008259*^9, 
   3.6375643193380127`*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["max", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], ",", "b"}]], 
  FractionBox["1", 
   RowBox[{"\[LeftDoubleBracketingBar]", 
    StyleBox["w",
     FontWeight->"Bold"], 
    "\[RightDoubleBracketingBar]"}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"s", ".", "t", ".", " ", 
    SubscriptBox["min", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        StyleBox[
         SubscriptBox["x", 
          StyleBox["i",
           FontWeight->"Plain"]],
         FontWeight->"Bold"], ",", 
        SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]]}], " ", 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
  "1."}]}], "DisplayFormula",
 CellChangeTimes->{{3.600005137443612*^9, 3.600005170947382*^9}, {
   3.6000062569968653`*^9, 3.600006282663604*^9}, 3.600006347788377*^9, {
   3.6000070849495296`*^9, 3.600007113916357*^9}, {3.600007430799041*^9, 
   3.6000074343497953`*^9}}],

Cell[TextData[{
 "By noting that the maximization of ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 " can be equivalently replaced by a minimization of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], 
   TraditionalForm]]],
 " and that the constraint ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["min", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], ",", 
         SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], " ", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", "1"}], 
   TraditionalForm]]],
 " can be replaced by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
     "1"}], ",", 
    RowBox[{"\[ForAll]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], 
         RowBox[{"i", ","}]], 
        SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]}]}], 
   TraditionalForm]]],
 ", we obtain the final objective function of the maximal margin classifier"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006949860783*^9, 3.6000069561934233`*^9}, {3.601587795583527*^9, 
   3.601587811156686*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["min", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], ",", "b"}]], " ", 
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "\[CenterDot]", 
   StyleBox["w",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"\[ForAll]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], 
       RowBox[{"i", ","}]], 
      SubscriptBox["y", "i"]}], ")"}], "\[Element]", 
    RowBox[{"S", "."}]}]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, 3.600523071368231*^9},
 CellTags->"eq:max_margin_hard"],

Cell[TextData[{
 "The classifier obtained by solving problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") is also called ",
 StyleBox["hard-margin classifier",
  FontSlant->"Italic"],
 ", as it requires linear separability of the data, imposing a functional \
margin of 1, for all the training points. Indeed, with this approach any \
feasible solution ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}], TraditionalForm]]],
 " will correctly classify all the training points with a functional margin \
of at least one. The minimal geometric margin of the optimal classifier can \
thus be computed as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["min", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["x", "i"], ",", 
          SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
      FractionBox["1", 
       RowBox[{"\[LeftDoubleBracketingBar]", 
        StyleBox["w",
         FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{"\[LeftDoubleBracketingBar]", 
         StyleBox["w",
          FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
       SubscriptBox["min", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["x", "i"], ",", 
           SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
       RowBox[{
        SubscriptBox["y", "i"], "(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], " ", "=", 
      FractionBox["1", 
       RowBox[{"\[LeftDoubleBracketingBar]", 
        StyleBox["w",
         FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], " "}]}]}], 
   TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.607432502051855*^9}, {
   3.6074326608421707`*^9, 3.607432663009742*^9}, 3.6074339643873463`*^9, {
   3.637564474128066*^9, 3.637564497960371*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.6074325729420013`*^9}}],

Cell[TextData[{
 "It can also be noticed that (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") has the form of a standard ",
 StyleBox["Quadratic Programming (QP)",
  FontSlant->"Italic"],
 " problem (a quadratic objective function, with linear constraints). It can \
thus be solved using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver, as showcased by the following code snippet:\n"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.6074325188927917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainMaxMargin", "[", 
    RowBox[{"fTr_", ",", "yTr_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "nTr", ",", "fTr2", ",", 
       "d", ",", "w", ",", "v", ",", "b", ",", "i", ",", "sol", ",", 
       "cnstr"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"cnstr", "=", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "<=", "0"}], "&"}], "/@", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"fTr", ".", "w"}], "+", "b"}], ")"}], "yTr"}]}], 
            ")"}]}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"w", ".", "w"}], ",", "cnstr"}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}]}], "]"}], ",", " ", 
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}]}],
         "]"}]}], ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{"1", "/", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600523181274065*^9, 3.6005232173178873`*^9}, {
  3.601373409791304*^9, 3.601373430582547*^9}, {3.63756456790762*^9, 
  3.6375645689313183`*^9}}],

Cell[TextData[{
 "\nAs it can be seen, the basic max-margin classifier can be implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using just a few lines of code. \nHere is an example, using the SVM \
package imported in the initialization cell of the notebook. First we make \
use of the function ",
 StyleBox["createData", "Code"],
 " in order to draw an arbitrary training set. After calling this function, \
it is possible to draw samples in the plot by clicking and dragging. A single \
click in any point of the plot will change the color/label of the samples \
that are going to be drawn subsequently.\n"
}], "Text",
 CellChangeTimes->{{3.600523190135332*^9, 3.600523306766039*^9}, {
  3.6005234114043703`*^9, 3.600523464140204*^9}, {3.6005235065280943`*^9, 
  3.600523538476019*^9}, {3.600676656209612*^9, 3.600676761650674*^9}, {
  3.601373446221478*^9, 3.6013735793660107`*^9}, {3.601386040044692*^9, 
  3.601386042277657*^9}, {3.601588084111608*^9, 3.601588084226252*^9}, {
  3.602856836313241*^9, 3.602856844435326*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.599821879624202*^9, 3.599821882910767*^9}, {
   3.5998374136334047`*^9, 3.599837414563703*^9}, {3.600524449261044*^9, 
   3.600524449764729*^9}, 3.6005251182019*^9, {3.601286452426608*^9, 
   3.601286459340432*^9}, {3.60129586541825*^9, 3.601295882607009*^9}, {
   3.601297623282825*^9, 3.601297623691505*^9}, {3.6015599058363*^9, 
   3.6015599096616507`*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$873 = MousePosition["Graphics"]; 
     Private`p$873 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$873], 2], 
          Union[
           Partition[Private`pt$873, 2]]}, 1]]; 
     If[Private`s$873 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$873}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$873}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$873 = {}; 
     Private`s$873 = Private`s$873 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600020789808509*^9, 3.600020856659668*^9, 3.600021064090733*^9, 
   3.600021134472349*^9, 3.600025702389955*^9, 3.600026032842807*^9, 
   3.600026264079362*^9, 3.600026352841942*^9, 3.6000264126599073`*^9, 
   3.6000266007209597`*^9, 3.600027976298297*^9, 3.600028028405682*^9, 
   3.600176728446885*^9, 3.600181734032493*^9, {3.6001820217877293`*^9, 
   3.6001820304202747`*^9}, 3.600183345188478*^9, 3.600193136661227*^9, 
   3.60019316869851*^9, {3.600193335742634*^9, 3.600193344481193*^9}, 
   3.600438694419705*^9, {3.600439402461076*^9, 3.6004394069642553`*^9}, 
   3.600439466620039*^9, {3.60044152359057*^9, 3.600441528715617*^9}, 
   3.600450816131914*^9, 3.600451015125469*^9, {3.6005233399931498`*^9, 
   3.6005233509012213`*^9}, {3.600523680628913*^9, 3.600523704957892*^9}, 
   3.600524451211219*^9, 3.6005249111054897`*^9, 3.600524941735911*^9, {
   3.6005251156066513`*^9, 3.6005251187154427`*^9}, 3.600525168965639*^9, 
   3.600525292059767*^9, {3.600525322085216*^9, 3.600525330520967*^9}, 
   3.600526153903242*^9, 3.600526235268276*^9, 3.600526277068296*^9, {
   3.600526507556377*^9, 3.6005265656547403`*^9}, 3.600527230231511*^9, 
   3.600527878259603*^9, 3.60052839679093*^9, 3.600528963692533*^9, 
   3.60054517201192*^9, 3.6005464231918573`*^9, 3.600547776709139*^9, 
   3.600602781421591*^9, 3.600603522757304*^9, 3.600603576649341*^9, 
   3.600603945564912*^9, 3.6006129983382263`*^9, 3.6006138118956957`*^9, 
   3.6006326440948353`*^9, {3.600671117185631*^9, 3.600671117554494*^9}, {
   3.600671642124771*^9, 3.600671642372834*^9}, {3.600671803610708*^9, 
   3.600671803934524*^9}, 3.600671901390617*^9, 3.600672265372055*^9, {
   3.600672525750431*^9, 3.600672526281946*^9}, 3.601206370211595*^9, 
   3.601209436802705*^9, 3.6012114669108763`*^9, {3.6012122645074587`*^9, 
   3.601212290623011*^9}, 3.601212668051188*^9, 3.601213356298387*^9, 
   3.601214040242144*^9, 3.6012146080914593`*^9, 3.601218004364975*^9, {
   3.601286272870986*^9, 3.601286273244032*^9}, 3.60128646017093*^9, {
   3.601295889847659*^9, 3.6012958903741693`*^9}, 3.60129593000884*^9, 
   3.601295972447404*^9, 3.601296089913126*^9, {3.601296909696188*^9, 
   3.601296910072357*^9}, {3.601297170354568*^9, 3.6012971707230797`*^9}, 
   3.601297661914198*^9, 3.601298894516284*^9, {3.6012989470897703`*^9, 
   3.601298947392427*^9}, 3.601301317888859*^9, {3.6013046934166737`*^9, 
   3.601304694792658*^9}, {3.601372884991866*^9, 3.601372909370584*^9}, {
   3.601375277091938*^9, 3.601375277422819*^9}, 3.601375321553116*^9, {
   3.601559771686858*^9, 3.6015597721311703`*^9}, 3.601559873485691*^9, 
   3.601559911233698*^9, 3.601559949586494*^9, 3.601560118698316*^9, 
   3.601562166296884*^9, {3.601563111904537*^9, 3.601563112365608*^9}, {
   3.601571644995494*^9, 3.601571645289775*^9}, {3.60157248923569*^9, 
   3.601572489691409*^9}, {3.6015726916095533`*^9, 3.60157270745105*^9}, {
   3.6016261561211157`*^9, 3.601626156488168*^9}, 3.601626313809525*^9, {
   3.602856855577692*^9, 3.602856855902801*^9}, {3.602859724447907*^9, 
   3.602859724787682*^9}, 3.607430517746237*^9, {3.6074324482242804`*^9, 
   3.6074324485746603`*^9}, {3.6375647250204363`*^9, 3.637564725294656*^9}, {
   3.6375655257112837`*^9, 3.637565526049217*^9}, {3.637565654608366*^9, 
   3.637565654942616*^9}, 3.637565699808429*^9, 3.637565819224247*^9, {
   3.637566042031205*^9, 3.637566042379583*^9}, {3.637573360944421*^9, 
   3.637573361280225*^9}, {3.637573767281982*^9, 3.6375737928044043`*^9}, 
   3.63757430800124*^9, {3.637574367287339*^9, 3.637574381441729*^9}, 
   3.6375818994135513`*^9, 3.637582140732675*^9, 3.637582201391613*^9, 
   3.637583464094264*^9, {3.6375855254372063`*^9, 3.637585530625801*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nThe 2D coordinates and associated lables of the drawn points are then \
obtained by calling the function ",
 StyleBox["{fTr,yTr,fTe,yTe}=getTrTeData[trPerc]", "Code"],
 ", which also randomly split the data into a training and a testing set, \
with a specific percentage used for training.\nIn the following we will use a \
30/70% training/testing split.\nFinally, the classification algorithm can be \
run on the selected dataset by using the command ",
 StyleBox["runMaxMarginExperiment[fTr,yTr,fTe,yTe,trainMaxMargin]", "Code"],
 " . This command will produce a plot reporting, in the title, the training \
error, the testing error and the achieved minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "s"], "(", "h", ")"}], TraditionalForm]]],
 " (the Euclidean distance of the closest point to the separation surface). \
The training points are represented with a large marker, while the testing \
points are represented by a small marker.\n"
}], "Text",
 CellChangeTimes->{{3.6005234829998817`*^9, 3.600523504323905*^9}, {
  3.6005235434255257`*^9, 3.600523553821986*^9}, {3.600523605337965*^9, 
  3.600523633003153*^9}, {3.60052421959686*^9, 3.6005242417990026`*^9}, {
  3.600525621685663*^9, 3.600525630796471*^9}, {3.600671934415372*^9, 
  3.600671937229444*^9}, {3.600676780381122*^9, 3.600676808730955*^9}, {
  3.600676840736334*^9, 3.60067691149102*^9}, {3.601286538518358*^9, 
  3.6012865418126507`*^9}, {3.6012871286472797`*^9, 3.601287158922804*^9}, {
  3.601373587673876*^9, 3.60137400323562*^9}, {3.6013741141416483`*^9, 
  3.601374143172521*^9}, {3.601374336687283*^9, 3.6013743372265387`*^9}, {
  3.6013860440825567`*^9, 3.601386046101164*^9}, {3.601588105156858*^9, 
  3.601588126085878*^9}, {3.602856877459526*^9, 3.602856922171908*^9}, {
  3.607432471489798*^9, 3.60743248038743*^9}, {3.607432616632223*^9, 
  3.607432616925638*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"results", "=", 
  RowBox[{"runMaxMarginExperiment", "[", 
   RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainMaxMargin"}],
    "]"}]}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, 3.6006004425513983`*^9, {3.600603595693391*^9, 
   3.6006035959711657`*^9}, {3.600671920796858*^9, 3.600671925004285*^9}, {
   3.601286465650691*^9, 3.601286520255199*^9}, {3.601296113882533*^9, 
   3.6012961143798037`*^9}, {3.6012971986150007`*^9, 
   3.6012972506912613`*^9}, {3.60285717644379*^9, 3.60285717809779*^9}, {
   3.637574841944762*^9, 3.63757484577633*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxllGtIk1EYx1/MRFMibJJ9qCzmNbyUJIjYSdNcYUIjStcitVKkbFmDMpGc
UXhLM22SSWoNMq2gMGapO+kwolQ2mraG0znnpTlrmrKc0O3D//3w+mG8/Djn
95zn+Z/DtmdKhGddGIY59e/3/+spKnza5GOnFwZ1pYL8ASoP9vJOyNWwzPgY
Zc6CMQK21OYlpnz9yTL8R3f8JkJdBwl8MHwwfDB8W8FaXk76FOuD4YPhg+Hr
c5qPTzQusD4YPhg++OIZ5sV8hIUWHbga3CbOYOuB+YaZyeSOWTIYqBjfpJlj
metz88H+/RWFRZvDrPToXJhxKLKbrjCR4rcGOzGpohUOtZ09D+vwsQ4f9eHj
fN1w89j5LSrC7ReM/nhNAxXScSO7H4x19Iu84GM/7gv1ue+FW497P6gv6jOP
tMo+k66891VNB1UkJt9NWZM9Qlf8o55Xt5iJ8NW5jf6dkwR59GYntWs/vaS7
F8NoX94wm4dRq7u2z9fK7kc/6BeM81AP84HRL/JEfeQPH3lgnfseMD/qg+Gj
f/QHH/mBkQfmw37kiTyQFxj74aN/zAfGeZgHPvLAeWDMh/tH3pgHPu4TjPpd
CYKsSWMf65c7lA/ahCOr3ofRKy2t3WWBVMcteggidGSN+NaxuBVKlH5ZS4GO
YVruiK0dSLWQoOXKE3+i5NRTvZ7uSdUTW0upU5I4RatvLwqKbtqIMPyuoadq
dNX7LcvtVMjkWnb+ni/5lx6PjpOgoZqZjtM9q96v6tc9b7cFK3FXywtT0g1k
qaSxv0HaSkRvNK6M2UJ4IXWBIa/fUf5WRibw/ca+N+Sjt+66kpykpjsMHz34
zlHSUHy9LHw+i31/AZX1ksvuxXS6nq/kRVjYvKOWpM6TrbP0kO2J1nbYTva6
1GR0L09T7v9JrIciU1nwg/w+EsPT9/cSt9DUdTd2aohC/NApM5loZfz97wGS
GSLYsG22TvSBljwzR0vjTeQvIZksWg==
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{88, 34, 87}, {56, 11, 15}, {42, 36, 30}, {53, 8, 12}, {
          24, 20, 19}, {12, 19, 11}, {58, 57, 33}, {57, 56, 14}, {57, 61, 
          56}, {54, 53, 11}, {61, 57, 10}, {59, 61, 10}, {59, 60, 32}, {57, 
          62, 33}, {55, 54, 32}, {56, 59, 11}, {24, 26, 16}, {26, 24, 22}, {
          28, 24, 16}, {34, 30, 7}, {30, 4, 8}, {59, 32, 11}, {79, 32, 76}, {
          87, 34, 78}, {63, 62, 49}, {82, 33, 77}, {19, 20, 15}, {24, 28, 
          20}, {19, 15, 11}, {67, 30, 8}, {92, 50, 90}, {22, 24, 19}, {49, 62,
           14}, {60, 59, 10}, {50, 63, 49}, {75, 10, 72}, {74, 7, 71}, {80, 
          10, 75}, {14, 56, 15}, {86, 42, 84}, {50, 49, 13}, {62, 63, 33}, {
          63, 50, 33}, {78, 34, 83}, {68, 67, 53}, {11, 53, 12}, {32, 54, 
          11}, {68, 54, 7}, {54, 55, 7}, {61, 59, 56}, {34, 42, 30}, {76, 32, 
          81}, {77, 33, 91}, {54, 68, 53}, {84, 42, 89}, {30, 67, 7}, {67, 68,
           7}, {22, 19, 12}, {57, 58, 10}, {62, 57, 14}, {30, 36, 4}, {53, 67,
           8}}], PolygonBox[{{91, 33, 50, 92}, {94, 58, 33, 82}, {71, 7, 55, 
          93}, {89, 42, 34, 88}, {83, 34, 7, 74}, {81, 32, 60, 95}, {90, 50, 
          13, 73}, {72, 10, 58, 94}, {85, 36, 42, 86}, {95, 60, 10, 80}, {93, 
          55, 32, 79}}]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{69, 70, 29}, {94, 38, 72}, {31, 38, 9}, {44, 39, 9}, {
          40, 35, 29}, {37, 41, 31}, {66, 65, 46}, {43, 37, 6}, {51, 40, 
          29}, {48, 47, 3}, {93, 35, 71}, {6, 31, 5}, {41, 38, 31}, {66, 47, 
          29}, {47, 46, 3}, {23, 21, 17}, {31, 9, 5}, {65, 64, 2}, {47, 51, 
          29}, {92, 52, 91}, {18, 23, 17}, {23, 25, 1}, {95, 37, 81}, {23, 27,
           21}, {17, 21, 2}, {70, 69, 64}, {27, 23, 1}, {18, 17, 5}, {25, 23, 
          18}, {5, 17, 6}, {44, 52, 39}, {86, 45, 85}, {35, 43, 6}, {88, 48, 
          89}, {37, 31, 6}, {38, 44, 9}, {73, 39, 90}, {79, 35, 93}, {64, 69, 
          6}, {65, 66, 29}, {47, 66, 46}, {35, 69, 29}, {82, 38, 94}, {65, 70,
           64}, {70, 65, 29}, {46, 65, 2}, {69, 35, 6}, {17, 64, 6}, {80, 37, 
          95}, {74, 40, 83}, {64, 17, 2}}], 
         PolygonBox[{{78, 51, 47, 87}, {87, 47, 48, 88}, {75, 41, 37, 80}, {
          89, 48, 3, 84}, {90, 39, 52, 92}, {71, 35, 40, 74}, {81, 37, 43, 
          76}, {76, 43, 35, 79}, {91, 52, 44, 77}, {83, 40, 51, 78}, {77, 44, 
          38, 82}, {72, 38, 41, 75}, {84, 3, 45, 86}}]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
         LineBox[{73, 90, 92, 91, 77, 82, 94, 72, 75, 80, 95, 81, 76, 79, 93, 
          71, 74, 83, 78, 87, 88, 89, 84, 86, 85}]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], CompressedData["
1:eJxFkXlQzHEYxhOjTDbHODZllEy2UFmbJhNPw0iMohxFKWKNqFaOrHO2Y5bS
mHV314YwrmSmQny3stlY6TBs0Vba9l5+keT2WzOt78zzx2feeb/v8z6vSywv
jDvcysqKQ2sYLWtaU96FFNaYmklMkPONzUIKMveezHy2nIR3nXDou2mEtpw6
6mnXQH4kNYYZnUyQL4utOzJDRoQjHHgulBEB4x3VrnefkuHtXFXkAIVzSUtD
HMLrycAj60yOt8HCUefWvr+W8wFN3O4fUZOekMGLOxJFbkawpHbbwqprSXSk
qYptR1n4YUV7EncShc33r467cFhCxj76VfpdbrBwuse9TOk3A0T57Nsyd0Ls
RrGVi7t0KFtC2hb0VxJFnDi8p+gT+Akl2964VZAFc2rn7XXVQ1BqU7Pj0DXS
lZ0Q+izDgICFtoGtaSLiPUO0znsJBYFLQSWzJYOwqgfrJHFGC5+KL7M63UDX
/wWUSrgFQonhoBaC9N7CwIhCqFb6TUlNNkHwdJo9/+d19PfkX1H46SEp8E97
23ADuauC6ryK6Xlme3n3MXLd9oknP2vQ9FrcGT/1MYbyrZp9pOh5bQ2yzqxw
8mn9CMo6Z4KXqA6jvOTf1Dotsi8l3vTTPwGnSCSMCdCA9XB+aPmuBpxQHltz
VG1CU+RoXbX0mWW+tj6X7ngOWc4ezgiTHrZs92jns3KE8PuOp7RqUdby+4uH
6QWG8nDav/VFqG8zBMmaGgZDD6bsMj9l5RvcyT0wedHq/+xvw2K+dDCAM8/8
FLBN38kOdlRAYl7vVjv0awNLvtI+h9ix+HxcziU1+p2ZwWNSlSifyA9KCO7G
2CzzQToxGF3w2sa3G2c25bHafFTIYKTthr0SAx6mmDthKujFRV6Mnb2olooa
I7NUmCWNlSqPd2Cf2e76XvBKqwo9N74HXR2t81ej+PJtxYOzPYiI+3PofLLa
8h8dXn2uqwaJnOm8qYffIbAjYu8rhg6Vg8s8NVtaUcVsOXhSrAerfO7y7+Jm
bDc08SoaKdj7tqVERUtAk/2v0j5sKJuZJnzbgr95k7Rm
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGBQAWJGIGYC4iqBnmXsju/2r59VLm4X8Mr+2IRz0TyZL/c3
lD0/yMv7yj7pcI2Kmc/L/XVzGu9uFHsJ5x/bzxOw4ttLe4Gmi18UZjzbfz9+
0U7HWQ/sPZ7rtpXEPdv/Qf/iHQXfF/YKfBV/HjI82V9q8srbyfap/aQbBvKd
vY/3R0V3eimsegznL4moWljU8NSeZfFLRwOpx/v1K/X6ppXct194dTpX1N9H
+yMaldOObH5k78O6dl9IwKP9P+LmXmM3f2h/56Txjrl7HuwvbJBr7gp4bC+q
P8HzY9OD/a2nfa/PYHhkP2+7xKXK7nv708503V278Ib9vvOpD3/H3Nz/r8oi
hMv6nv0Pk0NF/so398emfPa2O3HF3m/Km1suJ6/vf7uK01C745p9Bxhc3b+0
vW6fyYqr9ofePpG843d1/3/pywvuOl6xN9kx16b59pX9Fw34Hpu+u2e/QnBa
tVTipf1qgtP/qM2+bf/mQv42vr9H9pucm7JYMeO6vcKHH4cZ+3fvd7ePE76i
eNWeod7iwcf2yfZVs2Pan6w6Zj+BoTWLM2CPPcOFn0eklF32J5wNNL8mc9g+
wPZh7x+tCfY7+P6mvb5w1P7GbuVbG7eu3X+hsltx7vZj9gxnRJbO2dNl/wHk
vHnH7QvMe9Sfz5+z/0I0z8s9R0/Z3/jtbWLusdgeGBsNx+XP2Oedu9LpUXl2
/wnb3g13Lp+D62fguiq0IOCC/Yq4E29+NC3a3wM0XeLSFfsGtwrN1TGJ9n9i
xIBBeM1+wsb20juWU/YDACcKNQE=
       "]]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[2], PointBox[CompressedData["
1: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
ztWDf/qrYgJmvobznh+3gXLvzoFpmv8PlUsYFQ==
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxllHdU01cUxyPaOqiKgBEZFqQOEAFlW/SiRVFWwQUIIlFEBA5DxFJBG5YM
C1WJFa2ilCHiqIgMZTwSRkKQERJCEJCQkEjYykaE5qeHX//o75x3fudz3j3v
3ft933s1TgYcPC1DIBA8pQv7yx679OjB6mEUrZ2XUDXVB8eJZQ2nSUOIGcxT
8hD2weDZaFFqdR9yOOjk11EjgYBtGSPEil48XttdPVkQI8H358a0B07oSVCl
KMvXliCBe4VKTb/KvkfrdenEp1cksKO3+k76oBjFZuYVj44LcD7zS3+GVaAE
RGvb7VN3ixGFSiSqlvZApG3CGsYPYmQRufnALFEA1w58kLlNESHxANvryCUh
RLfVGBSpdSPW3xnyVnXdOOv3VZY+PCSCEouNVbLdQpQhFgaR0jrBJZiTaEQX
ok1RW3VML3bBDZ7+9/GJQhREXheV4CAEXdnO9y8Chfj585xkIPJe8lYEac23
lh37LEAKprMtWkwB2H7ztOywgwAFZBWl6h4TQI+Ja+xlAwGSc08ZqWN3QYzP
UodsogBlbefH1F8Qg6uMYs6G8i6001jH6PruNpynTRcWn9oqwHmLydTokJcQ
0j1bNlqP8/F82qXl3SvhozH5NNod0lsIneki0+/zUW/afb3lPiLA5PTX4SPn
CE2vyjwBxE7t90tZyUdr+msedBV0w8fYhet+M+1EPXQzm9zgbpCLZI2qK73D
8xkl/rQjYFsHehO+R/nygg7w6vrkRixrR5WKj+NWbG6F8czIoye029CSaJ/t
diq8r/U3tqJPZxbzNhxpgklD2rmfNVtRItXebGK6E3zmLt4c/4eH/A3XB6iF
tX/N35yHmGdXpd5WYYGiHvaiPLT+eK1BwLNW8Et6nSvO5qLz+8aDXArrwUFT
Z8KQ1ozfF/fla0by1stmLSzfAG2gW+qY/7NbhfOcD/UdGEpvi2rjIMN6SrqG
dwv4q03XcdM46Hx8XHS2PweU7FZKFWAjmxGt9qsrWsDYqsM5mNOE9ly9Ya1q
xAZlqR2pAyyUxn4xFl7Mht+zFlO9L7JQMjHfPnKwBXIeYIZoRAzGBcdqxTZ4
IlWj16YWJZ2UxDAXcEE9fvnIdR4The48bOfhygULeRWxZi4dPfrROraf0gKU
oL32a52q0eQqywMfC8thiflsYLmwCnlu59Ei0wtBfXiyYsEfxShLdGWyaKIK
CF8M9RpdK/+A7B2roQfrF+orZAXuChyNZnDG/GORj1yeb4q60tYEfM1c0i75
dBR6ZsIx6VkGzqquEbEc7ksg/BmmTHp1CzHpa3lqvlQga2AdG4/HkxlawoS7
kUiOmMnotcoBAt9PquAF5K5BMhuSawCC23eSkioPPJ5ghAl4HghvFDPvliQA
eQQzVAQU5eerpOTUAd+y5pkdJQOcQ96qxHGLgR/sMrnr1lPol3MiEhLywQK1
7hj96xUe38hN6/RTK4PyoOSCU9qpMLxb/866RQhm+DFmnealUKQTfr+WRoVu
g7002kgZ8qhzNOGqVgA/KYu7kNYIKen+T8x6K4Hfl7TIpfImznmW4af1Qliw
uTU//sbxKjzfeS6v1sncsrMAhjE7pdJhXu+UmCFpxoz/4ouNHV/41gBZd+yq
qb8vej58SToyaqBw0kr3PYkN2PjxPMgE3icbQ5P96dDoiunFBO+cqZzkrmxw
vn6oerVZLTB22Seahz2EHqx/n9QCJVzG0Gm4ANS/DNA6IHz78vOcRSKa5yZW
tt7SMQ44Y/PMqgHm35ORERphm9AI5H2hWo/dSKAackqqCAtm6g6XTh/NBUKY
tB2dmnA95lm/xZihXNkAgQUrPnv1seHIjOvr+sFGMJVWp7CBA+SOcwF0hd+A
/wEbIM1wLTc2pN2Mgv4F4KBS3w==
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.64% Marg=0.0919\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.0052801724137932`, 
   1.2405531609195402`}, {-0.23026377420466154`, 1.164035169893955}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.600525281598768*^9, 3.6005253136889677`*^9}, {
   3.6005253478571663`*^9, 3.600525371143449*^9}, 3.600525473291607*^9, {
   3.600525698422022*^9, 3.6005258048029137`*^9}, 3.6005259032103653`*^9, {
   3.6005261610614653`*^9, 3.600526281106331*^9}, 3.600526573182786*^9, 
   3.600526777281084*^9, {3.6005272235439568`*^9, 3.600527240872759*^9}, 
   3.600528404990016*^9, 3.600528509066758*^9, 3.6005289681701803`*^9, 
   3.600529089956275*^9, 3.600545179203183*^9, 3.600599486802042*^9, {
   3.600600439179556*^9, 3.600600443029963*^9}, {3.600603585410226*^9, 
   3.600603596615411*^9}, 3.600671168649715*^9, {3.600671657502849*^9, 
   3.6006716662418337`*^9}, 3.600671813286641*^9, {3.6006718972369537`*^9, 
   3.600671925372246*^9}, 3.600672554362094*^9, 3.6012141439917803`*^9, 
   3.601214215409931*^9, {3.601286475085067*^9, 3.601286520742255*^9}, {
   3.601295996336068*^9, 3.601296015130075*^9}, 3.601296095374415*^9, {
   3.601297208860219*^9, 3.601297219178059*^9}, 3.601298964909574*^9, 
   3.601301325744738*^9, 3.601304700631179*^9, 3.601372920719833*^9, 
   3.601375313063343*^9, 3.601375344736702*^9, 3.601559816717133*^9, {
   3.601559851094203*^9, 3.60155986282467*^9}, 3.601559893370398*^9, 
   3.60155996690933*^9, 3.601560101652937*^9, 3.601560139156393*^9, 
   3.601560664405232*^9, 3.601563125004244*^9, 3.60157166248385*^9, 
   3.6015725047098017`*^9, 3.601572725661755*^9, 3.601626190133806*^9, 
   3.6016262228601522`*^9, {3.6016262668611517`*^9, 3.601626330040524*^9}, 
   3.6028569435795317`*^9, 3.602857179012652*^9, 3.6028573805641193`*^9, {
   3.60285974033444*^9, 3.602859782181679*^9}, 3.60286008254284*^9, 
   3.607432691675115*^9, 3.6375648212489023`*^9, 3.6375649416831427`*^9, 
   3.637565535374145*^9, 3.637565667239622*^9, 3.63756572103988*^9, 
   3.637565860554153*^9, 3.6375660638111267`*^9, 3.637573403188794*^9, {
   3.637573822994574*^9, 3.637573972374054*^9}, {3.6375743232779303`*^9, 
   3.637574364556185*^9}, 3.637574402084166*^9, {3.637574848704534*^9, 
   3.637574858207715*^9}, 3.6375753120064096`*^9, 3.6375820359715137`*^9, 
   3.637582314386149*^9, 3.637583530043165*^9, 3.6375855989602222`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it can be seen, if the training data is linearly separable (if there \
exists an hyperplane separating the two classes), the max-margin classifier \
will always return the hyperplane maximizing the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "s"], "(", "h", ")"}], TraditionalForm]]],
 " between the two classes.\nUnfortunately, if the training data is not \
linearly separable this learning algorithm will fail to find a feasible \
solution (try drawing a non-linearly separable dataset for a direct proof). \
Moreover, while margin-maximization is a desirable property for \
generalization, when the training and the testing datasets do not exactly \
follow the same distribution (which is often the case due to noise, or too \
small training sets), exact margin maximization can result in poor testing \
performances. A way to address these problems is represented by the so-called \
\[OpenCurlyDoubleQuote]soft-margin\[CloseCurlyDoubleQuote] classifiers, \
introduced in the following Subsection.\n"
}], "Text",
 CellChangeTimes->{{3.601374016160015*^9, 3.601374108453491*^9}, {
   3.6013741701092167`*^9, 3.601374185867347*^9}, {3.601374300517311*^9, 
   3.6013743112997437`*^9}, {3.601374349818544*^9, 3.60137435164546*^9}, {
   3.6013754753413553`*^9, 3.6013758242855387`*^9}, 3.601386048099481*^9, 
   3.601558698679441*^9, {3.601588174036932*^9, 3.601588259533139*^9}, {
   3.607432723483946*^9, 3.6074328364540586`*^9}, {3.6375742776000977`*^9, 
   3.637574280398279*^9}, {3.637574436133092*^9, 3.637574476278235*^9}, {
   3.6375745098118353`*^9, 3.6375745166992073`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: soft margin", "Subsection",
 CellChangeTimes->{{3.6000689928004103`*^9, 3.6000690070043983`*^9}, {
  3.600511161175296*^9, 3.600511163195389*^9}}],

Cell[TextData[{
 "The formulation introduced above is designed for linearly separable \
problems. However, it often happens that a dataset does not satisfy this \
condition, or it is difficult to know in advance whether it holds or not. In \
case the problem does not turn out to be linearly separable, the max-margin \
learning algorithm will fail to find a solution satisfying the constraints, \
leaving us without a solution.\nIn order to addess this problem, soft-margin \
classifiers have been designed ",
 ButtonBox[Cell["[1]", "Citation"],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 " to allow the algorithm to violate the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", by an amount ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " (called ",
 StyleBox["slack variable",
  FontSlant->"Italic"],
 ") as little as possible.\nIn this case, the optimization problem can be \
written as:"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.6000690359654818`*^9, 3.600069616392734*^9}, {
   3.6000698086840277`*^9, 3.600069819840662*^9}, 3.6000698520984077`*^9, {
   3.600069946376136*^9, 3.6000699712854137`*^9}, {3.6000701256232224`*^9, 
   3.60007014793779*^9}, {3.600071495706664*^9, 3.60007150754605*^9}, 
   3.6006769472261*^9, {3.60158827235858*^9, 3.601588326002502*^9}, {
   3.607432874239674*^9, 3.60743288050905*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b", ",", 
     StyleBox["\[Xi]",
      FontWeight->"Bold"]}]], " ", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{"C", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Xi]", "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    SubscriptBox["\[Xi]", "i"], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n", ",", 
  "\[IndentingNewLine]", "          ", 
  RowBox[{
   SubscriptBox["\[Xi]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                      ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, {3.600069619878358*^9, 3.6000696976499662`*^9}, {
   3.6000698340070744`*^9, 3.600069843688924*^9}, {3.6000703147873783`*^9, 
   3.600070318851357*^9}, 3.600070748774111*^9, {3.6004338335707273`*^9, 
   3.600433892615193*^9}, {3.6005188532159567`*^9, 3.6005188733822203`*^9}},
 CellTags->"eq:1norm_svm"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " tunes the importance of the slack variable minimization, w.r.t. the margin \
maximization. A big value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will push the optimization algorithm to find a hyperplane on which all the \
points are correctly classified with margin 1, while lower value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will allow the learning algorithm to commit margin - or decision - \
mistakes on some samples, without heavily affecting the decision boundary.\n\n\
In this case the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "S"], "(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}], TraditionalForm]]],
 " of the optimal classifier cannot be computed simply as ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 ", since there is no guarantee anymore that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    " ", "1"}], TraditionalForm]]],
 ". Nonetheless for all the points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "<", "1"}], 
   TraditionalForm]]],
 " we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", while for the others we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 ". Therefore, the minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["max", "i"], 
        SubscriptBox["\[Xi]", "i"]}]}], ")"}]}]}], TraditionalForm]]],
 ". For linearly separable datasets and with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[Rule]", "\[Infinity]"}], TraditionalForm]]],
 ", we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["max", "i"], 
     SubscriptBox["\[Xi]", "i"]}], "=", "0"}], TraditionalForm]]],
 " and the margin obtained with this approach will correspond to the one \
obtained by the max-margin classifier. On the other hand, on non linearly \
separable datasets, we might have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], ">", "1"}], TraditionalForm]]],
 ", resulting in negative geometric margins. In this case the geometric \
margin behaves as a signed Euclidean distance, with a negative sign meaning \
that the problem is not separable.\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529771801248*^9, 3.6005297753873158`*^9}, {3.600544039843444*^9, 
   3.600544087555781*^9}, {3.6006769921215057`*^9, 3.600677024230349*^9}, 
   3.6015586958593483`*^9, {3.60162113767901*^9, 3.601621155282135*^9}, {
   3.601621185743477*^9, 3.601621278323886*^9}, {3.601621321146552*^9, 
   3.6016213355989933`*^9}, {3.601621427863902*^9, 3.6016216153973618`*^9}, {
   3.601621664497609*^9, 3.601621699926613*^9}, {3.601621776837029*^9, 
   3.601622163930435*^9}, {3.60162220858821*^9, 3.601622236455072*^9}, {
   3.601622299066782*^9, 3.601622393699473*^9}, 3.601626091685643*^9, {
   3.602857085844995*^9, 3.602857088063904*^9}, {3.607432973261351*^9, 
   3.607433063362577*^9}, 3.60743395766329*^9, 3.637574559415341*^9, 
   3.63757460024273*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433046905921*^9, 3.607433060149661*^9}}],

Cell[TextData[{
 "Even if at a first glance the optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 ") does not look very friendly, it can be shown to still be a QP program. It \
can thus be again directly solved using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver, as shown by the following code snippet:\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529771801248*^9, 3.6005297753873158`*^9}, {3.600544039843444*^9, 
   3.600544087555781*^9}, {3.6006769921215057`*^9, 3.600677024230349*^9}, 
   3.6015586958593483`*^9, {3.60162113767901*^9, 3.601621155282135*^9}, {
   3.601621185743477*^9, 3.601621278323886*^9}, {3.601621321146552*^9, 
   3.6016213355989933`*^9}, {3.601621427863902*^9, 3.6016216153973618`*^9}, {
   3.601621664497609*^9, 3.601621699926613*^9}, {3.601621776837029*^9, 
   3.601622163930435*^9}, {3.60162220858821*^9, 3.601622236455072*^9}, {
   3.601622299066782*^9, 3.601622393699473*^9}, 3.601626091685643*^9, {
   3.602857085844995*^9, 3.602857088063904*^9}, {3.607432973261351*^9, 
   3.60743303565504*^9}, {3.6375747573619413`*^9, 3.637574760010569*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainSoftMargin", "[", 
    RowBox[{"fTr_List", ",", "yTr_List", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "nTr", ",", "fTr2", ",", 
       "d", ",", "w", ",", "v", ",", "b", ",", "xi", ",", "x", ",", "i", ",", 
       "sol", ",", "obj", ",", "cnstr"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"xi", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"x", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"cnstr", "=", 
       RowBox[{
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "<=", "0"}], "&"}], "/@", 
           RowBox[{"Flatten", "@", 
            RowBox[{"(", 
             RowBox[{"1", "-", "xi", "-", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"fTr", ".", "w"}], "+", "b"}], ")"}], "yTr"}]}], 
             ")"}]}]}], ")"}]}], " ", "&&", "\n", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", ">=", "0"}], "&"}], "/@", 
           RowBox[{"Flatten", "@", "xi"}]}], ")"}]}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{"w", ".", "w"}], "+", 
        RowBox[{"regC", " ", 
         RowBox[{"Total", "[", "xi", "]"}]}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "cnstr"}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}], ",", "xi"}], "]"}], ",", " ", 
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}]}],
         "]"}]}], ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b", ",", "xi"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"sol", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"Max", "[", 
           RowBox[{"model", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ")"}], "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"model", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600529613144619*^9, 3.60052963238398*^9}, {
  3.600603885117957*^9, 3.600603886505888*^9}, {3.601374403830535*^9, 
  3.601374430109478*^9}, {3.601573493622208*^9, 3.601573493847793*^9}, {
  3.6015883741683693`*^9, 3.601588380449217*^9}}],

Cell[TextData[{
 "\nAs before, we report here an example of usage, where ",
 StyleBox["createData[]", "Code"],
 " is called in order to draw a dataset and  ",
 StyleBox["{fTr,yTr,fTe,yTe}=getTrTeData[trPerc]", "Code"],
 " is used to obtain the coordinates of the training and the testing points, \
using a 30%/70% training/testing split.\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529678813099*^9, 3.600529764249748*^9}, {3.600544095482354*^9, 
   3.600544177035437*^9}, {3.6006719488475933`*^9, 3.6006719512135572`*^9}, {
   3.6013744660606613`*^9, 3.6013745296506243`*^9}, {3.601374565839364*^9, 
   3.601374849821602*^9}, {3.6013748857814693`*^9, 3.601374950895156*^9}, {
   3.601386057433106*^9, 3.601386058982265*^9}, 3.6015586941993*^9, 
   3.637576734611086*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601207826661016*^9, 3.6012078322261257`*^9}, {
  3.6012096925331287`*^9, 3.6012096929102297`*^9}, {3.6012976309206133`*^9, 
  3.601297631575138*^9}, {3.601297918675498*^9, 3.6012979195420094`*^9}, {
  3.6012979550010023`*^9, 3.601297955892606*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$665 = MousePosition["Graphics"]; 
     Private`p$665 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$665], 2], 
          Union[
           Partition[Private`pt$665, 2]]}, 1]]; 
     If[Private`s$665 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$665}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$665}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$665 = {}; 
     Private`s$665 = Private`s$665 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600529782509405*^9, {3.600529990283494*^9, 3.600530002186282*^9}, 
   3.600530090211268*^9, 3.600530210238405*^9, {3.600530256815338*^9, 
   3.600530286011044*^9}, 3.600530410375724*^9, 3.6005304763736343`*^9, 
   3.6005441825365047`*^9, 3.600545003679199*^9, 3.600545595081881*^9, 
   3.6005462589772253`*^9, 3.600602781576613*^9, 3.6006030832068377`*^9, 
   3.6006033180255737`*^9, 3.600603522890913*^9, {3.6006039456108847`*^9, 
   3.600603945809247*^9}, 3.600612998413377*^9, 3.600613811986126*^9, 
   3.6006326441470413`*^9, 3.600671117240415*^9, 3.600671642169813*^9, 
   3.6006718036689577`*^9, {3.600672265428256*^9, 3.600672275933691*^9}, 
   3.600672525805505*^9, {3.600672575455937*^9, 3.600672628747901*^9}, 
   3.600672677987822*^9, 3.600672730325946*^9, 3.60067293990129*^9, 
   3.600673032365019*^9, 3.600673142949374*^9, {3.60120637031126*^9, 
   3.6012063706503887`*^9}, 3.601207775277233*^9, 3.601207832529253*^9, 
   3.601207865996746*^9, 3.601208442423897*^9, 3.601208487025152*^9, {
   3.601208525644061*^9, 3.6012085352612534`*^9}, {3.601208774940124*^9, 
   3.60120878254042*^9}, 3.6012091167445087`*^9, {3.601209436890952*^9, 
   3.601209437447448*^9}, 3.601209693426746*^9, 3.601211466975379*^9, {
   3.601212264522111*^9, 3.601212290660997*^9}, 3.60121266810853*^9, 
   3.6012133563570623`*^9, 3.6012140403085938`*^9, 3.601214608162497*^9, 
   3.601218004410623*^9, 3.601286272904632*^9, 3.601295889896371*^9, 
   3.601296909732279*^9, 3.601297170396491*^9, {3.601297662001245*^9, 
   3.6012976623672943`*^9}, 3.601297956422258*^9, 3.601298894647387*^9, 
   3.601298947126103*^9, 3.601304693462337*^9, 3.601372885040307*^9, 
   3.6013752771477337`*^9, 3.6015597717449512`*^9, 3.601562166361266*^9, 
   3.601563111969944*^9, 3.601571645033457*^9, 3.601572489292029*^9, 
   3.601626156175782*^9, 3.6028568556284237`*^9, 3.602857141081953*^9, 
   3.602857220153934*^9, 3.60285972449185*^9, 3.60285988514993*^9, 
   3.602859990583866*^9, 3.6028600338423443`*^9, 3.607430517793701*^9, 
   3.607432448278328*^9, 3.637564725066325*^9, 3.637565525764845*^9, 
   3.637565654656723*^9, 3.637566042079208*^9, 3.6375733609909153`*^9, 
   3.637575000818576*^9, {3.637575033777073*^9, 3.637575055248712*^9}, 
   3.637575142158746*^9, {3.637581899470537*^9, 3.637581927595129*^9}, 
   3.6375819602768717`*^9, 3.637581994823217*^9, 3.6375821407731237`*^9, {
   3.637582201438532*^9, 3.63758220173599*^9}, {3.637583464142974*^9, 
   3.637583464430566*^9}, 3.637585525555756*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXmcVMW1/zAzvczCvgsIAoq4L4ArcQMSRUQTFXGJgto9PTvDLAwyArIH
V9QIj6eigsYormDcCK6ERUX2nveSl5c8owZBBaMBZYZf193m1u3vOVW3u8eX
3+/z+8NRb9etW/U9a1WdOmfMhOqiW8smVMduntDvp1UTKotiN0/uN6qiKvEo
p01WVvY1WVlt7uqXJf77cFaW/edwVmNjo/HnWvFHPPb9oIPxr86Jv9tW/35e
xeFoJPJO2R2vtdkSbxS/BBp3bdr89LSSw5FI7L6axe9lbW80nrdpjO/4+aZV
j3y4sKHqQGks9mnppNvmL1j6Ut7GHfGsqUafXdk2TN+5jfGPy9c89cCO2fWV
B0tiRXtKymuXz7zn8T6vfrAza3J6fbPv1bfiuKe2As45bhJ28dn1ros/fvXe
g9WxaHMkGv02WlLSHI2K/449XL3o9ezEu1OMbrvrNEWfSIx828K1S+ubSqKR
RNuiL0oqKg+UxaKJ4UX/Gpt8T4+XN8ezJqX3DZ33sup+hHnUtw4JsrUInBjh
9hEbXl995apVq05+7b2tWbsaG4ONOzdsXT61JNG2aHXlvBdCm3buvG7TCwt+
qIxGvomWNPT97aZdJoF76DRFnzhi14cvfD2zLNoUiZZOn7Zsbc7WXeLZK39+
sDom+lo2+b7ft9kab6w08U/1MzrvWTRu9alMaR1CWGQ25fnMbWsXHqosimQF
E9wSyco5GInVnPzQe9uNNrnG3wAcQND4Lb/nro9e3D+9VMyl4sJ5b2wVTzs2
bn3ji3kVgrfKrpixanNWvLGx2GieY3/O+FgAfDLbX7fmCPML4ts3/Gzta6tu
eOH5Ve3e22bozcQ/O2ave6TucHEk8qdYzeL897dbzOG3d93mta069imZI0ab
THLAiTveX3KgNhY5EInVnfBv63aIp/mN29//0+KamNBAC+qWvp+1wzcH6Hab
54xw5+3rl9ULxP5SVP1AwTvbG7Mq/XWV6695beYGqkFb3c9ItA3Fd24esGnD
+qzgwPXr12flDFi/YVPw451xXdoO3f72PT9URSPfRYrrBy1bv1M8DTfu+MOu
R6cUJz4aTWiqd4R1sWhrf874WAB8MttftxZBEvZsc9UrT/77w79e9MAlj726
qc3OeGOPXZtf/c+H6oqFXfx92axVOR/tsqXbZ++6zWtbdewaHKD7ZYsD2hn/
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
TAIKl2/XLz98ft6hiqLo5pJpy7q88/H2ttu3bfrDyzNKRfNfVz+4tmDz9h1t
4vFGmPeb3jTQXYjZOV/0djMy5cjdRKMO0l7I76K9WKTQC/l2jjo2d41FiYZ7
uBINyybf906LoRV57z/43XNzK5qKoqVVM57ckL1T0/AylYqVKrIXpiGzaCLL
dtxkPkOXrRd/WF/vtDsKvGsKVXBlfMKEJnfVxEN5eYs/nDq1Hd310s11dU43
Fxt/RZWQWVyVkPcrZhtVQkwdHa57+dmHvplWGv0uUjJl2v2/ffaPD08xSiWs
qZz/ZOQlq5lRLWQBGPoY85myLMhQ8K6q/sdNmozZEys2lJufOOvUDVoxz4+0
K3GYIxCO0K4JH6yce6i8qOjd8pmPbnqqodTN1rpcbZeS9qiMA8Fgs+Ben+UX
JvAKWBF1hcpC9Nakl6UgdEt7mBsDIaEgXls5tzyhIGIHS43aD/4Vg3k/M3jX
hAlfutKEO1p3mD8IJ2JuOoLHwVGUqDpuHx2zqFckxDq1PnLXppV75hgFQSKp
c53aayFunh3tD9LTMKR0NseAZN8arXqVRM68MY4SUJcQseATwnvrpmdmJ4Q3
HfiU/oAiot9njj7F3fCLaTglfWfDeSGG8wRTMtnqIeYgA4nF2aY3n5ldfrgo
BallMJTMuSJLvsOq6ACfAfMUTXk+H6OUw7/uqEWkDohQJjubEUHeUZkRbWeh
gS60IB72mR70FJILw16h9gJwFg9ADv8zMl6KLUjdtC8jNKEfy4u77m3hjCEu
yT17SKOLBJGW1Yq49S4juf2dE1m5Uq55LtIkCVHVSnd3J2NKJeDWCmy96KGa
CFg62Iu5a+9Vbn88Lwu6S3xd4G1P9EcxfczgJQyGaE5SA1up/XE83W3aslWO
dZWM7Z+2ikvGiJ804SHkhOF5nYZicF45nlZnblqy6mykJpY+8+yepTnrYTy3
oqToCkt1IglK2OvbeUn609bB4mx+wGdh/moHeiLcIeIESHF3yaGBbnKJs7E4
jfGHxjl4sJeCpoo1eDf+57Ga07J9KUL9noBn3dvfrH/VMuvl20pL/WZNI+Ji
L9ecopUcSbkw6Ibn2p5HyGdMzeV4LkN5agbxW7qX6Ir8IaV09bvwkOjeZO7p
D7qxPEZELmLdvNOKVYNumswMQI2KjGtuwKhJ18Mf5pdpoteXR6+QRC/oXexx
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
w8U7Wfjf9eWECV78UfYxbjgk/qYVDlPAiF8FuJYffOfEiV/qahtv+JTmSYm0
n3nBY4/JBwPXZlRFeUuKcQiSdyfN1UdSdXsjTYXZXnEtNtc9FEpPXYYVCHHq
SmRwsxkF3HXYV1hoUMKATyuUVtunlzY3cuU1gtHiGn9EVVj7o0iaS0C70hWj
Fbqyer0iWlTX/I/hoVaEk3UAomWqyQJBCSq2ijg1VqtR+nuyKI/zR1G2tJjf
TdBsTZlH9ZJQ5XrCP9F1uS/V1H66Aebm/mvSvmriHTuqPleQzB3/iLZxUcF7
pLzRujwEZP1qfxRXFNk7CWOu2NJoZ0HjeculuXF1+jz8HmkzL9XUf/5yDsBT
rYTB3St8Hzv4y6aNHYuMzvcU+SfR3mAIyLpPiuqWdB2KSdvOwsA4Vm8hrTgk
85QHxAXn82jWEImXfZIxpUB4hUh5IlZz3eIogvvRuSVxzRjty6Ibnz7VsG6Z
2ZEtpG72VEkV9Ytn7YnFyCRdTNaP734oKHDYJAVV6jteHhw5tQRD4XBWy7go
L2NYMcWZdn10y9zay014g5wqp/zAV9df7+k1IJol1fhh0udIfGLeDO6WUtke
s4/46VvfefbVh+ZO/WZSSWxfrLTqxWkLlg56cf12kU0aZf1Pz50yt37YG2tg
Vam+GGKGavIrG6IIwYUZ1cKOUxPgLWlP/mcrtOpVUFD6nq9cVeR1k7Gb1/FF
lGpKBX4Eo5y0/b3H9k0vFUmgI03RaOxQcZHx37ujlfOPXLlpF6wR4W9Rhe7P
hwG1XVvUnpP0sHfXDkcUkfx5gT9mUDhZQU2LTV/aNWqV1uyuqfEkgQOaJOfm
z+fM8TIGZQUcNjU1SI9U6gFl7WpszGnc9eE7L9xRLpKr/2dx3YN9Vn2ws1N8
y5qd/15v9LW0+n6jcAUqGoMuh1n7sijSLktxnUWxTa6bs+Q8fxzA12xWKvCu
oB3aAHTFlyc5BAkHziFnR5ohhZNmBm9olwQyJTq/a3zzK1/dUS6kvSTS8Mwm
8VPil531Gx6vP1wciWwpue3J4MadkMh29gV8zqFz+wLdkdHd8BpGfkb2An/i
j+ioXjXSuoi6ISD/1vmYl4lsV92SXimczfTm81GVc7TKsgivWyLIIrxduyPx
U9mYGa9stglfs355/eGSSGRbSf3y4HpMeDtpCXv4qPYg82nqK6k6lG4nORmp
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
zD4prZpm1y0wOznZ1aHx51rdB1lt/g+qqKaA\
\>"]]
}, Open  ]],

Cell[TextData[{
 "\nThis time, in order to use the soft-margin classifier with a \
regularization parameter ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", we will use the command  ",
 StyleBox["runMaxMarginExperiment[fTr,yTr,fTe,yTe,trainSoftMargin[#1, #2, \
C]&].", "Code"],
 " In this case the classifier funtion is created as an anonymous function \
with two parameters (corresponding to fTr and yTr - see the documentation -) \
while the third parameter, the regularization coefficient",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " is fixed. Finally, in order to show the behavoir of the algorithm when \
varying the regularization parameter, we will also make use of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function ",
 StyleBox["Manipulate", "Code"],
 " to dynamically adjust the plot while varying the parameter ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.601374954867086*^9, 3.6013751014899483`*^9}, {
   3.601375184833784*^9, 3.601375193858099*^9}, {3.601386061880291*^9, 
   3.601386063628708*^9}, 3.637576779599946*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainSoftMargin", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, {
   3.600600462988875*^9, 3.600600490747484*^9}, {3.6006006023090973`*^9, 
   3.600600617351081*^9}, 3.600603164788883*^9, 3.600603990447899*^9, {
   3.600604112686928*^9, 3.6006041143637753`*^9}, {3.600671965092746*^9, 
   3.600671965294054*^9}, {3.600672656770911*^9, 3.600672658595111*^9}, {
   3.601286614709449*^9, 3.601286623982645*^9}, {3.601286700237975*^9, 
   3.601286764071398*^9}, {3.601286988876445*^9, 3.601287001193364*^9}, {
   3.601297278695887*^9, 3.601297290837179*^9}, {3.6012974792041807`*^9, 
   3.601297500526369*^9}, {3.601297538358511*^9, 3.601297585092586*^9}, {
   3.601297713310603*^9, 3.6012977413100033`*^9}, {3.601297914356962*^9, 
   3.601297914769359*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 2., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    400., {190., 196.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$110248$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$110248$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainSoftMargin[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {240., 249.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.601372966250511*^9, 3.601559984712159*^9, 3.6015601463192863`*^9, 
   3.601560648196865*^9, 3.601560819491561*^9, 3.60156314165327*^9, 
   3.6015716781021643`*^9, 3.6015725231652803`*^9, 3.60157259248239*^9, 
   3.601572737232231*^9, 3.601626243854045*^9, 3.6016263428498783`*^9, 
   3.6028571191699953`*^9, 3.602857154839723*^9, {3.602857243070468*^9, 
   3.602857338210691*^9}, 3.602859809329527*^9, 3.602859871915287*^9, {
   3.602859904005724*^9, 3.6028600446975718`*^9}, 3.607433127612075*^9, 
   3.637564853024686*^9, 3.637565731869989*^9, 3.63756588020093*^9, 
   3.637566075614814*^9, 3.637574905470798*^9, {3.637574944557906*^9, 
   3.637574972840777*^9}, 3.637575017511821*^9, {3.637575080167186*^9, 
   3.637575128583579*^9}, 3.6375751609028873`*^9, {3.637581917568626*^9, 
   3.63758194152759*^9}, 3.637581977725383*^9, 3.637582010113209*^9, {
   3.637582230820006*^9, 3.637582274309915*^9}, 3.637582304993907*^9, 
   3.6375834981706343`*^9, 3.637585576056095*^9, {3.6375857930855513`*^9, 
   3.6375858087978992`*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it is possible to see, in agreement with the theory when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[RightArrow]", "\[Infinity]"}], TraditionalForm]]],
 ", the solution returned by soft-margin classifier reduces to the one of the \
max-margin classifier. On the other hand, reducing ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " might results in the max-margin principle being violated, resulting in a \
different separation hyperplane. When the noise in the data is high, this \
might result in better performance on unseen samples."
}], "Text",
 CellChangeTimes->{{3.601375224930306*^9, 3.6013752325484877`*^9}, {
   3.60137540215469*^9, 3.6013754610603323`*^9}, {3.601375835744356*^9, 
   3.601376069596875*^9}, 3.6013860666940823`*^9, 3.601558688900959*^9, {
   3.607433175066598*^9, 3.607433249435253*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: hinge-loss", "Subsection",
 CellChangeTimes->{{3.600090403054838*^9, 3.60009041228967*^9}, {
  3.6005111769690857`*^9, 3.600511189362093*^9}},
 CellTags->"subsec:hinge_loss"],

Cell[TextData[{
 "An interesting property of the formulation introduced in the previous \
sub-section is that, by using the fact that the objective function is \
minimizing w.r.t. ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Xi]",
    FontWeight->"Bold"], TraditionalForm]]],
 " and performing a simple case analysis, it is possible to see that for any ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090420965437*^9}, {
   3.6000907095950127`*^9, 3.6000907169789877`*^9}, 3.600155060116129*^9, {
   3.600544262412472*^9, 3.600544264853862*^9}, 3.60067706256285*^9, {
   3.601389838113303*^9, 3.6013899348842487`*^9}, {3.601389968160818*^9, 
   3.6013899697787113`*^9}, {3.601390108620432*^9, 3.60139013955446*^9}, {
   3.637576893202181*^9, 3.637576945874955*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 " whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "\[LessEqual]", 
    "0"}], TraditionalForm]]],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 " (no additional slack is necessary to satisfy the constraints);"
}], "Item",
 CellChangeTimes->{{3.60007140215028*^9, 3.6000714048159437`*^9}, {
   3.600071471087552*^9, 3.600071486127376*^9}, {3.600071539107299*^9, 
   3.6000715483156967`*^9}, 3.60007159412475*^9, {3.600433271266449*^9, 
   3.6004332719557037`*^9}, {3.6004333262443323`*^9, 3.6004333277650023`*^9}}],

Cell[TextData[{
 "whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ">", "0"}], 
   TraditionalForm]]],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
   TraditionalForm]]],
 " (the minimal ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " satisfying the constraints)."
}], "Item",
 CellChangeTimes->{{3.60007140215028*^9, 3.600071453305488*^9}, {
   3.6000715661678467`*^9, 3.600071607546055*^9}, 3.600072002455305*^9, {
   3.600433273163218*^9, 3.600433276731516*^9}, {3.6004333300526257`*^9, 
   3.600433336539894*^9}, {3.60138813785434*^9, 3.601388143645668*^9}, {
   3.601388199359839*^9, 3.60138821253098*^9}}]
}, Open  ]],

Cell[TextData[{
 "We can thus write a closed form solution for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " as a function of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.6000716232316027`*^9, 3.6000717172050867`*^9}, {
  3.600071797373171*^9, 3.600071804208117*^9}, {3.600072063822472*^9, 
  3.600072139207631*^9}, {3.60007219023997*^9, 3.600072247029084*^9}, {
  3.601389991992825*^9, 3.601390056675672*^9}, {3.601390087604802*^9, 
  3.601390168739094*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[Xi]", "i"], "=", 
   SubscriptBox[
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
     "\[RightBracketingBar]"}], "+"]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.601390068246149*^9, 3.6013900714502153`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"|", "x", 
     SubscriptBox["|", "+"]}], "=", 
    RowBox[{"max", "(", 
     RowBox[{"x", ",", "0"}], ")"}]}], TraditionalForm]]],
 ".  By construction, for any given ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]],
 " this choice of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " ensures that all the constraints are satisfied. We can thus subsitute for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " in the objective function and remove the constraints, obtaining the \
following optimization problem:"
}], "Text",
 CellChangeTimes->{{3.6000716232316027`*^9, 3.6000717172050867`*^9}, {
  3.600071797373171*^9, 3.600071804208117*^9}, {3.600072063822472*^9, 
  3.600072139207631*^9}, {3.60007219023997*^9, 3.600072247029084*^9}, {
  3.601389991992825*^9, 3.601390035029743*^9}, {3.601390073716324*^9, 
  3.601390076351453*^9}, {3.60139019456527*^9, 3.601390333031674*^9}, {
  3.601390401102871*^9, 3.601390402716786*^9}, {3.601390687937025*^9, 
  3.601390690051483*^9}, {3.637576996041149*^9, 3.637577005157626*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], " ", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{"C", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
      "\[RightBracketingBar]"}], "+"]}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
  3.6000722300726633`*^9, 3.600072241744952*^9}}],

Cell[TextData[{
 "This is a non-smooth unconstrained convex optimization problem, which can \
be solved by using simple sub-gradient descent procedures.  As before, the \
minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["max", "i"], 
        SubscriptBox["\[Xi]", "i"]}]}], ")"}]}]}], TraditionalForm]]],
 ", where in this case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], "(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
      "\[RightBracketingBar]"}], "+"]}], TraditionalForm]]],
 ". We can also equivalently compute it using its definition, whichever is \
faster in the implementation.\n\nRecalling that the functional margin was \
defined as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["f", 
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], ",", "b"}]], "(", 
      StyleBox[
       SubscriptBox["x", 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"], ")"}]}]}], TraditionalForm]]],
 " and the 0/1 error function was defined as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalChi]", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], 
      RowBox[{
       SubscriptBox["f", 
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], ",", "b"}]], "(", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ")"}]}], "<", "0"}], ")"}], 
   TraditionalForm]]],
 ", we can see that both the 0/1 error and the constraints violation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{
         SubscriptBox["f", 
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], ",", "b"}]], "(", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], ")"}]}]}], "\[RightBracketingBar]"}], 
     "+"]}], TraditionalForm]]],
 " (often refered to as ",
 StyleBox["hinge-loss",
  FontSlant->"Italic"],
 ") can be expressed as a function of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Gamma]", "i"], TraditionalForm]]],
 ". Moreover we have"
}], "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.600091297397209*^9, 3.6000912978433123`*^9}, {
   3.600094482291164*^9, 3.600094502641637*^9}, {3.600094577882024*^9, 
   3.600094581776475*^9}, {3.600153228630068*^9, 3.6001532599410954`*^9}, {
   3.600153423589492*^9, 3.600153435742185*^9}, {3.601390340706565*^9, 
   3.60139035926153*^9}, {3.601622444788268*^9, 3.601622507610202*^9}, {
   3.601622931148408*^9, 3.601622956020783*^9}, {3.6016230015286903`*^9, 
   3.6016230218652573`*^9}, 3.601626109910359*^9, {3.602857486784349*^9, 
   3.60285749239607*^9}, {3.637577039962811*^9, 3.6375770716417427`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FormBox[
    RowBox[{
     RowBox[{"\[CapitalChi]", "(", 
      RowBox[{
       SubscriptBox["\[Gamma]", "i"], "<", "0"}], ")"}], "\[LessEqual]"}],
    TraditionalForm], 
   SubscriptBox[
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Gamma]", "i"]}], "\[RightBracketingBar]"}], "+"]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600091506754642*^9, 3.600091546586398*^9}, 
   3.600154643457857*^9}],

Cell["\<\
as it can also be seen in the following figure.
\
\>", "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.60009129225014*^9, 3.6000914835746737`*^9}, {
   3.600091573755001*^9, 3.600091589195252*^9}, {3.6000930824444017`*^9, 
   3.600093086838382*^9}, 3.60009438495957*^9, {3.600153284105681*^9, 
   3.600153284728677*^9}, 3.601386071870221*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Labeled", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"err", "[", "x", "]"}], ",", 
        RowBox[{"hinge", "[", "x", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1.5"}], ",", "2.5"}], "}"}], ",", 
      RowBox[{"PlotLegend", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<0/1 Error\>\"", ",", "\"\<Hinge Loss\>\""}], "}"}]}], 
      ",", 
      RowBox[{"LegendPosition", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".5", ",", ".2"}], "}"}]}], ",", 
      RowBox[{"LegendShadow", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".02", ",", 
         RowBox[{"-", ".02"}]}], "}"}]}], ",", 
      RowBox[{"LegendSize", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.4", ",", "0.2"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Full", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".5"}], ",", "2.5"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Background", "\[Rule]", "White"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", ".01", "]"}], ",", "Blue"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", ".01", "]"}], ",", "Red"}], "}"}]}], 
        "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
    "\"\<Hinge Loss and istantaneous error, as a function of the \
margin.\>\""}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.600093131245949*^9, 3.600093279883689*^9}, {
  3.600093324189554*^9, 3.6000933347352867`*^9}, {3.600093368172399*^9, 
  3.600093404706318*^9}, {3.6000934567967463`*^9, 3.6000934816712933`*^9}, {
  3.600093515357876*^9, 3.6000935181937037`*^9}, {3.600093692311961*^9, 
  3.600093749388242*^9}, {3.60009378075563*^9, 3.600093970889696*^9}, {
  3.600094016823143*^9, 3.600094032366508*^9}, {3.600094118782789*^9, 
  3.600094357553536*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{
     InsetBox[
      GraphicsBox[{{{}, {}, {
          RGBColor[0, 0, 1], 
          Thickness[0.01], 
          LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQrWcv9ur//+/7GcDgg31Q+9nVxvEIfvn5ltz0fd/g
/CtXuF8dTPwK58seyBcxl/kC52/NPsLKf/cTnJ/QY/jhZtNHOP/HpOqO/fYf
4Hw32T3GBoffwvlWU5OeLBN+Deez3zz0IWjSCzj/F1vI+ye3nsL5xxjme64J
fAznG1SfNrS8+gDOb9gfKBHhegfhP4WGlhU21+H8wlCBq0eOX4Tzp4ofb7px
4wScH56+csrPrXsR7lnza8nW+5vg/LyH07MeCy2A8z+YZYREcEyD8znCHJdf
vtoO51tM+exzqqAa4b6PE3W3Xo+B8y1Z9Zc/eBoC5wMAciCYww==
           "]], 
          LineBox[CompressedData["
1:eJxF0HtI0wEQB/C5TdNJQyskMDGtOQ3NIFuGwtbAB7IEh7k/VptODZymopUZ
BmnbciLTRMlwTmI656M5KYviZ7g/jDIEHzXNpm5aosyV5msOHxXV3cFxfODg
jm+QpICfTSaRSPG/+8+84B7Zbv2Wyib9K880/wnbpBi8wrqcN+slBednqDZ1
h4vAWcyfLFFwCVj/2SJcaLkH1hL0nYvM+2BNC0fdbJCD67NbLan9VeABZ58h
43oduFt2N3KkSg3mJisazRI9uKTagxp1qAP3hxQFD01ov4QH8bzjXWA7u3Ld
NP0UPHQ0Tp/W3Qu+QUugcpkvwfO3GKJqugn/E2hneKMfwGpqgLPJMQb2VirU
g6JJ8LubZUpZ8TS4zSiIuHLeBubEDpzwsc+DyTv5b1SFC5jX6PI1ZvgS3gtR
lrum7GBTTy6nUfgd/LdWwOntKo9QJXqtlsbOGV4FR79uMCZ4r4Fz8j3Dzmat
gw2xmjWKbgNsbfAftJG3wAwvYrE10Qk+RuTGuVdug/e3yR1Fcy7wZkq/aJCx
A56KEvszZLvgAoGPb7BlD/NMKgqvoJM4/22OGBkvJdCdGvbJryI3sKCH5Ruw
h74jf1Ju6SSD2xcDmug8CriiWZ4+k4wW8R0MQwrajyCMlwRoeY3wbbUEncl6
vEorRQfKjiQe0KFd0WUHJ/Ros2N+TNeFVgmeXY3vRe+e4hfLCfSX0RoNZRz9
QrGVOf4JXRcjDtNOopPaTj/nzqBf3R5+X76Ero84V5OyjC6cU6cG/UCH8vJm
B9bRVLePrbVbaGtfjDTdhSak2sgzu+hHgd4b+/voXxvoAeM=
           "]]}, {
          RGBColor[1, 0, 0], 
          Thickness[0.01], 
          LineBox[CompressedData["
1:eJxlyX8w23ccx/HUF+2OGsakh6Ita1VNSmsc9/6y0qGlVZ1eR5EOm1+hLaE4
qWV+7Ky1UpJrmM2Pou6YYnbCJzSUsvlRBF1aRExFkJHmx6L23d/743XPe9zL
hkoLjtYikUhexP6rI3y4ururQOVWevLdXQynqQ4XqNQK1Kkx4mftYHjLE4rd
llyBZmbJJSo1hp88ep66LFGgA6V2lC05hrsaMedGBArE2eeduCzBcFwke85u
VqAqWbp4RIDhwfm/P3aOUKCGp8tT7GYMp48yE2N73iJubF+HcwSGT07qrfZG
yVHcqo58vkULt+TRTFwttpHBvOt35gZaeHs8X+d94d9o7tRibn7SHjyyiLI5
mytDTgNkZUIvCVfezyxAsImyhjz5r61IuK8l19npqRRVG7w6wFp4B+4PqEt1
H0hQhT/lxovCHdg727cZfH8FMROi0o/5aUCtG7KxNCdG2Vgj/YZUDQOkH/2a
LorQdcbokel6FThlDlPcpuYRq1vM4sQpgYEukq/4/InmaSa6nxspINiawaz3
ECCTfdY29qNySLlsOMV/No7CTM+ckqVswwOzZ7kzM4Noa/GKobn5FoTGNpSq
2rtRapk/O+KlDJIWyuNExlVID4WYlzM2wTswjzVNrQeLh/SyiYx1EKXZXisy
6IWzP6ethHElwAutfnVufBgM7UMHm/TeAEfbUvlQOgGt2TLsZOEy6BXmcfqv
zcDtLi6lYkwEg6lZhcybQrDo9+ry9F2A2pbQE2GuC9BReaH27A9CwD14hw0l
ImDk53S+PjYDWpqknrvJy6DZe+ibxYMvoHJ8LeYjhzdQ8Nu5L6lBw8CxK7yj
npNAcfRLlWkpD3gtTKVmSQIkT6mlfgIPxO4M2u66BBJMdr20zvDAMYgero2t
QXGej4nwLwQ8erSbwfE1IHlPutx91APiQS+ZTeYazHTKUjftuOAYr470M5dC
cZ2Dss32VwiWywUBtlJIvnwB/2mqA+g5ssDAj6Xwmfatgu+/7QBeyYrHpU+l
QKJ2kWPE7XCJO00Oj5fCV5b+bma1bZC+/8lYcpcU8NLY2xlHWqG3OR5nfbEO
m5iPKtO3ETzSKq1uxqwDziHr/sFqgE6P8XfnU9aB4bJmbC2ph5ah091Y/jqQ
oksc+PceQZVojzutlfDAQoT+bA0wzFjOvu9tAMlwp8hNUAka4XNjG5MNYOA1
dcLMCkiv2ZH9c5D4UwJ4d6w5kEy53vKLC+EJ9tbQ12yIDHA8YRlJuPT01aua
EsBz+HbbHYSd5gPfeucC10ehM9pL+FC4djY5Bz7Rtxc3jBBeUsXtf5wBbRNh
fKaAcF3ZeIXnLXBi36uOWCQ8FpMcVpUITRF9ue5SwiFVntn9VDhqJ48yVRKO
jD2e3hj0P/8LtygPrQ==
           "]], 
          LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQPSFSd8JTtg/2DFBwbs+x/0E8CD6PQkL+AUEEv+PZ
JL/ZMgh+Q/EPnkAjBH/ftYk1+8wR/D+W2m+0bRH8Coa402weCH5B7+HOPbEI
fsLyPjaNTgSfbXoBt2Ufgr+mLUjAazKC/zNVTCpnLoI/SWWe7oaNCP7RhWtD
LG4h+Fpzzizy0P4I53+ewGWfeRbBt9g1dYM792c4PzOPQ9M45Qucv85m3mfm
ZV/h/AdTpY8+ZPoO56ty7nmxxOMHnC+zJ9uVteMnnP//J9PKoke/4PxvgXvj
jqr+gfNvmcRLq7b8hfPzwwUEle78g/O5vYp0mvgYHGD8a7oXLlfuQfBXzbNX
eRLHCOeHrzcTlP2H4Fe1Lmy8s4oJzl/+QnY2nw8znN80tzXhnh+CHxf0VnVd
IIIvtmfPBt9wBL+1P/pYTxKCn2w28yNXJYIv3yLiwb4Mwf9lUcN7fQWCf+3t
40vLViP4feGbY902Ivh/tYKKW/cg+Lcv9s9jvozgb2v7nnz5KoI/yTpec/EN
BN9rqd4Wp3sI/s6KsycbXyL4U3RN+wPfIPgFj+aEKL5H8DV8cu4f+ILgszBe
WTLhO4L/YKt1VsIvBH9P1mJ9g78I/nR57q///yP4ANxNyrs=
           
           "]]}, {}}, {{}, {}, {}, {}}}, Axes -> True, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> 
       GrayLevel[1], BaseStyle -> {"Palatino", Bold, 16}, 
       DisplayFunction :> $DisplayFunction, FormatType -> TraditionalForm, 
       GridLines -> Automatic, ImageSize -> 600, Method -> {}, 
       PlotRange -> {{-1.5, 2.5}, {-0.5, 2.5}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {
         Scaled[0.02], Automatic}], {-1, -0.75}, {Left, Bottom}, {2, 1.5}], 
     GraphicsGroupBox[{{
        GrayLevel[0], 
        RectangleBox[{0.52, 0.18000000000000002`}, {0.92, 0.38}]}, {
        GrayLevel[1], 
        EdgeForm[{
          GrayLevel[0], 
          Thickness[0.001]}], 
        GraphicsGroupBox[{
          RectangleBox[{0.5, 0.2}, {0.9, 0.4}], 
          InsetBox[
           GraphicsBox[{{{
               InsetBox[
                GraphicsBox[{
                  RGBColor[1, 0, 0], 
                  Thickness[0.01], 
                  LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {Left, Bottom}, {
                1, 1}], 
               InsetBox[
               "\"Hinge Loss\"", {1.2100000000000002`, 0.58}, {-1, 0}, 
                Automatic, {1, 0}]}, {
               InsetBox[
                GraphicsBox[{
                  RGBColor[0, 0, 1], 
                  Thickness[0.01], 
                  LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {Left, Bottom}, {
                1, 1}], 
               InsetBox[
               "\"0/1 Error\"", {1.2100000000000002`, 1.74}, {-1, 0}, 
                Automatic, {1, 0}]}}, {}}, AspectRatio -> 0.5, FormatType -> 
            TraditionalForm, PlotRange -> {{-0.1, 3.26}, {-0.1, 2.42}}], {0.5,
            0.2}, {Left, Bottom}, {0.4, 0.2}]}]}}]}, AspectRatio -> Automatic,
     Background -> GrayLevel[1.], ColorOutput -> Automatic, ImageSize -> 600.,
     PlotRange -> All],
   "\"Hinge Loss and istantaneous error, as a function of the margin.\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.600093265892646*^9, {3.600093328029045*^9, 3.600093335201136*^9}, {
   3.600093371478383*^9, 3.6000934054485064`*^9}, {3.6000934650536947`*^9, 
   3.6000934821932898`*^9}, 3.600093518904855*^9, {3.600093682488847*^9, 
   3.600093715270859*^9}, 3.600093758144931*^9, {3.600093789457769*^9, 
   3.600093971955018*^9}, 3.600094026985216*^9, 3.6000941262722054`*^9, {
   3.600094159026362*^9, 3.6000943633867397`*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

The hinge loss is thus clearly a convex piecewise-linear upperbound of the \
0/1 error function. Using this intuition, the hinge-loss classifier objective \
function can be virtually decomposed in two parts: \
\>", "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.60009129225014*^9, 3.6000914835746737`*^9}, {
   3.600091573755001*^9, 3.600091589195252*^9}, {3.6000930824444017`*^9, 
   3.600093086838382*^9}, {3.600094486669729*^9, 3.600094545714559*^9}, {
   3.600094624204111*^9, 3.600094647449463*^9}, {3.600094709463649*^9, 
   3.600094787988662*^9}, {3.6001532947532673`*^9, 3.600153317960039*^9}, {
   3.600154676245984*^9, 3.600154687314789*^9}, {3.6006771590608683`*^9, 
   3.600677176207753*^9}, 3.6013860745439253`*^9, {3.602857536788834*^9, 
   3.602857562095058*^9}, {3.6375770934446173`*^9, 3.637577117789996*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "a \[OpenCurlyDoubleQuote]",
 StyleBox["regularizer",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ", named in this way because of its role in favoring general solutions"
}], "Item",
 CellChangeTimes->{{3.600091181152338*^9, 3.6000912605961437`*^9}, {
  3.600094803062545*^9, 3.600094835866577*^9}, {3.6001533264864693`*^9, 
  3.600153364470174*^9}, {3.600154693739958*^9, 3.600154696004071*^9}, {
  3.6074333453055277`*^9, 3.6074333499646683`*^9}}],

Cell[TextData[{
 "a weighted loss function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       "\[RightBracketingBar]"}], "+"]}]}], TraditionalForm]]],
 ", measuring the hinge-loss on every sample"
}], "Item",
 CellChangeTimes->{{3.600091181152338*^9, 3.6000912878115053`*^9}, {
  3.600094569178194*^9, 3.600094570439437*^9}, {3.6000947993169937`*^9, 
  3.600094825127008*^9}, {3.600153369950371*^9, 3.600153383222048*^9}, {
  3.607433357603455*^9, 3.607433359757029*^9}, {3.607433932426351*^9, 
  3.6074339359775047`*^9}}]
}, Open  ]],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433368352339*^9, 3.607433374420573*^9}}],

Cell["\<\
As before, we report here the code snippet of this implementation
\
\>", "Text",
 CellChangeTimes->{{3.6005442882927713`*^9, 3.6005443042883883`*^9}, 
   3.601386076379731*^9, 3.6074333625220213`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hinge", "[", "x_", "]"}], ":=", 
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "-", "x"}], ",", 
         RowBox[{
          RowBox[{"1", "-", "x"}], ">", "0"}]}], "}"}], "}"}], ",", "0"}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"trainSoftMarginHinge", "[", 
    RowBox[{"feats_List", ",", "labels_List", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "b", ",", "d", ",", "nTr", 
       ",", "v", ",", "w", ",", "regularizer", ",", "loss", ",", "obj", ",", 
       "sol"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "feats", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"regularizer", "=", 
       RowBox[{"w", ".", "w"}]}], ";", "\n", 
      RowBox[{"loss", "=", 
       RowBox[{"Total", "[", 
        RowBox[{"hinge", "@@@", 
         RowBox[{"(", 
          RowBox[{"labels", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"feats", ".", "w"}], "+", "b"}], ")"}]}], ")"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{"regularizer", " ", "+", " ", 
        RowBox[{"regC", " ", "loss"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{
        RowBox[{"FindMinimum", "[", 
         RowBox[{"obj", ",", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"w", ",", 
            RowBox[{"{", "b", "}"}]}], "]"}]}], "]"}], "//", "Quiet"}]}], ";",
       "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"labels", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"feats", ".", 
               RowBox[{"model", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", 
              RowBox[{"model", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}], "]"}], ")"}],
         "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"model", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600544854869842*^9, 3.600544869258173*^9}, {
  3.600603635602695*^9, 3.6006036366102333`*^9}, {3.601376250280011*^9, 
  3.6013762567611713`*^9}, {3.601573476747438*^9, 3.6015734770535173`*^9}, {
  3.601623044296619*^9, 3.601623056384856*^9}}],

Cell["\<\

An example of usage is as follow
\
\>", "Text",
 CellChangeTimes->{{3.6005448879827833`*^9, 3.60054489880509*^9}, {
  3.601386078534184*^9, 3.6013860796351767`*^9}, {3.601560585359741*^9, 
  3.601560587116675*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.60121194128167*^9, 3.601211945994905*^9}, {
  3.601213846066174*^9, 3.601213846423414*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$692 = MousePosition["Graphics"]; 
     Private`p$692 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$692], 2], 
          Union[
           Partition[Private`pt$692, 2]]}, 1]]; 
     If[Private`s$692 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$692}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$692}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$692 = {}; 
     Private`s$692 = Private`s$692 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005449418843603`*^9, 3.600545026353217*^9, 3.600545344832444*^9, {
   3.600549892714267*^9, 3.600549896275764*^9}, {3.600587742396299*^9, 
   3.600587757977747*^9}, 3.600602781749795*^9, 3.600603523043189*^9, 
   3.6006039456469507`*^9, 3.600612998820183*^9, 3.600613812104033*^9, 
   3.6006326442290087`*^9, 3.600671117281825*^9, 3.600671642210066*^9, 
   3.60067180370498*^9, 3.600672265467708*^9, 3.600672525853112*^9, {
   3.600672836554018*^9, 3.600672850631194*^9}, 3.6012063703524323`*^9, 
   3.601209437147979*^9, 3.6012114671204643`*^9, 3.601211946322893*^9, {
   3.6012122448130617`*^9, 3.6012122910579147`*^9}, {3.601212668169895*^9, 
   3.601212668525999*^9}, {3.601213356436779*^9, 3.601213356823247*^9}, 
   3.601213402009972*^9, {3.6012134433127337`*^9, 3.6012134609849977`*^9}, 
   3.601213643644863*^9, 3.601213852234685*^9, 3.601214040359129*^9, 
   3.601214608246007*^9, 3.60121800451103*^9, 3.601286272936027*^9, 
   3.6012958899364843`*^9, 3.601296909755733*^9, 3.601297170433475*^9, 
   3.6012976620494633`*^9, 3.6012988947650013`*^9, 3.6012989471568413`*^9, 
   3.6013046935022507`*^9, 3.601372885069866*^9, 3.601375277184816*^9, 
   3.601559771791875*^9, 3.6015608051139927`*^9, 3.60156216642771*^9, 
   3.601563112013534*^9, 3.6015716450697536`*^9, 3.601572489368885*^9, 
   3.601626156217442*^9, 3.602856855665761*^9, 3.60285972452811*^9, 
   3.607430517837002*^9, 3.607432448325654*^9, 3.63756472510083*^9, 
   3.6375655258096*^9, 3.637565654687269*^9, 3.637566042116534*^9, 
   3.6375733610310087`*^9, 3.6375818995097313`*^9, 3.637582140823168*^9, 
   3.637582201471571*^9, 3.637583464194372*^9, 3.637585525650531*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXmcVMW1/zAzvczCvgsIAoq4L4ArcQMSRUQTFXGJgto9PTvDLAwyArIH
V9QIj6eigsYormDcCK6ERUX2nveSl5c8owZBBaMBZYZf193m1u3vOVW3u8eX
3+/z+8NRb9etW/U9a1WdOmfMhOqiW8smVMduntDvp1UTKotiN0/uN6qiKvEo
p01WVvY1WVlt7uqXJf77cFaW/edwVmNjo/HnWvFHPPb9oIPxr86Jv9tW/35e
xeFoJPJO2R2vtdkSbxS/BBp3bdr89LSSw5FI7L6axe9lbW80nrdpjO/4+aZV
j3y4sKHqQGks9mnppNvmL1j6Ut7GHfGsqUafXdk2TN+5jfGPy9c89cCO2fWV
B0tiRXtKymuXz7zn8T6vfrAza3J6fbPv1bfiuKe2As45bhJ28dn1ros/fvXe
g9WxaHMkGv02WlLSHI2K/449XL3o9ezEu1OMbrvrNEWfSIx828K1S+ubSqKR
RNuiL0oqKg+UxaKJ4UX/Gpt8T4+XN8ezJqX3DZ33sup+hHnUtw4JsrUInBjh
9hEbXl995apVq05+7b2tWbsaG4ONOzdsXT61JNG2aHXlvBdCm3buvG7TCwt+
qIxGvomWNPT97aZdJoF76DRFnzhi14cvfD2zLNoUiZZOn7Zsbc7WXeLZK39+
sDom+lo2+b7ft9kab6w08U/1MzrvWTRu9alMaR1CWGQ25fnMbWsXHqosimQF
E9wSyco5GInVnPzQe9uNNrnG3wAcQND4Lb/nro9e3D+9VMyl4sJ5b2wVTzs2
bn3ji3kVgrfKrpixanNWvLGx2GieY3/O+FgAfDLbX7fmCPML4ts3/Gzta6tu
eOH5Ve3e22bozcQ/O2ave6TucHEk8qdYzeL897dbzOG3d93mta069imZI0ab
THLAiTveX3KgNhY5EInVnfBv63aIp/mN29//0+KamNBAC+qWvp+1wzcH6Hab
54xw5+3rl9ULxP5SVP1AwTvbG7Mq/XWV6695beYGqkFb3c9ItA3Fd24esGnD
+qzgwPXr12flDFi/YVPw451xXdoO3f72PT9URSPfRYrrBy1bv1M8DTfu+MOu
R6cUJz4aTWiqd4R1sWhrf874WAB8MttftxZBEvZsc9UrT/77w79e9MAlj726
qc3OeGOPXZtf/c+H6oqFXfx92axVOR/tsqXbZ++6zWtbdewaHKD7ZYsD2hn/
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
TAIKl2/XLz98ft6hiqLo5pJpy7q88/H2ttu3bfrDyzNKRfNfVz+4tmDz9h1t
4vFGmPeb3jTQXYjZOV/0djMy5cjdRKMO0l7I76K9WKTQC/l2jjo2d41FiYZ7
uBINyybf906LoRV57z/43XNzK5qKoqVVM57ckL1T0/AylYqVKrIXpiGzaCLL
dtxkPkOXrRd/WF/vtDsKvGsKVXBlfMKEJnfVxEN5eYs/nDq1Hd310s11dU43
Fxt/RZWQWVyVkPcrZhtVQkwdHa57+dmHvplWGv0uUjJl2v2/ffaPD08xSiWs
qZz/ZOQlq5lRLWQBGPoY85myLMhQ8K6q/sdNmozZEys2lJufOOvUDVoxz4+0
K3GYIxCO0K4JH6yce6i8qOjd8pmPbnqqodTN1rpcbZeS9qiMA8Fgs+Ben+UX
JvAKWBF1hcpC9Nakl6UgdEt7mBsDIaEgXls5tzyhIGIHS43aD/4Vg3k/M3jX
hAlfutKEO1p3mD8IJ2JuOoLHwVGUqDpuHx2zqFckxDq1PnLXppV75hgFQSKp
c53aayFunh3tD9LTMKR0NseAZN8arXqVRM68MY4SUJcQseATwnvrpmdmJ4Q3
HfiU/oAiot9njj7F3fCLaTglfWfDeSGG8wRTMtnqIeYgA4nF2aY3n5ldfrgo
BallMJTMuSJLvsOq6ACfAfMUTXk+H6OUw7/uqEWkDohQJjubEUHeUZkRbWeh
gS60IB72mR70FJILw16h9gJwFg9ADv8zMl6KLUjdtC8jNKEfy4u77m3hjCEu
yT17SKOLBJGW1Yq49S4juf2dE1m5Uq55LtIkCVHVSnd3J2NKJeDWCmy96KGa
CFg62Iu5a+9Vbn88Lwu6S3xd4G1P9EcxfczgJQyGaE5SA1up/XE83W3aslWO
dZWM7Z+2ikvGiJ804SHkhOF5nYZicF45nlZnblqy6mykJpY+8+yepTnrYTy3
oqToCkt1IglK2OvbeUn609bB4mx+wGdh/moHeiLcIeIESHF3yaGBbnKJs7E4
jfGHxjl4sJeCpoo1eDf+57Ga07J9KUL9noBn3dvfrH/VMuvl20pL/WZNI+Ji
L9ecopUcSbkw6Ibn2p5HyGdMzeV4LkN5agbxW7qX6Ir8IaV09bvwkOjeZO7p
D7qxPEZELmLdvNOKVYNumswMQI2KjGtuwKhJ18Mf5pdpoteXR6+QRC/oXexx
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
w8U7Wfjf9eWECV78UfYxbjgk/qYVDlPAiF8FuJYffOfEiV/qahtv+JTmSYm0
n3nBY4/JBwPXZlRFeUuKcQiSdyfN1UdSdXsjTYXZXnEtNtc9FEpPXYYVCHHq
SmRwsxkF3HXYV1hoUMKATyuUVtunlzY3cuU1gtHiGn9EVVj7o0iaS0C70hWj
Fbqyer0iWlTX/I/hoVaEk3UAomWqyQJBCSq2ijg1VqtR+nuyKI/zR1G2tJjf
TdBsTZlH9ZJQ5XrCP9F1uS/V1H66Aebm/mvSvmriHTuqPleQzB3/iLZxUcF7
pLzRujwEZP1qfxRXFNk7CWOu2NJoZ0HjeculuXF1+jz8HmkzL9XUf/5yDsBT
rYTB3St8Hzv4y6aNHYuMzvcU+SfR3mAIyLpPiuqWdB2KSdvOwsA4Vm8hrTgk
85QHxAXn82jWEImXfZIxpUB4hUh5IlZz3eIogvvRuSVxzRjty6Ibnz7VsG6Z
2ZEtpG72VEkV9Ytn7YnFyCRdTNaP734oKHDYJAVV6jteHhw5tQRD4XBWy7go
L2NYMcWZdn10y9zay014g5wqp/zAV9df7+k1IJol1fhh0udIfGLeDO6WUtke
s4/46VvfefbVh+ZO/WZSSWxfrLTqxWkLlg56cf12kU0aZf1Pz50yt37YG2tg
Vam+GGKGavIrG6IIwYUZ1cKOUxPgLWlP/mcrtOpVUFD6nq9cVeR1k7Gb1/FF
lGpKBX4Eo5y0/b3H9k0vFUmgI03RaOxQcZHx37ujlfOPXLlpF6wR4W9Rhe7P
hwG1XVvUnpP0sHfXDkcUkfx5gT9mUDhZQU2LTV/aNWqV1uyuqfEkgQOaJOfm
z+fM8TIGZQUcNjU1SI9U6gFl7WpszGnc9eE7L9xRLpKr/2dx3YN9Vn2ws1N8
y5qd/15v9LW0+n6jcAUqGoMuh1n7sijSLktxnUWxTa6bs+Q8fxzA12xWKvCu
oB3aAHTFlyc5BAkHziFnR5ohhZNmBm9olwQyJTq/a3zzK1/dUS6kvSTS8Mwm
8VPil531Gx6vP1wciWwpue3J4MadkMh29gV8zqFz+wLdkdHd8BpGfkb2An/i
j+ioXjXSuoi6ISD/1vmYl4lsV92SXimczfTm81GVc7TKsgivWyLIIrxduyPx
U9mYGa9stglfs355/eGSSGRbSf3y4HpMeDtpCXv4qPYg82nqK6k6lG4nORmp
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
zD4prZpm1y0wOznZ1aHx51rdB1lt/g+qqKaA\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainSoftMarginHinge", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.6005479317609177`*^9, 3.600547943871744*^9}, 3.6006036721231003`*^9, {
   3.600604130271123*^9, 3.6006041313075647`*^9}, 3.600672824777946*^9, {
   3.600672888585968*^9, 3.600672926349937*^9}, {3.600673201958695*^9, 
   3.600673221709093*^9}, {3.601211506662661*^9, 3.6012115593205023`*^9}, {
   3.601211963663365*^9, 3.60121206767241*^9}, {3.6012123175245247`*^9, 
   3.60121252049656*^9}, {3.601212561616869*^9, 3.6012125815873137`*^9}, {
   3.601212612434774*^9, 3.601212627681984*^9}, 3.601212679938843*^9, 
   3.6012127106813993`*^9, {3.6012133667569923`*^9, 3.601213367635418*^9}, {
   3.6012134119254217`*^9, 3.6012134339214478`*^9}, {3.601213662321473*^9, 
   3.601213675149495*^9}, {3.6012137652131767`*^9, 3.6012137742405357`*^9}, {
   3.601213833558949*^9, 3.601213835855653*^9}, {3.601213887084127*^9, 
   3.601213912709806*^9}, {3.601287015355753*^9, 3.601287025155109*^9}, 
   3.601287106576169*^9, {3.601297927697929*^9, 3.601297927958023*^9}, {
   3.601298003109445*^9, 3.60129803642181*^9}, {3.601373005470107*^9, 
   3.6013730104967957`*^9}, {3.601373041330082*^9, 3.601373050067439*^9}, 
   3.6028575856574078`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 2.2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    400., {190., 196.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$3925$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$3925$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainSoftMarginHinge[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {240., 249.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.60137303558141*^9, 3.601373053759708*^9}, 
   3.601560219901368*^9, 3.601560605644328*^9, 3.6015606951247168`*^9, 
   3.6015608530852222`*^9, 3.601563162058833*^9, {3.601563636857156*^9, 
   3.601563641360997*^9}, 3.601563683412404*^9, {3.6015637241738586`*^9, 
   3.6015637381113367`*^9}, 3.6015717330080233`*^9, 3.601572618322707*^9, 
   3.6016263703538713`*^9, 3.602857586810186*^9, {3.602859831611567*^9, 
   3.602859859544814*^9}, 3.602860149431301*^9, 3.6074333953964863`*^9, 
   3.6375648805595827`*^9, 3.6375659061552477`*^9, 3.6375660985779543`*^9, 
   3.63758205550838*^9, 3.6375823520399103`*^9, 3.637585618610615*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

As it is possible to see, the behavior of this classifier is very similar to \
the one of the original soft-margin algorithm (though the solution might \
slightly differ, for numerical reasons).
\
\>", "Text",
 CellChangeTimes->{{3.601376100004849*^9, 3.601376134040353*^9}, 
   3.601386086412291*^9, 3.601558674131753*^9, {3.607433419237398*^9, 
   3.607433442678946*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Minimizing the 0/1 error", "Subsection",
 CellChangeTimes->{{3.601209915340871*^9, 3.601209917694199*^9}, {
  3.60121504252315*^9, 3.601215073415551*^9}, {3.6012152593121233`*^9, 
  3.601215263961134*^9}, {3.60121530191003*^9, 3.601215315701867*^9}}],

Cell[TextData[{
 "For what we said above, soft-margin maximization - and thus good \
generalization abilities - can be acheived through the minimization of the \
regularized hinge loss function: ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       "\[RightBracketingBar]"}], "+"]}]}]}]], "InlineFormula",
  CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
   3.6000722300726633`*^9, 3.600072241744952*^9}}],
 ".  On the other hand, we have also seen that the hinge-loss is a convex \
piecewise-linear upper-bound to the 0/1 error, which ultimately is the \
quantity that we care about. What would happen if we replace  the hinge-loss \
in this regularized objective function, with a 0/1 error function?\n"
}], "Text",
 CellChangeTimes->{{3.6012099215635433`*^9, 3.601210038930832*^9}, {
   3.601210344003456*^9, 3.60121039523493*^9}, {3.6012144715930243`*^9, 
   3.601214527549773*^9}, {3.601215077486929*^9, 3.601215109167843*^9}, {
   3.601215146221079*^9, 3.601215238753796*^9}, {3.601215269929373*^9, 
   3.601215285806988*^9}, {3.601215331093032*^9, 3.601215398032632*^9}, {
   3.601373105606681*^9, 3.60137322428964*^9}, {3.602857624875058*^9, 
   3.602857634939942*^9}, 3.6074334826529284`*^9, 3.60743392661095*^9, {
   3.637577217810164*^9, 3.63757721874469*^9}, {3.637582771103168*^9, 
   3.6375827734851513`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433486692894*^9, 3.607433492728703*^9}}],

Cell[TextData[{
 "We can verify this by using the numerical optimization abilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " (",
 StyleBox["NMinimize", "Code"],
 ") to solve"
}], "Text",
 CellChangeTimes->{{3.6012099215635433`*^9, 3.601210038930832*^9}, {
   3.601210344003456*^9, 3.60121039523493*^9}, {3.6012144715930243`*^9, 
   3.601214527549773*^9}, {3.601215077486929*^9, 3.601215109167843*^9}, {
   3.601215146221079*^9, 3.601215238753796*^9}, {3.601215269929373*^9, 
   3.601215285806988*^9}, {3.601215331093032*^9, 3.601215398032632*^9}, {
   3.601373105606681*^9, 3.60137322428964*^9}, {3.602857624875058*^9, 
   3.602857634939942*^9}, 3.6074334826529284`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["min", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], " ", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], "\[CenterDot]", 
     StyleBox["w",
      FontWeight->"Bold"]}]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{"\[CapitalChi]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "<", "0"}], 
       ")"}]}]}]}]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
   3.6000722300726633`*^9, 3.600072241744952*^9}, {3.6012104743903723`*^9, 
   3.601210487709112*^9}, 3.60121053938375*^9}],

Cell[TextData[{
 "Note that, although the objective function still includes a regularizer, \
the indicator function ",
 Cell[BoxData[
  FormBox["\[CapitalChi]", TraditionalForm]]],
 " does not measure the margin obtained by ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", but only the 0/1 error. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " we can minimize this function for example, by asking NMinimize to perform \
a random search, as shown in the following code snippet\n"
}], "Text",
 CellChangeTimes->{{3.60121049972244*^9, 3.6012105058656883`*^9}, {
   3.601210541564143*^9, 3.6012105688797617`*^9}, {3.60121453139952*^9, 
   3.601214578522887*^9}, {3.6012154037449617`*^9, 3.601215408313727*^9}, {
   3.601373232196843*^9, 3.601373252758483*^9}, 3.601386088896632*^9, {
   3.637582608594431*^9, 3.637582632277896*^9}, {3.637582716462081*^9, 
   3.637582735381411*^9}, {3.637582788322219*^9, 3.637582801326556*^9}, {
   3.6375828373589354`*^9, 3.6375829585811663`*^9}, {3.6375830268854923`*^9, 
   3.6375830292114697`*^9}, {3.637583192864036*^9, 3.6375831970239058`*^9}, {
   3.6375832709007597`*^9, 3.637583345646347*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainZeroOneError", "[", 
    RowBox[{"c_", ",", "feats_", ",", "labels_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "b", ",", "d", ",", "nTr", 
       ",", "v", ",", "w", ",", "regularizer", ",", "loss", ",", "obj", ",", 
       "sol"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "feats", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"regularizer", "=", 
       RowBox[{"w", ".", "w"}]}], ";", "\n", 
      RowBox[{"loss", "=", 
       RowBox[{"Total", "[", 
        RowBox[{"err", "@@@", 
         RowBox[{"(", 
          RowBox[{"labels", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"feats", ".", "w"}], "+", "b"}], ")"}]}], ")"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{"regularizer", " ", "+", " ", 
        RowBox[{"c", " ", "loss"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"NMinimize", "[", 
        RowBox[{"obj", ",", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}]}], "]"}], ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<RandomSearch\>\""}]}], "]"}]}], 
      ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"1", "/", 
         RowBox[{"Norm", "[", 
          RowBox[{"model", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], 
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"labels", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"feats", ".", 
               RowBox[{"model", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", 
              RowBox[{"model", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}], "]"}], 
         ")"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.601210571525784*^9, 3.6012105835260897`*^9}, {
  3.601573414482918*^9, 3.601573440950531*^9}}],

Cell["\<\

Following is an example of usage of this code
\
\>", "Text",
 CellChangeTimes->{{3.6005448879827833`*^9, 3.60054489880509*^9}, {
  3.601210632252318*^9, 3.601210638991849*^9}, {3.601373260890164*^9, 
  3.601373269229082*^9}, {3.601386091010215*^9, 3.601386092805372*^9}, {
  3.637582593947945*^9, 3.6375825954243917`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601214091257781*^9, 3.601214096377967*^9}, {
  3.601214601576762*^9, 3.6012146018379908`*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$721 = MousePosition["Graphics"]; 
     Private`p$721 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$721], 2], 
          Union[
           Partition[Private`pt$721, 2]]}, 1]]; 
     If[Private`s$721 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$721}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$721}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$721 = {}; 
     Private`s$721 = Private`s$721 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.60121087419002*^9, {3.601210940269863*^9, 3.6012109481673*^9}, 
   3.60121099324424*^9, {3.601211467185676*^9, 3.6012114673875103`*^9}, {
   3.601212264618929*^9, 3.6012122907590446`*^9}, 3.60121266821483*^9, 
   3.601213356497918*^9, {3.601214040450753*^9, 3.601214040704617*^9}, 
   3.60121409680414*^9, {3.601214608348693*^9, 3.601214608629203*^9}, 
   3.6012180045608263`*^9, 3.601286272978816*^9, 3.601295889980215*^9, 
   3.601296909781158*^9, 3.601297170474646*^9, 3.6012976620815477`*^9, 
   3.60129889488898*^9, 3.601298947184609*^9, 3.601304693536516*^9, 
   3.601372885110718*^9, 3.601375277226056*^9, 3.6015597718380957`*^9, 
   3.601562166493429*^9, 3.601563112057412*^9, 3.601571645114797*^9, 
   3.601572489412768*^9, 3.6016261562586946`*^9, 3.602856855701194*^9, 
   3.6028597245657988`*^9, 3.607430517877798*^9, 3.607432448368534*^9, 
   3.637564725132847*^9, 3.637565525847085*^9, 3.637565654716428*^9, 
   3.637566042161289*^9, 3.6375733610705833`*^9, 3.6375818995422907`*^9, {
   3.637582140871317*^9, 3.637582141111209*^9}, 3.637582201506496*^9, 
   3.637583464222974*^9, 3.637585525737719*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXmcVMW1/zAzvczCvgsIAoq4L4ArcQMSRUQTFXGJgto9PTvDLAwyArIH
V9QIj6eigsYormDcCK6ERUX2nveSl5c8owZBBaMBZYZf193m1u3vOVW3u8eX
3+/z+8NRb9etW/U9a1WdOmfMhOqiW8smVMduntDvp1UTKotiN0/uN6qiKvEo
p01WVvY1WVlt7uqXJf77cFaW/edwVmNjo/HnWvFHPPb9oIPxr86Jv9tW/35e
xeFoJPJO2R2vtdkSbxS/BBp3bdr89LSSw5FI7L6axe9lbW80nrdpjO/4+aZV
j3y4sKHqQGks9mnppNvmL1j6Ut7GHfGsqUafXdk2TN+5jfGPy9c89cCO2fWV
B0tiRXtKymuXz7zn8T6vfrAza3J6fbPv1bfiuKe2As45bhJ28dn1ros/fvXe
g9WxaHMkGv02WlLSHI2K/449XL3o9ezEu1OMbrvrNEWfSIx828K1S+ubSqKR
RNuiL0oqKg+UxaKJ4UX/Gpt8T4+XN8ezJqX3DZ33sup+hHnUtw4JsrUInBjh
9hEbXl995apVq05+7b2tWbsaG4ONOzdsXT61JNG2aHXlvBdCm3buvG7TCwt+
qIxGvomWNPT97aZdJoF76DRFnzhi14cvfD2zLNoUiZZOn7Zsbc7WXeLZK39+
sDom+lo2+b7ft9kab6w08U/1MzrvWTRu9alMaR1CWGQ25fnMbWsXHqosimQF
E9wSyco5GInVnPzQe9uNNrnG3wAcQND4Lb/nro9e3D+9VMyl4sJ5b2wVTzs2
bn3ji3kVgrfKrpixanNWvLGx2GieY3/O+FgAfDLbX7fmCPML4ts3/Gzta6tu
eOH5Ve3e22bozcQ/O2ave6TucHEk8qdYzeL897dbzOG3d93mta069imZI0ab
THLAiTveX3KgNhY5EInVnfBv63aIp/mN29//0+KamNBAC+qWvp+1wzcH6Hab
54xw5+3rl9ULxP5SVP1AwTvbG7Mq/XWV6695beYGqkFb3c9ItA3Fd24esGnD
+qzgwPXr12flDFi/YVPw451xXdoO3f72PT9URSPfRYrrBy1bv1M8DTfu+MOu
R6cUJz4aTWiqd4R1sWhrf874WAB8MttftxZBEvZsc9UrT/77w79e9MAlj726
qc3OeGOPXZtf/c+H6oqFXfx92axVOR/tsqXbZ++6zWtbdewaHKD7ZYsD2hn/
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
TAIKl2/XLz98ft6hiqLo5pJpy7q88/H2ttu3bfrDyzNKRfNfVz+4tmDz9h1t
4vFGmPeb3jTQXYjZOV/0djMy5cjdRKMO0l7I76K9WKTQC/l2jjo2d41FiYZ7
uBINyybf906LoRV57z/43XNzK5qKoqVVM57ckL1T0/AylYqVKrIXpiGzaCLL
dtxkPkOXrRd/WF/vtDsKvGsKVXBlfMKEJnfVxEN5eYs/nDq1Hd310s11dU43
Fxt/RZWQWVyVkPcrZhtVQkwdHa57+dmHvplWGv0uUjJl2v2/ffaPD08xSiWs
qZz/ZOQlq5lRLWQBGPoY85myLMhQ8K6q/sdNmozZEys2lJufOOvUDVoxz4+0
K3GYIxCO0K4JH6yce6i8qOjd8pmPbnqqodTN1rpcbZeS9qiMA8Fgs+Ben+UX
JvAKWBF1hcpC9Nakl6UgdEt7mBsDIaEgXls5tzyhIGIHS43aD/4Vg3k/M3jX
hAlfutKEO1p3mD8IJ2JuOoLHwVGUqDpuHx2zqFckxDq1PnLXppV75hgFQSKp
c53aayFunh3tD9LTMKR0NseAZN8arXqVRM68MY4SUJcQseATwnvrpmdmJ4Q3
HfiU/oAiot9njj7F3fCLaTglfWfDeSGG8wRTMtnqIeYgA4nF2aY3n5ldfrgo
BallMJTMuSJLvsOq6ACfAfMUTXk+H6OUw7/uqEWkDohQJjubEUHeUZkRbWeh
gS60IB72mR70FJILw16h9gJwFg9ADv8zMl6KLUjdtC8jNKEfy4u77m3hjCEu
yT17SKOLBJGW1Yq49S4juf2dE1m5Uq55LtIkCVHVSnd3J2NKJeDWCmy96KGa
CFg62Iu5a+9Vbn88Lwu6S3xd4G1P9EcxfczgJQyGaE5SA1up/XE83W3aslWO
dZWM7Z+2ikvGiJ804SHkhOF5nYZicF45nlZnblqy6mykJpY+8+yepTnrYTy3
oqToCkt1IglK2OvbeUn609bB4mx+wGdh/moHeiLcIeIESHF3yaGBbnKJs7E4
jfGHxjl4sJeCpoo1eDf+57Ga07J9KUL9noBn3dvfrH/VMuvl20pL/WZNI+Ji
L9ecopUcSbkw6Ibn2p5HyGdMzeV4LkN5agbxW7qX6Ir8IaV09bvwkOjeZO7p
D7qxPEZELmLdvNOKVYNumswMQI2KjGtuwKhJ18Mf5pdpoteXR6+QRC/oXexx
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
w8U7Wfjf9eWECV78UfYxbjgk/qYVDlPAiF8FuJYffOfEiV/qahtv+JTmSYm0
n3nBY4/JBwPXZlRFeUuKcQiSdyfN1UdSdXsjTYXZXnEtNtc9FEpPXYYVCHHq
SmRwsxkF3HXYV1hoUMKATyuUVtunlzY3cuU1gtHiGn9EVVj7o0iaS0C70hWj
Fbqyer0iWlTX/I/hoVaEk3UAomWqyQJBCSq2ijg1VqtR+nuyKI/zR1G2tJjf
TdBsTZlH9ZJQ5XrCP9F1uS/V1H66Aebm/mvSvmriHTuqPleQzB3/iLZxUcF7
pLzRujwEZP1qfxRXFNk7CWOu2NJoZ0HjeculuXF1+jz8HmkzL9XUf/5yDsBT
rYTB3St8Hzv4y6aNHYuMzvcU+SfR3mAIyLpPiuqWdB2KSdvOwsA4Vm8hrTgk
85QHxAXn82jWEImXfZIxpUB4hUh5IlZz3eIogvvRuSVxzRjty6Ibnz7VsG6Z
2ZEtpG72VEkV9Ytn7YnFyCRdTNaP734oKHDYJAVV6jteHhw5tQRD4XBWy7go
L2NYMcWZdn10y9zay014g5wqp/zAV9df7+k1IJol1fhh0udIfGLeDO6WUtke
s4/46VvfefbVh+ZO/WZSSWxfrLTqxWkLlg56cf12kU0aZf1Pz50yt37YG2tg
Vam+GGKGavIrG6IIwYUZ1cKOUxPgLWlP/mcrtOpVUFD6nq9cVeR1k7Gb1/FF
lGpKBX4Eo5y0/b3H9k0vFUmgI03RaOxQcZHx37ujlfOPXLlpF6wR4W9Rhe7P
hwG1XVvUnpP0sHfXDkcUkfx5gT9mUDhZQU2LTV/aNWqV1uyuqfEkgQOaJOfm
z+fM8TIGZQUcNjU1SI9U6gFl7WpszGnc9eE7L9xRLpKr/2dx3YN9Vn2ws1N8
y5qd/15v9LW0+n6jcAUqGoMuh1n7sijSLktxnUWxTa6bs+Q8fxzA12xWKvCu
oB3aAHTFlyc5BAkHziFnR5ohhZNmBm9olwQyJTq/a3zzK1/dUS6kvSTS8Mwm
8VPil531Gx6vP1wciWwpue3J4MadkMh29gV8zqFz+wLdkdHd8BpGfkb2An/i
j+ioXjXSuoi6ISD/1vmYl4lsV92SXimczfTm81GVc7TKsgivWyLIIrxduyPx
U9mYGa9stglfs355/eGSSGRbSf3y4HpMeDtpCXv4qPYg82nqK6k6lG4nORmp
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
zD4prZpm1y0wOznZ1aHx51rdB1lt/g+qqKaA\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainZeroOneError", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "10", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.601206412072904*^9, 3.601206439602756*^9}, {
   3.601207402577566*^9, 3.601207422893263*^9}, {3.601207473430217*^9, 
   3.6012074880340767`*^9}, {3.6012075318410597`*^9, 3.601207549397902*^9}, {
   3.601207579515867*^9, 3.6012076661646357`*^9}, {3.601207702131342*^9, 
   3.601207756902109*^9}, {3.60120779520131*^9, 3.601207802489641*^9}, {
   3.601207892818038*^9, 3.601207942630393*^9}, {3.6012079732655983`*^9, 
   3.60120805640635*^9}, 3.6012085698823757`*^9, {3.601208744131277*^9, 
   3.601208749528508*^9}, {3.601208846906273*^9, 3.601208878723583*^9}, {
   3.60120891918299*^9, 3.601208982964459*^9}, {3.601209016606789*^9, 
   3.601209071829247*^9}, {3.601209105216289*^9, 3.601209105504429*^9}, {
   3.601209176094448*^9, 3.601209188093761*^9}, {3.601209465009707*^9, 
   3.601209465726193*^9}, {3.601209495974411*^9, 3.6012095473117437`*^9}, {
   3.601209578809228*^9, 3.601209584813322*^9}, 3.6012096397776337`*^9, {
   3.60120985755095*^9, 3.6012098579378023`*^9}, {3.601287041349455*^9, 
   3.6012870991566477`*^9}, {3.601298065938662*^9, 3.601298071661854*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 10, 0.2}}, Typeset`size$$ = {
    400., {189., 193.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$8787$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$8787$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainZeroOneError[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 10, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {238., 247.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.601563369208535*^9, 3.60157175384159*^9, 3.6015726548731318`*^9, 
   3.6016264029562387`*^9, 3.602857644758247*^9, 3.602860159017392*^9, 
   3.607433503336472*^9, 3.6375650928769083`*^9, 3.6375659287909822`*^9, 
   3.637574038211939*^9, 3.637582074764988*^9, {3.637582156703615*^9, 
   3.6375821690456257`*^9}, 3.637582360592127*^9, 3.6375856319604073`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it is possible to see ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " may be able to find an hyperplane minimizing the training 0/1 error. \
However, not only the optimization is much harder (as the objective function \
has always sub-gradient 0) but, more importantly, without promoting any \
margin maximization the generalization abilities of the classifier are \
clearly negatively affected. This in turn results in a high testing error \
rate."
}], "Text",
 CellChangeTimes->{{3.6012106431864967`*^9, 3.601210688540284*^9}, {
   3.601210771627122*^9, 3.6012108692579308`*^9}, {3.6012146700441027`*^9, 
   3.6012146935613422`*^9}, {3.601214731122373*^9, 3.6012147453805923`*^9}, {
   3.601214817452739*^9, 3.601215028390627*^9}, {3.601215415462797*^9, 
   3.601215415846622*^9}, 3.6013860958792686`*^9, {3.6028576648450603`*^9, 
   3.602857666219592*^9}, {3.607433538013639*^9, 3.607433541302189*^9}, {
   3.607433572582103*^9, 3.607433574507115*^9}, {3.6375834173384123`*^9, 
   3.637583426863504*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tSupport Vector Machines"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.600154775042107*^9, 3.6001547788358383`*^9}},
 CellTags->"sec:svm"],

Cell[TextData[{
 "In the previous Section we introduced the basic theory of max-margin \
classifiers. A Support Vector Machine is basically a max-margin classifier \
(hard or soft-margin) trained in a different way. In this section we will \
first briefly introduce the ",
 StyleBox["convex optimization",
  FontSlant->"Italic"],
 " theory ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 " necessary to derive the SVM algorithm, and then perform the derivations \
necessary to obtain SVMs and finally present the resulting implementations.\n\
"
}], "Text",
 CellChangeTimes->{{3.600154875125265*^9, 3.6001549181816397`*^9}, 
   3.600155031827753*^9, {3.6001553088687277`*^9, 3.600155366668939*^9}, {
   3.600155430120121*^9, 3.600155445536603*^9}, {3.6001554825240726`*^9, 
   3.600155496361331*^9}, {3.600155582648361*^9, 3.6001555947194567`*^9}, {
   3.600414871766923*^9, 3.600414873146832*^9}, {3.600429222572053*^9, 
   3.600429337504127*^9}, {3.600511207971109*^9, 3.600511228061693*^9}, {
   3.600512833942341*^9, 3.6005128343868933`*^9}, {3.600677197978772*^9, 
   3.6006773089673767`*^9}, {3.600677372353778*^9, 3.600677376555369*^9}, {
   3.6006786361826878`*^9, 3.600678644731577*^9}, 3.601558667665824*^9, {
   3.607433596645958*^9, 3.607433614258649*^9}, {3.637577530666527*^9, 
   3.637577531167904*^9}}],

Cell[CellGroupData[{

Cell["Convex Optimization Theory", "Subsection",
 CellChangeTimes->{{3.600429345878928*^9, 3.600429351035904*^9}}],

Cell["Suppose we are given an optimization problem of the form", "Text",
 CellChangeTimes->{{3.600415182339123*^9, 3.600415235021255*^9}, {
  3.6004152679843388`*^9, 3.60041532191236*^9}, {3.600415439755579*^9, 
  3.6004155884965687`*^9}, {3.600415641729501*^9, 3.600415652938727*^9}, {
  3.600416054015314*^9, 3.6004160579326*^9}, {3.600416453336545*^9, 
  3.600416454451515*^9}, {3.600416911156144*^9, 3.600416911686496*^9}, {
  3.600678620696653*^9, 3.6006786305596952`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    StyleBox["w",
     FontWeight->"Bold"]], "f", 
   RowBox[{"(", 
    StyleBox["w",
     FontWeight->"Bold"], ")"}]}], ",", "         ", 
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "\[Element]", "\[CapitalOmega]", "\[Subset]", 
   SuperscriptBox["\[DoubleStruckCapitalR]", 
    "d"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", 
     SubscriptBox["g", "i"]}], 
    RowBox[{"(", 
     StyleBox["w",
      FontWeight->"Bold"], ")"}]}], "\[LessEqual]", "0"}], ",", " ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{"\t ", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["h", "i"], 
     RowBox[{"(", 
      StyleBox["w",
       FontWeight->"Bold"], ")"}]}], "=", "0"}], ",", " ", 
   RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
   "m"}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600415328840414*^9, 3.6004154058700333`*^9}, {
   3.600415665891083*^9, 3.6004157237966223`*^9}, {3.600415896963788*^9, 
   3.600415897999427*^9}, 3.600417100003827*^9, {3.600418690524115*^9, 
   3.600418694226101*^9}},
 CellTags->"primal_problem"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["h", "i"], ",", " ", 
    RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "m"}], 
   TraditionalForm]]],
 ",  are a set of real functions defined on a domain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalOmega]", "\[Subset]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], TraditionalForm]]],
 " . This problem is refered to as the ",
 StyleBox["primal problem",
  FontSlant->"Italic"],
 ".\n\nThe ",
 StyleBox["generalized Lagrangian",
  FontSlant->"Italic"],
 " of the minimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 ") is defined as"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
  3.6004157289837933`*^9, 3.600415772365546*^9}, {3.6004158993933773`*^9, 
  3.600415899750411*^9}, {3.600416060875347*^9, 3.600416063338799*^9}, {
  3.600416102200801*^9, 3.600416104148707*^9}, {3.600416355581702*^9, 
  3.600416380401072*^9}, {3.600416414240261*^9, 3.600416532321621*^9}, {
  3.6004169138287563`*^9, 3.6004169213589773`*^9}, {3.600418102342947*^9, 
  3.600418115255018*^9}, {3.600428905610808*^9, 3.6004289099762383`*^9}, {
  3.600429414824535*^9, 3.600429429469164*^9}, {3.6006785802651653`*^9, 
  3.6006785805358467`*^9}, {3.6006786649110613`*^9, 3.6006786652763*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"L", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"f", 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", " ", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["g", "i"], 
       RowBox[{"(", 
        StyleBox["w",
         FontWeight->"Bold"], ")"}]}]}], "+", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "m"], 
      RowBox[{
       SubscriptBox["\[Beta]", "i"], 
       SubscriptBox["h", "i"], 
       RowBox[{"(", 
        StyleBox["w",
         FontWeight->"Bold"], ")"}]}]}]}], "=", " ", 
    RowBox[{
     RowBox[{"f", 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["g",
       FontWeight->"Bold"], 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["h",
       FontWeight->"Bold"], 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}]}]}]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600415778069233*^9, 3.600415886046279*^9}, {
  3.6004159335411863`*^9, 3.600416041078998*^9}, {3.600416311897974*^9, 
  3.600416312525124*^9}, {3.600417144930235*^9, 3.6004171523903913`*^9}, {
  3.600418677149428*^9, 3.600418685861945*^9}}],

Cell[TextData[{
 "and the ",
 StyleBox["Lagrangian dual problem",
  FontSlant->"Italic"],
 " is defined as"
}], "Text",
 CellChangeTimes->{{3.60041604667068*^9, 3.600416068173777*^9}, {
  3.600416116838738*^9, 3.6004161580773067`*^9}, {3.6004163089355993`*^9, 
  3.600416309859293*^9}, {3.600417049611938*^9, 3.600417053903081*^9}, {
  3.60067858810745*^9, 3.600678588418157*^9}, {3.600678666438592*^9, 
  3.600678666894721*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["max", 
   RowBox[{
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ",", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}]], "  ", 
  StyleBox["\[Theta]",
   FontWeight->"Bold"], 
  RowBox[{"(", 
   RowBox[{
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ",", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"s", ".", "t", ".", " ", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"]}], "\[GreaterEqual]", 
   StyleBox["0",
    FontWeight->"Bold"]}], ","}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60041604667068*^9, 3.600416068173777*^9}, {
  3.600416116838738*^9, 3.600416290006764*^9}, {3.6004175737175837`*^9, 
  3.600417578551526*^9}, {3.600417988927905*^9, 3.60041806731647*^9}},
 CellTags->"eq:dual_problem"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["\[Theta]",
      FontWeight->"Bold"], "(", 
     RowBox[{
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}], "=", " ", 
    RowBox[{
     SubscriptBox["inf", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[Element]", "\[CapitalOmega]"}]], 
     RowBox[{"L", "(", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], ",", 
       StyleBox["\[Beta]",
        FontWeight->"Bold"]}], ")"}]}]}], TraditionalForm]]],
 ".\nWe will now cite the following important results from optimization \
theory."
}], "Text",
 CellChangeTimes->{{3.600416566102697*^9, 3.600416579133808*^9}, {
  3.600416648379065*^9, 3.600416683946109*^9}, {3.600416787348226*^9, 
  3.600416826918919*^9}, {3.600417294162068*^9, 3.6004173156659803`*^9}, {
  3.600418044059804*^9, 3.600418124542616*^9}, {3.600427516955368*^9, 
  3.6004275342828817`*^9}, {3.600429444385693*^9, 3.600429444854097*^9}}],

Cell[TextData[{
 StyleBox["Theorem 2 ", "Subsection"],
 StyleBox["(",
  FontWeight->"Plain"],
 StyleBox["Strong duality theorem",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[")",
  FontWeight->"Plain"],
 StyleBox[".", "Subsection"],
 " Let ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " be the solution of the of the primal optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 ") and let ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], "*"], ",", 
     SuperscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "*"]}], ")"}], TraditionalForm]]],
 " be the solution of the Lagrangian dual problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:dual_problem"],
 ").\nIf ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions (i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "i"], "(", 
     StyleBox["w",
      FontWeight->"Bold"], ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["a",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["w",
       FontWeight->"Bold"]}], "-", "d"}]}], TraditionalForm]]],
 "), then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}], "=", 
    RowBox[{
     StyleBox["\[Theta]",
      FontWeight->"Bold"], "(", 
     RowBox[{
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "*"]}], ")"}]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417605760099*^9, 3.600417622161007*^9}, {3.600418193059209*^9, 
   3.6004184479104156`*^9}, {3.600418526867786*^9, 3.6004185274644403`*^9}, {
   3.600419015125244*^9, 3.600419018595573*^9}, {3.600425897987835*^9, 
   3.600425898295209*^9}, {3.600426133978353*^9, 3.600426135471858*^9}, {
   3.600427111261457*^9, 3.600427112864626*^9}, {3.6004271726863937`*^9, 
   3.600427175101616*^9}, {3.600427520940413*^9, 3.6004275211997004`*^9}, 
   3.600427735726377*^9, {3.6004288268446207`*^9, 3.600428827126993*^9}, {
   3.600513222779529*^9, 3.600513223571279*^9}, {3.6375776532850857`*^9, 
   3.6375776972475224`*^9}}],

Cell[TextData[{
 StyleBox["Theorem 3 ", "Subsection"],
 StyleBox["(",
  FontWeight->"Plain"],
 StyleBox["Karush\[Dash]Kuhn\[Dash]Tucker",
  FontSlant->"Italic"],
 StyleBox[" - KKT - optimality conditions",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[")",
  FontWeight->"Plain"],
 StyleBox[".", "Subsection"],
 " Given a primal optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 "), where ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[Element]", 
    SuperscriptBox["\[ScriptCapitalC]", "1"]}], TraditionalForm]]],
 ". Necessary and sufficient conditions for a point ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " to be an optimum are  the existence of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "*"], ",", 
    SuperscriptBox[
     StyleBox["\[Beta]",
      FontWeight->"Bold"], "*"]}], TraditionalForm]]],
 " such that"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417605760099*^9, 3.600417622161007*^9}, {3.600418193059209*^9, 
   3.6004184479104156`*^9}, {3.600418526867786*^9, 3.6004185274644403`*^9}, {
   3.600419015125244*^9, 3.600419018595573*^9}, {3.600425897987835*^9, 
   3.600425898295209*^9}, {3.600426133978353*^9, 3.600426135471858*^9}, {
   3.600427111261457*^9, 3.600427112864626*^9}, {3.6004271726863937`*^9, 
   3.600427175101616*^9}, {3.600427520940413*^9, 3.6004275211997004`*^9}, 
   3.600427735726377*^9, {3.600427809285172*^9, 3.600427885849931*^9}, {
   3.600427931483832*^9, 3.6004280662357693`*^9}, {3.600428420767791*^9, 
   3.60042842139086*^9}, {3.600428469156039*^9, 3.600428472735189*^9}, {
   3.600428831434767*^9, 3.600428831543598*^9}, {3.6004299159154577`*^9, 
   3.600429919811499*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", "L"}], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", 
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "*"]}], ")"}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", "L"}], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       StyleBox["w",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}]], "=", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Alpha]", "i"], "*"], 
    SubscriptBox["g", "i"], 
    RowBox[{"(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}]}], "=", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  RowBox[{"n", "                ", 
   StyleBox[
    RowBox[{"(", 
     RowBox[{"KKT", " ", "complementarity", " ", "condition"}], ")"}], 
    "Text"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["g", "i"], 
    RowBox[{"(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}]}], "\[LessEqual]", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SuperscriptBox[
    SubscriptBox["\[Alpha]", "i"], "*"], "\[GreaterEqual]", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600428098450416*^9, 3.600428276349086*^9}, {
  3.60042830994925*^9, 3.600428360656294*^9}, {3.600428971555417*^9, 
  3.60042897299465*^9}, {3.600429597108923*^9, 3.600429603784739*^9}, {
  3.600515291370558*^9, 3.6005153267401447`*^9}},
 CellTags->"eq:kkt"],

Cell[TextData[{
 "Theorem 2 tells us that if ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions, the optimal value of the primal problem can be \
obtained by solving the Lagrangian dual problem. Moreover, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[Element]", 
    SuperscriptBox["\[ScriptCapitalC]", "1"]}], TraditionalForm]]],
 " Theorem 3 gives us the conditions characterizing the solution of both the \
primal and the dual problems. For example, the first condition in (",
 
 CounterBox["DisplayFormulaNumbered", "eq:kkt"],
 ") provides a way to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["\[Theta]",
     FontWeight->"Bold"], "(", 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], "*"], ",", 
     SuperscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "*"]}], ")"}], TraditionalForm]]],
 ", as it is showcased below for the SVM optimization problem.\n"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417411934288*^9, 3.600417423052297*^9}, {3.6004175079538803`*^9, 
   3.6004175395920963`*^9}, {3.600418577302629*^9, 3.600418671703981*^9}, {
   3.600418713467914*^9, 3.600418786173774*^9}, {3.600418820726795*^9, 
   3.6004188963217573`*^9}, 3.600418938868869*^9, {3.60041909773505*^9, 
   3.600419110274001*^9}, 3.600425266898609*^9, 3.6004255520373907`*^9, {
   3.600425630225403*^9, 3.6004256330049477`*^9}, {3.600427729505784*^9, 
   3.600427734453733*^9}, {3.600428975423246*^9, 3.600429058864686*^9}, {
   3.600429095992033*^9, 3.6004291459168453`*^9}, 3.600429196837678*^9, {
   3.600429940666926*^9, 3.6004299498798103`*^9}, {3.60043000224362*^9, 
   3.600430227450808*^9}, {3.6004302759189262`*^9, 3.6004302930976877`*^9}, 
   3.601385814964429*^9, 3.601558663281171*^9, {3.607433654410502*^9, 
   3.607433656197339*^9}, {3.607433715280018*^9, 3.607433715673252*^9}, {
   3.637578039799329*^9, 3.63757806250173*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support Vector Machines", "Subsection",
 CellChangeTimes->{{3.600429383935976*^9, 3.600429387959351*^9}}],

Cell[TextData[{
 "Support Vector Machines arise when applying the convex optimization theory \
outlined above, to the max-margin classifiers introduced in Section ",
 
 CounterBox["Section", "sec:max_margin"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600512740961812*^9, 3.600512801119184*^9}, {
   3.60051283892124*^9, 3.600512850395771*^9}, 3.601558659500217*^9, {
   3.601558736117927*^9, 3.601558740347517*^9}}],

Cell[CellGroupData[{

Cell["Hard-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.600510896273519*^9, 3.6005109006592607`*^9}, {
  3.6005128679886007`*^9, 3.6005128719736147`*^9}}],

Cell[TextData[{
 "The generalized Lagrangian of the optimization problem for the max-margin \
classifier (in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ")) is given by "
}], "Text",
 CellChangeTimes->{{3.6005128770847673`*^9, 3.600512943813957*^9}, {
  3.600677425738347*^9, 3.600677480971018*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["L",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   StyleBox["=",
    FontWeight->"Plain"], 
   RowBox[{
    RowBox[{
     FractionBox[
      StyleBox["1",
       FontWeight->"Plain"], "2"], 
     SuperscriptBox[
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", 
    "+", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       ")"}]}]}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600512955178851*^9, 3.6005129730155067`*^9}, {
  3.600513906229238*^9, 3.600513910547207*^9}},
 CellTags->"eq:hard_margin_svm_L"],

Cell[TextData[{
 "where, for simplicty we have divided the squared norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "2"], TraditionalForm]]],
 ". The objective function in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") is convex and differentiable, while the constraints are affine function \
",
 StyleBox["(each constraint can be expressed as ",
  FontSize->12],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          StyleBox["w",
           FontWeight->"Bold"], "b"}
        }], ")"}], "\[Transpose]"}], 
     RowBox[{"(", GridBox[{
        {
         RowBox[{
          RowBox[{"-", "yi"}], " ", 
          StyleBox[
           SubscriptBox["x", 
            StyleBox["i",
             FontWeight->"Plain"]],
           FontWeight->"Bold"]}]},
        {
         RowBox[{"-", "yi"}]}
       }], ")"}]}], "-", "1"}], TraditionalForm]],
  FontSize->12],
 StyleBox[")",
  FontSize->12],
 ", and we can thus apply Theorem 3 to get the following KKT optimality \
conditions:"
}], "Text",
 CellChangeTimes->{{3.6005129784631653`*^9, 3.600513025922779*^9}, {
   3.6005130576397543`*^9, 3.6005130974873857`*^9}, {3.600513365653596*^9, 
   3.600513516719843*^9}, {3.600513650699325*^9, 3.600513760507359*^9}, 
   3.600517241981903*^9, 3.637577872750004*^9}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   "0"}], ",", "     ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                          ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, 
   3.600513870738564*^9, {3.60051722534639*^9, 3.60051723159496*^9}, {
   3.60051890411646*^9, 3.600518919036416*^9}}],

Cell["where the first two conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}, {3.600513867266624*^9, 3.600513867631464*^9}}],

Cell[BoxData[{
 RowBox[{
  StyleBox["w",
   FontWeight->"Bold"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"]}]}], "=", "0."}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
   3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
   3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
   3.600158661435207*^9, 3.60015866767249*^9}, 3.600513864747818*^9, 
   3.60051392712012*^9},
 CellTags->"eq:hard_margin_svm_w"],

Cell[TextData[{
 "We can then plug eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_w"],
 ") into eq. (",
 
 CounterBox["Title", "eq:hard_margin_svm_L"],
 "), to obtain"
}], "Text",
 CellChangeTimes->{{3.6005139229439096`*^9, 3.6005139327340612`*^9}, {
  3.600513998355977*^9, 3.600514040753975*^9}, {3.600514214591071*^9, 
  3.6005142148630037`*^9}, {3.602857905701252*^9, 3.602857907301415*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"L", 
   RowBox[{"(", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], 
     "0"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox[
         StyleBox["H",
          FontWeight->"Bold"], 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}, {
   3.60051411622726*^9, 3.600514161953629*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}], ")"}]}]}], TraditionalForm]]],
 ".\nWe note that both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared form this problem. However, after solving for ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ", the optimal ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " can still be obtained using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_w"],
 "), while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ". Indeed, by left and right multiplying this constraint by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and summing over all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 ", we can compute the value of ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " satisfying all the constraints:"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.600174352033383*^9, 
   3.600174383955019*^9}, {3.600174491817814*^9, 3.600174537941121*^9}, {
   3.600175445275632*^9, 3.600175448682406*^9}, {3.600175506253343*^9, 
   3.600175508667962*^9}, {3.600175871676817*^9, 3.600175927236977*^9}, {
   3.600430909988146*^9, 3.6004309310256977`*^9}, {3.600514166631318*^9, 
   3.600514195458735*^9}, {3.6005152064756107`*^9, 3.600515283881835*^9}, {
   3.600515344928915*^9, 3.600515409862432*^9}, {3.600518062887248*^9, 
   3.600518095663272*^9}, {3.600677531332918*^9, 3.600677573255021*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["y", "i"], "-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "-", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}]}], "=", 
  RowBox[{
   UnderscriptBox[
    UnderscriptBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["\[Alpha]", "i"]}]], 
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], 
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{"(", 
           RowBox[{
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "j"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], ")"}]}]}]}]}], ")"}]}], " ", "=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]], 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "n"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "n"], 
           RowBox[{
            SubscriptBox["\[Alpha]", "i"], 
            SubscriptBox["y", "i"], 
            SubscriptBox["\[Alpha]", "j"], 
            SubscriptBox[
             StyleBox["H",
              FontWeight->"Bold"], 
             RowBox[{"i", ",", "j"}]]}]}]}]}], ")"}]}], "=", 
      RowBox[{"-", 
       FractionBox[
        StyleBox[
         RowBox[{
          RowBox[{
           OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600174127286213*^9, 3.600174151893757*^9}, {
  3.600174192850265*^9, 3.600174297068885*^9}, {3.6001743312244453`*^9, 
  3.6001743320502377`*^9}, {3.600174395426324*^9, 3.60017448222078*^9}, {
  3.600174609257825*^9, 3.600174620294325*^9}, {3.600174700488557*^9, 
  3.60017476750701*^9}, {3.6001748058235807`*^9, 3.600174817131991*^9}, {
  3.600174862424131*^9, 3.600175009763543*^9}, {3.600175081076378*^9, 
  3.6001750843648157`*^9}, {3.6001751300761957`*^9, 3.600175142796803*^9}, {
  3.600175178151023*^9, 3.600175202209634*^9}, {3.60017552263131*^9, 
  3.6001755621461077`*^9}, {3.600175619176784*^9, 3.6001757437281857`*^9}, {
  3.600435176945134*^9, 3.600435180026492*^9}, {3.60051426419655*^9, 
  3.6005142837214518`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Alpha]", "~"], "i"], "=", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], TraditionalForm]]],
 ".\nThe Lagrangian dual problem can thus be defined as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.60017522567037*^9, 
   3.600175228536392*^9}, {3.600175718035424*^9, 3.6001757187181892`*^9}, {
   3.600175750944895*^9, 3.600175831350972*^9}, {3.6005143339971437`*^9, 
   3.600514339262733*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "\[GreaterEqual]", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], 
      StyleBox["\[Transpose]",
       FontWeight->"Plain"]}], 
     StyleBox["y",
      FontWeight->"Bold"]}], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox["0",
     FontWeight->"Bold"]}], ","}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.600677610391242*^9, 3.600677616531293*^9}, {
  3.6028583730545607`*^9, 3.6028583827818108`*^9}},
 CellTags->"eq:hard_margin_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ".  The KKT conditions guarantee us that solving this problem is equivalent \
to solve the primal max-margin optimization problem. Note that this is again \
a quadratic program, with simpler constraints, which can be solved by using \
off-the-shelf the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver. On the other hand, the prediction for a given sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 " can be computed with"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005456864968147`*^9, 3.600545700613552*^9}, {
   3.600546086295779*^9, 3.6005460870879908`*^9}, {3.600677628407139*^9, 
   3.6006777163858547`*^9}, 3.6015586551940937`*^9, {3.601622748825629*^9, 
   3.601622815469157*^9}, {3.6016231250698767`*^9, 3.601623127931273*^9}, {
   3.6016232604861717`*^9, 3.60162326741459*^9}, {3.6016233002996483`*^9, 
   3.6016233228344*^9}, {3.6016234515069513`*^9, 3.6016234630445004`*^9}, {
   3.601623543396038*^9, 3.601623545576292*^9}, {3.601623613108419*^9, 
   3.601623643378582*^9}, {3.601623826542027*^9, 3.601623827898641*^9}, {
   3.601623922085689*^9, 3.601623934134159*^9}, {3.601715356947105*^9, 
   3.60171540012154*^9}, {3.6017155563549356`*^9, 3.6017155944614773`*^9}, 
   3.6028579410764847`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], 
    RowBox[{"(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], " ", "+", "b"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "+", "b"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox[
         OverscriptBox["\[Alpha]", "~"],
         FontWeight->"Bold"], 
        StyleBox["\[Transpose]",
         FontWeight->"Plain"]}], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["k",
        FontWeight->"Bold"], 
       RowBox[{"(", 
        RowBox[{":", 
         RowBox[{",", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}]}], ")"}]}], "+", "b"}]}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{3.601715407263446*^9, 3.601715444664547*^9, 
  3.601715481756896*^9}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["k",
     FontWeight->"Bold"], "(", 
    RowBox[{":", 
     RowBox[{",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}], ")"}], TraditionalForm]]],
 " is the vector containing the inner products between all the training \
instances and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 ".\n\nFinally, using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"], 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}]}], TraditionalForm]]],
 " and the facts that by construction ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", "1"}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"]}]}], "=", "0"}], TraditionalForm]]],
 ", we can compute the minimal geometric margin as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005456864968147`*^9, 3.600545700613552*^9}, {
   3.600546086295779*^9, 3.6005460870879908`*^9}, {3.600677628407139*^9, 
   3.6006777163858547`*^9}, 3.6015586551940937`*^9, {3.601622748825629*^9, 
   3.601622815469157*^9}, {3.6016231250698767`*^9, 3.601623127931273*^9}, {
   3.6016232604861717`*^9, 3.60162326741459*^9}, {3.6016233002996483`*^9, 
   3.6016233228344*^9}, {3.6016234515069513`*^9, 3.6016234630445004`*^9}, {
   3.601623543396038*^9, 3.601623545576292*^9}, {3.601623613108419*^9, 
   3.601623643378582*^9}, {3.601623826542027*^9, 3.601623827898641*^9}, {
   3.601623922085689*^9, 3.601623934134159*^9}, {3.601715356947105*^9, 
   3.6017154776947517`*^9}, 3.607433809000391*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], "=", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"j", "=", "1"}], "n"], 
        RowBox[{
         SubscriptBox["\[Alpha]", "i"], 
         SubscriptBox["\[Alpha]", "j"], 
         SubscriptBox["y", "i"], 
         SubscriptBox["y", "j"], 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
     RowBox[{"-", 
      FractionBox["1", "2"]}]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "j"]}]}]}]}]}], ")"}], 
     RowBox[{"-", 
      FractionBox["1", "2"]}]]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{
          SubscriptBox["y", "i"], "b"}]}], ")"}]}]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]], "=", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubscriptBox["\[Alpha]", "i"]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]]}]}]}], "DisplayFormula",
 CellChangeTimes->{{3.601623144017231*^9, 3.6016231451197367`*^9}, {
  3.601623205236801*^9, 3.601623208445745*^9}, {3.601623275581362*^9, 
  3.6016232794166937`*^9}, {3.601623336392014*^9, 3.601623425424549*^9}, {
  3.6016234710926313`*^9, 3.6016235157209797`*^9}, {3.601623561558578*^9, 
  3.601623604321465*^9}, {3.601623654255562*^9, 3.60162365866744*^9}, {
  3.601623692867774*^9, 3.6016237267201357`*^9}, {3.601623878819889*^9, 
  3.601623907696751*^9}, {3.601623941178073*^9, 3.601623995593197*^9}, {
  3.601625248429729*^9, 3.601625263276997*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support vectors and generalization  ability", "Subsubsection",
 CellChangeTimes->{{3.600516572783146*^9, 3.600516581479706*^9}, {
  3.6005167168202353`*^9, 3.6005167209714613`*^9}, {3.6005189316224546`*^9, 
  3.600518931785338*^9}}],

Cell[TextData[{
 "It is important to note that due to the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ", only a small subset of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " will be non-zero. Specifically the only ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "\[NotEqual]", "0"}], TraditionalForm]]],
 " will be those for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", "0"}], 
   TraditionalForm]]],
 ", that is: only the training points with functional margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", "1"}], 
   TraditionalForm]]],
 " will have an ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " different from zero (for all the other points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " must be zero). These points are the ",
 StyleBox["Support Vectors",
  FontSlant->"Italic"],
 " of the considered problem. \n\nAn important theoretical result for Support \
Vector Machines is that the ",
 StyleBox["expected ",
  FontSlant->"Italic"],
 "generalization error of a SVM can be obtained by a ",
 StyleBox["leave-one-out",
  FontSlant->"Italic"],
 " argument ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". Since when a non-support vector is omitted, it is correctly classified by \
the remaining subset of the training data, the leave-one-out estimate of the \
generalization error is given by"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.6005165851954737`*^9}, {3.600677757555637*^9, 3.600677789539145*^9}, {
   3.601386623921225*^9, 3.6013866239214*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"#", "SV"}], "n"], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.60051574189585*^9, 3.600515750787139*^9}, 
   3.600515781307664*^9}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"#", "SV"}], TraditionalForm]]],
 " denotes the number of Support Vectors. \nA cyclic permutation of the \
training set shows that the expected error of a test point is bounded by this \
quantity. This gives us another criteria (besides the maximal margin \
principle) to perform model selection: when comparing two models with similar \
testing performances, the one with fewer support vectors should be prefered.\n"
}], "Text",
 CellChangeTimes->{{3.600515758635311*^9, 3.600515893314638*^9}, {
   3.6005162249309397`*^9, 3.600516380265181*^9}, {3.600516451187839*^9, 
   3.6005164690412903`*^9}, {3.6005461027436113`*^9, 3.600546157811988*^9}, {
   3.6006777934200277`*^9, 3.600677797195367*^9}, {3.6006790967491913`*^9, 
   3.600679109313181*^9}, {3.6006791538231916`*^9, 3.6006791542853107`*^9}, {
   3.600679203770637*^9, 3.600679222444211*^9}, {3.600679429138935*^9, 
   3.600679431559985*^9}, 3.6013767001944304`*^9, {3.607433896546997*^9, 
   3.607433913774089*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074339017542343`*^9, 3.6074339076858997`*^9}}],

Cell[TextData[{
 "A code snippet implementing hard-margin SVM and showing the support vectors \
is provided below, where ",
 StyleBox["KTr", "Code"],
 " is expected to be the matrix of inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["KTr", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], "\[CenterDot]", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}]}], TraditionalForm]]],
 " computed using the training samples\n"
}], "Text",
 CellChangeTimes->{{3.600515758635311*^9, 3.600515893314638*^9}, {
   3.6005162249309397`*^9, 3.600516380265181*^9}, {3.600516451187839*^9, 
   3.6005164690412903`*^9}, {3.6005461027436113`*^9, 3.600546157811988*^9}, {
   3.6006777934200277`*^9, 3.600677797195367*^9}, {3.6006790967491913`*^9, 
   3.600679109313181*^9}, {3.6006791538231916`*^9, 3.6006791542853107`*^9}, {
   3.600679203770637*^9, 3.600679222444211*^9}, {3.600679429138935*^9, 
   3.600679431559985*^9}, 3.6013767001944304`*^9, 3.607433896546997*^9, {
   3.637578920429126*^9, 3.637578920971682*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainHardMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nTr", ",", "d", ",", "H", ",", "f", ",", "a", ",", "alpha", ",", "b", 
       ",", "margin", ",", "sol", ",", "obj", ",", "constraints"}], "}"}], 
     ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{"f", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"a", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"H", "=", 
       RowBox[{
        RowBox[{"yTr", ".", 
         RowBox[{"Transpose", "[", "yTr", "]"}]}], " ", "KTr"}]}], ";", "\n", 
      
      RowBox[{"constraints", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"alpha", ".", "yTr"}], "]"}], "==", "0"}], " ", "&&", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", ">=", "0"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"alpha", ".", "H", ".", "alpha"}]}], " ", "-", " ", 
        RowBox[{"f", ".", "alpha"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "constraints"}], "}"}], ",", "alpha", ",", " ", 
         
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\[LineSeparator]", 
         RowBox[{"AccuracyGoal", "->", "1"}], ",", " ", 
         RowBox[{"PrecisionGoal", "->", "1"}], ",", " ", 
         RowBox[{"MaxIterations", "->", "100"}], ",", " ", "\[LineSeparator]", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}], 
         ",", " ", 
         RowBox[{"Gradient", ":>", " ", 
          RowBox[{
           RowBox[{"H", ".", "a"}], " ", "-", "f"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"(", 
        RowBox[{"alpha", "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"alpha", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "<", 
               RowBox[{"10", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "8"}], ")"}]}]}], "&"}], "/@", "alpha"}], ",", 
            "True"}], "]"}]}], "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", 
         RowBox[{"Total", "[", "alpha", "]"}]}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha", " ", 
           RowBox[{"yTr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}], ".", "H", ".", 
         "alpha"}]}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"Total", "[", "alpha", "]"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"alpha", " ", 
        RowBox[{"yTr", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"alpha", ",", "b"}], "}"}], ",", "margin"}], "}"}]}]}], "\n",
     "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600545717875956*^9, 3.600545751119782*^9}, {
   3.600585819582821*^9, 3.6005858288391867`*^9}, 3.6006042128918858`*^9, {
   3.600604265210268*^9, 3.600604273450542*^9}, {3.601588478974782*^9, 
   3.601588482089418*^9}}],

Cell[TextData[{
 "\nAs before, we make use of ",
 StyleBox["createData[]", "Code"],
 " to draw a datset and then we obtain the 2D training and testing matrices \
and labels, using ",
 StyleBox["getTrTeData", "Code"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600546320652032*^9, 3.6005463437612333`*^9}, {
  3.6006790268837757`*^9, 3.600679140519519*^9}, {3.600679171350915*^9, 
  3.600679201241987*^9}, {3.60067923626015*^9, 3.60067935278434*^9}, {
  3.601376421303667*^9, 3.601376633858713*^9}, {3.6013766911938267`*^9, 
  3.601376696855672*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$750 = MousePosition["Graphics"]; 
     Private`p$750 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$750], 2], 
          Union[
           Partition[Private`pt$750, 2]]}, 1]]; 
     If[Private`s$750 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$750}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$750}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$750 = {}; 
     Private`s$750 = Private`s$750 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600585746776744*^9, {3.600590623675686*^9, 
   3.6005906310066977`*^9}, 3.600590726854548*^9, 3.6005908772505617`*^9, {
   3.600598917722591*^9, 3.6005989405406446`*^9}, 3.600599110860197*^9, 
   3.600599443958766*^9, 3.600599582535881*^9, 3.600602782182436*^9, 
   3.600603523385064*^9, 3.6006039456721487`*^9, 3.600610585106822*^9, 
   3.6006129988954983`*^9, 3.600613812201179*^9, 3.600632644271154*^9, 
   3.600671117325617*^9, 3.600671642243865*^9, 3.600671803735737*^9, 
   3.600672265501902*^9, 3.600672525891562*^9, 3.60120637038491*^9, 
   3.6012094371933126`*^9, 3.601211467232752*^9, {3.601212264674571*^9, 
   3.601212290791333*^9}, 3.601212668249308*^9, 3.601213356535677*^9, 
   3.6012140404884243`*^9, 3.601214608386944*^9, 3.6012180046242743`*^9, 
   3.601286273026966*^9, 3.601295890024681*^9, 3.601296909804433*^9, 
   3.601297170515983*^9, 3.6012976621200314`*^9, 3.6012988950067387`*^9, 
   3.601298947215431*^9, 3.601304693568375*^9, 3.601372885156996*^9, 
   3.601375277266766*^9, 3.601559771884309*^9, 3.601562166577299*^9, 
   3.601563112101934*^9, 3.601571645145769*^9, 3.6015724894480963`*^9, 
   3.601626156297797*^9, 3.6028568557453737`*^9, 3.602859724608704*^9, 
   3.607430517929019*^9, 3.607432448405761*^9, 3.637564725159348*^9, 
   3.637565525882448*^9, 3.637565654749401*^9, 3.637566042202242*^9, 
   3.6375733611127863`*^9, 3.637581899581437*^9, 3.637582140909525*^9, 
   3.637582201539864*^9, 3.637583464261553*^9, 3.637585525828174*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXmcVMW1/zAzvczCvgsIAoq4L4ArcQMSRUQTFXGJgto9PTvDLAwyArIH
V9QIj6eigsYormDcCK6ERUX2nveSl5c8owZBBaMBZYZf193m1u3vOVW3u8eX
3+/z+8NRb9etW/U9a1WdOmfMhOqiW8smVMduntDvp1UTKotiN0/uN6qiKvEo
p01WVvY1WVlt7uqXJf77cFaW/edwVmNjo/HnWvFHPPb9oIPxr86Jv9tW/35e
xeFoJPJO2R2vtdkSbxS/BBp3bdr89LSSw5FI7L6axe9lbW80nrdpjO/4+aZV
j3y4sKHqQGks9mnppNvmL1j6Ut7GHfGsqUafXdk2TN+5jfGPy9c89cCO2fWV
B0tiRXtKymuXz7zn8T6vfrAza3J6fbPv1bfiuKe2As45bhJ28dn1ros/fvXe
g9WxaHMkGv02WlLSHI2K/449XL3o9ezEu1OMbrvrNEWfSIx828K1S+ubSqKR
RNuiL0oqKg+UxaKJ4UX/Gpt8T4+XN8ezJqX3DZ33sup+hHnUtw4JsrUInBjh
9hEbXl995apVq05+7b2tWbsaG4ONOzdsXT61JNG2aHXlvBdCm3buvG7TCwt+
qIxGvomWNPT97aZdJoF76DRFnzhi14cvfD2zLNoUiZZOn7Zsbc7WXeLZK39+
sDom+lo2+b7ft9kab6w08U/1MzrvWTRu9alMaR1CWGQ25fnMbWsXHqosimQF
E9wSyco5GInVnPzQe9uNNrnG3wAcQND4Lb/nro9e3D+9VMyl4sJ5b2wVTzs2
bn3ji3kVgrfKrpixanNWvLGx2GieY3/O+FgAfDLbX7fmCPML4ts3/Gzta6tu
eOH5Ve3e22bozcQ/O2ave6TucHEk8qdYzeL897dbzOG3d93mta069imZI0ab
THLAiTveX3KgNhY5EInVnfBv63aIp/mN29//0+KamNBAC+qWvp+1wzcH6Hab
54xw5+3rl9ULxP5SVP1AwTvbG7Mq/XWV6695beYGqkFb3c9ItA3Fd24esGnD
+qzgwPXr12flDFi/YVPw451xXdoO3f72PT9URSPfRYrrBy1bv1M8DTfu+MOu
R6cUJz4aTWiqd4R1sWhrf874WAB8MttftxZBEvZsc9UrT/77w79e9MAlj726
qc3OeGOPXZtf/c+H6oqFXfx92axVOR/tsqXbZ++6zWtbdewaHKD7ZYsD2hn/
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
TAIKl2/XLz98ft6hiqLo5pJpy7q88/H2ttu3bfrDyzNKRfNfVz+4tmDz9h1t
4vFGmPeb3jTQXYjZOV/0djMy5cjdRKMO0l7I76K9WKTQC/l2jjo2d41FiYZ7
uBINyybf906LoRV57z/43XNzK5qKoqVVM57ckL1T0/AylYqVKrIXpiGzaCLL
dtxkPkOXrRd/WF/vtDsKvGsKVXBlfMKEJnfVxEN5eYs/nDq1Hd310s11dU43
Fxt/RZWQWVyVkPcrZhtVQkwdHa57+dmHvplWGv0uUjJl2v2/ffaPD08xSiWs
qZz/ZOQlq5lRLWQBGPoY85myLMhQ8K6q/sdNmozZEys2lJufOOvUDVoxz4+0
K3GYIxCO0K4JH6yce6i8qOjd8pmPbnqqodTN1rpcbZeS9qiMA8Fgs+Ben+UX
JvAKWBF1hcpC9Nakl6UgdEt7mBsDIaEgXls5tzyhIGIHS43aD/4Vg3k/M3jX
hAlfutKEO1p3mD8IJ2JuOoLHwVGUqDpuHx2zqFckxDq1PnLXppV75hgFQSKp
c53aayFunh3tD9LTMKR0NseAZN8arXqVRM68MY4SUJcQseATwnvrpmdmJ4Q3
HfiU/oAiot9njj7F3fCLaTglfWfDeSGG8wRTMtnqIeYgA4nF2aY3n5ldfrgo
BallMJTMuSJLvsOq6ACfAfMUTXk+H6OUw7/uqEWkDohQJjubEUHeUZkRbWeh
gS60IB72mR70FJILw16h9gJwFg9ADv8zMl6KLUjdtC8jNKEfy4u77m3hjCEu
yT17SKOLBJGW1Yq49S4juf2dE1m5Uq55LtIkCVHVSnd3J2NKJeDWCmy96KGa
CFg62Iu5a+9Vbn88Lwu6S3xd4G1P9EcxfczgJQyGaE5SA1up/XE83W3aslWO
dZWM7Z+2ikvGiJ804SHkhOF5nYZicF45nlZnblqy6mykJpY+8+yepTnrYTy3
oqToCkt1IglK2OvbeUn609bB4mx+wGdh/moHeiLcIeIESHF3yaGBbnKJs7E4
jfGHxjl4sJeCpoo1eDf+57Ga07J9KUL9noBn3dvfrH/VMuvl20pL/WZNI+Ji
L9ecopUcSbkw6Ibn2p5HyGdMzeV4LkN5agbxW7qX6Ir8IaV09bvwkOjeZO7p
D7qxPEZELmLdvNOKVYNumswMQI2KjGtuwKhJ18Mf5pdpoteXR6+QRC/oXexx
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
w8U7Wfjf9eWECV78UfYxbjgk/qYVDlPAiF8FuJYffOfEiV/qahtv+JTmSYm0
n3nBY4/JBwPXZlRFeUuKcQiSdyfN1UdSdXsjTYXZXnEtNtc9FEpPXYYVCHHq
SmRwsxkF3HXYV1hoUMKATyuUVtunlzY3cuU1gtHiGn9EVVj7o0iaS0C70hWj
Fbqyer0iWlTX/I/hoVaEk3UAomWqyQJBCSq2ijg1VqtR+nuyKI/zR1G2tJjf
TdBsTZlH9ZJQ5XrCP9F1uS/V1H66Aebm/mvSvmriHTuqPleQzB3/iLZxUcF7
pLzRujwEZP1qfxRXFNk7CWOu2NJoZ0HjeculuXF1+jz8HmkzL9XUf/5yDsBT
rYTB3St8Hzv4y6aNHYuMzvcU+SfR3mAIyLpPiuqWdB2KSdvOwsA4Vm8hrTgk
85QHxAXn82jWEImXfZIxpUB4hUh5IlZz3eIogvvRuSVxzRjty6Ibnz7VsG6Z
2ZEtpG72VEkV9Ytn7YnFyCRdTNaP734oKHDYJAVV6jteHhw5tQRD4XBWy7go
L2NYMcWZdn10y9zay014g5wqp/zAV9df7+k1IJol1fhh0udIfGLeDO6WUtke
s4/46VvfefbVh+ZO/WZSSWxfrLTqxWkLlg56cf12kU0aZf1Pz50yt37YG2tg
Vam+GGKGavIrG6IIwYUZ1cKOUxPgLWlP/mcrtOpVUFD6nq9cVeR1k7Gb1/FF
lGpKBX4Eo5y0/b3H9k0vFUmgI03RaOxQcZHx37ujlfOPXLlpF6wR4W9Rhe7P
hwG1XVvUnpP0sHfXDkcUkfx5gT9mUDhZQU2LTV/aNWqV1uyuqfEkgQOaJOfm
z+fM8TIGZQUcNjU1SI9U6gFl7WpszGnc9eE7L9xRLpKr/2dx3YN9Vn2ws1N8
y5qd/15v9LW0+n6jcAUqGoMuh1n7sijSLktxnUWxTa6bs+Q8fxzA12xWKvCu
oB3aAHTFlyc5BAkHziFnR5ohhZNmBm9olwQyJTq/a3zzK1/dUS6kvSTS8Mwm
8VPil531Gx6vP1wciWwpue3J4MadkMh29gV8zqFz+wLdkdHd8BpGfkb2An/i
j+ioXjXSuoi6ISD/1vmYl4lsV92SXimczfTm81GVc7TKsgivWyLIIrxduyPx
U9mYGa9stglfs355/eGSSGRbSf3y4HpMeDtpCXv4qPYg82nqK6k6lG4nORmp
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
zD4prZpm1y0wOznZ1aHx51rdB1lt/g+qqKaA\
\>"]]
}, Open  ]],

Cell[TextData[{
 "\nIn order to train a hard margin SVM, we will use the code ",
 StyleBox["runSVMExperiment[fTr,yTr,fTe,yTe,trainHardMarginSVM,linearKernel]",
   "Code"],
 ", where ",
 StyleBox["linearKernel", "Code"],
 " is the function used to compute the inner products between the samples, \
which is in turn used by the training algorithm to compute the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\nIn the following, only the Support Vectors will be marked with thicker \
markers (squares and circles), while the other training samples will be \
plotted with small marker size. Furthermore, in order to high-light the role \
of the Support Vectors (the closest training points to the separation \
hyper-plane) in the following examples we will not plot the testing samples. \
\n"
}], "Text",
 CellChangeTimes->{{3.60137662712603*^9, 3.601376639247032*^9}, {
  3.60137668044366*^9, 3.601376811776379*^9}, {3.6013849649473867`*^9, 
  3.601384971557229*^9}, {3.601385365180463*^9, 3.601385409684113*^9}, {
  3.601385995761528*^9, 3.601386003469253*^9}, {3.6028581504826813`*^9, 
  3.602858159332988*^9}, {3.63757932841257*^9, 3.6375793740726624`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"runSVMExperiment", "[", 
  RowBox[{
  "fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainHardMarginSVM", ",", 
   "linearKernel"}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005898842524137`*^9, 3.60058990481599*^9}, {3.600590770279476*^9, 
   3.6005907805314817`*^9}, {3.600590906007497*^9, 3.6005909295274487`*^9}, {
   3.600599100001532*^9, 3.600599103254562*^9}, {3.600599690230921*^9, 
   3.600599690557418*^9}, {3.6006105474506817`*^9, 3.600610631784918*^9}, {
   3.600631686689803*^9, 3.600631696086622*^9}, {3.6012171377628727`*^9, 
   3.601217160028503*^9}, 3.60121856408537*^9}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxl3XmYT9XjwHEttGjfKKUSLVqkxVJytIhS0SYhSkqLEO2lLK0SFYW0IJUW
hCzZrn3f993YZpixK1pUv5nvc19nfs/on+/zfubznXvvzOd1zj1nrpnzm7S8
57HDCxUqdP/xhQrl/e8rJ3X+9qgbdyYt5i15r+bLc5M6Az4t9Fb29tgXVutb
//DuObEPLv/xlzduyI69qOWIE/7J3Bp7wFETn3jlw6zYr381e9KBypmx76u4
7OznN22OXXZ+xgt7O2+KXahZzoKWFTbGXvbv72V3rM+I/cDlhx279JT1sQ9/
6Izx8x9bE3tg50tbzxq1Mna9sdUunFp0eewjtt+/Kmm0JPagEk93GT1kYexh
uZf/1DHzYh+7v+yOxoNnxH7k/rz/Jsdu9eR/r3yyf0zskhffV6vdTUNiX9H7
6xY/Vf4s9tlPHZP7Jf4wxONVbPDO68MGxr5sbb02Sz74NXY4scPC386bFHvr
4Adyjzg99kd18r4gc2J/8VL7OzoVWxh7b83mPbtOWRy7xpkPbO7+7LLYn2+7
8crPSq6MvefXy177avbq2Ld2Kjaj/0vrYt+Zd7iPM2K/+Mn+wQ9s2xC77z85
968Km2LPfmzD3w0/3Rz797nL+q7fviX2uRXm1Ghyc1bs276cuGNzr62x2xQZ
2a3Z7m3515f71cy+NSf29NxP1/yL7fnnX7XHW7v27Yhd4rvcN8Ttu2J/nff+
rLM79qgxuf/9nd8L8t7P3+6JzcfnM6YWXrdkZvSh+dB8aD40H5oPzYfmQ/Oh
+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzUc8XupD86H50HxoPjQfmg/Nh+ZD
86H50HxoPjQfmg/Nh+ZD86H5iNeX+tB8xPNPfWg+NB+aD82H5mPWpBHt21w5
LfrQfGg+NB+aD82H5kPzofnQfGg+NB+aD82H5kPzofnQfGg+NB+aD82H5iMe
L/Wh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8xOtLfWg+4vmn
PjQfmg/Nh+ZD8/HH2O/+ObrzpOhD86H50HxoPjQfmg/Nh+ZD86H50HxoPjQf
mg/Nh+ZD86H50HxoPjQfmo94vNSH5kPzofnQfGg+NB+aD82H5kPzofnQfGg+
NB+aD82H5kPzEa8v9aH5iOef+tB8aD40H5oPzccdLcrvqzJ/XPSh+dB8aD40
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
h+ZD86H50HzE46U+NB+aD82H5kPzofnQfGg+NB+aD82H5kPzofnQfGg+NB+a
j3h9qQ/NRzz/1IfmQ/Oh+dB8aD6+mV7i8etv2hN9aD40H5oPzYfmQ/Oh+dB8
aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/MRj5f60HxoPjQfmg/Nh+ZD86H5
0HxoPjQfmg/Nh+ZD86H50HxoPuL1pT40H/H8Ux+aD82H5kPzofloPOCLETNG
5PvQfGg+NB+aD82H5kPzofnQfGg+NB+aD82H5kPzofnQfGg+NB+aD82H5iMe
L/Wh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8xOtLfWg+4vmn
PjQfmg/Nh+ZD83Hme+ceVffSvdGH5kPzofnQfGg+NB+aD82H5kPzofnQfGg+
NB+aD82H5kPzofnQfGg+NB/xeKkPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+dB8
aD40H5oPzYfmI15f6kPzEc8/9aH50HxoPjQfmo8VT/Z9YNNX+T40H5oPzYfm
Q/Oh+dB8aD40H5oPzYfmQ/Oh+dB8aD40H5oPzYfmQ/Oh+YjHS31oPjQfmg/N
h+ZD86H50HxoPjQfmg/Nh+ZD86H50HxoPjQf8fpSH5qPeP6pD82H5kPzofnQ
jzX86N5pn+xI3qo1t8ap381OeNFTTq/8WMO794SXXn548OeP7Q264P+/xbwl
79V8eW7i83t9q9x8PGdH8tdxC7de/uGcZNakA7nfgdz7sD3tjpjQId+nj/v/
+7j/v8/v/+/412RP++zrnVnB+Ta6JxdE9W2xj817e/XMDMOqj5884PAZidfr
jDPX3PXljVvChjA4VG00Jb5ejxiSOaBEzqZw4nV9xiz+dUJ8ve58257De3Xf
GF55olTLRWVHx9frJrlvjzOqbgjLGh7Z7J8NQ+PrtY837TdnXJ2rvkta7T2u
xUXz14dKZ5zf4M4bP4of12eXyvtvbfj5ykGdjp/yTvB6Pe3uvAFoVXju66zW
Azv0D16vW+fxmbE8NFr70cRLOw2Jr9dnD3mk6ikllobDtw2eWWjxqPh6PSN3
ODuuxaJw71+ZW7OPnxBfrzPPK37niR3mhzKF9je/f+jk+Hpdpd1Nw4+8eFY4
ULjwnqTu9Ph63X1983P+mjslzCx62vNl/54VX699vPfJF/zZ/at5YWnbK4qu
zxofRhTtNf6/8xfGj+uOVTqunnn1L6FPlz6Frv1tUXy9fnh/3oDTL7x78oCb
npq2JL5el25yzQ1H39omad198Jtf9VwWX6+z896eC75L6hcbOW3JUyvi6/X0
GZds6vT5iOSWz8YffewNq+Lr9XFv5Q2YE5LLzpl2ezhxTXy9HlEmb4KalpzR
Z27n5zasja/XPv5fqaXzvh+2PjSalgd0dvLbPS3e3TUpI35cvzns+a0VGyxI
njit9SXH/rQhvl6v6Phw7gUsTtYsfX5W6U82xtfrK/KG/+FLkzo9Xn46vL4p
vl53KJ034K1IptRre1z9Zpvj6/WK3/K+4auTSme1H/hcnS3x9fqyqUWb3jN2
bfLT6jfv6lo5M75eT7z97+U/XpORnPfFu7u+L5UVX69zhu5ue8X7G5LujTp/
OKXo1vh67eNHn/dh+fW/bQ2nl8i8YMiGjclrG7ot+nPttvhxHfLeDpU2J7v7
9Whz2vTs+Hr9ZO50PqLLlqRp096nlfs5J75ed7s39wu8Jff+oMxXw2/rtT2+
Xo/LG5+v35rckdWvbtMOO+LrddYFucA+3pZMGPDtgdef3hlfr0/OHT4nbs1O
rnnqh5697tsVX6+v/633wJvD9mTJ6cvPXlVyd3y9Nn532V/vmWbddsfXax+v
uXzVuN+O2hP78FENT+jwWv56yHhrfP18xtTC65bMjOOx8dt8aPw13s6aNKJ9
myunJeZP46/x9o+x3/1zdOdJifnW+Gu8vaNF+X1V5o9L4s9f0/HXeDugyak5
zd4ekZjPC46/Rw/Knlrm1UGx213+0NMHFn2VuB8w/hpv2x246IGz2j6WuH8w
/hpv+5TrtvTnNp/F+w3jr/G2+ODCr3aY/WO8PzH+Gm/9fXn3M8Zf423Bv09u
/DXeFvx7zcZf423Bv19r/DXeFvx7ngXHX39fTxf8e27GX+Ntwb9vZfw13hb8
ez/GX+Ntwb9/Yvw13hb8exDGX+Ntwd+Pb/w13hb8feHGX+Ntwd+fXHD89ftE
dcHfn2n8Nd4W/H2Cxl/jbcHfr2b8Nd4W/H1Txl/jbcHfv2P8Nd4W/H0kxl/j
bcHfz2D8Nd4W/Pfqxl/jbcF/v1tw/PXvx3TBf79l/DXeFvz3LMZf423B5/uN
v8bbgs87G3+NtwWf/zT+Gm8LPg9n/DXeFnw+yPhrvC34vITx13hb8OfHBcdf
Py/QBfdHjcdVb8n7b2s4qdPMb/8YNys5LXf4nLgjM1R9c3SpLmdOT7LbPPhH
1R5bQvPXf/zygucnJxPyvp3VNodr91S6tnXfJPk0j0/2xvDRlrMu/6LeqKT5
9S/nrlA2hB0rD5aeceKQ5KbFeW/AjHDx6UW+3b27Y1I+98v96Ny14eAFz89d
XbZbWFP4qksanbc63Pr9/v3FLhoQ3rm2Rq74FaHGw72OeKThsHDV/y5gach5
emTRCt+MDmu7P1v9rjMXhxljst8rfGBCeHfK23/WbL4gfDbxz+Nb9Z4SHt+a
NyDMDs2nH/3xqjAjjK/RZPJrpaeFqnOLnVF98+xwet76Z9aE0Gr7WSd+8Gnu
ujBveM4YEeq3LHX3pCcWh2Nzl0ttHhwQbtp7SbcD1y0NF36dNyC+GC57vvzS
y45fHqrlvfyFfslpf1Qq1mT9itD6j7wF1rDk31eqPdhjyKowpXLehDY+yfyn
Ru85HdeEzuPy3uBTkgXtaq89rO66cE2j87ptLDwrufvmwVdW+CcjrMt7vzee
n0w9ctjCOpkbwuT5eRPWoqTytBGtn56/MRTv878BNxn4zuhT3x61KTzTKu8L
vDw5/7bxv/TpuzlMyuPadFXyybGT7h/TaUsodnLef2uTY+ZM3b+0TWZonjc/
jV+ftP1gZo/dDbNCRt5weu2GZM9dcysVvXVrODb37XtS543JyoVLXqlWPDtc
c0neCW5K7uy2okSDw3JCo4/+94ZPJt63Zuzz2Tnh3T/zJpDM5NozMh76cPH2
MDRvesnMSr5fvunfH8buCGtmXj3qiyrbknN6ZX019ZudoUjet7dbdvJR/Zxq
GV12hdzJ68ivt+Ukh3c50Oqf63eH+oef9kOZajuSsS1entjp593hvv99PbcG
67uyH+ZNyFnh4qMmNZ2cMyMp9L/xODPUPWxYRr0aU5NlSaNv/snZHN78++uG
O/tNTH7Km34+2RQezblkyFH/jEk67Mp7A28Myfqi31/1yy9JvdzZ4vmtGWHN
+eHRUp16Jg3yTv+C9WHBVZt/m9a0dSjyv+/vmtDvixU7b1rXJwz5Im/CWRmy
fzntv+0tB4eGc/Mm5OXhzMcHvDO70MhwVN500XJJGPfstK59bhsfhuZN35MW
hp+r7p193cxJYeyoUrnvuHmhwy2H1fnmmWnhlLzpdOGMcN/tJy058ZRZ4akX
8/6bHA6WLdai9cAFod3Am5OV140NmQNL/vzdG4vCFXnT9dtDwrwrL9y75u4l
oUXucDHu9t5h1LDLrzml9LIwcljueFi0a9KnwrUv1Ni/PHQbvCj3HTUw6fRr
lVGvzVgZzu51WrkPb/s1aV3llr+GfLY6VMidXRb9OzFpmNSqktV8bcj4IA/c
9KRHk8szBrybEd7Nm36HzkmKli7ffvKzG0KvZnlvuIXJG1uuKbWu/saw83/z
7eJk37eVJv9x86Zw89G35gpfljR7okrTUy/fHHquuPLc945fmay+pFrhK87Y
EnYMyJuQVie1c27+tuZ/W8JNecNDs3XJ5J9q1Hh0a2aY0z/PV0ZSsUWtrW0X
ZoX9//O4ITl3zz1lh329LZyXO1rcXXFT0m1o3dlzO2eH2/93P7A5Oeq5+s23
Pp8TnssdDR7YvCV59dpGxx/ReHv48n9fv6xk1/5HBp1Tc0eYkTd9frQ1eXTU
Y7Urld8Z9v7v/mJbsvzlJ3ffc9aucHZm3oCck3ybtz1+2O5wa96n6749efj1
Smfe8sLuuJ+wJFQZ3ahx/vipvV/dr7qf1cZX72f3v9r9pvW8+01tPP3483GV
Mz/4OnG/ZT3rfksb705afOFng9+dH+cL9+PmC83fC7X/Prl4mT3B8SoMWH3j
mGU/JD7fhXXOrffKiLnxfsT60f2K9n665aZ7Xz875Pfa9j92LXFaRpyfrafM
39r3/8dytd/rOTq/Hztp4coy5bbF8z2r8egnF2bvjvOX9YSvp/tz/s1H2v28
r6f7Uz7NF9r9rOtxv+b83I/4esfnFdL3k/FNm6+9n3w/vN98P7T523zu495v
1j/WS9p8bry0frIesn7S5nvjqfWU9VF8PjVt9wPGW+srX1/rK+1+wXhsfVRw
P8t6yv2D8dp6qeD+lvWV+wvjufVTwf0u6y33H8Z766mC+1/WX+5PzAc+bj1l
/aXdv5gfrMesr6zHtPsb84f1mfWW9Zl2/2N+sV7zfrVe0+6PzD/WWwX3x6zP
3C+Zn6y/Cu6XWa+5nzJ/WY8V3D+Lfw82vd8yv1mfFdxPi38fNL0fM//5fNZv
1nva682PPp/1nPWfdn9n/rQetL6zHtTu/8yv1ofWe9aH2v2h+dd60fhpvajd
PxpPjb/GH/eT5m/rwYL7d9aP7jfN79aHBffzrCfdj5r/rRcL7u9ZX7pfdX9g
/Vhwv8960/2s+wefz/rSelR7vfsLn8960/pUuz92/2G9av1pvardP7s/sX61
HrV+1e6v3b9Yz5rPrGe1+2/zm/kw/v6P9H7c/Y/1asH9Retb9+vuj6xfC+43
Wu+6n3f/ZD1bcP/R+tf9vvsr69uC+5HWw9YD7r98Putf62Xt9e7PfD7rYetn
bX3h/s162vrYelpbf7i/s742/1pfa+sT93/uF9wPuR9wP2Q+dz9ifnU/Yj7W
1jPW2+Zv+5k+bv3t89nPtP6xHjc/28+0HrI+Nx/bz7Q+sl63X2n+tT5yv2m/
0nxrvWQ9b7/S/Gr9ZH1vv9J8aj1lvW8+tJ9p/tTWW/YDzLf2M33c/oDPZz/T
+sx+gfnUfqb1mv0D86f9TOs3+wn2K82X1m/ut+1Xmh+t5+w32K80H1rf2X8w
f5n/rPfsR5i/7E9a/9mPMF/Zn7QetD9hfop/ny1dH9qvMB/Zn7RetH9h/9H8
Yr1oP8P+o/nE+tH+hv1H84f1pP0O4735wvrS/ofx3n6j9ab9D+O7/UbrT/sh
xnP7jdaj9keM3/YbrU/tl9hPNB5bn9o/sZ9o/LVetZ9iP9F4a/1qfyU+L5KO
r9az9luMj/YPrW/ttxgP47/XSde79l+Mf/HfR6TrX/sxxh/rU+NTwf0Y6wnj
kfWC8cd6wHjjfp9X98N8ut/l0f0sf+5Xvd/dn3l/u//yfnZ/5f3r/sn7xf2A
94f53vvBfO77b7729Tb/+PqaX3w9zR/WO9af1qfa/bj1pvWoNh9ZP1pfave/
fp5hvHC/637K/j1P7p/Mz/arvd/Mx199f37JQkPyf972YMuh2xu0zf/5WrFr
bx4z8rbN+fPPX4vfO/WM/Pmm24Sm9VpuzP95Wfx9LL0WrP7nsi/i/DLhQMuy
TUs+FX/+Nb1WhTa1VvXN/33FszfeXe+YIeHPqR83vuzB/J9ntbz7l4Ob9uT/
/GrrmqW9endaEMf3mQt2PvPtrXPieD4mq/yA01+aHtf7xvNLLtv8R9/cdZTx
e+Dp+78c1GZRHK8r/ndU9TGvLInj87itZ+ZMb78sXDZkSddpxVrHnyfVvW7n
1uvbfhPH51t27X4jafBLHI8fm/hU0Q1/jIvjb3Jb61qHzc7/+4H2U8qN/bV7
x3vy/77a3p8nZR1TN//vS434ZvZ1Hz6Y//d1Xv5syQdnPJT/85sbuq7N+Pzh
zeGojF37r7o7/+c3798378FXR62K4+dJM38aO/nc/J/P9Ljh/XOPeyf/96Ue
t/KaG8seyB8P7dec+MCx7aq0zv99eotrnbp40vP541+PamdfeNvL+eNdg2vL
vDz/tfzfJ3Nu2Svm3N9uR/iiwoInj7g8/+clm1uF3t89nP/zkdI/DppTq3v+
z0Oe2nLOv7um5//7uO/P/aBc97/z91u6D3379lv2Z4aWt9xc6tHDpycV559U
9byhW8Kgxt1G7790crI657PyB5/ZHJb8Pu2b034cn7xxdJkyKy7ZFO68rNmy
6/8dkVxQZnDxX7ZsCB9PPeGEaf0GJTXfunPA6rVLQ5dn33mm+pbR4cPxj3Tt
dv/i0PmLNiVPvG1iWHbg+RdqzV0Qane44O1Xz50aqjQ5bUyRTnPCKc0W78j6
fUaYtaTKey+8PD0srdXx/vvmzAn9l3x8Qae3+yZHNNhSY8m+FaHyWy89/9jm
oUnTO8e9euz6VaFEn4tWvlV4XDItfDK42qw1od1DT5e8t9vk5KKrntn0wvB1
oc11V5V/PaxK5jW/5rNLe2wJlxxW8vZp09ckhR4/75dpnTPDpunHPHpCnfXJ
lY2Pm/dIh6xw5/S/brh0e0bySL0/sg6+uDVMv6Rjhz0bs5KcqzrtXzh+Ryh9
/J9dTr9oW3LWZS+c9MwvO0P73S16V346O6lVpknZo3/YFdYt3vzdQ4NzkhtO
vKjfwtq7Q6WR9X9pv297sqzoOeW+mrU7ZE2odctV92WG4+95eudlxaYm769d
WvGEk7aE258Z8/aEahOTy/5qfGn27Nx14cnFqg5YMjpZeEZ2yWnvbAydaoxs
Mf+iYUn/Jyb/8t/5y8PMzssLrzxhZNjRd3nvkb2WhLp1Ky4dMmZ8uGZ1ToeW
Jy8KO7rWuqf6NZPD/osLLbnrlPlhyHN//zrk2OmhXe+L+40/bFZo/eCP55fc
MCscyOzy37effJAseuTPyyv/uzx8tOvGd3747sfkmvsWPtJy28rw/Sl1vvv9
t5HJJ7d+/8k3S1aHmZ++Ubho0YnJ/krtZ65O1oYqpR+o2LvEtKTepQ/+c/KP
68PpD4wtXf/vFUnFVlWPb3T2ljDvnAE39Ou4Omn2ZNmL/jw5M7yzuVvd7KLr
ctffZ9zY/ais8NXSpOKZt2ckMxsc3qDcP1nh71HX3nJDlw3Jn/ftfG7W3q2h
97bvp5SfsiG5afL5D/9UYlt4ocT4d494a2vSsVy7jl9V3hkW/3v1JxfN3JYM
vbj5F9eV2xUu3/h931rH5yR7T/pp9VOn7A7vTT13UMu7tyedju/3RKUPdofj
6izMOuPjHcno/scNH1ZkTziifc0nXng9fz9086YPa/ffnP98hfl8X4mwruy+
mXF98sJVl1cquX16kty6ssKi2w993iK7ZomPT94yNe4XPtb4mO1HrpuctD3u
qcJXFMs85PmLzc8fqP7Hsolxv/C74rPD8q+S5LpFuRPEpkOfxxha/bt94z4a
E/cL32rd8bv+HUcm+3u832/L4EOfz2j3VeMG7z8/LO6Xb+r5YsnN8wYld7z9
+4WzB2XE/UPPZ+TsLff2kKHfJmW33XDCn6flP59RrOdxOXfuXxf3D+0/Hvis
Q93y295LFjz0xa/fT8p/fu6jC654t3DXNXH/0P5jiVprh5d/rVuovW183Uca
5D+/UXRw7TLjLsp/fsP+Y86etkVf3/99mPxcxr7iv62I65321z076bkJ+c9z
WO8c8VWRL58tlv98x2mty2Z3KvNrqFro8I8WdD70eY/zqt9Vof/V4+L+YrHj
Kk9c12dCGPl+7gWUWXLI8x89fr+9Wc53k+L+4gXrGx7/x6ApoVyx6rPD+EOf
B/lhRothR46YFvcXrx7a7sGTx80ItavPXbBz4LxDng8Z0fvj/86ZMiv+vKLa
W/2/KTt7Tvj53+c2vvn9pLjf6PmQaS1G1Kq4aF64tNOnb1S5aUJcT1W4tFXl
rcPHxP1G+5XZ5+2odXGrheHKm4a1eSBrRFxfXfrg/oHTig+N+432K1sf+9+e
a15cHGpktF7wdPcf4nrr1BP+vOX2A33i8yPur/7cd1LPG19fGv7edXBLvyc+
OOR5kjfWlqp611v5z5PcvOjSj5a8uyK0XLB19DUTehzyfMlR06/ZXL9z/vMl
s8bcUHFD11Wh9XFPPPfQWYMPed6k68+3dmrWLf95k7u/qb12x6drQp0VA6vX
KfvrIc+fnPpZvSuf+2xt/vPZXR7p+NcX68INS7ttHfXoxEOeR/ms41PL2vVd
Hx747vjnVhXKfx5wbYnty0o9MTfuH9p//KhC1fG3LskIjT+cVfnp+fPjeq91
h9wbjBL5f9/P/uP9l9Y4ee7yDWH42Mn//XPXorj++2P/VeX7dch/PsX+Y/Hz
6jS9d/XGcEP5fk1uHZH/vMobT5/cPXtb/vMqcT/ytAdHrly3KUz+pt3ULucc
+vzKl8c0OfbhjfnPrxz2ZubVFzTdEm49q/HFy9889HmWR/996qHMLfnPs0x9
adfb3zfLDHO65N4gbV99yPMtZfa1+bn5tvznW9555o+V5Z7OCvcfcfbOZveu
O+R5l5ys147Ytz3/eZc7mhx2+YgWW0P29W0vrvfQoc+/DFzzVt2Xd28NLX9u
8H6fKfnPu3S789T+rRvl/75W+4mtF3b5/r9928Lw7Fljb/kj//mXZe90WHrG
x/nPv9hPvGpaj4NvHcgO+0vn3sBemv98YvFJe4qMmZr/PIz9xP2j+9Q+7u+c
UKFx7h1Y4/znYxocfLhS4z/zn4+xvhgz+Pt+H/+7PbzUq/jd5bsd+rzM6/2H
/l788Pzfj7OuZMVz13TcGZLFuSc87dDnZ6r2GlPzq8L5vz/ky1OrtW7yzq5w
1AkHhr3817ZDnqc5osbGuR8f+f9+v8Kb/Zs8V313qF7z8S3nXHHo8zVNJz5+
4P6385+v6f7vxZ0rTt8ddnxysO4T120N112y7735K2Yll/c5WPTgv+tD3f7j
3tjZqkvy/MqT9g17YW3Y/F21v5f/3iWMOaXMqqd3rgqFx3X94qJi34XCd1Se
eMHjK8IpAy76snmlYaHaYfteqzIxCW0/euulv29dGOpl3nzm2X2Gh3UdH/qp
/FWLw++fXvL0gX++DdVeuDaj2TlLw4nHNCg5fO3zod8Tx5/25dHLc+exPmvP
/aVRcspvDftd1GR5GDjkiicvvWx2srZLz+KlZ2eELud2nPtQyQXJCe++eVUy
YUOokdki85tvFyVV27e6o/6IjaHQwPr/7bhiadLilYaP//7jpjCyza3FK4xc
nnzVpma7D/tuDvuaX/b466OXJ9cVunD1vH6bQ93Pf6zzyKKNSdm7VnV5bGvu
++uN8x9664zNSb0a0wYUWpcdTn60x5Pf19+SvFdt6KTei3NC81uPf2Hul5nJ
6Mpfrqkwc3sY//kNdUv/mPv9f/ucLe913xH6vFPxoVfWbA0fl5g9rvCUOcnN
/SfWqdszKyysUKJurx0zksv/aVyhVees0OL2w4u+N3NGMvXGysd92DcjVHzs
y3UXf/xlsnTs2/8tH527fnzz4VblvjgvnLX/s8yuV60JxbMaf/7Fki/Dw+UG
z63xw8rQ/e1dzQtNGRT+uuzZC89ouzxc9OXIytP+Gh7q13jsgcwnJoU7e/Zq
9PDdC8LMNiVq/fTz6DCo07Mff1plUdhar3nW+11/Die2vW3anIuWhBP++O2E
Qb/2Cs+2PP+vw09dFn7LvqnOpq9nJNU/7vd+3ToZ4fGXzurQ5pe5yfPvd/lm
T/UNIfvwP1e2b7Iw+fbNV5LO128M38zcvHdm9uJkadvHV15UflNo+OGCoqe0
WZYUefGefZMu3By+/6HV7bWv3Jh8dPfmw3o+sy0U7pJZt81zm5JJty8ocfWj
2aHJsw0f7TFqc7L35rHXzquXE8bft6jlmINbklI3DKj95F3bw1mVar62vlpW
ck+F7k8eecuO8OlnCyZ8U3Fn0uLoU8c2r57//MJvLw0c/lfNPeGikoXa1yye
/7yt5xlu+OvB5eP+mZNMP+Gs+s++vzU8Xmr910/Nmx2fX2hf+O43K/41O/m0
dv/nGs/Of56hxQUDwxc1859faHP1c6f0u3lDOOfgoKo7fv82ubbNvdXnnjQ1
7p+efMLdra7YMyVUrNrgvU4j54WZY2+p+fj/e344c8Ano7vldqlje/5e+Og9
YeZtc/q3/WZDuHr/HWtq9fwxuf2nj07/sfuGsD6j0bcPzvkh+btztyJNGk0P
nVbPunJlxpzQas+01+65dlo4qnrLlrsmzg23j68z6Lar8p9/f/H4Y9++auX0
pMINZevuuSQj9Dpq7s1J4+nJH90umrrrlIxwxQvbHzz4Yf7z34vK31vj1vUb
klvvffL68lduCydd+dLITrfsSA52qv/xPdvyn0eYeVLN8kP2z0r+/mJOiXEV
NoZL7l9/Xa8qQ5LhD5397I2v5T9/4OcLvw+/c/jrLYYkl44a+slnufdRA+7p
cf2vy2aHqg1PKtpo/cz481s/f+j4Ye97+k+fHRZcVe7kj3vl/7312rnTwbyy
+T9P8nxCxpk1c+qX3xYaV71hyEv9tic/d14/O+fH3eHN3Olg0iP5zyP4eca/
66dPnPbt7jD2/GHjPs/M/X68t7TerxfuCbsezB3gy+X//gHPJzSqf0fOexfn
P58w7fqc887M/X7Ve7/PfbU35j+vMK7ykzWu/yYzhFoPHD3juGnJw3X3XVfs
kS3hjce/69OgwqTkiDZtr9h39ubw8hG7nl2XjE2+63pUqfkrNoZ9lbv2K3zq
8GTXjBLHvJPrrGPvqifW2fJpcuHsWn9OLb4uVCl7+K93VHojND/y4Yy2H64O
d69Yf+2Yal+HoTc8N/3ao1eGn4bXfqrCnUNC726n9Jt5/dLw26ON+766YGzY
MOfC99oPWxTGfNq40g9VJ4VLilzfqvKlC0K7V0/sc8bp00LG618O2ph7C3zz
w8lRHXNmhoOP7rp9UumJYXP3rjmXz1kQTh5Y7qqmF48Kt77T7NymIxeFJ0of
9sU7J/wUBrwc7v2s35LQYPT7dUuU7xqObV7snQUfLAs9mzzSas63rZPrHjui
79Mdl4fiTZ66/6we3yafP7B6Sd8WK8POWk27DGw+PPnntmFHr3hwdVj5+Kl7
536QJI2qvF/lhOprw/pqG8q+uHxKklzxaKtbrlwf6swb1fCorTOTjz48555x
H2SECQ0+7NLjj3nJxPeOaV6v44bQ87erM7oduSjZ2+H3t/a9tDHcO+bcP1d3
XpKUem3DV11abApFOxQ9pfTpy5N7np/76yVNN4cnHmtfsuaDK5LsZyffemDd
5nD+Zc9U/HDDqqTE04Mf/njJlrBqb706K55cm9Rq2vuVy2dlhq6/3vLkeXvX
J20feqf7jCQrlK5W/MZrbsi9X6nbZtCjw7eGNy7ocme99huTdbUbz/j3h21h
TZEj6782dVNywm21Nvbqkx0qZb/8eJ9jtiRVb6p48JpPc0K3ubtaT7kzM2l5
/QVnLHh/e9j182NvbP0oK+lzzYlXPt1+R/iyX5+3/rp6a1KxfOFxlQ7uCAff
OuPjki9tSx4vu2fZ4j07Q90nO39509jspOcFa3e3yNoVht5x+I+PF8qdz7s0
LfxWi93hrHPW39t4W1YodOVRra7ZNDN56tL+d95ZIyt8fUO5Kv8emJ6cWPOK
Gy85IjOsq/fGko/On5L80nTUNYWTzeHM5+Y3L1NrQvJA+5su3vDKpvBzyXBs
622jkt6j657Ya29GaFbsv2Xtzv06aTdoYuHshuvDvaUOTnz5iteT6VlLt/dd
siZ0PKfQ3CkX9QgnnZ+9+ME7VoU1fUPh7jt+CHXr/zv65CnLQ8vP/lvY74Lh
4c8X3h20441l4eo3Blc+8a9RodrPn3/yzYHFoVH/d4587t4J4Z1tP7/2UMuF
odR7FZtnXDIl9KzeaXrZeXPDhmeyFt9RaEYYXnb1o8cOnByeqFjj6zID54d3
rzuq6W+VxoXTu7xaeObEhaHfufUKLSk2LLzY7t7K//20OLx0zD2Vm+3oG1a0
vvSZa3suDY93eWHTvpyeyVONdo0u8vKK8Pr4zg3PafhzMrfO9J1Vmq4Kj668
fsINbUcnl9/8Vak2tdeE0q/8fnK52pOSrte+WPf769aFIp/0f752qznJJR+c
ur7T0RtClZPHL245YUFS/+3//ijz74bw+/Lvt4+suTjp9EbOKRP3bQyDvvyk
cKGFS5PRLy2/rOG2TWFSzQNlm3+xMunY4tfFUx7cEl49cdPNv5RZk/zS7Jsd
jWtnhmuXzWt4cOC6ZPPDHx319y1Z4cW71l5XqndGcnr9tud/mntfVu70mfc+
dcGm5Pk77r9/Tpns0OmPqg93abY5+bb6jS2blcgJW1f/0nzoj1uSZVUvf+/w
k7eHm5OyLy/blZkUqXTm118U2RHu7L76/eOWbU3mX/73bUVe3Bl+ePHunlee
lZ38e2HWo32b7wqFG0zvf1+jnKT4h9uqliy/O/wfGKP7cw==
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnXW8lcXWgA8n9tnn7H2Ma2FgNyYGYGArAtIgJopdiAhYgCi2IqJidycq
go2Cha3XboxrBwp2futxPe93/GP95p13utbMrJoVhhzed2htTU3NeS01NXXh
zgnPf+Jj4YBH2tTUnBUwIeDhgDP1zwg4Q//IhpqarQO2CXgo/KcbdlT4tw3Y
LmCPxpqaNQPaB+ypu1bAYN21A3YPWMN4ZwYMCtglYC/D1wmYaV3ODpilO5Ey
I2xgwM4BD4T/1IDTAlqiTR2ba2r6VMMfYQOM96jpziFu+Psb9qDpaMPQqPem
AZsFHBawif7D/bd5wP0R7xTL2zXSrxawesA+AesFrB8wJGBd/ctFffaI+pwS
9Rkb/dw9oEfA0fbT9gHjwr9TQM+A/SPNBgEbBhxvXMLOini7BOwacGL4ewX0
Djg04nUO2CRgvP/6BJxgfsTb13p1sM0rBqxkv+CubL+vant2s02Mzd6OA+3Z
zzyoX5+AZWlfwOgoY8eAbgH9wr98wAqODXmvEnBP9Nf4gJPa5DivYnl9zWN5
x2QF69fQnO09M2BOU6adHnCveZwc8Gd9Tc0zAc8GLFWuqfks0n0esEx8fxHu
lwG/R9hTAU8HrBj/58a/7wL+8B/pfwuYbby2EeeTCP80YMlyuuTbsVJT82SE
/xLwa31+k2b1Uk3Nj1HHnwJWKmfe3wcsXc66UI+aCHs+4r4Q0Bz/34h/bwZU
yum+FfCX7XguYOVy5jGPfiqnOz+gXTnb9BX9FN/fNmZ7lovvr8P9hn4sp0vY
suWMS1jnqH+ngJro10HRn6sErBrwUoRdHnBFwDEB2wfsEHBUwLYB2wUcrUvY
mIBuAd2ZHzG3h0V+V8XcHh3+HQ071jy6BowST4AXhrmGugQMD9giYMuA44xL
+rbNWe6ogCOMS7yxltkj4ISAngG9Ak7U7R3wYsBltuck5yjza7zh+E/2H/P0
ePPbKWCcLvne5/xinZ9iXObmkdZ3q4ARuuDBajnH8O2ACa7R3QIOCv/GzJ2A
SY2JB8F/Z7vGwH8TdcGX5+gS7yTXcd+Ac00HXpzcmPgFfHNQlLFxQMeA8wxn
vZ6vS7wLjAsOONn8+gVc6D/W9KGRvrP47tLwH9iYdZ/QmDiOut7qPGCOXBJw
gPEubkycdYD9fnDAIc4nXPDTIZFvJ8s42Priv8jy93fcDjL9Lc4/yquL+bD6
v/qU7zUC9g5YJ2DdgL0C1tY/OGAt/UMMXy9gH931A3aOeb+ya2BiwKMBswLO
DHg4YEbAWQGP6J8QMFP/Lq6b1QL2i7w6BGwQsK954z8gYMOAjQLWjDUyPNpw
bayRZeN7t/geH9+nOA79A/YgXkD7gJud+7T/poCR+pdqzu8b6S/LpIzbXW+s
oQMtkzmxu/1EvnuaN/3COLG3bBTwSMBZjvMs5yXz8T7XCXP/jKjfzgGDAk4L
GBAwsDbX88IB/wk43X/E285/i7BXmgf77R2NiSPAH6yZBQMWCrjXtUp525tu
0YAptok0D5gH+/kLjTlHL3OusLY6OddwOzsvN3LtjXFfYt891f6mDWc7n+in
cxpyDOgn+mMX5/0ZjbmHsV9NMpz5NdF0pLmrMXETuORO24d/qv/AK4+5tsEB
TzTmema9PtuYa4A1BF5pCVgg4Dn/sc4etN2cd2ZYJ85KjzpW5Puw/6j7Q8Yl
Hnizar7Pmx9997h1oR7PNCYuoB7TGhO3glOn64I779FlnO62TcTbxjFcWFy4
gON6W2PiCeblU42Js8BDM51rzLOn/UfZsxsTZxHvSfsGf0s5ceo7Acs2577Z
FP9qo4wXY598KeBH+4I+/kmX9s23POb1D7rEYy99xLBvnFv0Mfsk8545y3lw
QMBAz7uDAnbxjLuz/q+NS/rTjUvY944HZcx1PBi38+KcsFfA3gHn6w4JOCdg
j4A9A84NGGy8b60X6ScZTtixMXd3COham2eNGZZ3nP84h70W/XJNwLUB5zpn
wZGcWfvbtm8DB70TffpZuG+H29dz1R+ODfPiN8eGMWSM34/85gT87j/iMd7v
xr/3Av5yTjN//9Zl3rGeP4zwj+pzfX9Qn37wBPnh/9MySd8U/1+Pf28ElBuy
Pfgb4/vV+vT/7Dizntin+9k29u2++n8xnDn1qy7tYT28HXm8U59zFpc2MJdp
B+08O/p6t4DdA5obsi5vBlQa0n2rPtcWLnnVlLOt4KeJpmNcJwTsal6NAa/S
noC5AQ8FzAhoiv5/MNxvAnrGGa1XxDshYPkYy28Yq4De/A9YMOKeWMo4vQNO
DegfMCDgj0j/dMAzASeFv09A34DxxsV/SkA/0ywX+X/dJstoF99fhvtVwFLx
/Vm4nwc8GPFOCzg94CHdMwKWiThftMk0y9ZmOvKaXsr6UeY9utRlhdpsx9yA
lZi7rJWAFWvzH/57jXuy0Ne6/h7tecq2/Wn7ng34IWBWwKMNef5+LODxhjyP
P6r/t4DZpv8l4ImAJwO+D3g44JGA+QEzzevMKG9QwC4Bk12j+wT8ajrymmc6
0vxsmeT7neNJvvTRzuZVCnilIce+Ib5fbkg/fTnQeHUBL8W//wbUl9IlXm18
v9iQYX/Z7ucackwGmP4s68s8axPwQkOm+du4zwfUlNIl7Czx2a7erXF3826N
u3vAZuXEtf/cV2J+XxdwfcDBMQcPClg+5uGBlYyzacBq5cSz4OPNTcf95nXx
0HWuH/K4IaCL4Zydt9AF379l+I2uK9ybXJ83B9xSn/VbI2BNoJy4gLX+nuG3
1ieOXiVgVeKWc28g3vuG3xawZ4S1D1grYA/za28frG4Z9M1q+ncxP/zty1km
eOUd60j91i4n3gRHrlXOcPxLxPf/GvNu2aYh74LsYQvG/3epe8Di8f1xY8Zb
LL4/akz/QuUMfx+86h2R++RacZ4cFeNwc+DweuZO/Hs5oK4h90b8C5Rz/6SM
ReL7g3A/BCeX06WMhcuZ95yA9cqJi8Hl65SzHewJ65bTJWzD+G7DPhywQTlx
H/4O5cT7+NcvZx74/1POvCmbfXKlgJUDGhqyvq9wjy7n3GGcVi3n/s18Yp+Y
EnCH+8Tt+uc4hvg579Jm+oA7DPsE+wY0G/YS8HdHwylzU8MJ6+S/UkOelX/2
js84cYbjvDPRNcEc2Szm/KYBbZrzPlOyPO6pFc9bm1sm/k0qmSdnce4i0B2g
W3BPYCyhDXBv4P6PnzsK4fi5z0C/IA1nfeYNZx/O8gUdYiP/0X7mzV3Wm/tB
jWk49/8qnYN7ES75nuFd56GmpHFw/uPc97ku5z7GlT2NuzVtZazYg5mP3NO4
FzIPCH/JOco/zoDsxyuA4wOaoh/KAe825TlpZdfnR47tnezvlYzfzzPKis6V
OeZ3u3MId4pz+mbrAV3kXs9w5zhWrG/mN3cPzuZf2KZ7XVd32l8fmh/x2sea
GhFje0M1z57ct7iHfepcoI/e8R9lc++/wXjLNOc3NJ0Z7pPsJ6fbxw8GnBPw
mHfO3aLfzg6YENA/4NSAUwL6BpwccFLAgIDTDNspYFzA8QG7mu6sgEEBZwac
EXBEwHUB1wYMDDjd9Dsbjn8X05HmyIAbAq4P6BlwgmX0DhgfcGLA0ICrA64K
ODzgGv3DLAf/YYZfGdDLdOR1qP+uCNg9YKJt7mP7KKOf7abNw60LbdgzYFLA
OQHdA8YGjLHdMwMesQ0PB8wIOCbgtoBbA44LmBJwe8CIgBtt59GG32L59wbc
E3CU/24OGBlwk2nGGz49YHTAHeZ7rHlT3ijT3WQ77g+4z3o/FvCo7XhcP+Px
YMADjsdD+s+wHQ853g+Y11m29WH7bpbtP9lyaMO5AU9YxiH29+UB5wU8adhE
60L68wNmG0af3mnb9rDexN034MKACwJejfm6Zszv3QOtvBzf7eO7fXxvHetk
QrgLhrt+S8bZMr67BsyN/wuHu13Aw/G9ULjPR/gRzUnPOK05afXTYp12jLSd
uIdEnJ4BfeLfIuF2D1g+vv9TTTrwxs1JC4YWAq0Q2gj0wsWbk0Z5fDVpnB2g
SQb8FWnWD/f9wC2/xPcG4L2GpC9DW34u3MObM69rpY+Cr6E9Q3v6h95eTXy/
Qbi7Nuc3dKhHm9NPvMfom+bMd+OWrGeviP95JdvyTXyfGP/WsA/XjLrsEbB7
wFoBgwP2DLgz4q0ccTarZp/St/+LPB4JWLE5x3a/gIscmyEBkx3Pwc4D5tpe
jj3+vQ3Hv4/jSZpZlSzrsvh+D9zMXhX+u6PcVcPdPNw/w/0oYFzAq7qrB6zb
lO564X5Uyfs5Z8EXoVM1t97XwYngwxfCPbI5/bdXsy2bhnt4pB1ayTrM8Fy5
STnxKHMEvHpL1f/hjgr4Lcpct5o4hnU5rZw46+6AqeU8g+1lf6xj+/Gva3/t
bfufcg2sZ78MsW+eNuyEf7X1l/C3b8px+7WcY4b/N8pzDBmPZ0z/cznjrtGU
Z6F9LaOD44d/TdcbeBHeAfgafM+Zan/jcS5inwDfr2WbwIur+Q9cDo+APQAc
395w8l3DvEm/suGUsarpSPNTOeu4esDv9FdTtuev+F6/Kcf3q/heNtx2AV/E
9zLhLh3wv/heItzFA+aVk54KXfWT+G7blGFfx/dyTZn+O9oZ7opNOS8HOy7f
BqwQ/5YPmFvOcPzflzM/0nwa30s2Zb6fxfdSTen/vJx1wV8f0BEcEfA3fd2U
bfihnPRa6LZ1hm8UUKu7YUAb3Q0CanRJ/2U5202bmZfsc+xppfB3DugU8GM5
+48y5pezHPriBOcm83Lbcu4x7BXbl3OvYi+CR8NeyH4LH6evfvhZ7Pc9ysn3
IZx9lbvANgFbl5PPxT/27YUtg7Aa5xBzDT4RZwv22AVNt1U5+VM9LYNz+vqu
gyUtk/2Wc/t25ss/zh1jhbvKuWfwb6r+buXcS9gnl9C/o/MLPLdbU95x+Ne1
nPeR7S2D+8gO+hczHH9b60Jef3o/Ke4iuMUdBZd1z72VMwpnFu6hw/Rz3zxC
/6aGM5bcPYcbtmU5z0P4Dw1cdEgl8S31ONYxo17H6d/G8Rxpv+KOsH9HmNeO
9gdp4D8OcDw4V2/oOHFHYqwYA+6KtIO1voB5US/u3Ny3mYMt/ivuzVvYvuUd
5772KfOLOddkv9DuinGLO/rmhl1eSby6b+x9xwRu/YO1H+6VlfyeHP93Cndc
wPEBXQOOCzg2oEvAEQHDAnoYPjZgB8OPCejuvzEBOwaMNn2vgBNZKwGbm8fh
AVsEDDffbqYb7Ro9IGD/gO0Cjg44KmCrgBEBRwbsVM17xhrhvhX1fzNgbuDx
u5pzX+YcMSrg5oCbArY03XDzuDHghoDtrTtlbB0w0vBtTI9/W8vHz37AHr6H
uGM/+lMchLtPU+JT3CG245KAiwMODLhU/0EBl+nf3/CLAg4JuCLgcvPm34UB
hwZcaRhtuD7guoDDAq4yjDIvYBwDDjaPy2z3DabpHTDe8ejpmDDeG1gPymRv
2Kspzyvr2o69mxKPHmibNnMMhzYlrj3IsE39R706Wg/COP8xJvD3O9lOwjYx
Lu3rrHuIc4L2XRswtTnPjR/G9ydt0v20Tc6VOwKmOD63ON6M5a36mY93Bdzp
ON9m2MkB9wXcG3CS7j32x7SAu+2j6frHG46fuT/VfMcZFz/r4HbLGGOZ1O+Z
gOcCZgvcDScFnBrwQMD9AS8Yh7jH2abbjf+Uac7VP8m4pHk84BTzoD2nNeUd
9AHjPGWal/Q/rvuSYcxv1gfrYSzrKNzvYnu5tTnP/9wD7uZcFvBxfI+OOK+H
+0jEmcYZNuCT8G9bzf+rhntbc94RuE90444d7urh7lDN/Fertt4x9gj32ErG
PTu+D+ROEd/rwLuI/28HzIu8HgjYMWBehA2OsC/CbR/uxEp+31Ib/RLfX8X3
O/E9Ib4/Y8zlpVBHeCdDqhlnrXD3C/gmvtcGB9Zl3leFO66SdYZO8WCU2T3g
h/AvXpt9sES451UybbUu8Rnz9JqmXBO4VzflOsBlfV4eeewT0A4eQbh7Nucd
5drmlK/grtMt7hRD4ntCNc/FR/j/snD3Dvg64u8YcfYibcSZxD0q8msXbqU5
0xLn0nAHy2+A77CX3229B3GXuivSXBp7wsrVPP9y5uc82Kclz/DXVfMcf6T0
juubk2bCef+65uR3839axHsu0q1SzfvASOP0bsn6Xx3/X/NewVn7Z+9I08Od
EnBwpF0p3FsDOrN/hnt+wPHRrmXD7dWSdb4ivq8Jd6j1PyzcRQMWie9nm9PP
/fCuGJeFcSP9ZdWM06ma7aff4cfcHXEW4c4TcZ6wf+inqyt5l0TuBxzTyXvr
444X6S+uZtqO4V5QzbI2Dve8avJtNqrmGJAfvJ4Lw38nfJhwLwn4EJ5PNet6
mPVnTrG+wG2dWvJ7QMQ5PdzO/r9DvtC4SP+kY82Y923JPr8x4n9QyX/LRpzb
47ulOXlI51Tze8NwZ/CvOe/JXVuyXadW807L3ZY7MWe4s5tSJoIz3UT97Hnn
6H+pLtfEf+tyP5xk2EORx04BP8X3UZHvPtGXS9I/8a9nQJvwb92SdTiymvXo
5X+AdLX1ufeca767WhfkNdiHzg84L6BPU+JucDN71GTD2IfZM9kLkYNC5gM6
6MCmpNOBIwfogoP764JHd7Ec0lAX2kJbdzYP0vczLntIX92T7CNkTJAj2aol
0w6LNh7LnI42LRXuXgE3B/5YrJr4qUtz4qczuCs3J46ZFG635sRJnVsSxw6i
L8GlEb54uFu0JD48OL73Z/1H3CXCPShgs/huG+73lfyeW03cRvyhdYkLN7Os
M8Pd3Dps0pL12Q1c3ZLz4aT4HhPwRNR/6WqOeXfrdnFzyrr8Px2lOWkmP4b7
uf5xkeanSLtMuHsEHB3lLEp/RFjvgA4Rdklzyk+CD88Nt4d9vmVLlnUY87Mp
zw2cKZauTb4lvMn75CPC89wp0iwVsHRAn4BlA5YL6BWwTEC7gB4BSxqvp3EJ
606fGbZjwOL0Z510sJrcp/qa3/IBvc2PMroZl/TLVHL/aWFd1GTatQIG664d
MDzCtqB9AUPCv27AegF7B6yj/0jDt6KMyLOd+80+xl0/YFiEbR7QJWBf/3UI
+A5aWPTbF+G+15xxDg84wriU/b9q0qm2AJ+F/4Oo84cBC9Rl/d+tzXMdd+ni
zo3LOHCGbw6oNLXesYnXxX/VpjxDQjeB3lDcvYnHOZl9hrv76u45nJehSRD3
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
UPje3A96iyeYX/BfV3KuIA+xinNnJf2sy+VM3988VnSOruLcos/YO9kzT3Su
UwZld3Y8TrBvCBthXPbhk6wL5RziGJLmPvcQcBb3lh72L7KP8Fu+D6iv5Dcy
kfCTwWvgM+QoCZ9Xk/ze7cQ3nAP2dZ5f7PxgHv1Sk3cb7ug/BTwW8HhN7uf7
Ge8Y8wCHwbfuanmlqEOD/I9jDSesLv7Vyh8qeOGsN+Q7qRfrsE0l+UJFXfme
6b7yqPVgrc7S/7P1oq7c57rbL0e5jmnnfPMgzSW2jzX0pXcd+hX5EvjpyAeA
u9fSz9rlfMBe+ltNnkWeqkn5b/ro15rEZ+ASZHBGOoacNZAF/9H+Q2acupJm
jGPSXTxIukIGBxd5H2TKf7J9rP9trcco88b/q+NDncB/yDlwDrvU9oEb2Iva
257L/HewuAy8D86+3H+HiLO6io/2sC6k39u+oQzk4Cmb/gBP7WCaY+wn/A+o
c4L+wVf2MfstZ5dX4x72WsC8NmlHYKY6Hg/rR8djhv52yOySRyn1Px4yDF3w
r+PfN6XUO/8dvZZS6p/j/llKvXrcv0ppJ+C3UsaD7gsPGV1z9N0J/ztgvnXB
fsAPutgDWAaZ4FLWAx0Y7AhgD2BJ5H3j32cBSyMPXcp4i8OPCfd/AUs1Zjhh
35qONuxcSd7RosjwN+Y3adCVp620DT2Z+y0Puwi/oF9SSpo1dUfHHR37GuSv
G1NvB77NcurE4C4f8Ii6HxPU51khYMWAmf47W/2Z5Q1rCni9Ie4yDak3slLA
yuqf4K6ivgruquqXrGi8WeaHbhN6+/PD/aGU9gJwfyylHYefS9kebDzQJsYG
mwGMA+1Bz5+x/baUev5zw/2ulHr//MOPzYDvw51XSjsE5P1TwBKN2feflNI2
Af8oDxsG5EEa7AqQjvp1r2S/ofvUtjHTMa5f2sfoeaPTDp+N8UJ3tBTQCB+z
IfXP0VO/sSH1vbF7cUVD6jOjM32T/9Bxv6Eh9cOJh05qfUBDY+qkNpjvho5n
LTxT8yYNeqp1poG3CF8RGYZNrEu5MfWK4IEgs8oYXtuQdUSX7Br9jfJJ4GOu
3pL80MuRnWxJnu/p1Yw3zLZdaTuwdXF1Q9q/wNbFVf4bat6Hm2Yj616nvC39
hsztDo2t8x0detYG6wZ9ffqd9dRDl7AFWpJ32b+aOv+sK8YWHX3wAmulp3mw
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
kwdtYe8gr/8DGIUUDA==
          "]], PolygonBox[CompressedData["
1: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
XlGN3gf/H+7gnuM=
          "]]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
bO8B6/jM+EeWGyKe6Eff6F8r8NeQ+KMse9A9tgOu7zPtE7/5xD5NFmf0e9ko
1zGgQ0Arw/YByxi2a8g29gjYsyH3w6UriW/aZB9dyTF1Cuhs27sF7G5fdjU+
xLQ9xEcX8wbZh07upeyp7MMDbb+9tNfBcqeYRvwDx0DfwdPyDUnXjJM6lpfG
SVtWvHe2bXBD31d0b2ePZzzMITLBKu7zq0lby/st/WS+SaMcuFxd2qtU8vc8
2+xkn1d0rLS7R/C6XlHuyuB1hbjk212r+d1U8bq7eFvJcFfx0sV+rCIuKXeX
Yzvdvu7lfK1qSLlJ7iHseXdKd7ObN63tQeL0VHHczjk42TEMMq+T8z3Ivpxu
27s636fbv8GW202aOMN+rGK/iEOvrA/WflWZ+WPXAjQ72LHd6fzebd4H8gbW
EDy1osz9oWmUgx9/ZBvtHdNA+3CW9Hiadd8hDc227qVdW3tKNx+4BsEF/GmC
dU00vrz9o++19dPKuRni+DtJm8v/ZV5r87yyeOloe8s1NK3JZcXzCtJRZ+tY
QZyvaF17N+Y+dH2ROGXsyFDs7YV6ym3GZ9n3d41PMA1cwtffM+8z+fMD8rYH
5X/QzPuWA3/IZ8hicyz74F/4DnyotmecarsDjX9qPm3cJq0N/AvtQsuT5ePw
bNZN4Rpr5b5Sw++9zvUX9hHeTL+WVaeYW8nfHzq2RvUu9qhO6htT3WPYQxjb
0uon00xjD2LcyyhzM+ZWyt6nS8vQ616NyaOvLXI/2dU9bJ77zlR58GTjX9pf
4ne4tk6zrg/F7x3imPaRrTdR1n5UeXChsjz+Ovj1IEMgqyFTPFzNc7JVK02y
GrIbezwyAXv+3pZFZkE++Lt5NZkAGaEmW5B3gufMNytfjfdsAp0FPRA9D5kG
WQcZ53jLUm530+gHMtCKljvWOjjnqMmXjAH9ZUPrRaZZ037sY3+RccZpG8Pm
wDi+VG6+yTTsEZSbJ46Qo75VvkWu+k559x/NM/xBvWAN26N/nyrv0e85yl7I
sbeKi88Dv3MqKVszvs+UzZDXaG99x/OFvJi+z3W+GOvn8mfao4/4FqGLbeD4
e2vP2kYbTw/tQKO1NWGfGqM9BrvMKO1P5F2tnamndqMjjF9jGuUu0B6G7at2
zt1bm9DhtjdSe1N37TcHG8ce2dXvL9L2RN4I6+v2F1vSYdqkulmOdrZybNj5
sPG1tb1NtY3VbFU129V2f7FpEW7vOP9pXdihWmuX6iPOWmujamNd9Bv72gaO
f0u/727ahuKJ9jcXT1tY7kjTthA3m9hXxoc9cWPtZBsaP8w0yrGWvlFPY219
rb7Gelvoer5CHRpdqY3nXpx3YQ9gjWEzWFv/Js7C0O8PMe8S6Yb4AY15fnZv
kTaFw6y3tfXhC3Wzdl/st0NdV9D+ufIF4vhBzJTOkaX3Mg8ZHp7Ceh1vHazD
s02jHLLr7pa70jGhB05Wz0Lnoh+cD4xZqklvRI98tJp+GKtVUkf8VZvXgY3p
4/VA0aRb8s26njMwtpqdArsFdoqDjGPnWKRuOcX20f2usl+0P9LvwOMkdUH6
+qA65rnqgGcbf8g0yrFX7Se/PE9c7ufesr/89VB1XPaPydW0Ca5Yyb2kvXou
elJ7db+W6q/osRfIu+HNVfVg9Fz2XvDO/CxtHbu4z+1sOXj3V+4X8FB4DPGK
ddBGN/k9POsweTn7TaP1URc2D/RS+OWDtgm9IH+hv6E/3S990CfaPlHdne9P
Mr6jacdb98nm8X0X9wf0r92koR76ejC2M8wnr6370LGO4Xjj90l/9ONe6yKO
HHmG8bvtL/ER4hUc1OzgrO+p1bRNrFxJWaCrc3Cp6/xQbdjdjV8n34EPPSHf
JP8ReSL87zF5JXz0YfkveZzjD5en4q+0vmce00yj3ON+R72PWh91cd4/Wv6N
Xwu+AfgQ4O/ytHH8dPBNwPcAP5enzPvOvuILg3/AGMfxvWmU+9a2a+UY06XW
xx7DfsJZ38uuZex+2KaxPY+V/8LLsbFgp8Y+jX0HPyb8mVjz+D0RZ52Thn0b
f4hRjm2RfX/RfrOvXG7aNZZ7yn6Rh0/Sc/VNvhpX2Vfwwt52pXi53Ph00yj3
i3G++9lviL8sjsHRvErKlx8pb36g3PZ9kTLBt0Wu89nKcjWZoyaDrOd6Y+2/
r5zHfrCusheywmrKDsgXrDnkk2nKCMgKD7uOF/xFjqGNR1zrXymvrKrchZzx
N2WsOco0Kyt3rKncM1cZZTXlpjWUt/AvmSKd4gO1oX57802DTvGDwx+OOV8o
3UOnNX8saGiG9EW5r80n7yvXA98ssD7iC+RZa7pngpu15WfwtbXcP0kjjmw9
TL7L3gDd1GhrS/cX5O6h8ukpymJz3U9+k9b2k045h3kZH7u/3CMi5L7IkjPU
+jwfRY7hPJZzWeQbzhE50xsec/fPSp7DI6P8qW/QY57Ncy7f1jo4b53RMtt7
zpA4R+TILrUz1S6VPKPlLBk5qMF+IIdxblw75yTkbJN6/ucYtrGPnAkj4+AT
s8gzWM5i8Ys5pJR3eLi/c160tVkl48hAi/VbQgb6Xf+lbrbDmA923MhYyErU
/bu+Nr/op8PdIHw+8PdA9vpDHyl8DfBHx9/g/Ghz60rG2xV5X2dSkXIVZ/P0
dVjkb1HJup4Nenwm4O1KymS/6u/T2rFyNl3D6XTx8bK4Za/72XX/uzwGnoqu
BR+BJuBl+F6xDqCJBdLsomjvt0rePYO3zXNN4Ju5ib6q2Ks5Y+N8j/MxzsnW
dX/9RV6FjMLZG2duB1h2HeUR0jZQllnPct2sg/j+0iltwDdfcZ39Ic96Rfp/
yTjrFn7c33XIfgWPpr2vXa8PubezTqZLO5DudtIgNNdGvEKX9IXvaj7FhDX/
TUL2E9bTfNc3ff1KPoGOx77FHDBO9qea3yghefu4n6whPqiPcuBpobwEX/ty
Oc+S8cvHr5A49ySX0X8NX51zSunHxNrDz+kifXXONu+woLOdYz7bNqbPz1nm
4TODL9R5+qecX0qfKc63hxufbP6wUt4ze8a7Zh2LXEcto84uRdJtJX7vXiR/
qDY2+VcN9bx8mPVSx7PWs3eU3ybK/1I0+WzhwzWkyDNHzh7xjcGfDP+vc4o8
b+Lc6aeoY7/4/XiR/mH4ky25b1yknM2ZTPsi79Bxl+70IuVmzgmPit8d4veO
jekXNELcdSrSLwv/rD2KvGPCXZNdi/QFwifoiPjdLn7v0Jh+Tafa9p22jy/b
rEqOkfXL/ZNF+v1w34G7Itwjaa3vT+2+CGHtrkkzy/VSd3irRd5HaPDuALrE
I/p1b28a9wJ28J4BdwoOVSbv0CLvO/ypr9LW+ijV7rjU2Y+21sH3O1oH9w4Y
A3O2Uanpfg6+U6t5DwHfKfryqP3cSj4H/+MuxuJS092dP/Sd4j4M+CCP+zoL
9MviPsMX+mLV7v/Q3oreZ/i0lPdLaJO8Vb2fwDereJ+B+MrecyDO/Qd80Ph+
Je9CkNe3yL1nUYS9i/R3wu8Jn7QhrpNj9evEv/PSIs9Vno6ws2cs2MR28SwI
HafmIzvDfeiFgBfdI0nD1+k468MHtYPnS8jsT1WStvG3uLjI9KeK3JPwV675
2L5sGyOKbPfJIvekFy23fNS5AhC/hxd5rvtEhPMi7cEY/3+L5Hn4NuHHhP/S
0wHPBNwYZXv/xUZJiG2f/enZgOkBDxd5/2BAkX3l7JZz20eK9CU/vsg9+b/6
l/HNlQFXBVwb9f3b+2PwWXytXtfnC98v4jt6Fo38x15HHeTBb+6u5H6LDx6+
lfhj4it4rfH7ou0z2Ecb0wcR/8VxpbxDCx94JcIxAf2oP8qMit/H4NsXv8fG
7wHsffH7qiLxsF78viN+D0JuiN8Pxu8h8XvLxvRvPFNauct1X/NdJaz5w55h
ub2KlAGK+Pbu+D0Y3hC/L4/fR8fvdTlXid8d4/fy8btn/G7Puay+ojO9h4xv
IX6S+ITOEAc1f97rzcNncrR4ecw9AfnkVb+r+ZDeKI7OjLYOZK6jrR7xexds
zfH7GGg9fq/QmHcUsMFOiDV+apG8d9VIH1rknK4Rv8+O3wdBO/F7cPzuGr//
1ph222nqvYQPW0/t3hTrk7vPQUb/fxefMEhvyf1owii+5J51veW4Z+3SKu1S
yvvM3AXnPnNhvJ1p3BfnPjL31bn7zl1z7pzX7qwTcu98T/Nr9+YJa/fmCbkr
v7tlqatLKd8LoC7uT1dte3v7y11//Ki5b8296/6OjTH1c8zEa+8LrFPKu9V/
N36sdfE9d7MrtjHAOsir3TlvYznarN3zbuk3c6JT78SPz4u8E47cX7sjvo3f
97UO+tRenHHnvmMp3xrgvYTOpXyngDGzZ3IXnfv0rL3e1ndnkfejuScN/fUy
77oiz3c457nOsvR9dJFnDZw5jLUf/aTN/o51kP3oVMo9tlOp6T2Pzs7D9dbH
9zV/d76/yTrA5Xjno+bDTljzJSfEF/7+Iu1y2Oce0ve3rjHL7uA8cM7WynOy
TuIGvLDGeFOAtwRYcwcZv1A8ER9pPvrIOPtFn0rygWeLvC+/lnRwRZHnRpy7
3lOkLfQA3wZAj0G/ubrIs218vn6Sl8Ovucu/pnVxl38N42/Yds1/fLz4wEcb
mQZ5arZh7f4uIXyuWWPqCUs1pv83afC8mdYBLt8yvLWUfuWEE0rp831bqckH
nLDm+3y7bc+yLOXY55FBp1iW+wPIguzxyL7ImMgKkyyHbWuKdklkn8nKP9gl
J+mv2EM72MAWGU7193Lee/yolPLEQ9bLHUjGTx4yBHwfGQHZ4gH7gTxxv/FP
zb/fusBNzUf+Hr/nfuZs8TrP8SF3IwchiyMLI4e9Jf52UhYrlKHY89gDkePY
A2q+54Q133PCV8XjyeLuT7+b4ZxA79zhgEbXL+W7Haxp+NC6paRZwvVKSbPk
b1BK2iXk/RP0gkHKhwdZlrpqvvv0db7jY2zIfS+ax3jekRYY3yxpBNnzbWkB
2fbNUtPd2ZnSF/ddoVfwyH1ZaIg492bflaaQl6F1vv9KvNbuARCiM/GuBXyd
tbGltg32TGRw9sjaG0WE1IWcDl7JY29nL2EPwWeBc3fOfpEtkDHqY12+UKS8
fluR94K4U8Q9oeeL3BdviXDfIt+8+ZI9s8j73JOLtDvg649f/3hlR+64jSun
bEr8uSLpflyEVe+C80YPd/O4s8ddvdaVrJ+3G6YXuR5uKPJOGHfDuJN3qP0i
Dj8eV8kz6kER/zK+PRVbRyVlg88jvnQ13yXijZ5uRf6eUqTthLsE3+r7zx0A
4r9H+YODb75dpG2FfO40dC5nfdzdWjbKfNIy3zBawbtTyLGXVFIWoh/YY/gO
vNweMC/SJiKfV1J2In5okd9OQzYpss6pEd4s/rgryF40vpJ+Ftxp3FR8XVLO
e1jMVYsiecPsImXuMQHXke9ZB/zkZvHPPFwmHsHrYdra4UUNRfKh9yMcWc47
Xt3Fy2MBj5ezLwPsD7L8qIDRyvvX2vZSRcpNH0R4qX2kvcOdQ8Zwk/PLPF9h
HuNDJ0c3/7yasvn1AWPLKV+C24XcUSjnnU3ub27kfVxsPsju0BN3OS93fNR7
byX1PdYTci3y7RfxXfNoe7no53tFyv49/H6G+KPt+yqp+9feX4FGoU90x61N
v6yS8id3VpBNkVF/ifqfqKQuz/nX0+plIyN8pkgfpsuKHAN3U2t3Ugm3cszc
B+1nP44xvjjqvTDoc1Z8e1M575iyxqZU0lZwu3PAPVTuo7In36iudKTrbAvp
ETp8J37/gawbdb4TdZ6ofoSe9I9q/sZ2dYN96W/d3Lnlzuuulbwvgj2Vvf2m
SvKXp9QNL0SeKrLMPMd9tHob+gN9+Lqa+O7jOLGxYmvFNnujbTLO49Tp0O3W
rarfRZmpldSLGcvllewT30OPvcpNd4O3st89xQF4f1L99Pwi78LAv1h/6Azo
Dthv8P/nN+ckPyLYRjgzyv8Qv/8X7b8JzuL3jfH7jfj9eCVtO5RHDrq9kmfI
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
Xim3kWWwLeOXiEyILamGU3wC4Ys7VRPfz6vD/KoOs8j4c6ahc2BP+908dCv0
N/TaeeoEE9VbflSPOU0ZnLUz3To4A0dn/MlyyI8vWTdy5MvGn7KO75WHkJne
Us5F3kXHetb6flIGeke9AH8UZKajiybdG118O9+LRd7rqUyKbHqUci7xI01D
lj3a/pGHnQ59Ch0TWyH6JXplL/tNucPMJw9b3ZV+c4T1Ea+91dv8L2/1Esd+
iR0TO+/j9vcbv39WnI0STy/YxtPi6XLzn7ZPTzk/11iWucXm9or4hQ/BjzaT
l8BT4Df4RaFjoWvxDj5vgfFWFvys9jYYPImy8Hh4HLRO3vKuA97Mr7MObFm8
6YZdC7sh7/dTH++K4YfVxvZKlqUcvAqeBV/8TV5M/+Bf1EEe/JJ8xnCh65S1
C/+Gj2Ov+ck9ifgt0g72BORi5GNstzebhl6MfW+GOGKuoPuaz8V052CC9AUt
jve7mpxOWNNjCNFvansh/UDPx46A3o/N4CTj2AlONn6j36GLXO280Y/r7S/9
u8F8xoD+hk5Y0+cIWRuHSAfYPvBfwoaO/XyGe2xtz4aPw6fRrfqoX+ErRRw9
i5A4e1Uf0/nNXlpxP71eXkZdN1gfewL7eW953jj3j+Nsv4/fjDeN/YG3dgdY
7kbrIH6z+fB1xnF4Nc8DkA/QMdAJkOeQZ9Ez0FnwsZjgHQJ+n2RI3pI7WtbH
/jPBPWkJ76wmb2SvudV88rAPHFlNGwEh8YHez+AclDsIZ9t+7b9B9rJ/tAcO
uS9D+0dXU6c62v7QT2TlXuKLuntYfw/bYhzIwUdbDrn4KOOcoRxSzbOKL9UR
oQn86rA3HVmkfWasdITtDf7ymPQBn3hCGrxNGh9p2uPS00TzoK/bjR9jfawb
7BGDbPdzbcbIFPhKYjc5vMizmpG23922R0r3tAmP72N9tfMBQngrexR7FbbX
Ey3Lmu7nemBs6Bg9xQs6BO+yo8OhVxxpHngCX+yD0BJrg/Mkzp/4jW/+4a4X
0q+yDr7Hr59vKYv9o7X6ZH/XLf04Vl5wk+v8FnnMcfIL8o43jfgAy/J9T2kT
WuWuGHsj+xo8FT4LX8UXEnkVn0/sO+zp//KsAT0Z/ZTf61Wbzh7QV/urR5NH
2nr+pnxb8/Bb5zxlg2rq38i06MbowqSRh76JnLup6ZxtocP/Tz2adOylNb16
hu3zLbo8Z5HLKzux1+Cbi08u/B/ehD7RojFl5prs/Ju2DvYLyvI+aH2U+TXS
y40pL/+qfYdzz+XcC2hzffuM3Wu+ti/qw56DHsLZ2beVtA0wlo2raRtgTMQZ
x8b+Zoyvy6dq/zMzrq7p3fHxdU3/OUMIj6nJkcxd7f9s4Cuz5DvosrX/vCGO
TzJ6IPrZO+ajt/GW6e3mvWsa8dmWrf03DmHtf3UI7xZfN9pv+oHeeJ94v8G8
G7TFjNVfeqx57OPMCWnQ4D1+/6l1oJevWM15XSIn2ybluDeJ/AYdIzu3Un5e
UraasjPvu9K/2huxr9c1vdX6hnjFx3rPUvqR1f4Pg/jGnlu8VqR/9N76IJxj
WeIvFykj71KkjoGfBHosexdn/OwhQ/0Ov56q+xr6IzI0+i468L5+w15znmXx
CcK3Gz+z2v+cHKDfB/4g+LHhQ4fPyC6l9KE7Ux+H3Uvpf9Ne2xk+Uzv6DXIL
/8uBjWSg31EOX56TrA//7/1t+yTboY1h9ou8IbYDvtYu0pb6YoS/FUnzvxYp
n9AOdhdkQuw4S96iLye9Qpt/FMl3vytSlkNXZ63W3tulHOd0P1TyrGNxkb9/
L/Kd2Leld956fdP1gSz3snXxZuws6Z03Y9+V3nkn9h3pHZnwJb9hjopq2gmW
qab/BDr+7/adcswrNgL24cK5Zk6RJ593nMi9zxn/RRwQX1ZaRS+Glyzr70bb
goZbmc46IK3RPtTy7jed/qE7csfgPdc39yYiusRfkPsH77uOOWfmnPgd905k
beRq9B2+pyxnuvDdk4uUGxvN47z0s0raNTjrhVedUOResdD94j19Cf4sUk+9
SHkdHwH4IHbRhZH3afz+qsizPs7D2Ms5YwMHBxbp98xY9y/Svg9e9ynyDI0z
fuQD7N/3agNn38YGBw1xFgifOLhIeZUxoQtwlgsNcbbzc5F93jnCLyp5b45z
Yc5pv/A3vHye/HyEewpzgX4AbUGncy3DmOdYD33oYJvoIe/rT3JjkboH35XM
ny1P7WjZmi70gfyVtmmD+32cN7OX9itSRphru/SVtrmjx7k7e9GxhfctKnm2
hm3+Hs8IvilyHr8uUh+iL/BgzgA5D+bsjrNP+CPriXMzzqs4q9rGsuyrb7lm
WbvIKczpbM/A8Y/nHLy1ZdlX+U8+7JeXFHnOSt2sb3w4sH1eUKTvBfbLi4o8
o+MMm3M6zvfg4/Dvtn4H/+D8mTN4zop3MK0iHpfgry7P7UiDB6ATFdL0dtbH
ODmj5jySs0jOJ/FZ4WywTbnpjXB8oZDZhxWpZ1Wt6/8ArMoekg==
          "]], 
         PolygonBox[CompressedData["
1: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
DVAt+CF8V9Kd83v4/+BxbW4=
          "]]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["

1:eJwV1Ge8j2UcBvDnmHHOsffM3jN75WRkj4MGyZ4JqSiFKKOMyiorlFFUFBmV
KHsWGSGjrJARstf3fvE91+96fs//xXO7P/J17pfYNyaKogH+/BUXRcdJHh9F
KUjGI6TkX8/PU4vrpKEQy4mxT0oSaurLKGuOlwX5hjb6t7IGSymjx8kCfE1r
fYmszleU1mNlfhbTSv9SVmMRpfTUMh9b+YKSnqWSx1hIov653MICSoTvkUeZ
R0t9vtzMZxQP3yqPMJcW+qdyE3MoFs5F/sknNNdny43MoqieXB7mAZH+v6zK
NaowkyLhbOWjTKeZPkNWZhqFw3nKvHxEU/1jWYmp4dzDWcs8TKaJPkVWZFI4
cz1G5uZDGusTZQU+CGeuR3ID63k/nLNnD2Kj6JB5PI30CfIXxoVz1u/bHzS/
R0N9rPyZd8O36Pfs/zCPpoE+Rq5jVPgW/a79AfM7PKmPlGt5O3yLfsd+v/k+
V7jKfzzGiPA93rntnVzmt6ivD5flGUYu/ZZ9TvMQ6ulDZTneJKd+0z6HeTB1
9TfCXeV1cug37LObB1FHfy3cVQaSXb9u/5N5Da+SLfwbe7bP/DJP6K/IHxlA
Vv2a/V5zfxL0l+QP9COLftX+d/OL1Nb7yu/pQ2b9iv0ec28e11+Q5zjLZS6F
c/JONtmLO9zjLqXpSSa/u+ydrObu1NJ7yFJ0I6N+yT6LuQs19a6yJJ3JoF+0
z2zuSA29kyxBB9LrF+wzmdtTXX9eFmc37ajm2XNyNW1JF/5f8ZvfzM9QVX9W
ruJp0urn7X81t6GK/pRcSWvS6Ofsd5kTqay3kitoSbx+1n6nuTmV9BbyH85w
kQuheyejbMZNbnOLYjQlzu/OeCeDuTEV9SayKI2I1U/bpw/3ngp6Q1kk3HNS
66fs04U7Ge6zXl8WDneQVPpJ+7Th/oT7rNeRO9ge7kS4w54lyO+4Ee4BJznF
abZxgr95CIqWu+o=
          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{0.41684626436781613`, 
       0.1634206335408302}}, {{0.41684626436781613`, 
       0.1634206335408302}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.10765086206896557`, 
       0.3301897229330177}}, {{0.325323275862069, 
       0.0021193831451079004`}}}]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[2], PointBox[CompressedData["
1:eJxFkQ1MzGEcx1tMWS4vE5cypcYVKudoWXwbk1hFeSlKkc5EdfKS87rrZUdp
dgi913lJVki2CvFc5eripBfLFU7puvfjH0ne3dk6z/bst89+e37f7+/7OMdw
QtmWFhYWLOM11RlvgovqDe0kOsCpfDufgsStP7OAKSVhvaftByv0UFdRJzxs
WsiPpNZQvaMB0tUxjcddJYQ/1p7jTOnhN8VB6XK3mYzpYSsihilkJ60Ktg9r
IsOPLDNZXjozR2ZvfF+W+wFt7L4fkdOekJHLuxMFc/RgiG1iQ+saSFSEoZZp
Q5n5YXVPEnsahe33b0y+dExEJj36VfpdqjNzuvu9TPE3HQQFzNsSN0JsxjPl
K3o1qFxJupcO1RBZnDCsv/gTuAlXYl/NqSZLFzQsOuCiBa/Uqn730TLSm5MQ
8jRDB79l1v6daQLi5SrY5LWSAs+5sIbekUEYdSONoji9mc/GV1qcazH2/wWU
StiFfJHuiBq89IEi//AiKAJ9ZqQmG8BrnmXL/XkTQ/0F12U+WogKfdNet5Qj
b11Ao2eJUc9kL/8+xm3aZXfmswptXcJ38TMfYzTf2vnHi5811CPr/FrHxZ0f
QVnmTvUUNGK8p/SbUqNGztXECh/tE7CKBfxoPxUYD5eEVO1twWn5yQ0nlAa0
RUzQ1ImfmvXVTXnGF88gyd3PGmvQwprpFuV0QYpg7uCplE41Kjt+f3E3PMdo
Ho6Hdj4P8W4HL1lVT6NpQZdc46YEvsKdvMPTl6//z75WDPoLex1Yi0xHBuv0
PcwgBxlEpvVu9UC70f/KV6PPUXYouRiXe1WJISd60MRUOarsuAEJQX2YlGX6
kHcYiSrssvLuw/lt+YzuxQpk0NL2wVaOYXdD9J1QBbTCYk/angHUiQWtEVkK
zBPHiOWn3uKgye7mAXBKa4s8tr6HsTtB46tEybXbsgcX+hEe9+foxWSleZ4x
vKY8FxUSWbM5M4+9gf/b8AMvaRrUjKz2UO3oRC2948gZoRaMqoVrvgvbsUvX
xqlupWDr3Z0SGSWCkWx/lQ5iS+XcNP7rDvwFa3u0ZA==
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGBQAWIQXSXQs4zd8d3+9bPKxe0CXtkfm3Aumifz5f6GsucH
eXlf2ScdrlEx83m5v25O492NYi/h/GP7eQJWfHtpL9B08YvCjGf778cv2uk4
64G9x3PdtpK4Z/s/6F+8o+D7wl6Br+LPQ4Yn+0tNXnk72T61n3TDQL6z9/H+
qOhOL4VVj+H8JRFVC4santqzLH7paCD1eL9+pV7ftJL79guvTueK+vtof0Sj
ctqRzY/sfVjX7gsJeLT/R9zca+zmD+3vnDTeMXfPg/2FDXLNXQGP7UX1J3h+
bHqwv/W07/UZDI/s522XuFTZfW9/2pmuu2sX3rDfdz714e+Ym/v/VVmEcFnf
s/9hcqjIX/nm/tiUz952J67Y+015c8vl5PX9b1dxGmp3XLPvAIOr+5e21+0z
WXHV/tDbJ5J3/K7u/y99ecFdxyv2Jjvm2jTfvrL/ogHfY9N39+xXCE6rlkq8
tF9NcPoftdm37d9cyN/G9/fIfpNzUxYrZly3V/jw4zBj/+797vZxwlcUr9oz
1Fs8+Ng+2b5qdkz7k1XH7CcwtGZxBuyxZ7jw84iUssv+hLOB5tdkDtsH2D7s
/aM1wX4H39+01xeO2t/YrXxr49a1+y9UdivO3X7MnuGMyNI5e7rsP4CcN++4
fYF5j/rz+XP2X4jmebnn6Cn7G7+9Tcw9FtsDY6PhuPwZ+7xzVzo9Ks/uP2Hb
u+HO5XNw/QxcV4UWBFywXxF34s2PpkX7e4CmS1y6Yt/gVqG5OibR/k+MGDAI
r9lP2Nheesdyyn4AGzI0/w==
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.64% Marg=0.0919\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-0.9454382183908046, 
   1.1032686781609193`}, {-0.23026377420466154`, 1.164035169893955}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6006106325864277`*^9, 3.600631791493237*^9, 
  3.601214172307225*^9, 3.601373330066465*^9, 3.601385635359026*^9, 
  3.601563388476163*^9, 3.601571808574512*^9, 3.60157267290895*^9, 
  3.601572789367627*^9, 3.602858166897682*^9, 3.60286018871034*^9, 
  3.607434037714691*^9, 3.637565075088029*^9, 3.637566148960614*^9, 
  3.637574082276575*^9, 3.637583618103953*^9, 3.637583710190401*^9, 
  3.6375856927336187`*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
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
MaI+\
\>"]]
}, Open  ]],

Cell["\<\

As it can be seen, the decision surface, the margin and the training and \
testing error rates are exactly the same as the ones of the max-margin \
classifier introduced in the previous Section. However, the dual formulation \
used by SVMs allows to highlight the different role played by different \
training points: only the closest to the classification hyperplane become \
Support Vectors.
\
\>", "Text",
 CellChangeTimes->{{3.600677821135819*^9, 3.6006778968400593`*^9}, {
   3.600678723853957*^9, 3.600678731036479*^9}, {3.601385686619454*^9, 
   3.601385761512088*^9}, {3.60138586873499*^9, 3.601385998105983*^9}, {
   3.601386112492817*^9, 3.6013861486885233`*^9}, 3.6015586516546097`*^9, {
   3.602858233015098*^9, 3.602858233795185*^9}, {3.637579458246336*^9, 
   3.637579471458826*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Soft-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.6005166146535053`*^9, 3.60051661822272*^9}}],

Cell[TextData[{
 "A soft-margin Support Vector Machine can be obtained by constructing the \
dual problem of the objective function in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 "). In order to do this we first have to write down its generalized \
Lagrangian"
}], "Text",
 CellChangeTimes->{{3.600516636306747*^9, 3.600516690310767*^9}, {
  3.600516741895606*^9, 3.600516782018572*^9}, {3.600585868042153*^9, 
  3.600585902895199*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["L",
    FontWeight->"Plain"], 
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Xi]",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], ",", 
     StyleBox["r",
      FontWeight->"Bold"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}]}], 
  StyleBox["=",
   FontWeight->"Plain"], 
  RowBox[{
   RowBox[{
    FractionBox[
     StyleBox["1",
      FontWeight->"Plain"], "2"], 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["\[Xi]", "i"], "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}]}], 
   "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["r", "i"], 
     RowBox[{
      SubscriptBox["\[Xi]", "i"], "."}]}]}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6005167837231417`*^9, 3.600516818754175*^9}, {
   3.600517018284396*^9, 3.600517037891486*^9}, {3.6005170907660093`*^9, 
   3.6005170979284353`*^9}, 3.6005173739926243`*^9},
 CellTags->"eq:soft_margin_svm_L"],

Cell["\<\
We can then apply again Theorem 3 to obtain the KKT optimality conditions:\
\>", "Text",
 CellChangeTimes->{{3.600517085607532*^9, 3.600517125031438*^9}, {
  3.600585907463999*^9, 3.600585918802475*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["r",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["r",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Xi]",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   "0"}], ",", "       ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["r", "i"], 
    SubscriptBox["\[Xi]", "i"]}], "=", "0"}], ",", 
  "                                               ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["r", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, 
   3.600513870738564*^9, {3.600517164523419*^9, 3.600517175284357*^9}, {
   3.600517215065008*^9, 3.6005172181227922`*^9}, {3.6005172610847588`*^9, 
   3.600517261443778*^9}, {3.6005189404219*^9, 3.600518966809108*^9}}],

Cell["where the first three conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}, {3.600513867266624*^9, 3.600513867631464*^9}, {
  3.60051726785408*^9, 3.600517268955271*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"], 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"]}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], "=", "0"}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"C", "-", 
    SubscriptBox["\[Alpha]", "i"]}], "=", 
   SubscriptBox["r", "i"]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
   3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
   3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
   3.600158661435207*^9, 3.60015866767249*^9}, 3.600513864747818*^9, 
   3.60051392712012*^9, {3.600517274218824*^9, 3.6005172785205*^9}, {
   3.600517321977695*^9, 3.600517329588914*^9}, {3.600517734285067*^9, 
   3.600517735477496*^9}},
 CellTags->"eq:soft_margin_svm_w"],

Cell[TextData[{
 "and we note also that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"C", "-", 
     SubscriptBox["\[Alpha]", "i"]}], "=", 
    SubscriptBox["r", "i"]}], TraditionalForm]]],
 ", together with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["r", "i"], "\[GreaterEqual]", "0"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], 
   TraditionalForm]]],
 " gives us ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", 
    SubscriptBox["\[Alpha]", "i"], "\[LessEqual]", "C"}], TraditionalForm]]],
 ".\nWe can thus plug eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_w"],
 ") into eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_L"],
 "), to obtain"
}], "Text",
 CellChangeTimes->{{3.6005139229439096`*^9, 3.6005139327340612`*^9}, {
   3.600513998355977*^9, 3.600514040753975*^9}, {3.600514214591071*^9, 
   3.6005142148630037`*^9}, 3.6005173662300177`*^9, {3.6005174084987383`*^9, 
   3.600517410639308*^9}, 3.600517493801063*^9, {3.6005176012168417`*^9, 
   3.600517656733819*^9}, {3.6005176983272676`*^9, 3.600517753274816*^9}, {
   3.600585950168448*^9, 3.600585971146927*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"L", 
   RowBox[{"(", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{"C", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["\[Xi]", "i"]}]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"]}], "-", 
   RowBox[{"C", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["\[Xi]", "i"]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["H", 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}, {
   3.60051411622726*^9, 3.600514161953629*^9}, {3.6005175054397173`*^9, 
   3.6005175537125998`*^9}, {3.600517850817155*^9, 3.600517859816524*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}], ")"}]}]}], TraditionalForm]]],
 ". As before, both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared from the Lagrangian, but once we have solved for ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ", we can compute ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_w"],
 "), while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can again be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ".  Indeed if we expand this multiplication and left and right multiply by \
",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "i"], TraditionalForm]]],
 " we obtain:"
}], "Text",
 CellChangeTimes->{{3.600518014507132*^9, 3.6005180517949467`*^9}, {
  3.600518111150139*^9, 3.600518210961157*^9}, {3.600518714069418*^9, 
  3.6005187146317987`*^9}, {3.600585987954084*^9, 3.600586028364172*^9}, {
  3.6006787835117826`*^9, 3.600678784047868*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["r", "i"]}], "-", 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       SubscriptBox["r", "i"], 
       SubscriptBox["\[Xi]", "i"]}], "\[UnderBrace]"], "0"]}], "-", 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["r", "i"], 
    SubscriptBox["y", "i"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", "0"}],
   TraditionalForm], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600518224733889*^9, 3.6005183447924633`*^9}, {
  3.6005183855059032`*^9, 3.60051842792067*^9}, {3.600518462098566*^9, 
  3.600518480247355*^9}, {3.601568572081274*^9, 3.60156857359829*^9}, {
  3.601568628267521*^9, 3.601568628975306*^9}}],

Cell[TextData[{
 "which has the same solution: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 " as before.\nThe Lagrangian dual program for the soft-margin SVM is thus \
given by"
}], "Text",
 CellChangeTimes->{{3.6005184846577682`*^9, 3.600518599691503*^9}, 
   3.60051872505451*^9, {3.600678799014057*^9, 3.600678827809661*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], "0"}], "\[LessEqual]", 
  StyleBox["\[Alpha]",
   FontWeight->"Bold"], "\[LessEqual]", "C"}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "\[Transpose]"}], 
    StyleBox["y",
     FontWeight->"Bold"]}], "=", 
   StyleBox["0",
    FontWeight->"Bold"]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.6005186525864143`*^9, 3.600518665420229*^9}, {
  3.602858405929647*^9, 3.602858418096335*^9}},
 CellTags->"eq:soft_margin_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ".\nThis dual optimization problem is identical to the one for hard-margin \
SVM, the only difference being the additional upper-bound constraint on ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ". As we can see, reducing the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " has the effect of maxing-out the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 ", reducing the influence of the outliers (i.e. samples that due to noise \
lie in unexpected areas of the input space). Note also that with the choice \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "=", "\[Infinity]"}], TraditionalForm]]],
 " we would obtain the same results as for the hard-margin SVM.\n\nAnother \
important observation is that the primal KKT condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ", implies that the only non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " can only be those for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], "=", "1"}], TraditionalForm]]],
 ", while the points with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], ">", "1"}], TraditionalForm]]],
 " will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "=", "0"}], TraditionalForm]]],
 ".\nWhen ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " is decreased from ",
 Cell[BoxData[
  FormBox["\[Infinity]", TraditionalForm]]],
 " (as in the case of hard-margin SVM) to some other finite value, the \
minimization of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " becomes relatively unimportant compared to the minimization of the squared \
norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", resulting in many samples being forced to have a large ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 ". This means that by lowering the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", more and more samples will satisfy ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], "=", "1"}], TraditionalForm]]],
 " (a reduction of the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " forces the optimization algorithm to compensate for the reduction of the \
functional margin, with an increase of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 "). In other words, lowering the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will result in an increased number of Support Vectors.\n\nUsing ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"], 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}]}], TraditionalForm]]],
 ", the minimal geometric margin can be computed as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623789258648*^9}, 
   3.6016238422875032`*^9, {3.6016240697312403`*^9, 3.601624070807952*^9}, {
   3.601624238015191*^9, 3.6016242450535603`*^9}, {3.602774151954455*^9, 
   3.602774156776572*^9}, {3.607434181731427*^9, 3.6074342053556147`*^9}, {
   3.6074343648118343`*^9, 3.607434365431916*^9}, {3.6074344644258537`*^9, 
   3.6074344679195747`*^9}, {3.6074345179825163`*^9, 3.607434602141087*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], 
    ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "i"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}], "+", "b"}], ")"}], 
    "."}]}]}]}], "DisplayFormula",
 CellChangeTimes->{
  3.601623787274074*^9, {3.601624044969468*^9, 3.6016241505183573`*^9}, {
   3.601624253957592*^9, 3.601624306644099*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623791360347*^9}, 
   3.607434623491053*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074346285535393`*^9, 3.6074346334192963`*^9}}],

Cell[TextData[{
 "We hereby give a code snap implementing this algorithm, using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver where, as before, ",
 StyleBox["KTr", "Code"],
 " is expected to be the matrix of inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Ktr", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], "\[CenterDot]", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}]}], TraditionalForm]]],
 " computed using the training samples\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623791360347*^9}, 
   3.607434623491053*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"train1NormSoftMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nTr", ",", "d", ",", "H", ",", "f", ",", "a", ",", "alpha", ",", "b", 
       ",", "nrm", ",", "margin", ",", "sol", ",", "obj", ",", 
       "constraints"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{"f", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"a", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"H", "=", 
       RowBox[{
        RowBox[{"yTr", ".", 
         RowBox[{"Transpose", "[", "yTr", "]"}]}], " ", "KTr"}]}], ";", "\n", 
      
      RowBox[{"constraints", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"alpha", ".", "yTr"}], "]"}], "==", "0"}], " ", "&&", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", ">=", "0"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}], " ", "&&", " ", 
        "\n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "<=", "regC"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"alpha", ".", "H", ".", "alpha"}]}], " ", "-", " ", 
        RowBox[{"f", ".", "alpha"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "constraints"}], "}"}], ",", "alpha", ",", " ", 
         
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"AccuracyGoal", "->", "1"}], ",", " ", 
         RowBox[{"PrecisionGoal", "->", "1"}], ",", " ", 
         RowBox[{"MaxIterations", "->", "100"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}], 
         ",", " ", 
         RowBox[{"Gradient", ":>", " ", 
          RowBox[{
           RowBox[{"H", ".", "a"}], " ", "-", " ", "f"}]}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"(", 
        RowBox[{"alpha", "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"alpha", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "<", 
               RowBox[{"10", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "8"}], ")"}]}]}], "&"}], "/@", "alpha"}], ",", 
            "True"}], "]"}]}], "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", 
         RowBox[{"Total", "[", "alpha", "]"}]}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha", " ", 
           RowBox[{"yTr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}], ".", "H", ".", 
         "alpha"}]}]}], ";", "\n", 
      RowBox[{"nrm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"sol", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", 
            RowBox[{"Total", "[", "alpha", "]"}]}], ")"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"alpha", " ", 
        RowBox[{"yTr", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"yTr", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"KTr", ".", "alpha"}], "+", "b"}], ")"}]}], ")"}], 
          "]"}], ")"}], "/", "nrm"}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"alpha", ",", "b"}], "}"}], ",", "margin"}], "}"}]}]}], "\n",
     "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{
  3.600587725325886*^9, {3.6005882122929983`*^9, 3.6005882133539057`*^9}, {
   3.600588457252429*^9, 3.600588465845796*^9}, {3.600604239380355*^9, 
   3.600604258229485*^9}, {3.6013862221202097`*^9, 3.60138626867194*^9}, {
   3.601573374294911*^9, 3.601573374464306*^9}, {3.601624324634869*^9, 
   3.6016243470122128`*^9}}],

Cell[TextData[{
 "\nAn example of usage is also provided where, as before, the Support \
Vectors are marked with thiker markers (squares and circles), whille ",
 StyleBox["linearKernel", "Code"],
 " is the function used to compute the inner products between the samples.\n"
}], "Text",
 CellChangeTimes->{{3.600588112937687*^9, 3.60058811849831*^9}, {
  3.600679475821672*^9, 3.600679492899036*^9}, {3.6013861641550417`*^9, 
  3.6013861804462967`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$777 = MousePosition["Graphics"]; 
     Private`p$777 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$777], 2], 
          Union[
           Partition[Private`pt$777, 2]]}, 1]]; 
     If[Private`s$777 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$777}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$777}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$777 = {}; 
     Private`s$777 = Private`s$777 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600587966493536*^9, 3.600588622107139*^9, 
   3.600599060660305*^9, 3.600599756925404*^9, 3.600599943665254*^9, 
   3.600600031844635*^9, 3.6006027823018436`*^9, 3.600603523507772*^9, 
   3.600603945706077*^9, 3.6006129989424667`*^9, 3.600613812248528*^9, 
   3.6006326443401413`*^9, 3.60067111736756*^9, 3.60067164227064*^9, 
   3.6006718037671747`*^9, 3.600672265537353*^9, 3.600672526081514*^9, 
   3.601206370436466*^9, 3.601209437237091*^9, 3.60121146727116*^9, {
   3.601212264723936*^9, 3.6012122908273897`*^9}, 3.601212668288314*^9, 
   3.601213356569628*^9, 3.601214040524703*^9, 3.601214608420601*^9, 
   3.601218004687706*^9, 3.6012862730919037`*^9, 3.601295890068576*^9, 
   3.601296909848271*^9, 3.6012971705533447`*^9, 3.601297662161875*^9, 
   3.6012988951245203`*^9, 3.601298947244832*^9, 3.601304693600175*^9, 
   3.601372885198304*^9, 3.601375277312167*^9, 3.601559771933028*^9, {
   3.60156216665177*^9, 3.601562166764254*^9}, 3.60156311216003*^9, 
   3.601571645190751*^9, 3.601572489481422*^9, 3.601626156335967*^9, 
   3.6028568557890673`*^9, 3.602859724672284*^9, 3.6074305179771147`*^9, 
   3.6074324484532547`*^9, 3.6375647251875*^9, 3.6375655259220457`*^9, 
   3.6375656547789993`*^9, 3.6375660422446527`*^9, 3.637573361150527*^9, 
   3.637581899618166*^9, 3.637582140942945*^9, 3.6375822015744867`*^9, 
   3.637583464295784*^9, 3.637585525938525*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXmcVMW1/zAzvczCvgsIAoq4L4ArcQMSRUQTFXGJgto9PTvDLAwyArIH
V9QIj6eigsYormDcCK6ERUX2nveSl5c8owZBBaMBZYZf193m1u3vOVW3u8eX
3+/z+8NRb9etW/U9a1WdOmfMhOqiW8smVMduntDvp1UTKotiN0/uN6qiKvEo
p01WVvY1WVlt7uqXJf77cFaW/edwVmNjo/HnWvFHPPb9oIPxr86Jv9tW/35e
xeFoJPJO2R2vtdkSbxS/BBp3bdr89LSSw5FI7L6axe9lbW80nrdpjO/4+aZV
j3y4sKHqQGks9mnppNvmL1j6Ut7GHfGsqUafXdk2TN+5jfGPy9c89cCO2fWV
B0tiRXtKymuXz7zn8T6vfrAza3J6fbPv1bfiuKe2As45bhJ28dn1ros/fvXe
g9WxaHMkGv02WlLSHI2K/449XL3o9ezEu1OMbrvrNEWfSIx828K1S+ubSqKR
RNuiL0oqKg+UxaKJ4UX/Gpt8T4+XN8ezJqX3DZ33sup+hHnUtw4JsrUInBjh
9hEbXl995apVq05+7b2tWbsaG4ONOzdsXT61JNG2aHXlvBdCm3buvG7TCwt+
qIxGvomWNPT97aZdJoF76DRFnzhi14cvfD2zLNoUiZZOn7Zsbc7WXeLZK39+
sDom+lo2+b7ft9kab6w08U/1MzrvWTRu9alMaR1CWGQ25fnMbWsXHqosimQF
E9wSyco5GInVnPzQe9uNNrnG3wAcQND4Lb/nro9e3D+9VMyl4sJ5b2wVTzs2
bn3ji3kVgrfKrpixanNWvLGx2GieY3/O+FgAfDLbX7fmCPML4ts3/Gzta6tu
eOH5Ve3e22bozcQ/O2ave6TucHEk8qdYzeL897dbzOG3d93mta069imZI0ab
THLAiTveX3KgNhY5EInVnfBv63aIp/mN29//0+KamNBAC+qWvp+1wzcH6Hab
54xw5+3rl9ULxP5SVP1AwTvbG7Mq/XWV6695beYGqkFb3c9ItA3Fd24esGnD
+qzgwPXr12flDFi/YVPw451xXdoO3f72PT9URSPfRYrrBy1bv1M8DTfu+MOu
R6cUJz4aTWiqd4R1sWhrf874WAB8MttftxZBEvZsc9UrT/77w79e9MAlj726
qc3OeGOPXZtf/c+H6oqFXfx92axVOR/tsqXbZ++6zWtbdewaHKD7ZYsD2hn/
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
TAIKl2/XLz98ft6hiqLo5pJpy7q88/H2ttu3bfrDyzNKRfNfVz+4tmDz9h1t
4vFGmPeb3jTQXYjZOV/0djMy5cjdRKMO0l7I76K9WKTQC/l2jjo2d41FiYZ7
uBINyybf906LoRV57z/43XNzK5qKoqVVM57ckL1T0/AylYqVKrIXpiGzaCLL
dtxkPkOXrRd/WF/vtDsKvGsKVXBlfMKEJnfVxEN5eYs/nDq1Hd310s11dU43
Fxt/RZWQWVyVkPcrZhtVQkwdHa57+dmHvplWGv0uUjJl2v2/ffaPD08xSiWs
qZz/ZOQlq5lRLWQBGPoY85myLMhQ8K6q/sdNmozZEys2lJufOOvUDVoxz4+0
K3GYIxCO0K4JH6yce6i8qOjd8pmPbnqqodTN1rpcbZeS9qiMA8Fgs+Ben+UX
JvAKWBF1hcpC9Nakl6UgdEt7mBsDIaEgXls5tzyhIGIHS43aD/4Vg3k/M3jX
hAlfutKEO1p3mD8IJ2JuOoLHwVGUqDpuHx2zqFckxDq1PnLXppV75hgFQSKp
c53aayFunh3tD9LTMKR0NseAZN8arXqVRM68MY4SUJcQseATwnvrpmdmJ4Q3
HfiU/oAiot9njj7F3fCLaTglfWfDeSGG8wRTMtnqIeYgA4nF2aY3n5ldfrgo
BallMJTMuSJLvsOq6ACfAfMUTXk+H6OUw7/uqEWkDohQJjubEUHeUZkRbWeh
gS60IB72mR70FJILw16h9gJwFg9ADv8zMl6KLUjdtC8jNKEfy4u77m3hjCEu
yT17SKOLBJGW1Yq49S4juf2dE1m5Uq55LtIkCVHVSnd3J2NKJeDWCmy96KGa
CFg62Iu5a+9Vbn88Lwu6S3xd4G1P9EcxfczgJQyGaE5SA1up/XE83W3aslWO
dZWM7Z+2ikvGiJ804SHkhOF5nYZicF45nlZnblqy6mykJpY+8+yepTnrYTy3
oqToCkt1IglK2OvbeUn609bB4mx+wGdh/moHeiLcIeIESHF3yaGBbnKJs7E4
jfGHxjl4sJeCpoo1eDf+57Ga07J9KUL9noBn3dvfrH/VMuvl20pL/WZNI+Ji
L9ecopUcSbkw6Ibn2p5HyGdMzeV4LkN5agbxW7qX6Ir8IaV09bvwkOjeZO7p
D7qxPEZELmLdvNOKVYNumswMQI2KjGtuwKhJ18Mf5pdpoteXR6+QRC/oXexx
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
w8U7Wfjf9eWECV78UfYxbjgk/qYVDlPAiF8FuJYffOfEiV/qahtv+JTmSYm0
n3nBY4/JBwPXZlRFeUuKcQiSdyfN1UdSdXsjTYXZXnEtNtc9FEpPXYYVCHHq
SmRwsxkF3HXYV1hoUMKATyuUVtunlzY3cuU1gtHiGn9EVVj7o0iaS0C70hWj
Fbqyer0iWlTX/I/hoVaEk3UAomWqyQJBCSq2ijg1VqtR+nuyKI/zR1G2tJjf
TdBsTZlH9ZJQ5XrCP9F1uS/V1H66Aebm/mvSvmriHTuqPleQzB3/iLZxUcF7
pLzRujwEZP1qfxRXFNk7CWOu2NJoZ0HjeculuXF1+jz8HmkzL9XUf/5yDsBT
rYTB3St8Hzv4y6aNHYuMzvcU+SfR3mAIyLpPiuqWdB2KSdvOwsA4Vm8hrTgk
85QHxAXn82jWEImXfZIxpUB4hUh5IlZz3eIogvvRuSVxzRjty6Ibnz7VsG6Z
2ZEtpG72VEkV9Ytn7YnFyCRdTNaP734oKHDYJAVV6jteHhw5tQRD4XBWy7go
L2NYMcWZdn10y9zay014g5wqp/zAV9df7+k1IJol1fhh0udIfGLeDO6WUtke
s4/46VvfefbVh+ZO/WZSSWxfrLTqxWkLlg56cf12kU0aZf1Pz50yt37YG2tg
Vam+GGKGavIrG6IIwYUZ1cKOUxPgLWlP/mcrtOpVUFD6nq9cVeR1k7Gb1/FF
lGpKBX4Eo5y0/b3H9k0vFUmgI03RaOxQcZHx37ujlfOPXLlpF6wR4W9Rhe7P
hwG1XVvUnpP0sHfXDkcUkfx5gT9mUDhZQU2LTV/aNWqV1uyuqfEkgQOaJOfm
z+fM8TIGZQUcNjU1SI9U6gFl7WpszGnc9eE7L9xRLpKr/2dx3YN9Vn2ws1N8
y5qd/15v9LW0+n6jcAUqGoMuh1n7sijSLktxnUWxTa6bs+Q8fxzA12xWKvCu
oB3aAHTFlyc5BAkHziFnR5ohhZNmBm9olwQyJTq/a3zzK1/dUS6kvSTS8Mwm
8VPil531Gx6vP1wciWwpue3J4MadkMh29gV8zqFz+wLdkdHd8BpGfkb2An/i
j+ioXjXSuoi6ISD/1vmYl4lsV92SXimczfTm81GVc7TKsgivWyLIIrxduyPx
U9mYGa9stglfs355/eGSSGRbSf3y4HpMeDtpCXv4qPYg82nqK6k6lG4nORmp
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
zD4prZpm1y0wOznZ1aHx51rdB1lt/g+qqKaA\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", "linearKernel"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005503261330643`*^9, 3.6005503339339247`*^9}, {3.600588222815317*^9, 
   3.600588256649695*^9}, {3.600588290721298*^9, 3.6005882920536127`*^9}, {
   3.600588658316814*^9, 3.600588734521865*^9}, {3.600588793185359*^9, 
   3.6005888716015673`*^9}, {3.600631456422151*^9, 3.600631462528254*^9}, 
   3.6006732675642233`*^9, {3.601217196322742*^9, 3.601217210173666*^9}, 
   3.6015634594631166`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 1., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    400., {198., 204.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$261979$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$261979$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`linearKernel], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {248., 257.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006318422191973`*^9, 3.600673261291685*^9, 3.600673343449181*^9, 
   3.601214254651011*^9, 3.60121741903084*^9, {3.60156217734977*^9, 
   3.6015622005096703`*^9}, 3.601562274480063*^9, 3.601562323282482*^9, 
   3.601563399612978*^9, 3.601563460363524*^9, {3.601563612036623*^9, 
   3.601563625488894*^9}, 3.6028584609814587`*^9, 3.6028585071417828`*^9, 
   3.602860201154567*^9, 3.6074346521568537`*^9, 3.63756616309482*^9, 
   3.6375836272185097`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs we can see, the behavoir of the algorithm is pretty much the same as \
the soft-margin classifier introduced in the previous section. Moreover, \
according to what have seen before, as we reduce the regularization parameter \
",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", the number of Support Vectors increases.\n"
}], "Text",
 CellChangeTimes->{
  3.601386276317622*^9, {3.6013912082698927`*^9, 3.6013913663932123`*^9}, 
   3.601558644935019*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2-Norm Soft-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.600433955353394*^9, 3.600433963410952*^9}, {
  3.600510883688518*^9, 3.600510886226582*^9}}],

Cell[TextData[{
 "Another formulation for the Soft-margin SVM can be obtained considering the \
following modification of eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 ") in Section ",
 
 CounterBox["Section", "sec:max_margin"]
}], "Text",
 CellChangeTimes->{{3.600154875125265*^9, 3.6001549181816397`*^9}, 
   3.600155031827753*^9, {3.6001553088687277`*^9, 3.600155366668939*^9}, {
   3.600155430120121*^9, 3.600155445536603*^9}, {3.6001554825240726`*^9, 
   3.600155496361331*^9}, {3.600155582648361*^9, 3.6001555947194567`*^9}, {
   3.600414871766923*^9, 3.600414873146832*^9}, {3.600429222572053*^9, 
   3.600429391214848*^9}, {3.6004296738987913`*^9, 3.600429711036256*^9}, {
   3.600429775116506*^9, 3.6004297773881207`*^9}, {3.600429838787216*^9, 
   3.600429851892276*^9}, {3.600518748509136*^9, 3.600518796228572*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b", ",", 
     StyleBox["\[Xi]",
      FontWeight->"Bold"]}]], " ", 
   FractionBox["1", "2"], 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{
   FractionBox["C", "2"], " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SuperscriptBox[
     SubscriptBox["\[Xi]", "i"], "2"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    SubscriptBox["\[Xi]", "i"], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"\[ForAll]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], 
       RowBox[{"i", ","}]], 
      SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]}], 
  ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, {3.600069619878358*^9, 3.6000696976499662`*^9}, {
   3.6000698340070744`*^9, 3.600069843688924*^9}, {3.6000703147873783`*^9, 
   3.600070318851357*^9}, 3.600070748774111*^9, {3.600155604909068*^9, 
   3.6001556221657333`*^9}, {3.600157793512041*^9, 3.6001577978772*^9}}],

Cell[TextData[{
 "where, for simplicity we have divided the objective function by two, and \
squared the slack variables, thus removing the necessity for the positivity \
constraints on the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 ". Due to the squaring of the slack variables, this is called the ",
 StyleBox["2-Norm",
  FontSlant->"Italic"],
 " SVM. \nThe generalized Lagrangian of this optimization problem is given \
by"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.6001562618603697`*^9}, {3.600157440600864*^9, 3.6001574459197187`*^9}, {
   3.6001578050061626`*^9, 3.60015784252039*^9}, {3.600414886880303*^9, 
   3.6004149465339603`*^9}, {3.600415011024856*^9, 3.6004150335388803`*^9}, {
   3.600429698647847*^9, 3.6004296999379463`*^9}, {3.600430410845685*^9, 
   3.600430426304928*^9}, {3.600433937591069*^9, 3.6004339786213217`*^9}, {
   3.60043403077953*^9, 3.600434038823875*^9}, {3.600519030390934*^9, 
   3.600519034895832*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["L",
    FontWeight->"Plain"], 
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Xi]",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}]}], 
  StyleBox["=",
   FontWeight->"Plain"], 
  RowBox[{
   RowBox[{
    FractionBox[
     StyleBox["1",
      FontWeight->"Plain"], "2"], 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", "+", 
   RowBox[{
    FractionBox["C", "2"], " ", 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], "+", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["\[Xi]", "i"], "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
      ")"}]}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.600156300029234*^9, 3.600156368405653*^9}, {
  3.600156621150298*^9, 3.600156661862521*^9}, {3.600157874303254*^9, 
  3.600157878691687*^9}, {3.600157924287451*^9, 3.600158010418242*^9}}],

Cell["and the KKT optimality conditions are given by", "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.600158028451982*^9, 3.600158032400323*^9}, {
   3.6001719912549667`*^9, 3.60017199222255*^9}, {3.600414981688201*^9, 
   3.6004149850697002`*^9}, {3.60042990556689*^9, 3.6004299270897017`*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Xi]",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   
   RowBox[{
    RowBox[{"0", "          ", "i"}], "=", "1"}]}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, {
   3.600518978995328*^9, 3.600518991933605*^9}}],

Cell["where the first three conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}}],

Cell[BoxData[{
 RowBox[{
  StyleBox["w",
   FontWeight->"Bold"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"]}]}], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox["\[Xi]",
   FontWeight->"Bold"], "=", 
  FractionBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], "C"]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
  3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
  3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
  3.600158661435207*^9, 3.60015866767249*^9}},
 CellTags->"eq:svm_w"],

Cell[TextData[{
 "As before, since the optimization problem is convex and the constraints are \
affine functions, the KKT optimality conditions are also sufficient.\nThe \
Lagrangian dual problem is obtained by substituting the values of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Xi]",
    FontWeight->"Bold"], TraditionalForm]]],
 " back into ",
 Cell[BoxData[
  FormBox["L", TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, 3.6001735723352222`*^9, {3.600430737886001*^9, 
   3.6004307396736*^9}, {3.6004308706986723`*^9, 3.600430873384021*^9}, {
   3.6005190465958643`*^9, 3.600519057388266*^9}, {3.600678954252145*^9, 
   3.600678958763721*^9}, 3.6074347480171423`*^9}],

Cell[BoxData[{
 RowBox[{"L", "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"2", "C"}]], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["\[Delta]", 
        RowBox[{"i", ",", "j"}]]}]}]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "C"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["\[Delta]", 
        RowBox[{"i", ",", "j"}]]}]}]}]}], " ", "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], 
     "0"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}], "+", 
         RowBox[{
          FractionBox["1", "C"], 
          SubscriptBox["\[Delta]", 
           RowBox[{"i", ",", "j"}]]}]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["H", 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}], "+", 
       RowBox[{
        FractionBox["1", "C"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}], TraditionalForm]]],
 ". As before, both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared from the Lagrangian, but ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " can then be obtained using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:svm_w"],
 "),  while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can again be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ".  Indeed, we note that by substituting ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " with",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     FractionBox["1", "c"], 
     SubscriptBox["\[Alpha]", "i"]}]}], TraditionalForm]]],
 ", left and right multiplying the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and summing over all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 ", we can enforce the constraint by commputing"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.600174352033383*^9, 
   3.600174383955019*^9}, {3.600174491817814*^9, 3.600174537941121*^9}, {
   3.600175445275632*^9, 3.600175448682406*^9}, {3.600175506253343*^9, 
   3.600175508667962*^9}, {3.600175871676817*^9, 3.600175927236977*^9}, {
   3.600430909988146*^9, 3.6004309310256977`*^9}, {3.600519074233149*^9, 
   3.600519087924474*^9}, {3.600519135912731*^9, 3.600519219813518*^9}, 
   3.6028587952562847`*^9, {3.6074347855666656`*^9, 3.607434786508792*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["y", "i"], "-", 
      RowBox[{
       FractionBox["1", "c"], 
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}], "-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "-", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}]}], "=", 
  RowBox[{
   UnderscriptBox[
    UnderscriptBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      RowBox[{"(", 
       RowBox[{
        FractionBox["1", "c"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}], ")"}]}]}]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["\[Alpha]", "i"]}]], 
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], 
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SubscriptBox[
              StyleBox["x",
               FontWeight->"Bold"], "j"], "\[CenterDot]", 
             SubscriptBox[
              StyleBox["x",
               FontWeight->"Bold"], "i"]}], "+", 
            RowBox[{
             FractionBox["1", "c"], 
             SubscriptBox["\[Delta]", 
              RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}]}]}], ")"}]}], " ", "=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]], 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "n"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "n"], 
           RowBox[{
            SubscriptBox["\[Alpha]", "i"], 
            SubscriptBox["y", "i"], 
            SubscriptBox["\[Alpha]", "j"], 
            SubscriptBox[
             StyleBox["H",
              FontWeight->"Bold"], 
             RowBox[{"i", ",", "j"}]]}]}]}]}], ")"}]}], "=", 
      RowBox[{"-", 
       FractionBox[
        StyleBox[
         RowBox[{
          RowBox[{
           OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600174127286213*^9, 3.600174151893757*^9}, {
  3.600174192850265*^9, 3.600174297068885*^9}, {3.6001743312244453`*^9, 
  3.6001743320502377`*^9}, {3.600174395426324*^9, 3.60017448222078*^9}, {
  3.600174609257825*^9, 3.600174620294325*^9}, {3.600174700488557*^9, 
  3.60017476750701*^9}, {3.6001748058235807`*^9, 3.600174817131991*^9}, {
  3.600174862424131*^9, 3.600175009763543*^9}, {3.600175081076378*^9, 
  3.6001750843648157`*^9}, {3.6001751300761957`*^9, 3.600175142796803*^9}, {
  3.600175178151023*^9, 3.600175202209634*^9}, {3.60017552263131*^9, 
  3.6001755621461077`*^9}, {3.600175619176784*^9, 3.6001757437281857`*^9}, {
  3.600435176945134*^9, 3.600435180026492*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Alpha]", "~"], "i"], "=", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], TraditionalForm]]],
 ".\nThe Lagrangian dual problem can thus be defined as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.60017522567037*^9, 
   3.600175228536392*^9}, {3.600175718035424*^9, 3.6001757187181892`*^9}, {
   3.600175750944895*^9, 3.600175831350972*^9}, {3.6005143339971437`*^9, 
   3.600514339262733*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "\[GreaterEqual]", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{"\[Alpha]", "\[Transpose]"}], "y"}],
    FontWeight->"Bold"], 
   StyleBox["=",
    FontWeight->"Plain"], 
   StyleBox["0",
    FontWeight->"Bold"]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.602858809278606*^9, 3.602858817579302*^9}},
 CellTags->"eq:2norm_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ". This optimization problem is once again very similar to the one for \
hard-margin SVM, the only difference being in the matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}], "+", 
       RowBox[{
        FractionBox["1", "C"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}], TraditionalForm]]],
 ", which is in this case augmented with an identity matrix multiplied by ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "C"], TraditionalForm]]],
 ".  This has the effect of adding  ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "C"], TraditionalForm]]],
 " to the eigenvalues of the matrix, rendering the problem better \
conditioned. Note that, similarly to the 1-norm soft margin SVM, setting ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[RightArrow]", "\[Infinity]"}], TraditionalForm]]],
 " would produce the same results as the hard margin SVM.\n\nAs stated before \
the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "S"], "(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}], TraditionalForm]]],
 " of the soft-margin classifiers cannot be computed simply as ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 ", since there is no guarantee anymore that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    " ", "1"}], TraditionalForm]]],
 ". Nonetheless, as before, for all the points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "<", "1"}], 
   TraditionalForm]]],
 " we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", while for the others we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 ". Moreover, for the 2-norm soft margin SVM, by construction we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    FractionBox[
     SubscriptBox["\[Alpha]", "i"], "C"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"]}]}], "=", "0"}], TraditionalForm]]],
 ", so that the minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{
         SubscriptBox["max", "i"], 
         SubscriptBox["\[Alpha]", "i"]}], "C"]}], ")"}]}]}], 
   TraditionalForm]]],
 ", where"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625342579255*^9, 
   3.601625346803771*^9}, 3.6016254649026546`*^9, {3.601625513196022*^9, 
   3.6016255147196074`*^9}, {3.601625738411982*^9, 3.601625740020549*^9}, {
   3.6016257793836813`*^9, 3.601625834335587*^9}, {3.6074348083739433`*^9, 
   3.6074348457036133`*^9}, 3.6375806050677643`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[LeftDoubleBracketingBar]", 
   StyleBox["w",
    FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "i"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
    FractionBox["1", "2"]], "=", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"], 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"j", "=", "1"}], "n"], 
        RowBox[{
         SubscriptBox["\[Alpha]", "j"], 
         SubscriptBox["y", "j"], 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}]}]}]}]}], ")"}], 
    FractionBox["1", "2"]]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          SubscriptBox["\[Xi]", "i"], "-", 
          RowBox[{
           SubscriptBox["y", "i"], "b"}]}], ")"}]}]}], ")"}], 
     FractionBox["1", "2"]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["\[Alpha]", "i"]}], "-", 
       RowBox[{
        FractionBox["1", "c"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"i", "=", "1"}], "n"], 
         SuperscriptBox[
          SubscriptBox["\[Alpha]", "i"], "2"]}]}]}], ")"}], 
     FractionBox["1", "2"]]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.601625083220161*^9, 3.6016250859167137`*^9}, {
   3.6016251764652*^9, 3.601625232068491*^9}, {3.601625540218547*^9, 
   3.601625569539563*^9}, 3.601625620222836*^9, {3.601625856881468*^9, 
   3.6016258594445*^9}}],

Cell[TextData[{
 "where again we have used the fact that for all the support vectors, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "\[NotEqual]", "0"}], "\[Rule]", 
    RowBox[{
     SubscriptBox["\[Xi]", "i"], "\[NotEqual]", "0"}]}], TraditionalForm]]],
 "\[Rule]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625579044509*^9, 
   3.601625582859509*^9}, {3.6016258611374617`*^9, 3.601625976382901*^9}, 
   3.607434872065981*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074348777288303`*^9, 3.6074348844254503`*^9}}],

Cell[TextData[{
 "Since the only difference w.r.t. the hard margin is in the addition of the \
diagonal component to the ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 " data matrix, we can reuse the code for the hard-margin SVM, with very \
little modifications, as shown by the following code snippet.\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625579044509*^9, 
   3.601625582859509*^9}, {3.6016258611374617`*^9, 3.601625976382901*^9}, 
   3.607434872065981*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"train2NormSoftMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"model", ",", "nrm", ",", "margin", ",", "nTr"}], "}"}], ",", 
     "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "nTr"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}], "=", 
       RowBox[{"trainHardMarginSVM", "[", 
        RowBox[{
         RowBox[{"KTr", " ", "+", " ", 
          RowBox[{
           RowBox[{"1", "/", "regC"}], " ", 
           RowBox[{"IdentityMatrix", "[", "nTr", "]"}]}]}], ",", "yTr"}], 
        "]"}]}], ";", "\n", 
      RowBox[{"nrm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"margin", "^", 
           RowBox[{"(", 
            RowBox[{"-", "2"}], ")"}]}], " ", "-", " ", 
          RowBox[{
           RowBox[{"1", "/", "regC"}], " ", 
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"model", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "^", "2"}]}]}], ")"}], 
        "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"margin", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"yTr", " ", 
             RowBox[{"model", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "/", "regC"}]}], ")"}],
         "/", "nrm"}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{"model", ",", "margin"}], "}"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.601217585543953*^9, 3.6012175967916117`*^9}, {
   3.6015733486260433`*^9, 3.601573349901339*^9}, 3.60157396561836*^9, {
   3.601574336286237*^9, 3.60157433996602*^9}, {3.601625599750942*^9, 
   3.601625601329462*^9}}],

Cell["\<\

As usual, we report here an example of usage of the considered classifier.
\
\>", "Text",
 CellChangeTimes->{{3.601558789996739*^9, 3.601558793790901*^9}, {
  3.601558840426955*^9, 3.601558870594482*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601217265460456*^9, 3.601217274884696*^9}, {
  3.601217649958868*^9, 3.601217650244253*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$809 = MousePosition["Graphics"]; 
     Private`p$809 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$809], 2], 
          Union[
           Partition[Private`pt$809, 2]]}, 1]]; 
     If[Private`s$809 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$809}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$809}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$809 = {}; 
     Private`s$809 = Private`s$809 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600589617150096*^9, 3.6006001989100113`*^9, 
   3.600600228965989*^9, 3.600600266088953*^9, 3.600600681760092*^9, 
   3.6006007941213007`*^9, {3.600600841457061*^9, 3.600600885139126*^9}, 
   3.6006013500386972`*^9, {3.600601383558695*^9, 3.6006013947936373`*^9}, 
   3.600601889657846*^9, 3.600602173557412*^9, 3.600602279086609*^9, {
   3.600602365064981*^9, 3.600602370242464*^9}, 3.60060278234803*^9, 
   3.600603523559029*^9, 3.600603945739794*^9, 3.6006091865576677`*^9, 
   3.600612999167354*^9, 3.6006138123158197`*^9, 3.600632644445119*^9, 
   3.600671117471401*^9, 3.600671642319047*^9, 3.6006718038665333`*^9, 
   3.6006722657928867`*^9, 3.600672526213133*^9, 3.601206370484069*^9, 
   3.601209437288204*^9, 3.601211467313223*^9, {3.601212264776905*^9, 
   3.601212290857061*^9}, 3.601212668321002*^9, 3.6012133566076183`*^9, 
   3.601214040568482*^9, 3.601214608470071*^9, 3.601217275255761*^9, {
   3.601217646676229*^9, 3.6012176510202503`*^9}, 3.6012180047532578`*^9, 
   3.60128627313862*^9, 3.601295890104985*^9, 3.601296909871706*^9, 
   3.6012971705877943`*^9, 3.601297662203429*^9, 3.60129889539428*^9, 
   3.601298947274419*^9, 3.6013046936347027`*^9, 3.601372885389017*^9, 
   3.6013752773626127`*^9, 3.6015597720353622`*^9, 3.601562166699974*^9, 
   3.601563112196547*^9, 3.601571645231084*^9, 3.6015724895165863`*^9, 
   3.601626156373807*^9, 3.6028568558258657`*^9, 3.602859724714912*^9, 
   3.607430518023924*^9, 3.6074324484962263`*^9, 3.6375647252164087`*^9, 
   3.6375655259622993`*^9, 3.637565654809787*^9, 3.637566042287871*^9, 
   3.637573361187119*^9, 3.637581899663452*^9, 3.637582140975326*^9, 
   3.63758220160777*^9, 3.6375834643307753`*^9, 3.637585526228755*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXmcVMW1/zAzvczCvgsIAoq4L4ArcQMSRUQTFXGJgto9PTvDLAwyArIH
V9QIj6eigsYormDcCK6ERUX2nveSl5c8owZBBaMBZYZf193m1u3vOVW3u8eX
3+/z+8NRb9etW/U9a1WdOmfMhOqiW8smVMduntDvp1UTKotiN0/uN6qiKvEo
p01WVvY1WVlt7uqXJf77cFaW/edwVmNjo/HnWvFHPPb9oIPxr86Jv9tW/35e
xeFoJPJO2R2vtdkSbxS/BBp3bdr89LSSw5FI7L6axe9lbW80nrdpjO/4+aZV
j3y4sKHqQGks9mnppNvmL1j6Ut7GHfGsqUafXdk2TN+5jfGPy9c89cCO2fWV
B0tiRXtKymuXz7zn8T6vfrAza3J6fbPv1bfiuKe2As45bhJ28dn1ros/fvXe
g9WxaHMkGv02WlLSHI2K/449XL3o9ezEu1OMbrvrNEWfSIx828K1S+ubSqKR
RNuiL0oqKg+UxaKJ4UX/Gpt8T4+XN8ezJqX3DZ33sup+hHnUtw4JsrUInBjh
9hEbXl995apVq05+7b2tWbsaG4ONOzdsXT61JNG2aHXlvBdCm3buvG7TCwt+
qIxGvomWNPT97aZdJoF76DRFnzhi14cvfD2zLNoUiZZOn7Zsbc7WXeLZK39+
sDom+lo2+b7ft9kab6w08U/1MzrvWTRu9alMaR1CWGQ25fnMbWsXHqosimQF
E9wSyco5GInVnPzQe9uNNrnG3wAcQND4Lb/nro9e3D+9VMyl4sJ5b2wVTzs2
bn3ji3kVgrfKrpixanNWvLGx2GieY3/O+FgAfDLbX7fmCPML4ts3/Gzta6tu
eOH5Ve3e22bozcQ/O2ave6TucHEk8qdYzeL897dbzOG3d93mta069imZI0ab
THLAiTveX3KgNhY5EInVnfBv63aIp/mN29//0+KamNBAC+qWvp+1wzcH6Hab
54xw5+3rl9ULxP5SVP1AwTvbG7Mq/XWV6695beYGqkFb3c9ItA3Fd24esGnD
+qzgwPXr12flDFi/YVPw451xXdoO3f72PT9URSPfRYrrBy1bv1M8DTfu+MOu
R6cUJz4aTWiqd4R1sWhrf874WAB8MttftxZBEvZsc9UrT/77w79e9MAlj726
qc3OeGOPXZtf/c+H6oqFXfx92axVOR/tsqXbZ++6zWtbdewaHKD7ZYsD2hn/
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
TAIKl2/XLz98ft6hiqLo5pJpy7q88/H2ttu3bfrDyzNKRfNfVz+4tmDz9h1t
4vFGmPeb3jTQXYjZOV/0djMy5cjdRKMO0l7I76K9WKTQC/l2jjo2d41FiYZ7
uBINyybf906LoRV57z/43XNzK5qKoqVVM57ckL1T0/AylYqVKrIXpiGzaCLL
dtxkPkOXrRd/WF/vtDsKvGsKVXBlfMKEJnfVxEN5eYs/nDq1Hd310s11dU43
Fxt/RZWQWVyVkPcrZhtVQkwdHa57+dmHvplWGv0uUjJl2v2/ffaPD08xSiWs
qZz/ZOQlq5lRLWQBGPoY85myLMhQ8K6q/sdNmozZEys2lJufOOvUDVoxz4+0
K3GYIxCO0K4JH6yce6i8qOjd8pmPbnqqodTN1rpcbZeS9qiMA8Fgs+Ben+UX
JvAKWBF1hcpC9Nakl6UgdEt7mBsDIaEgXls5tzyhIGIHS43aD/4Vg3k/M3jX
hAlfutKEO1p3mD8IJ2JuOoLHwVGUqDpuHx2zqFckxDq1PnLXppV75hgFQSKp
c53aayFunh3tD9LTMKR0NseAZN8arXqVRM68MY4SUJcQseATwnvrpmdmJ4Q3
HfiU/oAiot9njj7F3fCLaTglfWfDeSGG8wRTMtnqIeYgA4nF2aY3n5ldfrgo
BallMJTMuSJLvsOq6ACfAfMUTXk+H6OUw7/uqEWkDohQJjubEUHeUZkRbWeh
gS60IB72mR70FJILw16h9gJwFg9ADv8zMl6KLUjdtC8jNKEfy4u77m3hjCEu
yT17SKOLBJGW1Yq49S4juf2dE1m5Uq55LtIkCVHVSnd3J2NKJeDWCmy96KGa
CFg62Iu5a+9Vbn88Lwu6S3xd4G1P9EcxfczgJQyGaE5SA1up/XE83W3aslWO
dZWM7Z+2ikvGiJ804SHkhOF5nYZicF45nlZnblqy6mykJpY+8+yepTnrYTy3
oqToCkt1IglK2OvbeUn609bB4mx+wGdh/moHeiLcIeIESHF3yaGBbnKJs7E4
jfGHxjl4sJeCpoo1eDf+57Ga07J9KUL9noBn3dvfrH/VMuvl20pL/WZNI+Ji
L9ecopUcSbkw6Ibn2p5HyGdMzeV4LkN5agbxW7qX6Ir8IaV09bvwkOjeZO7p
D7qxPEZELmLdvNOKVYNumswMQI2KjGtuwKhJ18Mf5pdpoteXR6+QRC/oXexx
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
w8U7Wfjf9eWECV78UfYxbjgk/qYVDlPAiF8FuJYffOfEiV/qahtv+JTmSYm0
n3nBY4/JBwPXZlRFeUuKcQiSdyfN1UdSdXsjTYXZXnEtNtc9FEpPXYYVCHHq
SmRwsxkF3HXYV1hoUMKATyuUVtunlzY3cuU1gtHiGn9EVVj7o0iaS0C70hWj
Fbqyer0iWlTX/I/hoVaEk3UAomWqyQJBCSq2ijg1VqtR+nuyKI/zR1G2tJjf
TdBsTZlH9ZJQ5XrCP9F1uS/V1H66Aebm/mvSvmriHTuqPleQzB3/iLZxUcF7
pLzRujwEZP1qfxRXFNk7CWOu2NJoZ0HjeculuXF1+jz8HmkzL9XUf/5yDsBT
rYTB3St8Hzv4y6aNHYuMzvcU+SfR3mAIyLpPiuqWdB2KSdvOwsA4Vm8hrTgk
85QHxAXn82jWEImXfZIxpUB4hUh5IlZz3eIogvvRuSVxzRjty6Ibnz7VsG6Z
2ZEtpG72VEkV9Ytn7YnFyCRdTNaP734oKHDYJAVV6jteHhw5tQRD4XBWy7go
L2NYMcWZdn10y9zay014g5wqp/zAV9df7+k1IJol1fhh0udIfGLeDO6WUtke
s4/46VvfefbVh+ZO/WZSSWxfrLTqxWkLlg56cf12kU0aZf1Pz50yt37YG2tg
Vam+GGKGavIrG6IIwYUZ1cKOUxPgLWlP/mcrtOpVUFD6nq9cVeR1k7Gb1/FF
lGpKBX4Eo5y0/b3H9k0vFUmgI03RaOxQcZHx37ujlfOPXLlpF6wR4W9Rhe7P
hwG1XVvUnpP0sHfXDkcUkfx5gT9mUDhZQU2LTV/aNWqV1uyuqfEkgQOaJOfm
z+fM8TIGZQUcNjU1SI9U6gFl7WpszGnc9eE7L9xRLpKr/2dx3YN9Vn2ws1N8
y5qd/15v9LW0+n6jcAUqGoMuh1n7sijSLktxnUWxTa6bs+Q8fxzA12xWKvCu
oB3aAHTFlyc5BAkHziFnR5ohhZNmBm9olwQyJTq/a3zzK1/dUS6kvSTS8Mwm
8VPil531Gx6vP1wciWwpue3J4MadkMh29gV8zqFz+wLdkdHd8BpGfkb2An/i
j+ioXjXSuoi6ISD/1vmYl4lsV92SXimczfTm81GVc7TKsgivWyLIIrxduyPx
U9mYGa9stglfs355/eGSSGRbSf3y4HpMeDtpCXv4qPYg82nqK6k6lG4nORmp
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
zD4prZpm1y0wOznZ1aHx51rdB1lt/g+qqKaA\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train2NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", "linearKernel"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005503498927317`*^9, 3.6005503500576143`*^9}, {3.600588307237846*^9, 
   3.600588313868602*^9}, {3.6005889274131536`*^9, 3.600588931635717*^9}, {
   3.6005891095272827`*^9, 3.600589127253347*^9}, {3.600589674705143*^9, 
   3.600589752385747*^9}, {3.600589859798711*^9, 3.600589861823804*^9}, {
   3.600589919957633*^9, 3.600589961803607*^9}, {3.600600581791831*^9, 
   3.6006005872282553`*^9}, 3.6006006982191267`*^9, {3.600600957488339*^9, 
   3.6006009936816893`*^9}, {3.600601442677775*^9, 3.600601458020113*^9}, {
   3.600601917129445*^9, 3.600601917290449*^9}, {3.600602290255299*^9, 
   3.6006023161080647`*^9}, {3.600609493626485*^9, 3.600609592687899*^9}, {
   3.600609630505509*^9, 3.600609633516151*^9}, 3.60060971841512*^9, {
   3.600631593542777*^9, 3.600631605389091*^9}, {3.60121723787749*^9, 
   3.601217245142144*^9}, {3.6012172980760736`*^9, 3.60121730959201*^9}, {
   3.6012174024063387`*^9, 3.601217409105876*^9}, {3.60121753241619*^9, 
   3.6012175326047707`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 1.5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    400., {199., 203.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$160790$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$160790$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train2NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`linearKernel], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {248., 257.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.60121740986421*^9, 3.60121753326377*^9, 
  3.601298599640164*^9, 3.601558902793015*^9, 3.6015638865181103`*^9, 
  3.602858920663074*^9, 3.602860276956197*^9, 3.607434900961101*^9},
 TextAlignment->Center]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tKernel Support Vector Machines"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.5998959933365173`*^9, 3.5998959950405684`*^9}, {
  3.599899231509494*^9, 3.599899234925165*^9}, {3.60015516447847*^9, 
  3.6001551698116207`*^9}},
 CellTags->"sec:kernel_svm"],

Cell[CellGroupData[{

Cell["Kernel Methods", "Subsection",
 CellChangeTimes->{{3.600520519924685*^9, 3.6005205222261477`*^9}}],

Cell[TextData[{
 "Linear-threshold algorithms, like max-margin classifiers and the SVM \
algorithms introduced in the previous section can only learn linear \
separation functions. However it is often the case that data is not separable \
by a simple linear hyperplane. In such cases, a separating hyperplane could \
still be found by non-linearly pre-mapping the original vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], " ", "\[Element]", " ", "X"}], 
   TraditionalForm]]],
 " into a new space ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CurlyPhi]", "(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], " ", ")"}], " ", "\[Element]", " ", "F"}], 
   TraditionalForm]]],
 " called the Feature Space, where the samples become linearly separable. A \
linear classifier can subsequently be trained in this space.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998461259623`*^9}, {
   3.6005197554764442`*^9, 3.600519852482081*^9}, {3.600519892420924*^9, 
   3.6005199293763533`*^9}, 3.600519997453315*^9, {3.600520031766438*^9, 
   3.600520098523343*^9}, {3.600520221605938*^9, 3.600520222008019*^9}, {
   3.6005202556530447`*^9, 3.600520371355136*^9}, {3.6005204574178047`*^9, 
   3.6005204999975557`*^9}, {3.600520539060892*^9, 3.60052054057265*^9}, 
   3.600520817666068*^9, {3.60067956304256*^9, 3.60067980293848*^9}, {
   3.600679842850666*^9, 3.60067999337082*^9}, {3.6006800587681828`*^9, 
   3.60068005986121*^9}, {3.600680107219975*^9, 3.600680126672*^9}, 
   3.6015589426723757`*^9, {3.60743491618672*^9, 3.6074349195937653`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
0f2KWgpIdwDMBSh5S4Lr3unTp/fs2VPW3cjuTAEAAMhcjGPoz549i46OnjNn
jhjeScOTdKePkZGR/0tC5DpaCgBMFni2WzYHDx6sW7duUFCQluSviBsNAABW
guhwVZCfPHnyiy++YIcZtrpv2bKFv4WlHQBTRqajqu+pLLsGzB2qgZ88eVKl
SpX9+/fTLcadBQAAK0GNJ0ZbCe2uJTUNwcHBPXv2JNGeJ08e2tK+JGB3Slh4
ADALEhISIiMjszsXIMPo27fvxIkT1SOwpQAAgDWgzjbVDBHGqLlfvXp14cKF
Sbe///77N2/eZOmOaVAACLoOrBi6Hzx4EBERkV2Cil9SNsaSxrOzs5s0aRIf
5C1lDC+yWcAPmNwsqpY3bdoUEhKifgsrCgBAS+7C6yoEagj4uKyhjJ6+Diqx
MWPG1KhR49ChQ3Iw1dFM02w3xe+db/GxY8eqVq1K0n3lypWakmf+9iV3X1Kq
8Wdekl4s/5oS6CZ97ZHquq+2ero2zjTLH5gX/Dipw1VEXFxc69at+ZXRlNoy
C9DV27du3Xrrrbfo/f3oo48uX76camJgmrxoPtHTp081+D4BAAykumzHjRs3
tm7dyvuqxQYSSCCha2NjkzNnzlKlSh08eNCYQC1PE2w3KXt0NzmTEmema9eu
LVu25PYi7dOgKGXa57HK8yZHdFrolVB7lzoNLx8Rfx5kFPy88RNLDxi9MiSV
W7RoIQmy2CIqXdebN2/yFJW8efP+9ddfmjIikPW5Aq8EK3Oqo6QmpPslch2j
nwAAI6qVkgX8zJkzK1SoEB4erkoyoHLlypXcuXNTW0kN5TvvvHPr1i0qRp1t
xJSbS9U2KE18fHy8n5+flqTk1SjuL2k1jPb2tEh3LWU7FRcXl46wGP+XjJaa
VQqL0YCMRX3UecfLy8vW1rZMmTLR0dH8QmWxvuK3hv7U39+/QIECVB1RpeTh
4SEDprqcA1NDfWy4Ct20aVNkZCTtiOVEnaMEAACaoUJISEioWbNmrly57t27
Jwch4I2MHDlS4ihWqVJFLS7G9OMAkHKWHKpZfSUPluDg4JiYGDnDy58TWQdQ
tp6enmPHjtUpjTRy48aN6dOnP378WEtNqCNEHshAVL8yfownTJhAr3/BggX3
7t2bxSEZ1beV9h89esS6ndi9e7fqJIZXwMTheo+lO/W56tatGx4eLt9yv0yD
bgcAKOj8CqgJKFq0KNX/c+fOVQfsUP/roOq0e/fuvGhRzpw5GzZsKPWtdHNM
trJVdbLOYUZQE7zoPJSG+i9TpkxJYw9FbYZof+nSpR999NG8efNeVbfzeWJj
Y1u0aNGgQQMS8Jqy+LuaDIZ38PrIIJE665Ne+dKlS9esWXPo0KFyMGuM27qx
Leo7U6XNCzHs2bNHQ2h380GGHcPCwpo3b863j+tk3WRVAADQUqpxrit27txZ
rFgxao/atGmjS2yyKjTrEaFbq1YtmyRIvXft2pUtz1rWTlJLN6oTuOzTRUnm
0yKn69evX6dOHfV6X64WpDGaMWNGxYoVeWJv+jRGQkICbZ2dnUn8qxOE8aCC
jEXVTvx0+fr6du7cuX379rNmzWrbti07mGlJr0zWqGXxE6O8hYeHv//++2xv
37Rpk5byHTSLusg6UWdMjB8/3snJSUuuDI2R+dELAwBoKb0L2K9j9OjRzZo1
a9WqVceOHS9duqQl1So6MyZgqEwCAgKqVavGJndiyZIlYWFhWsqljkyz6MRk
p86BUh8GMVa/PJ6Mg4NDo0aNtOQpzGk0vM+cOTNPnjweHh6vcwmS2+7du9PZ
jh8/zkpeS7nCFNo78Pqo45KkhF1cXObMmTNixAgvL69OnTpt3rxZXqWsn50a
FBRUoUIFXkNt48aNcjzLOhEgfcjdOXLkSO3atYODg7WUz4+xQgMAAN2Qa79+
/RYvXjxgwIDhw4dPnjxZbYlQdahIydy+fbtcuXJs7LKzs9uyZcvzlGR3Tl+I
OudUZzBXs/3y+966dev//Oc/mhIy+l/t7SQtChQoQM+YzkfrlVAHCGJjY0uX
Lv3WW29dv36dWzo8qyADEbkuT2zLli1v3brVu3fvM2fOrFmzhh5mNWXW5EdC
kZBuL1++PFdBGzZskL4zXCxMBJ3znqbUlrSNiIho3749T0ww5fYCAGAiqDaZ
PXv29O/ff9u2bbQ9cuRIs2bN+DjqfyNqEEJ3d/e3336b280iRYrs379fU9Sv
mNxFG5tpP0geA9V738HBoUaNGpJGvWTV6C1aIiAggDRG/vz5SfBoKcMZGQPy
yHGd5f95yvA1z549W758ORX+119/LWH6jNkGIN2ow1Jnz561t7cPDQ3t1q3b
iRMnLl68WKdOHVJfWR9Phnforz/99FNbW1t6BX7//XcNPhUmjPHWDB8+fOrU
qfIR9RUAIC2wLvrhhx88PDwOHz48YsSIhw8ftm7d2sfHR0Qa/CRVVNsI7Wzf
vj1v3rw2NjZ2dnYVKlQ4fvz4i6pfc4wozqKFtpRzfgwSExNjYmL27dv38ccf
kw6/desW6Rm+Lt1zoovQPnjwYFIX1CWURZ1UhS8e9TJJVifmVQckdb1Ikk9U
+Lly5Zo3b56EaEA8DZDh0BO1a9cuFlqk248ePco73t7e2WUvjY6Orl69OvvJ
rF27VsOSeaaHWtHJoCRVUBcuXGjQoEFQUBDXk7hfAIC0wHUIVR1NmjTx8/Mj
CcoREsaNG7d+/frszp0poi6HERsby/uTJ0/miO60pWZUpqpxa67zNVWXyTML
1L5GfHz84sWLP/zww3z58pFUyJ07d8GCBWvUqEEynpdtkjZIlDNf7O3bt0uW
LEnl4+TkpIsMHxoaGhISQn0BKs/g4GCSInSqx48f81Rf+hgYGEhf0V/HxcVx
6B72W+CThIWFUQbozJ9++qmvr6+GxcFBRiOjZvSm79y5k/bbtGnzxx9/0M78
+fMnTZqkJsts1NcqISGhXr16rNtdXFw0pbdrXpWMBaMLNyT35eHDhxcvXtRS
W5MOAACMqBbLM2fOkJqiVmnLli2DBg2iOmTz5s20oxmWpASMsUAGDhxIrWf+
/Plpa29vz6HFU10DxbwGLyRyBe3TRX3//fd58uSpWbPmmjVrypYtW6lSpYkT
J5J0z5kzZ8+ePe/evSu/kuvlZ4zLp0iRIitXrpTSYxv+1q1bq1WrRoXWvHnz
eknUr1+/bt2606ZNo283bNjQokWLRo0a0ZH//Oc/9C8k8vnn4nvcvn17ygCH
MFXLHE0heH2ko03dyV69evFSax06dPDy8qLj586dc3BwyMoaUtct7dSpE/vJ
9OnTx+yG86wBdXBWfPxkLBK3DADwqlAdMn/+fBI8tO/q6jp48GCqW0ihdenS
RWIbQreriGM218NsdQ8LC/vuu+9IPebOnZu2nTt35ppZVLqEgDYvVMfyHj16
cK8kPj6e1DjLbDq+bds2Hmv4+uuv6ckxTlC9d+8eiXxKULhwYQnbKIZBEkJU
XDJgwcbDH3/8MSgoiEO1L1u2jL8i1XT48GGduzvBHjgE5UeX5ywoImDZyPN2
/fp10sZ8sGvXrp6enlqSW1fjxo3PnDmTZf1x3VNNDz8HpG3YsGFcXJxmmAMC
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
R8jUYFgAAGQ0z5U1sqXKXbx48fDhw42OBxbfNJsU1BR27NiRh6pp27p16+jo
aDVgi9wONA3WgCqEniWRjpOoHlnSEXj5qcSVy+gEYlUhp1LV7U2bNt2yZYs6
uSPbxSpl49q1a2+++aaNjU3OnDnnz5+f7nnfdF1xcXF8xLgAnPHWq77cFv9g
yMXy63P//n17e/srV65IAqNjFQAAZCwST2bhwoWOjo5qHFpJkF15s05CQ0Pr
168vfqTOzs5asvSSuwPRbg2oI+/yGqZ9nrKqt/mB4d+m5Y2WedPqeaQTIWLe
4ucXGGV5WFgYSbVt27ap72C2FwLJSOpQfPHFF+yF3rlz5/RVEUZPtpeb0NVn
zBrGX3Rd4AEDBkyYMEFLunaOi/s8eeJ8tnflAAAWhnHC+7Jly0aMGGHxDbEp
I77u9+/fr1ChQq5cuThg8syZM7WUCwwhXoGVwNpYU9bqSrsbrc4KqtoJ5Wz/
egbxnUh19V6LfwhTnZfavHnz3bt3m6AwowqcQ8qoaxm/EupCqHIk1TG+54YV
txkTLJYMRO3/+vr6duzY0cfHR31IXidYFgAAvASjbWTFihWjRo16yXgoyBq4
afjzzz+LFi1Kut3GxiZPnjyurq78rVVNBLNydCZTUs737t1L36nYG3nz5s3H
jh3718TGJeyps+Dl5XXq1Cn1OKsXy16vVqfbaSc0NLRly5Z79+41nRdQnpM9
e/bky5ePpDttT548+arnMQ4uqK0A9+BepOGt0H+Pekb8PqpxrtCAAgCyAK51
Sbc7OzurZhYNlU/WwvW/bHft2sXh14iSJUt6enrKfCjT0Qwg81At5HTH165d
W69evePHj//rr4yvbXR0dJ8+fT744INLly7xkX/VV6phnzS/u7t7+fLlFy1a
xPkRx61XuyRzI1Xd3qJFi/3794sh2kQqScoPyUiJ4k53Kh1nkH3jhOhUh2+e
K7z+JZg4co3sEqNiNLOjigYAZCAyoKlWtqQKRo0aZT0zjEwQcYoQabR8+XKJ
DPnOO++wwRNOMlaCThX//PPP9BisW7fu5b/S2UjpKfL39//222+/+eabR48e
8WnTLirEX5fOc+bMmQoVKowePZqeT9UUn+YLMldUjRoSEtK8efN9+/YZp/Zn
I9IL69y5M09pp85FOs4jVZAaQEZ3mapJR524mr5V2MwLKRZdmB3dIAVEOwAg
U+Gads2aNSNHjkSFk72ocfa0pFszadIk9nK3tbX96quv7t69q5nqIqogw+GZ
yGqgv/Xr16f95/ScJCQkkGL/8MMPWbSn6qZuRDe3Th5LLy+vggUL9ujRIy0n
sTyoQCIiItq1a0e6XUs58qW+kmJ/Vr0msqBqpZv7yy+/cDe/aNGiFy5c0JSa
RHvBWAxII3K76Z0KDg7WUJ4AgKxF6hzerlu3bvTo0S8aFVWtav869UZneJGA
t5pivpMELxmvlxxyGnUynW7+lGXr2F69enFEdxLw9vb2YWFh6t1RiwLdLnNE
fTu0lHpYvdGLFi3KlSsXvadqXFDVt1bEtnxFv/ruu+/s7Ow8PT211JQ2pyS9
l2oQDN0TxWmGDx9uY2Mzffp0zZqcmRkqjcjIyA4dOuzatcu47hhXUFSYPj4+
a9asGThwYLdu3SZMmLB58+Zr165xSpkOkLGvqtTPV69eLV26NEv3n3/+WVcz
QGS+JlySkydPdnV1RWECALKXtWvXqv7tukpJ4sLpNMaLME7PURcGZfthWlou
o5lIN8pvDcP0UVFRLVq0EIeZPn36iM+zbvBag1+leaL2bRn1BeEXZ+7cuXT3
N23apBkCwqjhW1UFPmXKlNy5czs4OIjnFT8zErNOfVrUKJHqEjw60/HNmzcL
FSpEp92xY4dmBVJQ142il5HKc+fOnWoauR1PnjyhXnbRokXpTjVr1oxEe/ny
5Wmftr/++mvmdXOeJ0f+iY+Pr1WrFlcUDRo04PWAjNYSkG4ePXpEHTeO2W7Z
9iIAgAnCepiqdGr3Fy1aZIwno4qBsLAwLc0WNm7IJKpkSEgInfzq1avUrEga
Vcm/KHu0vXv3LskPahDluFHhpCVL5gvdnYcPH1avXl2CunPQYAYtsgWg+kcJ
fIRfUpKLgwYNypkzJ916dVqcuB8bB7lIYJcpU4aeFlKMmuE5ISUv7xE9YNIT
VNO8yAhP7zKdtkqVKsHBwRbvgKHT7dHR0e3bt5c+CxcRb+kl/eabb/LkyUOF
06NHD54FcOPGjY8//piO5M+ff/z48c+VNe8yCl1IHxcXl9xJlC5d+u+//zY+
GBn411YINUZ0HzXUtwCALCRVZ5ilS5c6OzurDbe0xdS+r1ixomrVqr6+vvzt
y63c6jg+tRok1z/55JPevXuTeucEIiHozC+X7vRtRETE8OHDv/rqK2MIu3/1
tLEkrl+//vnnn4t0p/ulJd8I9WZZSWlYEi/xgqa7SWrwxx9/LF68ON/3vHnz
VqxYcezYsXfu3NFS9q9Vd2vaGTJkCKUvXLjw0aNH5amQN9dYCfAqmawqCfpI
vWySqWoO2Udu7dq1POfi559/lqxaqozRXVdsbGyvXr1k3SUpGSqr77//ngfF
ChQocPjwYfkJVV/s5GZnZ/fLL79oGf2S6sZlLl++XKJECX5UJH6sZjDFgHQQ
EBBQv379U6dOofsDAMgW1Dp8+fLlY8aMUVtzVUUsWrSIGoLz58+n3W7Djci5
c+cqVapELZesA6IOwacF0vYkNn766aeyZcvu379fU4IeaKnJD8tDrvfkyZNv
v/02L4mYP3/+VatWaUmCQZJlZy5BejFO/xQPqOPHj7O1tm3btt99912ePHka
NmzIy2LS6yBzVHVe03SeK1euFC1alJ4TSubv768pxnPqAJLybNeuXdeuXdu3
b9+pUyfap5N37Njx7t27gYGBAwcObNWqFf1jjRo1ateuvXnzZi2lU5aHhwdJ
U1tbW8pbZGRklhVUtqB7reh169GjB+l2nQzeuXOnTEIpVarUkydPJOoOdbGl
u12mTBkeOszYt1Vi/nBdQbePo8rQPdWUbl0G/qMVQgV4//596rTKkX+1OwEA
QMbyf8nrlRO//fabbvhPdHtiYuKSJUuoIbh48aKWhvpfwoz7+PhQO+Xg4MBW
Pl0AQ3bKfUm9p/rDxMbGjhw5Ml++fNRict7E1CxnS0cJmAUyfkFs3769cOHC
vB5T8eLFjx49qqa07EVwLBuZ9CHO6jdu3Hj//fdJfU2aNElL8m+nm87+7Y0b
N2YduGbNGi3lNG3emTFjhsQg4i6zvGhRUVEuLi7U76ME9FKz2vzggw9cXV3p
LdOS1vwiuU4HixUrRi8d6Xz+IZviKXu+vr7vvvsuZ0Dn6W15DjO66i4hIaFz
587sJ6Ml1z9UpI0aNeIONW2rVq0qvWkqLk9PT9HtuXLl+vXXX7mcMwqpDLVk
q8icOXM4J9SDkAU9wesjTVsa52cBAEDmsW7dusmTJ2up6XZi2bJlpBV5fDCN
8cP9/f0/+eQTat/ZCVaku05gp6X24zRPnjx57733SKyeOXNGU+yHVlJ/crnR
VS9cuFBkQOXKle/cuUMHU51pCMwC9W2S5/np06ekD+kWkyBkB7P58+fTxy1b
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
2rHcYI3omTNnzp075+/vD8F18+bNixcvXrt2DacYCyAxwgEBATdNBAYGPnjw
wG62AgFBraioQu3atduyZQudxipIpNI9I1SqwLzl8ePHkydPLlKkSBoTaH1g
782bN1+6dCkblvNdbNNumF4fU6dOnT59eoy11UdoVByn9+/f37Zt2+rVq9eu
Xbt///6IiAg1W7bs5Uw2bdpE+s/BgwcnuY8sSIoYNGgQVX6gYcOG6CDUyklI
SCczABogGhdG066IGnVm6sqVKy1atBg6dChtq2o1/LMLVrPTsx4+fNirV68c
OXL89ttvqm7f+RTY2bNnMfDhjlvN3Hn5BQLBy4AqwW7cuNG/f//ixYtnz569
QYMGtWrV8vDwyJUr14cffhgUFGS915VmS2IB7Lp06dK0BfOMGTO0pW3q/Lu6
QcatW7eqVav26quvFixYsLAJBEBFULCDBw/irvfff79cuXKIyZcvX9GiRZcv
X65pMAQCu0A9IX375s2bOSaJ8naC2pBDQ0Npw5dKlSpNnDgRraZYsWJeXl6g
zaAxHTt2ZNWZtpXSkydPunbtSjyHF7Jxk2TCj0HBnDlzqlatmjlzZjTAihUr
YlAAUoEGqNJ1Hg7QVL6fn1/evHmRMwqDpm1Ivy94mUAvExkZibEqVXtUPAxF
yZzbiGuInjD9BVHoZcuWoTx//PGHc2NRtTlzCQMDA1u1atWoUSNuPpphvCOQ
mgvNFvc2bdrU39+fG7Vd9b4KXDp58qSnp+fFixeFtwsE7gBusBjOo5fPkCFD
6tSpJ02aRJE0tQ2+XapUqVOnThmKcu/ftlmIC+IDINvWMmjaA9YSbN26FaUi
wk8bSWAcwQtk7ty54+3tjXiQB8jD6OhoVXMoEGhQKwY4aps2bVTebk3j/lB7
fwqDtPfu3RuNol69ejTcLlmyJIa66Lvnz59PTjYaN25MXuOMuJuZnjt3DlSc
2trq1atjbX7n1OZ57do1NGFargL5EBIScvv2bVo6lyVLlhEjRtC0l1UfeO/e
PfT+lPn06dMNMZURvGSgEhJZpTWqwMcff2xYvCclAG/nJ65atQrF2LZtm4ty
hhd3x9qWcv/000/g7apbNuflZ4oO2v/jjz+iwfIlbdiunXLJibdb16UKBIJE
AQmE8PDwZs2akVKifPnytDgdePToEXe1b731Fq2L0eyEDadyg5ONHTs2VapU
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
Sfu26sdUL7Hy03q0WyS2lOYAuwGM903VPLWf8mzQ3tFumGCt9q7k7OIf/LcF
VpuPtWpZoWXi6Feqp507dyZBV7VqVVV94UoJNb+O1syd5Mb/FGlIDw9xtHnz
5tGjR/fp0wfyc+jQobt37ybZq2alPosV+IKkhVhlvcOjR4/Yn4wmK5zc7uTS
C2+Mdh/x/Jm4Eq+1X2tjd14Su7k5F4BGXOHj6vs8B1zsvxjxvj4ncL38Tj7s
s5E3q2C0fnZHolstv91fZjex87eLN4HdbJ2X81/BxUy0L+YobLdi37p1q0mT
Jq/YMGzYMIonrbu2dEv7pPSXIYvOnDkzd+5cdEBg719//fXKlSsvXbrE67AM
B960Yl+O3lvzugYh+cYbb9AmU6odvka81VKp4VibXLVriRprUjWIZeu3ZVmt
yYRYhaKouan98v/Z4KSNu+JELtZm7KS5ttBeliNVVSG9mt331WK0KsqDGq0l
aq+AsGrExSnt8hMrDY6NT9hqFdVRYvUv2F0Por5XrI2hUeEdPd3uRzYU+Wb9
FNbv7ChnuyVkv08MR2TAWgBXBJRWT9Riq/9aExTWpmS9XS2k3Y/jOrid8qlK
zlHObt26kR8t8HZ1q2i7xXNOpWItgz7nZVPz5xZEPnhv3Ljx+eefN2vWrHr1
6iNHjty5c+f9+/fVG59a3EgKkgTUSkISgzb/+vPPPw3HOg1H9d9um7I+7t9S
UCeJn0F74yTeeQ6xSrdoTaY1AUfPtfuIpwpcucWaP4e1V7N2SbGOeyUnX8PR
K1PYbhf8r35xvB0la//srrVRX9l5Prw/hfPyWBOozcTFymM4qAaO0lg7X46P
90EaeMMj7Xc7UuzE+xbO03OZVcqBMqDjKFOmDLqzdOnS4fjJJ5/QJVdc16ps
FnliFLBx48bJkyf37NnTy8sLZP7y5ctqSaxV6IVT9/+Z4MzPnj1boECBRYsW
nTZx4sSJQ4cOHTt2DPEYbpw6dcrPz+/8+fO4hDDFIIyriLx48SIGIFeuXLl2
7doNGwICAgIDA+/cuYOAv78/Ely/fj04OBgyGUOY8PBwdMdPnjwJDQ2NiooK
CwtDJIX/MhETE4MjGAUCuIr0uBQSEnLdxB0TN03gY2K4gU4cj8NzUQZ6NC7R
cxGDz4viIYzA1atXKYC3OGuCXuekCQSOHDlyyMQRExzGN6FXPmoCd+H7YLyD
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
    "], {{0, 461}, {
    1000, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{1000, 461},
  PlotRange->{{0, 1000}, {0, 461}}]], "Output",
 CellChangeTimes->{3.6006800700300913`*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
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
stYWLo0jIcX3Cmgf//jHl8Yftqd/+Zd/MS8Af//2b/9mPO4Tn/iEfX76059e
ou0kpqNL6D6f+tSn7DuP8p1H+c65pDel0ae7E13hncYewQuNZ5w2EsNaOv+E
d3HLf//3f6dH+L9ut3KOv3JrPc0jdprXXL+0kEZiHSFuQEd4Eb/55MV0jN//
+I//OH3kIx8xl/nHPvYx+w2Ir7nmGrvOuPnNNVDGJ9doN4HMnkvPL7mQsPvR
j37UmotNcUsyzdKA0rcEN8w0znGN72COZ3iWZ2ieV33gAx/wZ9bLdf9bcmKd
DiSgBfhnOGc8HjQQAWzGCwz4BD4osvqermc35KZRL5TAZwK9gTE1sbTwxdEG
D0ARCNM6rfF6tSqo0tUEpSUn0rQFWIyMS0CHy/pktBlC6ZuNLXXHwQYYzO9E
DOn973//kpNLgJaGjuTl4dRIehiAbdhznOfT0ZGuJWAnHslvOqL+CzL0WRAS
pTDObK8z/u3C7wBP0L3EbXoVqnLTreL8BapCCt8Rq+tGuFvWHRElsycQX2qH
AR40KmC4hNVwKjNEfgOa97znPXbuXe961xoegoSxd7/73eYr0B+3EAJKt9it
QBat4K/+6q/sPNdTU0seTAjgFt6k1rk1fa7zZcm3dA/Ncg9NQccgLAF/hiRH
yiKfWy9zgBHZ9GGAh8sAeYTmeDXdAP980gVGRW+vvPLKJV8Wp0x/8zd/Yz3x
HpqVRpSPqB6D4/Ntb3ubfef8n//5n9s5gmx8f8c73jG9/e1vXxKwS2B+61vf
yk/7u+Md7zhd97rXNTbL+T/+4z827Sp9X/IjwYBW4OpE3N70pjfZLX/yJ3+y
nN7ylrek4fOTW9JT6Rf/ty0w+Kd/+qfWEtd5E+fSE3RsSW+THOA0ffvLv/xL
6zdj4DbvryGSMfGb5vj0cwnS6VsG0Jb5bh/5yEdOt7zlLW00t7/97acf/dEf
nX73d393qAQ/s5OyVVKfbpwPSIADXui4KB1VhwR0AJzAUSAHqBgnv/lMHU9t
p7vS3OU+YKV7E0hTL/7gD/4g/f/DP/xDA3EaS/rF/6PT61//ejPHf+/3fm96
7WtfO/3O7/zO9Nu//dvTb/3Wb02veMUrTDDiKfvN3/xNO89nurY+vfKVr0zs
gNt0SZd5jGZo8tWvfrX95nx6gvtTV9OZhHV+84yft+8JnMvpNa95TWo6fbVm
dJu/2TzrNMs1vtNrYkTpdWlapF8JCqkFuwesMcJ0Pb2WO47bbyABoYnggKgg
y2+uJ5gZZAQh3pHaXTOUr9mo6FrqRvrF/zPsdwQa4feXvOQlZjz8+q//uv0m
Vo72wXfdxye/uY/rPEPInvvS55IT6SVc5lS6PY00PZjmARABUgAbiDBy4TL1
eGlo3rIBCP18MiiAkwa8yNPssM0HyBJy44/vkCAkCYnyHT4Bf7CZwSTZMlbB
lOGyKJpHE0WnptOvhEtYi7iOph73MOWgVmDOd6gZHGQKTZ1OZOL4s1Hy57hf
gvx0kygOmlryKxE1v4GrYK5PzoEjnuEccAeAfKZnlvzIbawXinTiX+NHGi0w
pgeiOqiE31xdM+o7WqiH62JnojSojGuR3fk8XRqZHjK8CJ30QoQe54lPTyeD
9UI9UE36vmR4if05AZVLONqe//znT7/8y788/dIv/dL0vOc9zz75TbrFC1/4
Qt2TgJnOJNHA/ZzjGn888+xnP3t6znOeY9cgWK7TDtdpR23y27u0Zl3KPQ3d
yrR9KHbe0MFvWn/Ri15kqAqPpJ6lb6kppgnXeXv6W9rFo3aaF9METn2o4bLL
LptOOeUUlPnpZje7mQ3gF37hF+xxOppeZeNdlm+pfd7PjQ6xJUNOAAEAPEO+
CoPlN7eQH0KiyQ1veMNpbW1tOuOMM6Y73OEORgayG1B7XL9RjO/GMQY4M1ZQ
ZIgfPvShD7VYIgkyP/zDP2y/yewhqwVXKrKJ8z/yIz8yPeQhD5ke9KAHTd//
/d9v7lUMHb7TDt8f+MAHWsQD/wbfuUe/dR/nvuu7vmv6ju/4Drvm5xPs0xOJ
7/Cbtu5///vbu3j2u7/7u9XGkg4mZktX6CafPKJX8uill146ffM3f/N0j3vc
w/JreBWfeIWxy+53v/stuSnNK04B2nQ69SD1K6E5XbYe0iSf/KYJcgfoCT2j
53znk9eme5ecSCJCp3jMm09Np2+Jj/MqznHtXve6l32nWZ3n+7d8y7dMd7vb
3aY73elO013ucpfp67/+620k3/AN3zDd/e53t6whzhNe4ly6ts6FpMhzG49y
C3/czi16JDWVunLJJZekkev6N37jN6ZzCVyLs6Zv+qZvstfTnW/91m+1V6Tr
9pvu0j6f/Na9dJvvvJf7Af63f/u32znu5xPgp3NLHl7ScgKTEAMo+EtDT/1I
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
qzc=\
\>"]],

Cell[TextData[{
 StyleBox["\nKernel methods",
  FontSlant->"Italic"],
 " allow to perform the mapping to an high-dimensional space, without  \
explicitly defining ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 " and without explictly performing the mapping. \nIn the remaining of this \
section, ",
 "we ",
 "will introduce the fundamental results from the ",
 StyleBox["Reproducing Kernel Hilbert Space theory",
  FontSlant->"Italic"],
 ", as presented also in ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998461259623`*^9}, {
   3.6005197554764442`*^9, 3.600519852482081*^9}, {3.600519892420924*^9, 
   3.6005199293763533`*^9}, 3.600519997453315*^9, {3.600520031766438*^9, 
   3.600520098523343*^9}, {3.600520221605938*^9, 3.600520222008019*^9}, {
   3.6005202556530447`*^9, 3.600520371355136*^9}, {3.6005204574178047`*^9, 
   3.6005204999975557`*^9}, {3.600520539060892*^9, 3.60052054057265*^9}, 
   3.600520817666068*^9, {3.60067956304256*^9, 3.60067980293848*^9}, {
   3.600679842850666*^9, 3.60067999337082*^9}, {3.6006800587681828`*^9, 
   3.600680084113222*^9}, {3.600680133063142*^9, 3.600680151937355*^9}, {
   3.600680282772306*^9, 3.600680330666135*^9}, {3.600680412869176*^9, 
   3.6006804148508873`*^9}, {3.601558944642812*^9, 3.601558947558786*^9}, {
   3.607434968114339*^9, 3.607434969701659*^9}, 3.637583979270483*^9}],

Cell[CellGroupData[{

Cell["Kernel function. ", "Subsubsection",
 CellChangeTimes->{3.600520117616384*^9}],

Cell[TextData[{
 "A function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{"\[CenterDot]", 
      RowBox[{",", " ", "\[CenterDot]"}]}], ")"}]}], TraditionalForm]]],
 " that for all ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["x",
     FontWeight->"Bold"], ",", " ", 
    RowBox[{
     StyleBox["z",
      FontWeight->"Bold"], " ", "\[Element]", " ", "X"}]}], TraditionalForm]]],
 " satisfies"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, 
   3.599899918703438*^9, {3.599900060655603*^9, 3.5999000719742527`*^9}, {
   3.600521449431007*^9, 3.600521474971568*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], " ", "=", " ", 
   RowBox[{"\[CurlyPhi]", 
    RowBox[{
     RowBox[{"(", 
      StyleBox["x",
       FontWeight->"Bold"], ")"}], "\[CenterDot]", " ", "\[CurlyPhi]"}], 
    RowBox[{"(", 
     StyleBox["z",
      FontWeight->"Bold"], ")"}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{3.600519871893436*^9, 3.600521484232815*^9}],

Cell[TextData[{
 "where \[CurlyPhi] is a mapping from ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 " to an Hilbert space ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CurlyPhi]", " ", ":", " ", 
    RowBox[{
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], "\[RightArrow]", " ", 
      RowBox[{"\[CurlyPhi]", "(", 
       StyleBox["x",
        FontWeight->"Bold"], ")"}]}], " ", "\[Element]", " ", "F"}]}], 
   TraditionalForm]]],
 " is called ",
 StyleBox["kernel function",
  FontSlant->"Italic"],
 ". If X is an Hilbert space (e.g. an Euclidean space), the simplest example \
of kernel function is the one obtained considering the identity mapping ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CurlyPhi]", "(", 
     StyleBox["x",
      FontWeight->"Bold"], ")"}], " ", "=", " ", 
    StyleBox["x",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ", in which case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], " ", "=", " ", 
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold"], 
     StyleBox["\[CenterDot]",
      FontWeight->"Plain"], 
     StyleBox["z",
      FontWeight->"Bold"]}]}], TraditionalForm]]],
 ". \nA kernel function is thus a function that can be decomposed into a \
feature map ",
 Cell[BoxData[
  FormBox["\[CurlyPhi]", TraditionalForm]]],
 " to an ",
 StyleBox["Hilbert space",
  FontSlant->"Italic"],
 " F , applied to both arguments and followed by the evaluation of the inner \
product in ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 ".\n\nAdvantages: if the kernel function is properly chosen, instances ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 " can be implicitly mapped into a feature space of high (even infinite) \
dimensionality where they are possibly linearly separable (or better \
separable), without having to explicitly perform the expensive inner product \
evaluation in the expanded feature space.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, 
   3.599899918703438*^9, {3.599900060655603*^9, 3.599900104759665*^9}, {
   3.5999001615641317`*^9, 3.5999001634212217`*^9}, {3.6005199520162573`*^9, 
   3.600519971664825*^9}, 3.6005200236061497`*^9, {3.600520399904098*^9, 
   3.600520400837484*^9}, {3.600521444500123*^9, 3.6005214648852882`*^9}, {
   3.6006799286419353`*^9, 3.600679942970479*^9}, {3.600680170362831*^9, 
   3.6006802684922028`*^9}, 3.601558949267808*^9, {3.6016394098918867`*^9, 
   3.601639412680696*^9}, {3.637581472690474*^9, 3.637581509678729*^9}, {
   3.6375815614730587`*^9, 3.637581568607192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finitely positive semi-definite function. ", "Subsubsection",
 CellChangeTimes->{3.600520160142*^9}],

Cell[TextData[{
 "Let X be a metric space, we say that a function: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", ":", 
    RowBox[{
     RowBox[{"X", " ", "\[Times]", "X"}], " ", "\[RightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]]],
 " is finitely positive semi-definite if it is a symmetric function and for \
all finite sets ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["{",
      FontWeight->"Bold"], 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "1"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "2"], ",", "\[Ellipsis]", ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "n"]}], "}"}], " ", "\[Subset]", " ", "X"}], 
   TraditionalForm]]],
 " , of size ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 ", the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", " ", "\[Times]", " ", "n"}], TraditionalForm]]],
 " matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["K",
    FontWeight->"Bold"], TraditionalForm]]],
 " whose ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", " ", "j"}], ")"}], TraditionalForm]]],
 " entry is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", " ", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}], ")"}], TraditionalForm]]],
 " is positive semi-definite, formally"
}], "Text",
 CellChangeTimes->{
  3.600520184976275*^9, {3.600521307814665*^9, 3.600521322030164*^9}, {
   3.600521478707449*^9, 3.600521497086351*^9}, {3.60285900845245*^9, 
   3.60285903066188*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[ForAll]", "X"}], ",", " ", 
  RowBox[{"\[ForAll]", " ", 
   RowBox[{
    StyleBox["v",
     FontWeight->"Bold"], " ", "\[Element]", "X", "\[Subset]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["v",
     FontWeight->"Bold"], 
    StyleBox["\[Transpose]",
     FontWeight->"Plain"]}], 
   StyleBox["Kv",
    FontWeight->"Bold"]}], " ", "\[GreaterEqual]", " ", 
  "0."}]}], "DisplayFormula",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5998999945673923`*^9}, {3.599900197057012*^9, 3.5999002496844673`*^9}, {
   3.600521004175788*^9, 3.6005210089374657`*^9}, {3.600521060236018*^9, 
   3.600521063317602*^9}, 3.600521481463724*^9, {3.607435035187615*^9, 
   3.607435040456483*^9}, {3.6074350716912622`*^9, 3.60743508054224*^9}}],

Cell[TextData[{
 "The above mentioned matrix K is called ",
 StyleBox["Gramian matrix",
  FontSlant->"Italic"],
 " of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\n\nWe can now state without proving the main result of the Reproducing \
Kernel Hilbert Space theory: the characterization Theorem of kernel \
functions.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5998999945673923`*^9}, {3.599900197057012*^9, 3.599900229925082*^9}, {
   3.600521078772048*^9, 3.600521081686219*^9}, {3.600680387046007*^9, 
   3.600680396475376*^9}, {3.600680431165286*^9, 3.600680433155499*^9}, 
   3.60155895076786*^9, {3.6028590505959682`*^9, 3.6028590516400557`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Characterization of kernels.", "Subsubsection",
 CellChangeTimes->{{3.600520195189268*^9, 3.6005201969073973`*^9}, {
  3.6005211261606493`*^9, 3.600521128086487*^9}, {3.60052122497523*^9, 
  3.6005212262512207`*^9}}],

Cell[TextData[{
 "A function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", ":", 
    RowBox[{
     RowBox[{"X", " ", "\[Times]", "X"}], " ", "\[RightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]]],
 " is a kernel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"\[CurlyPhi]", "(", 
      StyleBox["x",
       FontWeight->"Bold"], ")"}], "\[CenterDot]", 
     RowBox[{"\[CurlyPhi]", "(", 
      StyleBox["z",
       FontWeight->"Bold"], ")"}]}]}], TraditionalForm]]],
 " if and only if it satisfies the finitely positive semi-definite property.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5999000197286587`*^9}, 3.599900278074287*^9, {3.6005211824337063`*^9, 
   3.600521247768865*^9}, {3.6005212794860983`*^9, 3.600521289748728*^9}, {
   3.600680334392817*^9, 3.60068033556082*^9}, 3.601558952037673*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Constructing kernels.", "Subsubsection",
 CellChangeTimes->{{3.6005208743915157`*^9, 3.600520889399968*^9}, {
  3.6005211310135317`*^9, 3.6005211312860518`*^9}, {3.60052123028054*^9, 
  3.600521231853421*^9}}],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]]],
 " be kernels over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"X", " ", "\[Times]", "X"}], ",", " ", 
    RowBox[{"X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "\[CenterDot]", ")"}], TraditionalForm]]],
 " a real function on ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Phi]", ":", 
    RowBox[{"X", "\[RightArrow]", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "m"]}]}], TraditionalForm]]],
 ", with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]]],
 " a kernel over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[DoubleStruckCapitalR]", "m"], "\[Times]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "m"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["B",
    FontWeight->"Bold"], TraditionalForm]]],
 " a symmetric positive semi-definite ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]]],
 " matrix. The following functions are kernels:"
}], "Text",
 CellChangeTimes->{{3.6005215470135736`*^9, 3.60052181043848*^9}, 
   3.600521960289501*^9, {3.600680350688184*^9, 3.600680352079165*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     SubscriptBox["k", "1"], 
     RowBox[{"(", 
      RowBox[{
       StyleBox["x",
        FontWeight->"Bold"], ",", 
       StyleBox["z",
        FontWeight->"Bold"]}], ")"}]}], "+", 
    RowBox[{
     SubscriptBox["k", "2"], 
     RowBox[{"(", 
      RowBox[{
       StyleBox["x",
        FontWeight->"Bold"], ",", 
       StyleBox["z",
        FontWeight->"Bold"]}], ")"}]}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["ak", "1"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["k", "1"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], 
    SubscriptBox["k", "2"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"f", 
    RowBox[{"(", 
     StyleBox["x",
      FontWeight->"Bold"], ")"}], "f", 
    RowBox[{"(", 
     StyleBox["z",
      FontWeight->"Bold"], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["k", "3"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Phi]", 
       RowBox[{"(", 
        StyleBox["x",
         FontWeight->"Bold"], ")"}]}], ",", 
      RowBox[{"\[Phi]", 
       RowBox[{"(", 
        StyleBox["z",
         FontWeight->"Bold"], ")"}]}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold"], "\[Transpose]"}], 
    StyleBox[
     RowBox[{"Bz", "."}],
     FontWeight->"Bold"]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.600521821322874*^9, 3.600521954172388*^9}}],

Cell[TextData[{
 "Using these rules, it is possible to prove that the following functions are \
kernels ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ":"
}], "Text",
 CellChangeTimes->{{3.6005220003083353`*^9, 3.600522027218873*^9}, 
   3.600522239615951*^9, {3.6375816772219143`*^9, 3.637581681519464*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"p", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["k", "1"], 
      RowBox[{"(", 
       RowBox[{
        StyleBox["x",
         FontWeight->"Bold"], ",", 
        StyleBox["z",
         FontWeight->"Bold"]}], ")"}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"exp", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["k", "1"], 
      RowBox[{"(", 
       RowBox[{
        StyleBox["x",
         FontWeight->"Bold"], ",", 
        StyleBox["z",
         FontWeight->"Bold"]}], ")"}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"exp", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["\[Sigma]", "2"]]}], 
      SuperscriptBox[
       RowBox[{"\[LeftDoubleBracketingBar]", 
        RowBox[{
         StyleBox["x",
          FontWeight->"Bold"], "-", 
         StyleBox["z",
          FontWeight->"Bold"]}], "\[RightDoubleBracketingBar]"}], "2"]}], 
     ")"}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600522034296327*^9, 3.600522125572928*^9}, {
  3.600522159916383*^9, 3.600522173394792*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]]],
 " is a polynomial with positive coefficient, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Sigma]", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 " and the last kernel is called the ",
 StyleBox["Gaussian kernel.\n",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.600522181091859*^9, 3.6005222713596487`*^9}, {
   3.600604367460373*^9, 3.600604407425941*^9}, {3.600633626266096*^9, 
   3.60063365830182*^9}, {3.6006804528314857`*^9, 3.6006804530787573`*^9}, 
   3.601558955248292*^9, {3.607435123162004*^9, 3.607435126578198*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607435131187323*^9, 3.607435145995408*^9}}],

Cell["\<\
A snippet of code exploiting matrix computations to efficiently compute the \
Gaussian kernel (without any loop on the samples) is provided below
\
\>", "Text",
 CellChangeTimes->{{3.600522181091859*^9, 3.6005222713596487`*^9}, {
   3.600604367460373*^9, 3.600604407425941*^9}, {3.600633626266096*^9, 
   3.60063365830182*^9}, {3.6006804528314857`*^9, 3.6006804530787573`*^9}, 
   3.601558955248292*^9, {3.607435123162004*^9, 3.607435126578198*^9}, {
   3.637581717582654*^9, 3.637581717931527*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"computeGaussianKernel", "[", 
     RowBox[{"fTr_", ",", "fTe_", ",", "sigmaSQ_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"D", ",", "K"}], "}"}], ",", "\n", 
      RowBox[{
       RowBox[{"D", "=", 
        RowBox[{"computeDist", "[", 
         RowBox[{"fTr", ",", "fTe"}], "]"}]}], ";", "\n", 
       RowBox[{"K", "=", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "1"}], "/", 
           RowBox[{"(", 
            RowBox[{"2", " ", "sigmaSQ"}], ")"}]}], " ", "D"}], "]"}]}]}]}], 
     "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"computeDist", "[", 
    RowBox[{"fTr_", ",", "fTe_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "nTr", ",", "nTe", ",", "NTr", ",", "NTe", ",", "P", ",", 
       "D"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTe", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTe", "]"}]}], ";", "\n", 
      RowBox[{"P", "=", 
       RowBox[{"fTr", ".", 
        RowBox[{"Transpose", "[", "fTe", "]"}]}]}], ";", "\n", 
      RowBox[{"NTr", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Norm", "/@", "fTr"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", "nTe"}], "}"}]}], "]"}], "]"}]}], ";", "\n", 
      RowBox[{"NTe", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Norm", "/@", "fTe"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"D", "=", 
       RowBox[{"NTr", "+", "NTe", "-", 
        RowBox[{"2", "P"}]}]}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600631896186021*^9, 3.6006319280829906`*^9}}],

Cell["", "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernelized Support Vector Machines", "Subsection",
 CellChangeTimes->{{3.60052057586366*^9, 3.6005205832622623`*^9}, {
  3.600680463724263*^9, 3.600680475089451*^9}}],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Kernel Trick\[CloseCurlyDoubleQuote].", 
  "Subsubsection"],
 " Given an algorithm formulated in such a way that it depends on instances \
only through their inner product, it is possible to construct an alternative \
optimization problems by replacing the inner products with a ",
 StyleBox["kernel function",
  FontSlant->"Italic"],
 ".  The algorithm is thus said to be ",
 StyleBox["kernelizable",
  FontSlant->"Italic"],
 ".\n\nAs it can be seen from equations (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_Dual"],
 ",",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_Dual"],
 ",",
 
 CounterBox["DisplayFormulaNumbered", "eq:2norm_svm_Dual"],
 "), the SVM training procedures depends on data only via the inner products \
of the training instances, as encoded in the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ". We can thus substitute the inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], "\[CenterDot]", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "j"]}], TraditionalForm]]],
 " in the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ", with evaluations of a kernel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "j"]}], ")"}], "."}], TraditionalForm]]],
 " The same argument can be repeated when computing ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 ", while during prediction we have:"
}], "Text",
 CellChangeTimes->{{3.6005205906937237`*^9, 3.60052060725213*^9}, {
   3.600520734263096*^9, 3.6005208082720633`*^9}, {3.60052231125207*^9, 
   3.60052244716322*^9}, {3.600522602075625*^9, 3.600522631488048*^9}, {
   3.600679822312314*^9, 3.600679824486844*^9}, {3.6006805005202703`*^9, 
   3.600680513041226*^9}, 3.637581782629739*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], 
    RowBox[{"(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], " ", "+", "b"}], "=", 
    RowBox[{
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}]}]}], "=", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], "k", 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"], ",", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], ")"}]}]}], "+", "b"}]}]}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.6005224511976852`*^9, 3.6005225680942383`*^9}, {
  3.600522616237176*^9, 3.600522616683543*^9}}],

Cell["\<\
The SVM algorithm is thus kernelizable.
\
\>", "Text",
 CellChangeTimes->{{3.600522576351549*^9, 3.600522581762825*^9}, {
   3.600522634902485*^9, 3.600522689377336*^9}, {3.600632077360847*^9, 
   3.600632141805462*^9}, {3.600633696941916*^9, 3.600633704520831*^9}, {
   3.600680543354413*^9, 3.600680558709915*^9}, 3.600680591255466*^9, 
   3.6015589690049334`*^9, 3.6074352003734617`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607435206105165*^9, 3.6074352116708393`*^9}}],

Cell[TextData[{
 "Following are two examples of using a Gaussian kernel with a 1-norm \
soft-margin SVM and ",
 Cell[BoxData[
  FormBox["\[Sigma]", TraditionalForm]]],
 " either manually set\n"
}], "Text",
 CellChangeTimes->{{3.600522576351549*^9, 3.600522581762825*^9}, {
   3.600522634902485*^9, 3.600522689377336*^9}, {3.600632077360847*^9, 
   3.600632141805462*^9}, {3.600633696941916*^9, 3.600633704520831*^9}, {
   3.600680543354413*^9, 3.600680558709915*^9}, 3.600680591255466*^9, 
   3.6015589690049334`*^9, 3.6074352003734617`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.6006048285290947`*^9, 3.600604832214456*^9}, {
  3.60060492573352*^9, 3.60060493283676*^9}, {3.60063205504002*^9, 
  3.600632055382025*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   GridLines->Automatic,
   ImageSize->600,
   Method->{},
   PlotRange->{{0, 1}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$872 = MousePosition["Graphics"]; 
     Private`p$872 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$872], 2], 
          Union[
           Partition[Private`pt$872, 2]]}, 1]]; SVM`xPos = Union[
        Private`posNeg$872[Private`s$872, 
         Flatten[{SVM`xPos, Private`p$872}, 1], SVM`xPos]]; SVM`xNeg = Union[
        Private`posNeg$872[-Private`s$872, 
         Flatten[{SVM`xNeg, Private`p$872}, 1], SVM`xNeg]]), 
    "MouseClicked" :> (Private`p$872 = {}; 
     Private`s$872 = Private`s$872 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600604832807745*^9, 3.600604933166192*^9, 3.600605104873282*^9, {
   3.600605256268449*^9, 3.600605261679863*^9}, 3.60060878939544*^9, 
   3.6006091388882732`*^9, 3.600612999238102*^9, 3.60061317067785*^9, 
   3.600613812394833*^9, 3.600631100560833*^9, 3.6006311456215477`*^9, 
   3.600632057927224*^9, 3.601217733978269*^9, 3.601218004926012*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", 
      SuperscriptBox["10", "s"], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "6", ",", "0.5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"s", ",", "3", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5998242191740923`*^9, 3.599824229454277*^9}, {
   3.5998252407905684`*^9, 3.599825254780796*^9}, {3.599826597734229*^9, 
   3.5998266032226143`*^9}, {3.599827838897214*^9, 3.599827844368305*^9}, {
   3.599834921347526*^9, 3.599834931257943*^9}, 3.599837534064529*^9, {
   3.599837586265244*^9, 3.599837587236148*^9}, 3.599838156127186*^9, {
   3.599838278004527*^9, 3.599838283845191*^9}, {3.599838320952675*^9, 
   3.5998383940135202`*^9}, {3.6001818323648357`*^9, 3.600181839037133*^9}, 
   3.600184631598147*^9, {3.600193595816077*^9, 3.600193596704954*^9}, {
   3.600414786940836*^9, 3.6004147882576027`*^9}, {3.6006048392177057`*^9, 
   3.60060484081664*^9}, {3.600605120330772*^9, 3.600605236489294*^9}, {
   3.600605278496801*^9, 3.600605370975388*^9}, {3.6006054467664337`*^9, 
   3.6006056337560787`*^9}, {3.600608340073489*^9, 3.600608403369323*^9}, {
   3.600608784741392*^9, 3.600608800561816*^9}, {3.6006138946792793`*^9, 
   3.600613914949931*^9}, {3.600613981095159*^9, 3.6006140038278933`*^9}, {
   3.600631031797982*^9, 3.600631046883752*^9}, {3.600631169968791*^9, 
   3.6006312022651997`*^9}, {3.600632284493023*^9, 3.600632381592064*^9}, {
   3.600632716638606*^9, 3.600632720569006*^9}, {3.600632883363166*^9, 
   3.600632887269599*^9}, 3.6006341300235977`*^9, {3.6012176852743673`*^9, 
   3.601217723056239*^9}, {3.601217774874392*^9, 3.601217829056218*^9}, {
   3.601218048212277*^9, 3.601218049956155*^9}, {3.601218092413991*^9, 
   3.601218094058381*^9}, 3.601218538625985*^9, {3.601639528847186*^9, 
   3.601639529765829*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 6., $CellContext`s$$ = -1., 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 6, 0.5}, {
      Hold[$CellContext`s$$], 3, -1, -0.5}}, Typeset`size$$ = {
    400., {202., 208.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$216547$$ = 
    0, $CellContext`s$216548$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`c$$ = 0, $CellContext`s$$ = 3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$216547$$, 0], 
        Hold[$CellContext`s$$, $CellContext`s$216548$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[10^$CellContext`s$$]], 
      "Specifications" :> {{$CellContext`c$$, 0, 6, 0.5}, {$CellContext`s$$, 
         3, -1, -0.5}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{451., {265., 274.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006139182977867`*^9, {3.600613991571281*^9, 3.600614006333933*^9}, {
   3.600631166222625*^9, 3.600631204383501*^9}, 3.600632361422915*^9, 
   3.6006324038610373`*^9, 3.600632706012581*^9, 3.600632790117234*^9, 
   3.600632828274665*^9, 3.6006328883788433`*^9, 3.6006341308833113`*^9, 
   3.600673411795135*^9, 3.601214296560351*^9, {3.6012177250354443`*^9, 
   3.60121774461922*^9}, {3.6012177771940536`*^9, 3.601217790779821*^9}, 
   3.601217975721672*^9, 3.601218016027615*^9, 3.601218100445734*^9, 
   3.601218427072694*^9, 3.601559005952841*^9, 3.6015718646445913`*^9, 
   3.602859125092246*^9, {3.602860301230935*^9, 3.602860304963408*^9}, 
   3.607435219113673*^9, 3.637564997130847*^9, 3.6375741093416557`*^9, 
   3.637585932828742*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

or automatically estimated from the distance matrix
\
\>", "Text",
 CellChangeTimes->{{3.6006805982005177`*^9, 3.600680602556728*^9}, {
  3.6015590758471746`*^9, 3.601559076617323*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   GridLines->Automatic,
   ImageSize->600,
   Method->{},
   PlotRange->{{0, 1}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$716053 = MousePosition["Graphics"]; 
     Private`p$716053 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$716053], 2], 
          Union[
           Partition[Private`pt$716053, 2]]}, 1]]; SVM`xPos = Union[
        Private`posNeg$716053[Private`s$716053, 
         Flatten[{SVM`xPos, Private`p$716053}, 1], SVM`xPos]]; 
     SVM`xNeg = Union[
        Private`posNeg$716053[-Private`s$716053, 
         Flatten[{SVM`xNeg, Private`p$716053}, 1], SVM`xNeg]]), 
    "MouseClicked" :> (Private`p$716053 = {}; 
     Private`s$716053 = Private`s$716053 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{3.6006324775883713`*^9, 3.600632644575643*^9, 
  3.6012179502112617`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.600613948168401*^9, 3.600613952460599*^9}, {
   3.600613984781619*^9, 3.600613985070965*^9}, {3.600632430678021*^9, 
   3.6006324394629927`*^9}, {3.600632760059959*^9, 3.600632760297097*^9}, {
   3.601217841683545*^9, 3.6012178996634207`*^9}, {3.601217934031218*^9, 
   3.6012179413367558`*^9}, 3.6012181058933687`*^9, {3.601218378597372*^9, 
   3.601218386568543*^9}, {3.601218449702098*^9, 3.601218454101859*^9}, 
   3.6012184852873774`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    400., {198., 203.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$349386$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$349386$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[$CellContext`fTr]], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {247., 256.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006139555960484`*^9, 3.6006140124361277`*^9, {3.600631134408229*^9, 
   3.600631156152076*^9}, 3.600632442234915*^9, 3.6006324889386044`*^9, 
   3.600632670795189*^9, {3.6006327915627813`*^9, 3.6006328094417877`*^9}, 
   3.601214371380438*^9, {3.601217883436945*^9, 3.60121790023698*^9}, {
   3.601217942569275*^9, 3.601217968762043*^9}, 3.601218107421936*^9, 
   3.6012184546693573`*^9, 3.601571936310586*^9, 3.602859157011862*^9, 
   3.6375860488656054`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nNote that the only difference w.r.t. 1-norm SVM implementation presented \
in the previous Section is that the ",
 StyleBox["linearKernel", "Code"],
 " used to compute the inner products between the samples has been replaced \
with a ",
 StyleBox["gaussianKernel", "Code"],
 ".\nExamples with the 2-norm soft margin SVM and the hard-margin SVM can \
also be similarly obtained, without any modification to the training \
algorithm\n"
}], "Text",
 CellChangeTimes->{{3.600633734023837*^9, 3.600633762487398*^9}, {
  3.6006806134703293`*^9, 3.600680765709626*^9}, {3.601559081232439*^9, 
  3.601559082916675*^9}, {3.637581822110478*^9, 3.6375818269573317`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train2NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.60063376783984*^9, 3.600633799012179*^9}, {
   3.600634018727207*^9, 3.600634021419395*^9}, 3.6006340741687193`*^9, {
   3.601218354623122*^9, 3.601218368367414*^9}, {3.6012184626827097`*^9, 
   3.6012184719714117`*^9}, {3.6012185142264338`*^9, 3.601218516602757*^9}, {
   3.601626556640802*^9, 3.601626565263352*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    400., {198., 204.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$457765$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$457765$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train2NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[$CellContext`fTr]], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {248., 257.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.60063395696488*^9, 3.600634022691804*^9, 3.6006340748757343`*^9, 
   3.6006734975619097`*^9, {3.6012185016681843`*^9, 3.601218517924493*^9}, 
   3.601559032899728*^9, 3.6016265662634573`*^9, 3.602859184103071*^9, 
   3.637586116663261*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"runSVMExperiment", "[", 
  RowBox[{
  "fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainHardMarginSVM", ",", 
   RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6006337750492973`*^9, 3.600633807983213*^9}, 
   3.6006338717603903`*^9, {3.600633904185114*^9, 3.600633905192507*^9}, {
   3.600633935598153*^9, 3.600633983199975*^9}, {3.601218398120228*^9, 
   3.601218420453926*^9}, {3.601218475151033*^9, 3.601218496491725*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxt3XmYT9XjwHFKlFJSfdNOKorQSpGTVtqktKBUKlQqqZQIrdpUUhRZU2SJ
Qii59j3ZzdiN3TCmorTpN9NzX2eeZ/z6p+f1fD5mPvOZ+z7nnvu5c2/55k/e
9vAhRYoUyS1VpEj+/9c1r7ft/Fk/JxnfV1j19biRydvl+44vW6bANTf83PXQ
ZrnR867oNnrN7Xuiz/r+0obfZO+O7pT/D17ZFZ0x7s0P7j0lO/rCi/L+G7Mj
+p3Ra5YefuP26K3nv/7Muqyt0VcOr3bC2Be2RPeulDnuzTKbo/d+/vKd9w3L
ir6lQpXfL75qY/StdfO/wProYrUPtJmyaU30hLyX/9hxq6JbXzD41/9dvTK6
XN6Xm9Z2WfSyc25o9/igxdGlr778yQsG/xj9/H9v2JzoDfk/T/Np0e9fd3fO
I69OjJ6a//6/PiL6jY1dZp9x9BvR/+R9tdM7Dwhc9ejn/97YZUx0s/yfd9rk
6OtPzd0/vejM6PX/vd550d+XXdL+7fKLokuc3jnvFS+Jvv2/r7c8un/++/1B
RnT2fz/P6uga+b/Pi9ZF183//i9tiN7WL+8H3rExulv+9nXbpuiL8t/u7zZH
Z+a/3jO3Rnf+csDyXm9tiz47/+X9sj16/lc3f7iryc7op/J/f9Ozo08c++dt
dSvvjv4h//fdIyf6wYlDju35157oYvnvx9e50fq4vsHb22c3GBT7YH2wPlgf
rA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgf
rA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9RG3j7QPjvPH
W/NXPzfk7YL5I3WcP1LH+SN1nD9Sx/kjdZw/Usf5I3WcP1LH+SN1nD9Sx/kj
dZw/Usf5I3WcP1LH+SN1nD9Sx/kjdZw/Usf5I3WcP1LH+SN1nD9Sx/kjdZw/
Usf5I3WcP1LH+SN1nD9Sx/kjdZw/Usf5I3WcP1LH+SN1nD9Sx/kjdZw/Usf5
I3WcP1LH+SN1nD9Sx/kjdZw/Usf5I3WcP1LH+SN1nD9Sx/kjdZw/bB/mj9T6
aF2x585quS8FfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+s
D9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+s
D9YH64P1wfqI20faB8f5Y1eHjOzp/WMfHOeP1HH+SB3nj9Rx/kgd54/Ucf5I
HeeP1HH+SB3nj9Rx/kgd54/Ucf5IHeeP1HH+SB3nj9Rx/kgd54/Ucf5IHeeP
1HH+SB3nj9Rx/kgd54/Ucf5IHeeP1HH+SB3nj9Rx/kgd54/Ucf5IHeeP1HH+
SB3nj9Rx/kgd54/Ucf5IHeeP1HH+SB3nj9Rx/kgd54/Ucf5IHeeP1HH+SB3n
j9Rx/kgd5w/bh/kjtT7+ab5i7frrh8c+WB+sD9YH64P1wfpgfbA+WB+sD9YH
64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH
64P1wfpgfbA+WB+sD9YH64P1wfpgfcTtI+2D9TG75fhtm+8cE/tgfbA+WB+s
D9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+s
D9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1EbePtA/WR+l+
r2zIPGJi7IP1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+
WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+
WB+sD9ZH3D7SPlgfdy9rkLlw0uTYB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2w
PlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2w
PlgfrA/WB+uD9cH6YH2wPlgfrI+4faR9sD5uPezoHRtrTIt9sD5YH6wP1gfr
g/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfr
g/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB+ojbR9oH6+OZcs88
fM+xM2MfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6
YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6
YH2wPuL2kfbB+vi41qqNK3bOjn2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD
9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD
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
9XdTx+vvpo7X300dr7+bOl5/N3W8/m7qeP3d1PH6u6nj9XdTx+vvpo7X300d
r7+bOl5/N3W8/m7qeP3d1PH6u6nj9XdTx+vvpo7X300dr7+bOl5/N3W8/m7q
eP3d1PH6u6nj9XdTx+vvpo7X300dr7+bOl5/N3W8/m7qeP3d1PH6u6nj9XdT
x+vv2j5cfze1Pk6aVbHL6Et3xD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB
+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB
+mB9sD5YH6wP1gfrg/XB+mB9xO0j7YP1kXVT3TOO2V3QB+uD9cH6YH2wPlgf
rA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgf
rA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrI+4faR9sD6GL20y+fHP
dsY+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpg
fbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpg
fcTtI+2D4/0Nmjxz74LG2QX3N0gd72+QOt7fIHW8v0HqeH+D1PH+Bqnj/Q1S
x/sbpI73N0gd72+QOt7fIHW8v0HqeH+D1PH+Bqnj/Q1Sx/sbpI73N0gd72+Q
Ot7fIHW8v0HqeH+D1PH+Bqnj/Q1Sx/sbpI73N0gd72+QOt7fIHW8v0HqeH+D
1PH+Bqnj/Q1Sx/sbpI73N0gd72+QOt7fIHW8v0HqeH+D1PH+Bqnj/Q1Sx/sb
pI73N0gd72+QOt7fIHW8v0HqeH+D1PH+Bqnj/Q1Sx/sb2D7c3yC1Pq7Y2O3v
80rvin2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD
9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD
9cH6iNtH2gfro3irIX3enFXQB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgf
rA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgf
rA/WB+uD9cH6YH2wPlgfrI+4faR9sD5+yply+faOu2MfrA/WB+uD9cH6YH2w
PlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2w
PlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPuL2kfbB8f5Rz67KvO6i
nIL7R6XWB8f7R6WO949KHe8flTrePyp1vH9U6nj/qNTx/lGp4/2jUsf7R6WO
949KHe8flTrePyp1vH9U6nj/qNTx/lGp4/2jUsf7R6WO949KHe8flTrePyp1
vH9U6nj/qNTx/lGp4/2jUsf7R6WO949KHe8flTrePyp1vH9U6nj/qNTx/lGp
4/2jUsf7R6WO949KHe8flTrePyp1vH9U6nj/qNTx/lGp4/2jUsf7R6WO949K
He8flTrePyp1vH9U6nj/KNuH+0el1scDf//6/Oc7CvpgfbA+WB+sD9YH64P1
wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1
wfpgfbA+WB+sD9YH64P1wfpgfbA+WB+sD9YH64P1EbePtA/Wx3mvlCpbbMCe
2Afrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP
1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6yP
uH2kfbA+/ny1R9MLKufGPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2w
PlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2wPlgfrA/WB+uD9cH6YH2w
PlgfrA/WB+uD9cH6YH3E7SPtg/VxX71yw+9/vaAP1gfrg/XB+mB9sD5YH6wP
1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH6wP
1gfrg/XB+mB9sD5YH6wP1gfrg/XB+mB9sD5YH3H7SPvgD/K+/KprBib/XNBp
/eeXfZLw9V02bS3a7MOQt3E0qND65+T91+7aOOmQoYmeeNjkRot23rguuln+
9+uwOrpM/usbnhE9K//nWbU8uumLeW/AXXnbTWqvjy99ukHeb+zV4PVxxqxH
s9574sH4etn2Vfjx1hV77qyW+1Lw7/18Hh9bpeSWnR9+Hh9nr2/E1saHzr07
N9r75/3J+L7Cqq/HjYzvB3s/2PvB3g/29Tn+vG/NX/3ckLfjz+f1s9fr/fN6
/fvCP3/Grg4Z2dP7h/fb5o+I9ZJ/elRdc9Kd3ULeaNan0ic/J2MH/HBvjTXD
ktH5L+/V3FDYr594xcoPnyzoufD24/XaXvz7va/l5VWvV9I6+7dNJ577aPz+
7PHrT79oZ7e6XeLz/T493+Nej/fLz+/1+XkKP17454njbfr9xv719dbRr/dI
qpTIH1CHx+3NeMXzFjY9asekj4LX7/l+P57Pnv/+t6PW/1a6d9z+bO+xvwZv
b5/dYFCyv1b+eD4mvr/GUz4vf7jd8kVyXasbMnrv6hdfb+FeCvfk63t9nu/1
+Xq+v5/X92ff3+/D9lD491v4/fJ8tv3F9zvdfj78O/8LfhGf73Hbs8cL/3s/
b/x9pD+v5/v5rs2fPv/MjM9n7wd7/ez3yfr7I3++Pm9l+Oymho89+uLo+Dh7
fNfLpz10X/Vvoy+euOOeRpu+j578+6phZ82fEp1Vpm7F/oOnRxevOuSzkzrN
ij6vfqlyH941N4zMm05KNlkWbnno6U+PvmBBfJw93rZzZtk3S/4UfeOP/ecV
/WVR9NpVSw5Pmi0JD/TJnyAXhye3H3Z9x/lL4+Ps8aK/1XztsprLo3sc2nr6
b4NXRJ99bP+iY4/NW6f9t7/xYxh/+pLwVKfM+Dh7vH6VwzpVzV4VvfqympOy
71oTeuTPr0tmh8evf+zPoTPWxsfZ4/826lezxQXro+t93er7YxtsCH/9L3+H
ZlooU/PlJm0O2xgfZ4+vmtznj4Xfbwyz/tufmBgGXzvu4/PbZsXH2eOtFyys
8U6lTXH7u/T27St2rtsUH2f9Hcgs2q7+R5vj89njc+4/5YShN24pGB+2XTy2
+CFb4+OszyZP3HL7wxO2xudzpfzdv7OT5Mx9LX+Z/sS2+Hyu8t/+zcxkV4eX
up959vb4fJ6Rvz+8dF4y9pA+1V9avT0+n6vm799cvijp9ObYn9Z33xGfzy/k
79+UXJpcV3rhE3Xq7YzPZ/Nf6V7bSvU9sDM+n+P8eVrRkX+NzQ5x/kwd58/U
f+Xn/e6GZNDgk29q8tiuYD5mX4+vzxvNnmm2KXm08sXZE8rvDgMfWnnODb9t
jPb1uEfeuzu36tbk4m9ufuvEjN1hd97o12/W5mhfj9fnj6//bk/+rtny3Hbv
5oTL8vamf+25LdrX48r5m/NP2cmspMucZdfsCf9NRy13Rvt6/Fz+eNY/J3nv
ut4tL8q/jkre1ta3xu5oX4+z8ofnCbmJ/YN3Q94O7aEF9vU4jn/p/BnHv3Q8
jY+n4zUbn+Pj6f5GHF+br1i7/vrhcf+78Pg4u+X4bZvvHBNdut8rGzKPmBh9
97IGmQsnTY6+9bCjd2ysMS36mXLPPHzPsTOjP661auOKnbOj3Z/eeqDw+Oj+
3Ox+xOz+q1z4fpyFx0f322P3F2P3U+LC99spPD66fwa7XwAXvr584fHR9aHZ
9XC58PVUC4+Prn/Iha+nV3h8dL0rLnw9JeOj8bDw9WUKj4+u78CFry9gfDQe
Fv57a+Oj8bDw358aH42Hhf8ez/hoPCz890nGR+Nh4b/XMD4aDwufv258NB4W
Pp/X+Gj8K3y+o/HQeFf4/C6PO35gPDTeFT4fxuOORxgPjXeFzx/wuOMbxkPj
XeHPWz3ueInx0HhX+PMpjzv+Yjw03hU+nu9xx3OMh8a7wsc/Pe74kPHQ+Fn4
eJHHb8p/P9atDJc0efXLiju/DkX++wfLw4nZ79R6fNuCMDbvx5t/xZKwbPgH
PYefsyws+u/3tzCcmtXsvQGZmeGy/7aHuWFJyf31M85YFwZ+kv/f9DDjk3qH
HH7RxlDmv/Hl+3DnkA5XzuyfFbLyvlq30aPD9rFfdXr5qM1xfTG61pzTNk7b
HNczV9X/q2m/alvDiP+2j6+ToxYd/9ffW7aGNTceNnJyo0nJsjur9m766bbw
ev77P3960m/t9Zd9d9v2cHr++/XY3KTFQw9klD1iR/h25vt53+GnpHr2C889
l+wIFVvty9siliT7n/rwfyue3RmefnxQ3gy6PJm2f+S4i6tkhyPz8569Knmr
8+xGPbKyw23529vFG5JGxTf++vPHu0L+4ZNHim1KTu325we3Ntgddua/nmVb
kq3HHX/hqMNywn8v9/PtyVe9z19calJOyB+9Wz2bnTxf/vo2rdvuCf/9uNfm
JOUbje768PG5Ib+2w9/OTaz/fsmfn6/LDGd2qt2kSfmvwhf583u7FeG1tY3/
GfXC/NAk78vt+3xpKHl2+99varM0HN0kfwG+KNzW9NrcuhUyw6v/9bcgHP7q
umHtH1kbdv/3gmeF+1d8/03Gyg3hjvzhZe6U8MumnNyPrskKLxx3dt479m14
9efy1W7/elNcn9z0fK2FX7fcHNdD61574qgnl20J1k9Dj3pj+I9vbQ3X/Nfj
t0mbHgNvqFJ3W7j8v/lySnL5yd/veOv3bWFJ/vbeZ1ZyyMBlb+wYuT08OmXT
MSVqL0gWVMypWO+hHeGlLfkvcFHy4VclZn9x8s7w439v6NKk2SXlWxy2eGc4
KX84f29Fcs6kyw97qGt2+Dp/d6ramiT3qkaDp12xKwzOf4O3b0gmzH386vJ7
d4Xc/OF3wqbk5Vu7ZnUetjvUzn+D39ia3LBywEvr7s8Jb+SvrxvvSI5v9l25
K07cE5blzYYvnrsrWbN5adLnxz2hXP508kdOsnRcu2r/1C34/ejH/gfn/zQH
qhf8/vTHT+cfUBi5J9r+hPWU/QnWY6f3bx10at/x8fnWW57Pnj9r1ql9jr31
h/h867H49/6pPb9rp731X3lpaty/sL6yf8HGg1rFfx2/bcpP8fnWX57Pnj/6
/SonX3Bzwf6G9Zb9DTa+tJg4c1mrHsvj863HPJ89f/+s/WXOKVKw/2H9Zf+D
jVdf7en+473XFexvWG/Z32Dj2UNlK7/x0Tvr4/xufRPvf5Da+PXCtI2TQvst
cf/dfMLmJ/vr5g82H9k/N1+w+cf+uPmBzTf2v80HbH6xv238Z/OJ7dX27fft
eIPtiY1Xjk9x60d/fuiqcz9P/HvHJ/x79nzHN+LXS49n+feOZ/j37PmOt8Tv
nx7P8e8d//Dv2fMdj2HHu/x7x0v8e47PP3ZwqzbfD4rOuL7NAw8/MTT21uTZ
nWcPmj42etDwb0/v1e676H1tph456/gpcft3/CT+/Vxq88FJ71R848qcadHD
P2ky658mM+K/d7wlnv+a2vOvGNKt2PezZ0b/NHbKVc9fPDv+e8dn4ufXqT3/
gWm/drlk4JzoX386J/ml1LzY/5f7k/bnNVoYvfWI4zos6bko9up4jb7Z/Pb8
iddNfO/QAl/V7767cyYuif1/euGIS0quXRZd9cr1T8+uvyL27fiN8YDNl1Nu
LvPNq9+ujH5rWeWGm1pnxPFic6vnq/773qq4vnA8x3jB5tt27Ya3nvT36ugr
/5lx5Clj1sTxpHf3Y3dcumJdXH84vmO9wubrng0GHfdC+QL/Wabag1923BDX
I473WL+w+b3Svcsb1ni3wO+Uaz6wRf51vxyPTI//WM+w/YHvHj38/b1/Fuwf
nF71o/UV7twUx7v//dvo8dKnb4nHN+zfs/37h/N3t+7LjPN30jZ//bMy+p9/
8/9bF/evbsjfvbs1K+5f9cybnr8sV7B/lZU/3+Zui/tXVfNmu9um7oz7Vy+c
/MDEId13x/2rOD6k6//YZ7r+j+NFuv6Pj6fr/zg+pOt/27v1Oluvs/W67dd6
W1/W1x63f83W47ZP62v9WE973P44W3/bHq2v9WE97XH772z9bfuzvrY9WT/b
PqyPbV/Wu/Yn7d+z9bH1ne3H/p79cbY9WT963HrQ9nNX/o/fa2209Z/tKf+r
hU83Rlvv2b6umZv3DVpvjra+s73lryZ21C7Y/qznbH//DUelCrZH6zfb43/T
x9pd0XF+TLcv84H9f/tzxv/499OpPd98YPuy/Rl/rR9sP8Yv4yMb/4xnxiu/
f+s76wnjo/HHeMaebzwyftl+rA+tR3w/45HxjT3f+GR7s/1ZX1rP+H62N+Md
e771juMvhY9nx+tbputT6yHHcxyfcTyHPd96yddzvMbxHbbetZ5yvMfxG8d7
2HrYesvxH8dzHP9h62XrMceDHN9xPIitp63XHB9yvMfxIbbetp5zvEjfjhex
9bj1nr4LH293PMl63fPNN473OJ7E1vPWi8YL++fW99aP8fPw9HgTOx5lfPH1
jC/25x0fsP60f+/1sPWA8cj3Nx7Z/3d8wfrVesDrZ+sH45fvb/yyXnB8wvrX
+sHr53h+fjre+f7GO+sLxzesn603vH62PjE++v7GR+sRx0esv61PvH62njGe
+v7W514fF17f+PrmW/uT5k/7f+ZD+2/mL/s/xlPrX/uz7OtbD5t/rWeNv+z7
W98aD61Pja9sfrZejffrS8cvx2+sT40/jh87nuP4mvHG8WPHdxxvM744fux4
j+NvxhPHjx3/cTzO+OH4seNBjs8ZL/Tu+JDjdXrXo/1Lx+v8PMZPr9/46PUa
/7w+45vXY/zy/Y03vp/+zc8+/7G/aL3ncZ8Hedz6z+M+H/K49aD9A5/v2L+0
vvK4z3s8br1lf8DnN7ZH6yXHk+P5denxL8erzI/238y37PX7PMvrtz+iD5/3
2L7tX9h/8PmM7dn+gu3f5zH2P83/5nefv9gfNZ+bn+P1bNMezMc+bzCe+vyA
jffGZ583GC99fsDGc+OvzxuMhz4/YOO18dXnDcY7nx+w8dj46fMG453PD9h4
a3z0eYPx1ucHbDw1PtoeCo/Ptg/bD9serV8cP2D7o9Y7tk/rFeMnW99b39ie
rE+Mn2z/1XrG79d86/hx4d+n+dPx5MK/P/Oh48uFf1/mN8ebC/9+4t8jpMef
C/8+4vne6fFo77/3y/F+74fj/X5ex/u9P9Z7evO434/jLWx9avzw/fx+HD9h
61HjidfT64zBddfuL/j83Xpl4iVtN/6zclRomTWrSf37M+J4GYpekVOiREYc
H5N99Y795YuCz8vL/d5l7pxQ8Hm57SmnTdXLBjeeH3I7Tb1swJ3L4/g4+/p/
PnludsHn37femd3jq41L4np7/MfX/7LhvCVxPPx+5dQ2nV75Ka6n323+ec/a
4wo+n56/edN7QyfPPeh+z5d3nlTl3ckbwpFbty3OXjjtoPsXdjyv5ecbbsoK
m7/8eP2qKd8ddL+qDyq82eDWoZtC6VfH/dyo34g4fr014pceL3boGwrfn6HB
X08/UW7nltCoT/dquc0HxM+Hzy398fPhwOg4n1fI2jK2zbvfxfn72bMHdM98
ueB6k28W+/jBOdcWXG9v8GE9xnw+eGGcj+/+4I0jBmQuOejz29Mqrj2/VO7O
EL7p1m3V+Qd/Ptvujn9bjXsiO9zd6+nuOYcf/Hns5TXKjbrutl1hXrK0zCHf
Hfz32zP2HFH+rVPy9l9r3DrvuAEH/33ri7kdL/t5ye5we51jLz134MGfr97b
ulyVC7rkhENvr/Jqu08O/jw13PFs06/Py9s/rZjT86uWB39+unTAmiW7M/eE
U87oedkPHQ7+vPTLBivX7LkhN4w4pOyzAx/OCEOubvRY7l/fhLPPbVl80f8y
QuvO55W+6pgJoWbtOhXObLU8TD6n9sUfXvVjmFli7dRfNi8J7zzcomKDDsvC
l59sPrtGoyVh1LrP7pjeb3moV7TBlVO//ims7LH29mKlV4XtWbcv6/LP3DCs
crGW1zVcF6qPHVDjktMnhcOva/xBj0FZocNZc6t3Wt8vFL/3/dpZ2zaHKec9
clv710YlA4+s2uimv7aGVl1q1Z9zzHdJrTVHHVl+6rZw05/Vm2e0nZbsb3/X
2Td12h72FPloWekKc5Lju1zX45sLd4QS+yYNf6HswuSQfl2+vXPdjjC0+O3X
7q60JNl9/Y8v3P/SztB8dvHSD3ValRw6p+i+E/Zlh+cW3nzg0OXrk+3di511
0eRdYfPfO6p1G5WVdL5yT1a9F3aHx3b9fsWw17ck9x9fslHN83PCHbumHt+2
xfaky8OX3zBjdU4oUvumJe2vyU4GvNvq7Ive3hM6l8jeWuN/Ocmdj5zU8vFy
uaHiiUd1zm2Vm7QsUuPxjC654bTvb2rZbENmGNeo/5GPPj40KffMw4uPXZMZ
jj5q5nOfvz4k6d3mvvmlRmSG4t9f+cXyb/skJb7s1G5l38xw+pmXLGlYv2cy
vvr+819/OjOv71kdf136QlL/kbcXD7k7M7w76N3uF3/8cNg94OfejbqsDMce
+dfeE5+ZEu7J6VtuW6mV4e1TfnlwXtfpYVilY8548NCVoertA045ecH00DW7
XrG9w1eEw36afOdxB2aGtkt7zTz9hRXhmRePr96r+uzQtdKaB0a/tiz8df+R
v25bvSjsOilpVvG3paHWYbWPqVxlSdi89qPiS79fGrImtT2w+qslodpvmSd+
vWlxqNnmvI0tnlsRqtYe0//QMxeH/r8Wu+vCtSvDlIvLfVUhd0E4+/W/f868
dE14Z93swTe0XBC+vLJm0c/6rAkbzpzb8P4ac8PSo+f88nPe+mTW48c+cXjG
rHBYp0uOf7TahtB0SfGsOpOmhh9ntm/wx4iN4YZRq066YPeUcGbxDl1Wbd4Y
GpY8MGzotRPCEdPeu3fgyZvCGwfaFR1cZmjoPqHR/R2e2xw+HrL5xNv6fp70
eHzgR9U/2hrq3jvuxwYZY5Nnu2+4sf5928KIJ5bt7fhIknw7rmOZheW2h+UH
+h+47qqZycQxo3t+nLk99JnwwMjKJ8xPTqlyQos+b+4IfR696JYWPRclJ5bd
M3ln9Z2h/NPd9t44IyN5PHQaNvir7HBB7SvXr7wkI7lp+9Ob6vbKDqct2Jx9
z7INyZSXGp9f6cCu0HVs1UtbDdiUXPP0K52++XZ3eHDGoaWe6bA1OaLND+cM
bpkTHhu9tW2dITuTxa/kzK7x8J5Qc8yIPwa32p1syzn5lUNL5obbW1T+Z9i0
guPBTasecniNrgXHg2/ZnXXmk28dfH7Xl2tOHlp1zrTQvG+zxncsLjj++9ma
5n/v711wPlb9OY+dV6/awedbZb974M2K1yyO+ze1+n572iP3LwvFbqlYcmPN
guO9C1Znn/nWIwefX3X42DJ9m5VbGfd3jnpz06t/9coMnS+eNXV59YPPtyqd
9V6ttstWx88r/mi4uHef9WvDpfcf/VnRuQXnV9Vd0vT2Rh8efD5Vm6rHZ388
ZX24eVSDNx45esZB51MtqfdgtwXvbAyLiv9TZ12fHw46f+rEy7c3uKHIpnD0
60PKHOjx9UHnSx3/9HGXHnldwflStWrse6X5qs2hbt95h3225PN4fG7Kyu51
Z19UJx5/sz/fOydrcpUWW0Ln04/JHXvj+wedP3XTo62v2NCi4PypBe93Hr93
zdYwp+1DD+Ue8uVB51PlPNF/5LabCs6nqjvivlqVx28LV5x6dasFw8cddH7V
2g+urlPx1ILja+3OaD3g8o7bQ8X2Y26cOyw56HyrumXmt5+0suB8q27PLTjy
n6o7Quk6T1U8/baZB51/VXXRM32ue7ng/KuSdTPOX7d4R6hzeYlqT90//6Dz
sf5o3vu8YqcXHF/bVXbDtr0tdoY2MxrmPlry4POzMk768cwdI3aGU38f3GDj
9IPPz5o/a0yjPtULzs/qNKTqosabs0P3MitPKbYr46Dztcr1OeOImqcW7E/v
XF7q3erZeR77zugS76896PzVi66+f+rNX+wO5XJvPWJF440Hna/a/5GpN7e8
IyccXvLNU76puPmg81NvW3ngxF3/5oRPOyePPHDGtoPORz3m6c7/XDtyTxi1
N2v6mHI7Dzr/tMrwM3r2vzA31Ju0Y3eHEgXnVy3u3WrQP+MLzo96sWKTwxu/
mREyOhzTtcT7o8O+d/uPndN9eTj6kBtvKNt8QZjR7ciaS1+cHrYeP3LXK9U2
hkd7751/463TQ//G019rUHtjeKXbEbsXtZsUlrS968KmvbLCk8+0XrCj1ujw
WLcRH5Y7bHP4dPS+cXvXjAwXN7j7jH8rbQ5Nfm9546N7eiVFDtSb9keVrWFT
v1lHrBvZJ5l6RplnHq+7Nazu8/GjK1osTy6oe9HPRU7NDsMzXh2xdFRGqPjJ
5I9enTw8tLq41HdlMpeHXROueq796nkha+VHK67K24/veeu5LU69Y2m47OQH
Txp3y9Kw9YKRP7/w6dJw+fTjTm/aZVF487X27x2/PyM0yLivzw01FoU5/bPu
eCJv3iw+4/Fmx7w4P/zSYulrg69dG57P+rruvevmha1VLmjYcdza8OTXE375
4oKZoc4NC9ffOnpDaHHkiz06Zibhy+mfvDS8UlYYsbzcizMajA2LVrSbsPT9
TaHYlK2lmg19Jtn71dWvDZ62JVTq++6mkdOXJj9c8f5pU3/aGZp+cuFlGz7N
c79x37WbszPUXlKxenLsymRl1jutbmiRHT546tz7bglrknHzH6n442W7wup/
i1Ur+cvq5JMHrqhfqWre/khO7XXtKm1MPis+t/jo43eHkjWblJ9+YFPS67ni
pxy/cHd4bv/LXx0YuTWZN+OVRqOfzgmVFn8+Z2rTHcmUEutu3XXCnrC2a7dF
JW7bkUwofcHZA4/bE666u1ffDZfuSjb3Oa/psll7wo1XD/x22iG7krOG1X3h
34l7wpFTc8Zdd8ie5NKwo1JmyA0d5gyb0HpdTvJVTrsepWoVnC+0YN7YQ/Y8
mLe/WXJ/86suzU2uufz4F0Lb3DClZKusbtVyk66z5zZp0Kbg/KF5A+9qN/rF
3DCoVa1kaPaeZNDvo+r9cl9uWLuu4ymdLy44X+iQ2e1PzDonI7Q9tf5Hj5Yc
H46+6vmPVq8s+PuM+z7oPO2a6SvDvJsev7XoST+ECoOWtvjgu5Xh+fEfVko+
/iFUbnjSoKufKfj7jY/Kzxhb4rGV4cHyH9fqf9TUcO68/UNaXr0yPHfM4Evf
OH1aeGXIgg3lSxecH5RdcUTrP39eFs7tdczaFoN/Cif27zP1iU3LwlsNru5a
YddPIaP5GdX7dCz4e40LK287c2S7ZaHRqSP7vFRkcRjS6LLb3+pacD7Qxssm
nn/fg0vCwg1nj3ygy/Kw6P3QeMT8gr/PODDt4Vm5PywOrb/Zf8YjyYqwbU+z
S6/uvzCe71Oz99Aav9+5MEybeGWNfWetDgtnLdk4YfmPoVnOwEM7v7E6vLT2
qm6NR86Jx08/+fH1k694ak4YdVLDoaMbrw+tL5v295RPu8Xze2rcE77IuuSt
8NXzdT69/s6C83tKvj79qrGvFxzPL7F8QIuJNxQcj78gq+OPWQcKjqc3nd/m
m1nDCo6Hz+7w9k0z7yg4nl1/4/8+Hndo3vZz26TlT6wr+PuexSfX3jk+bz1d
9q3rmg0ZOTIZX+q3P76blRl+rv5nlVvP/Cx5buXbf339ecHf/1zzysuZ83/I
DP06XrLv6MYDk557L1l32/uZ4ZZzXrzlwwu6J9fUOfXJD1sW/H3Q/n+vWXx2
x8ywsHXvjDWDX0lG1X9uzGd3ZIYqxa+p3OW3x8Np4+74aFmFgr8fatdrbvtR
l2aG/cXuvmrr7e+EF8tNLX/1RZnhnfoPHDbzvXdD0XO6XpB1ZN7+9Rd/lF22
q08YX+z0T4f+LzPUvqbhpQ+/83FYcMb5i6uvKjh/pvygh1q+ui8j1H++5Pxt
bQeGkr2e/bdjVkb4YlEoe3TDwaHOvXVXHjI+I5x45WHHlB87LDT8qtrMOksz
wtRS93Y/vM8Xod9xfevUa5wRat409+Q188aE12+ZV3txnYywasydpyx8fVz4
5N4K84//JW/7XjT9jxW3fBeaXXXeH5/sXhnurnlN52s++i5cXHNNhxm9VoZP
l1Z75P7eSej9+rM5nY4o+PulYr/f1bn72hXhrSFnr/9w+ozQYm7NtVf0WlFw
fk3WNUPDlBXh5prJccs7zgwdJ27teGT7FaHBiwu7XVVjdvjs1H61qpy2Ip4/
Mzfc81SJa1eE9o0PG3Lbk3PCvqV/HVOl+oow6pHz36qxfU44uv0Ta3Ozloeu
z31YqvJn80LlVZXafHvMijCoyjnvH/vF3NDwknDit7WXh87LX/j277MWhk5V
J5w96vzloVnf+54q98zC8M67u8cXG7cs1H979qljH1kUThzR8vpn1i+Nx3uW
/fpTk8oVloXf13a47NwZi8Or48fNXzZmaThh7byee6csCWF17ZtvWbMkbPj0
sexZ7ywLAy685vkGfZeEfUU2j2pZanmYsP73fnOPWBIOfarzpW2rrQgLHilT
pUixgr+XGnbfna+UundxmPZ23bN+eWplWDZmQsaEhYtCzv1lnm7eJiO0+rbn
y+sWLwq135td/u9HM8IZVz932aAqP4VPn59+T4MOq8KDg/a9ufSwn8Kos4+b
t7r3qvD79o879Zi2IH4+/evyl4+sUHNB2PNkybWDJq8Jj8we9/dfNeeGH9p+
WXbz8nXh2QVtFtVuMyueT1Pkk7HXlH9sdjh/xLwLsotsCFvLLlh1X7uZYc+B
Xyt36rMhrJ9waenOxWeFl94sUea4NhtC1iFtzmz46tT4+fWcNg2uu33FlNB8
01E/lMreGN45o86Bnj+Oj59H99vy9PJ76n0bGjzU6IYxd24K01+86fwht3wb
fj/rtQf+vGNT2F/1i3W5F/QKTze/tum5ZbeEB18vOvrPUj3DmvdOWHL3GQXn
z+xufGTjnsOywzmdpy4qunNlsqTL4TdPfCs77KnW5sWcuuuTRr23V/rsy12h
Vvs/rgy71yVv9G38wNd9d4Wen174wozeWclDw09+suizu8OsFXtv/bVGVlJ2
csnsoU13h9W/Xn5YvcZbkium3NapyZk54bM6Zz/+2VFbktUzWsxackxOaPDH
wtP3/rsteXrR1uMGTs8JX67+89We2duSr77b8Oy8yXmPL2v95ufzdibdxw8t
OvbxPeGI3/+979z+u5NT122u8Gfp3PDvOU9VqPv/nD+z8cDEl1uMfimU7XfT
91/+mxHPp7mi4a9nHT0mI57vsHnxEWNrNT34/Jmvv7iqwtrrZ4dP5lTYeM7a
5fF8hgm7ezR8r1vB+TSOP970eMfdXdcvCdW7nvnXzZWXhj9/evGl97cvDddn
Zz181qcF58/0mX7tQ7efvyjsePrmpq1ezQx7yrafXHze/Hi81Od9n5f9O3Py
+jVhy43FX101eV5Y3rPC3avnrw19f+4w+6trZ8bzIbqfvuvRtdUKzofx+cRL
5z028M2cjWHgUzObvD11bDw/4ZjnB9+5ds5n4eRQd++uUQXnw9zcqXqlu7tv
DuVH3JXcVWtF0vSP7EserJsd7n1t8PoecwrOf3E+zLWXH7d8b4Ps8HPX3nec
PO3g82G+61v0hyETd4VN62acfHaJdcmOiRf2m96x4PPqx0+tn/z1/O7wxq8H
xmVO2Zhs+HlokTm1C86HKf5x21MfOC8n1Cv3wYXbP9ic7O4565frfin4PHn4
sxffe/fynLCv7zcXbmyzLTnmov7X/DCw4PPhKe9Xv/jal/aEk6Y1fv5/6wrO
h3kz44/1A27dmdx72/J7br614PPfZue32LL95NywaPhFfZ6fWHC+zB8D3xza
s+LupOnDV909tGhu6Hn82OHXvJ0Rjqm5vMzXT4wOqxpOXFryipV5+5GHlZ13
w7Qwr3KD6ZcPXB62/jzwoi+PWRDe+fCR1kd//mPo2GrjkfW/Wh2e2XbYvIcb
zwiXlG11brncDWHUk+3XJf3y/t3LPc5r98TGcF3fzmWa//tD+OLYMcsyHs4K
j3Qv/3nnS74LDw/7rPaydVnhkvqXfv1G/W/C8srP/XvJ/E2h7pMjfqh+84iw
58q9bd6tszmcMefuRef/8U6yb8jevqX3b8nrb/e0stMGJPtaTb638QNbw9Hn
TBzUoP43yf6i3x3/3vnbwo4TfnrwzgmTkjcHFLvwip+3hedPufL2hzKmJ0Ue
vmt4zRHbQ8ZN1drv+2RuUiqz3m+tm+0ITdrOrtp1wE9JhzlFzt5SYmeoX/nx
BdfuW5JMmtX9w6VDd4Zznnjwrms/XJZ07jDz8PK/7QxHDDt02v57VyfNx5Ro
PuzEXeHGFo3Kl79vQ3LtipNuu2PdrrDrxeXj25+5NrnownOKtG+6K3zcZe/2
+RU3JQMvXvrARx/vDv80XPVlnRs2JuteqFh0yGm7Q93Jx95drOjWZNWWoeOe
viEnHLh+S8OWJ21Ocus36dF32e5Q/p3ZT16wcXsyIuPHFgv254QHqvQqeupv
ec+v3ePUCa/mhDGVftq2+ofspOUnz526a+ieMOzIFr3uXrEjabGj477DL9oT
iqwZ/1qPd3KSSqMm7StVPTfc16rGe6+N2pU8OLXPibs37wkf/D3zkvue25P8
WXnra/Mb5Ibbn627qnSNZeG4ZP/oYT0Xh5c7z/t8WJvF4bEKI48bcsvKMPae
DZ2u/2J2OKP7r7tGrFkf9rc9qded5duE6h988vK372wJA15f0va4N4clD2Q+
tP6lOVtDnQO3vzX3yfHJw3eecsEL728LRw5emTHw2KlJl53dqi1tsD103N/q
+y6jZyWVf79nzWPFd4QD/Z+qPerDBckjjfc/WmfsjrDz0He/GdBscfLyoad/
16rxzvBliVWlOwzITOpdPTKcsCQ7/B8pMEko
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnXeYVUXSh2cGZ+69M+eaFXNERTCvcc1iQhQRERERc86imBOIkkEU1DWs
OWcxEVTAvKZvXeOacw6Ia9avXuo9z/BHPX36dA6nu7rqV31WPODY3sc0NTQ0
HNnW0NAh3E/Cs2Q8LBF09XwNDUcHHRN0je6xQXcFnRF0Js+R7u6gR1oaGq4P
94agp5obGi5ry7T/DLolnm8N6hJxVivSz/OAoJvjeZ9wrzXv44KuDzo+6ISg
m4NOChocdGvQyUGnBN1t+WcF3RF0WtDpQbcHnar/OvMjrxvMb1DQbeZBvGWs
zwDrtmqRdVq9yLbRrq8aGxoeDpoSdHy8+yJoUPRPo88NQZ+F//6gB4I+Cbov
aHLQp7qEfRvppwVND+rf2tDwQqR7rRrtC/fLoL9Tp3C/Cnoxniu+b7E+nYPu
jOdtWrNu37Uk8e77cG+xn+ijReoNDbMi3qLhzh/0aDwvEO5CQTPieeFwz450
XwftHWlbLbcWdKP9dGLQTbqMwSpFjjHj2yXa8FM0/eegro3p/hLUN+JsH7Ru
lLFavJ8T734M2q7IufB/5tMp6DraFXH+15B5dW7MuPjXaMz8fg26POL9I2jt
yPPfzinm5koR59sI/y7oZd8xT/+jy5x63bGnTatG/B8ask6vOj+Ya6/pEm+V
iDO7IeO9Yh7E+85xeyRoxaBvGrLslWlX1O2g6JM37S/m7H91GZO3dJm/b+sy
B9/RZc6+q8tc3qQ1+/mX5iT66ddwl49yv4oyvw5asjWfl4t375nuzqA3bCv1
2LA16zapOd2rrecKjZkHbdg45sH/It4m9Yx3VcS5pDnbtVKR/vfNm+/+A12+
v6/9JqbSH7rM7/djrt8ZdFfQeeHfLah30KFRxuwoa4N6zv0XWS9i/g+NsF7G
WyTevRz0Srw/P/y7B/UJej3evRHUXMvw/xhnmHkTb5/WDKtEnAtMt0fQf6Me
NwfdEvRG0I1BNwW9qUvYcOP2DXrLuLcGvR35vRO0QeT5tu9uC5oR8cYGjQvq
GuW+Fu9qjKnhtwct1pb1ps6jIl6/oL2CekS8JYKWDNopqKP+bYMWClo4qFvQ
gvq3CVpA/86mW4qwtuxH+nCPGKtuQWtGXUaH+3C4H0c/d494i1vGDkGLBi0W
9H1r9vmQoBG2e8+gkbrUdb/WrP9GUf+RkecD4f8o8tye9cW8xrCWBe0dtKN5
U952toN4nSLs+4b8rt61b+4I2jfyPDTy7BN5nhjPE+L5xXg+Pp7HxPPz8Xxs
PI+M53/F89HxfEE8PxPPP4U7OfL9JGim4zA+6M2IMyzChkecTxszzv1Bn+k+
ELRktOmDoIOjXZsX+XxJPH8Ydbo76J6gj3TvDfpYlzV9v4h/dOT/ROT/gXOc
NF9Evg8GPRT0pS57Bnl/aFmfWz7x3rMP+E76VGJNCVop6MXI/5TI/9R67hlD
goa6r+CeF/Rn5PdH0G4R/7dwfw/aNtLUXc+LoMltGUa+Hdpyzr8eNKcx5y59
RnvOCTrXPepcy/vdtCtE2tkR79GgxxhD1z/8L0c9z4wyz456HhzPJ8XzU/H8
g3Ep4x7WMPepX33+tiXdX93H3nF8F4y0KzfmWs5cob/Ptn60gbzon4HOc741
yqPcF8K/TT33427hPhQ8zLCg84Me1r0gaFO+pYi7WbjTwj8iaGTQzvFul6BX
4ztamvCgQyLfL1vzmW+Jcdzc938Pd1OeY0x3L9LPM/OK50vjeWrkO9wyvg6a
0pTvlmrLtMT9yvoRtlSR+TMPvzEudezI9xfvD6tlvAvM94GgoUHnNSXPsEPE
eSnatXJT7lWMVT/34qvmS3cH9+UdfE98+nJb1w34EJ7pJ/iTne2TdYp8hldZ
177i3X1R1jlB5watHPFPD/eOoDub8vmMoPuDhljXB60vYzPZdITdHXRm0FlB
d5kO/71BZ1vGPYbjp117FslT0C8bhnt4uF825djTp3+Ldz2L3AvYF3huief3
rR/lvDdPfT+0HpRD3F2N/5HvqMsHpiPeS36nn8R8+4/fwqfx/F/Xn8/q2Y7u
QTsF7VPk3GXertia7+mjzx1L+maXSLNgjMHEera1B3PTNuPuEvRx5HFhpP+8
nn20k/F2i/e9iuyLT+1f+v5j685YfWE59NG2fkeMNXO4d9Amzl3cy2o57zYm
z3j+zPwesKyNfL9EW8Zhnu4dbv+gLYNO7JDuSeFuHe5WvmOOb+F3NDja8Fu4
m4f7a2uOxbtNeQa5zzbAb29t2qVNu5R9SZ/yPe9t/tt0SJf4nSO/raNt87t3
MteZL3P5z6Zc11ir6vGuOejJKOfkarqnhNuH9cx3z4T7bNBJ1YzP++3ieUa4
M4M+inVpsWjDs5HmgXAXaMs0xC+KjEecnq35vLjvOwQ91pZ7CXvKv8K/dGvy
dOzNtSLX+QeD9mzNPG+q5t4Mnwo/yxlme/f203TZh5eIPF+JNEuGu1TQq/G8
dLhDK5nfeZVsx9O2ZS/zg2fnnMe8YJ3k7MHz0Z6ftgzainNT5PVa5LlsPc9t
xN08aGBjngfg3zl3bWGa4wzHv09jnh+IN8j8GKuT5YHgHQY05tmAeCcaDh90
ki78Ef1I/3Ws5rmnm+mH1vPstH09+ZLO5nWKedNf/W0rYZ2acr1kTtwf6R5w
79sx2vdQW/bZzvH8SDx/HM9tRT7f53Nj0HTDcD+pJC/LOMKzbxr1+IW9JNzW
iDs14gyJODu15vPkSvIaZ7nnwVOcEXRmUJeIv2OR83CtcHuwVgft5PON8X7V
ppzL7O3kN838mcOkHVzN+bOT8cv0zCXCuxunq8+Uydx7SB6Dtj5qeytF7t/s
x9Ui+QR4jd6VdHevZLqHTQtfcq98CGnvlQfYvjX7mnTkc799Tvh9xqGv/orn
KfYR7v2V5Os5g3H+O935Dp8L39rJbwN+dmX9vR2HFeTxVzIM2UEPeeozzAN+
fHfjUsaZvush79A6z1znuc05jVsEjY5+fDTokaDTg+4MuiPo1KDbg24LOjBo
UtDEatb9dL/dUaabXs15eorfBPP1VP0jDZ8WNIb5b3kjfDe1mmeJHtb7NMun
7OGGT6nmd0Leg+XXu9uPi7qGbC8vv6P+Je2nHp4ldjLN+ZHXw0EPVdvXoFPn
+VZPdC05xjWEb32Qawn9eKxhW/quXDOOd824tTXnLvP206Cl4LNq2f/HmZ5v
49agW5zDzN+bXbcXcM08OOjSoEuCDtJlDGjHmfOM/xmOB+08y7Ctbccg15jB
tq2ibOao+XLPuM16fB60TNRx6aCz4vmeoLuDzgi6yzmxU9CZvlvP+lGv7eVr
2K/Wca4cAN9lOP6/BR1imh7VLIO8upsf8461vdzTdvQdc2EHXeZjv2rOOebU
nrrMo766w11XkV3cbPuRLSAn2T/CLg66qJp9QTgyh+3Nm/64qTXXoMHW727b
T/8iT7jDOY0MBJnI0Ah7IOj+oPOCHtQ/zPmFf4jhk4POCbov6N6gc32H/2zf
0e8XON+Zo4s4r/m2DvD7ow372Y4J1Rz/u6zfadbxdr+VW+2LU31HvXe2PMZg
F+uEn3lzt3ntar2pY09d4u1VzfWCMegb69rKQZ2CDmmOMQ5aP+jEmEM3Bd1Y
S/7oPXmkU8N/e9BtteRf3zcMXvUj+dmTI+zWoFtqybd+YLy7Dcc/2PCbg07S
pTz4Mniyd+AVa5kXcXcIOq2W5XfzHelOsS6Ut51+0vQPGhM0Omh70xGGLOHA
1jw3DQgaFzQ2aMeg0y0DusN2nhs0Oeg++Pmg8aY5NOgfteRXOQNcEXR50BFB
V+o/Mugq/fCUn8pj/n0envcw05HXvfLN9ONZ4b8n6O6gM3XvChoW9FDQg0Hn
6T4QNFT3/lrysJ+Y1xDfTbZ9d9q2c2zTvUFnmDdhZ/vuHnnvpYMXWCpoJ+tB
3J2NRx33CBoedEHQnkEjg0YE9QsapX8vxwF/X8NJ08t6U0fm0CJRzsLIJczv
/FrOm0U7ZBhzZ3HkWx3yzLVcuMt2yH6ljugP6LuOHTIe7UefgH9386P/OPss
0yHbxtmEPPAzL8mb8jgjL98hy+AcvUKH9O9i39F+vgfqu1BQb/NmTDZyHjAv
NnYe4N8qaFDQCUHbOH/5zno6z8h3I89SzIse9jH93t2+Zww3CTrKfLc2D/L9
e9DRhu3tvOYb2NU+pozdrCP9/md8B38gA4n6bxr+Y0y/RdDxQccFba57bNBm
usTb0nYQr5vnIviUPVy/Wf8GBI0LGltNfcRS7ufoKXDhF5BxLeHejpwTWSPn
JmSnnKHq86VMrKP8AmvrR0EfVpO/eC/o3WrKTklHGuRpi8tHIBOGt2ANniw/
CK/IufFt5avUi/qhS2Ed/yTo46A9lI2xPiI3Iw9ki8jfFpNnQe6KrJR6I2Mk
fKF52jlXD1NNHuIT94ePbcP4oFlBM6vZh9t4Li55O3gN9oYngh6vJp+3pWHj
TDejmm3eWh5nAXkg/GMNh1drNT94H/azL6rJL7AvfhD0fjXl0vQ35dxtH3/g
vveZbUCOXVjHAcoVXlPGxzvKud0xeaeaPMf7jlPdOm45z9jTR6zHjAVrKvVn
LN92/JkH+JFpIpdHvj5FF9k5eVLv/zp3SMeYICsc3ZhyYmSHo/Qv7DgxnnNa
Uw49Wfko+oDzjLeX8uWtnIPzW+9ivvY+ekNZ/ljl0AOUsZLHMOWRlD9WGfAQ
y3jIcNrT0flNX0xXDk5dp9o+ZORXxvnt0OifWeEOR/6FXBBZTTxfH88XIfOJ
56vRB8Tz4UE/xvNG9ZRNc+7lfLyYc7f8Pj5U3ryo3wlhV0SaQ6Ksx8I9L/K8
g724nnOafn3XcWa8aT9zgGfGfZr1pQ18K/Qx+Q4pkp9+q57y8gHW6fx4f3e8
fy/en1Mk3/ZmPPev5hkDHuVC5z7fyW3OqbereVb9oEO7zud9x7SUoX+o3PwT
+/apSPNr0C/VlJt/aPqnw/+bYaXelDSl/J287jBv2v6kefzsd4n7UzXPT98H
fef39kPQ7KBngn63jOmGf1vN89A3QV/LJ+J+ZVvJ73/VPFd9a7xZvvuxmvL5
z6zrwvKVnKt6V5NnhYft4xrMOanUp8JD7+16TP/u4xrEWsKZBn0jesd95Unp
+4G6xONsdL3xTpAfx3+s6dB9nldPfen9RZ670I2iN2X94FzCOYrvtJvrVK9q
8t/wqeha0d8jN97NdhC2u+2gbSUmgHzhnZ90HGbaN3OqeS6d7XjAv3/pereQ
/UTZzDvks8ha11WuXK2lrLk13FotzwCfu/ah31tEHd/r4W+rZTzOc886zpN0
mVMTdZl3nA/fCvpvNc+HuG9WU66CTIT85mtLfQlr6a3OcdKgZ0PfRr1uMt0b
1fwukZUjJ7/YcuiLGfbBD8atRx2LWuoV33KdZC1eJN4tXMtyFmTdreW3tVAt
/azfhOO/1fWY9NSJuPPX8mzzlf17u98HawTr/aK1LIM9ZPFwF6vl/scZeola
toF60Y+lTpT15GbriP9G37G+0GeUSXvYk8iPMm6zTOrHvkreHWu5v+JSNvJN
5JxFzM2eQQujdwu3V9Di8Xx5Pft/e3Sakc96LQ0Nf8UZqCHcNVtSB/5b0Kat
qRfvGu/WaMlnws5CxtWW+lh4qq3a8vyyVkum+z3oZmTVEbZXlPV0kes56/pT
Ra63rLtgGZ4IejKoS/AcP0X6n4MWjfBRbTnWa7dkfn8E/SPo0KDDgu4rsvyz
lOUvoBz43HrW7Rzk9vVs473IDeupH76aud+S+f0ZdHI9638X55N4f3DQIS0Z
9q+g54IuCf9Bhk0KOlD/X4Y/H9QY/hfCfTGoHs9vhvtf6/2sedG/xCXeZZZz
aND8LRn3raCJEe2AoAOD7o46rRptPAXMgO8Oakh9LXrb9yJ8Qvj3Ddov6CLd
/YMu1iUv9JTgbsYGXVhP/WWPcK8I/+FBRwR1rWTf/8JYV9L9NWjJIucK86S5
LZ/5Zi93HA5nrkSca6I+99UzjO+aOYyuptn46KQfDXpMHMn0oEeCNoz0HYLm
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
kJN2CeqqnBV3DWV/qyGTVuaKu7pyvVUNG+A70iPHui7o+uaUnd0QdGPQQ0XK
VEbVU86C7gSdBjqf4crriTdI/vcmXfhixoI+Qh/zmnnfIJ1gmo3sR/rwevla
wqYUabc5pp71Os6wW5qTJ4aHfcM6UuabujfDB9eTp9wy3AeL1AFcEM83Fso6
66kzWStobXUnuOsEnY/+LOrzQJF6GN6tGzQy3vfhjFxP+1HkiujIsM/GtpS6
opNZ03z3dRzwX898jPDd66n/udl2vKV7a3Oe88mfuiIz6OVZ+3plfMj8kBcf
p39ykedb9NKfRt+9EPR8LfM+yT5ijrDmME/QnYxUvjtVWe8IdRdjlM1z5h9g
W8bV83lsPXUppButnoO449SvjDb9NPOjDOTXx1pXzlRXyk/DX4NPQqZ9qfoX
9DCT1Dugf+BcdIVp2G+ID2bsYs+knE05Q1+krOrf8unIGWf5vUyoZ58yRzgr
PNGQ+jPScDZCFoxOA90zOmh4nCua8zyGLO1KXWRR8G4LKnP4Z3PK5pC9oS9H
b45uHf0O+czVnZiOeFcbF9nbtc0pj2Mer11kGvRBz/k9UaeZ9ut49UMXWu8X
rC/9MstwwlhX+MZYW/6h3hP95zWWSXmMP/Wkr3lmTsz1Wye+LeSSl/hts3bD
Dy3rWr60/l6+g3+E/+Ysz3l8N98t756zpDwRZ3RkKuzLyE44yyMP2MVw8mU/
Jw52peznuNiVoo/m3gDuNMBdzWdk5viRlbM/LWF5G7em/Tt29Lir+Mx3ip9v
FV6AvOGJ+V6JQ/hWrXkPAPcSsA91NN9VlRmwF2Cfh71eiaXArTnujCVj/4dn
Wfgs/GAgmFe7uF6/Ki6C+Iw7Z4S1fGY81jVvZKvcTYD8lXqtbt32kofr5v4J
nw1vi2wMGRk8b3ffdZQnIP7C7sOcPRaVb1hYf1kG8tkdDCdfdDyruE/Ab9P/
9D3ydezYkYXT59i307fovJG5I89Gr8J75OTP6hKGLuUKvy1sj7FRxVYV2TFy
03HK9HHHKy+f5LxEV3SN8xW5+UTD0LGDFUBHjSwePdDFyt8n6H/Z75D0yOYv
NGyW5VyoPP5i833OdpDvC+ZNvTlP0M+cO9AV/dN8H1P+SxuQCyIfPGq+dhk0
z9j902/cFcB3wbfDvMdd3u/oMuMjr6Z/SYMceO53U2Q65MMrmQ8yTMoiHdh6
bADA2mMLi8wO3ht9XSfHkv2nk7rD7ziPtyVviu7rKtuDrTg2458U+V2MUXYP
poM80WO+5BiSBhtedJroNrEhx5b8rUi7b/gnBF1YS9zsSkEri3daIWjFoN04
g1fTfgLM/5JBS1XTjgP7syWqiePqEtS1mjYXxMdGrbsu8QYavkY18V24a1YT
o7u66bHLWCVo1Wpi8FYL6lzNtr7Vmm3tYZnUA9uNTqbZy3Sk6Ws7COtjO2jb
3uZHebvYjqWriVtb3jb39N0yQb/EOfZJ7AXBFATNCno86JugqUHTwBEEzTTs
56AnTPOt4dPB0ZiOMMr5KtyvpSnmdXmR5+bTw/0BGVDQDOTB2KEFPVpJewrq
tWw1cWu4y1UTq7acbfjOMklDm6kH72jb19ad/vjGOs42b8qbY5m0B7kJMips
+hibn2zfGvbLr5U8c3Cu4NzBPGW+Int5UJkZtpZ/i/k2Md5dV6RtHDIy5FRj
PcccwLpZpBzoW9Zg45OOMxBnIc4XPM9veZxvFvSMMzbK2DtoQND5lcRWc6/A
mKD+hk0vUl7+VbgXhn9g0L5B40y3T9B4XcKGVbL+5HWB+YHFnlakPu3zInFL
7OPDirRLaghqdM59b78yL3EZT+blHOfLP4qUx5xW5Dz9znFmbv7oXGMu/+CY
MF//5zzim6Hvf6vk98SYMB5rVfPd75XUB8CDnc0ZyHo1VdOW6k/kjpW0vcKl
3thb/VHJMHA28CBDi8SXwCudy35YzbyJd4XnvDOLxPE86xrBuoI+jPWPfQN9
FfsP2Cj0VfALfcXogi1G94o8hbMYfDU8NXq1QcoakDOgAwbXgM14eU/HCDHN
M8Q4g+mdqb+f+OWR2jwOF6u9l7hqwnYX+wwGmvLhIeAf+ouXJh5650GWvZuY
arDTzEfmIHO3l++Y/30sh3x7m3eJ5QYLDgYc/fnyylDm6qNb8ww9XLz1FNs2
TT95PSxem/ZMN6zEoBM2Vw/emvrQ1+1H+v+HIuXEj4X7XZHf3KNFYp/H2X/D
zBvMODp3+hp56hj7lXo/V2Sdb/P7o75lu8Gs32+fPmL9zjM/wpDLkh9y2h+V
F99nf5EO2TLyJXCDnKOxXz9e/curyp6QO7Hef+xaBL4cnPmvRdqgI9vFvhzZ
LnE6uq5/Gs+fVXItx/3cufts0L8quXZ+Ee6XlVw7cVmXWV+JSxh7DGV+6vf2
dNAzxnvYtZsw1knsc7EVRu6MvPR34z5rPQh/wHwfDHrIsh8yL77ppyzjc+MS
b1RQv6C9Kokt40x2QZHrKevkqCL1sMjskNe95nmTcyd2TtOCptbS/oczPOd3
7sFAL7yu6YiPrAxM/Hjnx97OEeYCdyagU2MswNvBX4woUheDnJGzH3qzV/yW
WVeeC3re9QX3hUpiYF92zqNLf9Xx/dMxIQ3r1IvhvlTJdYt0+JEP/cf5if78
Nds73LUZO8IRunsGjdSl78C8g30HIw+WHew72PYS+44fHPHD+r81nDTgfcEx
g/8F/w4OHoz89+YH1vsn34EDB5sPDho8NOcPzq6cQcAAYjeB3PVXw0vsPy64
7dnmB36fe57AfIMRX8+zCeePEvdPGQPl3caLY+Ycg/wfHPpM6woWe4b+H8wb
/7K1xKSDnV6llmUTvmotXdKtVkuX/MDOg0MHjw7uGYw1OGiw2GCywXEvJIa7
xG7jgvX+3faBU+9Uy76jvJVrOTb4O9eyHPoYnDX9Tb6FWG3GANtiyqfeK9Vy
nEi/fC3Hj/FcoZYu47xiLV3iLVfLthIPew/w9y31fPeQY796LctnPDmzIxNE
5oUsDzkCehls3HjmDMi9XNwThSy/u1hvMN9dapkHY9VDvDm4830M61pL3nsN
MKS1tANd3bBNzZs5s7r1xE5lM9+B+d/C8aZvsC0F586YYJPDHKvW016yo2Wv
Vct5xjiAXZ3bdstnvjIf13ReEg/8PePJWGLH19n67Wd9yQ9bS8aSuYPtIWNA
32NTydyiv7FVxN6CubO74YwJNpuMH+PfV7eT/fKz31Af4xJvoGHUt6f5MRd2
sxzK5q4ybLjQaXSup30C9kPYfjKnmcu7mo76cZ8Xtrit9bTVXc12gnMnLXKA
nR032tDPtpJXo3sr6z59zxzneyAeNmp8JxMj7ICgA4MuCtovaP9K2lzDw8Gv
HV5JnDS4jEMriQMG/ztT3hSe9OBK4oDB/x6iS7xZhsPPPq47oZL8+1jTT3cd
ZA+Bxx9dSb6YfQu+lrXzMMukHtNcQ0nziOlIM9W4hD1hObTpMfOjvCNsx8a2
GQw0GOcjfQemA54bLPua9gcumGj4buwNutpHvAPrPdB3pFlYfh+eAf7/R3mw
0e6N/a3Xvub9pHW8uJI8/uqWwZ4AzgZczEHWkf49yjqCiUB3TXnIz8gX/Hdn
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

          "]], PolygonBox[CompressedData["
1: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
6Ix0Vv8G3600KW3+D2r4w8Y=
          "]]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
5+kWzXz/uLIE3ugy2Ae418pe/9VazjfoLSPeQNb1ZvYHugA20Dfq+Z50E+L5
lXrexUXvQnZxl+OYWspJ7iiMjfDn6ylr3m3kPGW+nl7L51nfw62nzsPZD3FJ
My3m43M+c8f4Pul723NN+831nTsC3BnizhO2Ee7foiMwZzk/Y9+F3nRxLXWn
8ZaZe7ATG1lO5DrvxlsX4tIXfG+L+YC+w/x4hjauJV/0IOqwqjIa3tjkb6mn
bsZejnX/12Kdjed7alk+5ALzn/Nt1jj8w1nnKANtum0tdWDusnN//Ylati/0
WNuSNmk1Lf4bA5qZ7tFmyvLrainPuTuLzQt719y1TEN80rX4TBnRCYa6djO+
J6tb8cw4X6KZPH9rpL7URd53y/8ecRefq/LfXB2jVf7czd6yGNeMo1rS9Adr
CPfLt4q8dqGNmyl/kbPcCVi6mfH/amRbbWs6xjpjHHvZh8r1WXe0aylvSb9C
M9u/NfDWyvdnWZPrmRdjh/UJfXnL9tSdWZuhWa/QIViz0CFoV8Yj6x76BOVG
j2adQ5dmLSfusPbUo5FlzB/0a9YbdGzWG+Iu3J4yjnec5X3pGope8mk91xLG
CzIW+cr95H3qeR99oHN1qra6wl75mrbIV7VNXuM7aO6zYyecof1winZB7IGT
TM8YZc0qdG3asgjjmb7Yt5733Wm7Edo9x9sPrNtHalecLN8J3uOYqW10gmle
0Wb5l2WEd3EHH0ya67V7wusz9eviPjeYveQP6t9sh6ep+6JzvqE+PM09+KeF
bhzl/8z2ZR6i+2JDfVE+L1hP7qOUxaShL7DN3qhN9TPfd1c//9p8GfNfqLuy
N0C/Z758JX/y+dk4J9vXn8iH8K+syzemJc4U9wPw/9bnWfuFWq7DrM9711M/
Q9Z/3cjxNrmZ91B+VjfgjspPPv+l7RgfBO6ITXePNtO7LMQhbG/HHnfVvjUO
spNn5Pwqhu9pWxK/m+22un2KTOVcD7kK5pyPtZ91gPKwFnT1Phz8OSv8xTjI
S9bl1cyDuXCZ42N13zPPu9tvlAk+3GP7yD0M+xfWZr5Vx3fqXmnkfmZctM+b
jdTDXoznDxop51+J5/fi+ex4fhn9rZF6+avx/GUj5/Uk9FZ1l4nxPF19d0oz
beejnV+DtMVDs3b96vrF2F/NtuJ7jT+ot1DG731+XZpn5i39QXu/ah9x12iK
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
++M3DA==
          "]], PolygonBox[CompressedData["
1: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
FuxDg2NVM5ZmrbzRvUkzkmal/wGnoNK7
          "]]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["

1:eJwV03e8zWUcwPEjFKGiQaIyMtIQUUZDRppkFKXkqpDcq6wiZGZXys4WWckq
e++9997ZUtnV+/vH+36+z3PO69x7f89zciWlVElOlUgkevtRO2MiUS1TIjFK
q+pPWl1X6ls6Wt/UMVpDV+nb+rPW1LH6jg5lCO/yHrV4n9oMI4m61OFDPmA4
98T7fMZSXa0ZtafW4SNzPYpRnF72kqhvbsBTPE2J+Gz7H+s4LamlKB2/x3qZ
rtHxNDRP0E90rSbrRG2kv2iKjmQEn/IZjWlKk3hOZI3/wXuX6zrNpN/E30sz
c3Oe4Vmei//BfgudpM9rGTaYj+l6/UJ/1c91sraM5x5nQTbuZZP9MbpRv41n
QCvrL3mBsnxnrwGtzVO0nJZni/m4bta2OlXbaDu+irMkO/exzWtjdav2jmdK
e+sOVOBFKtLQ/grdrtPoaJ6unXR8nAM5yMlO+xN0h34fz57O1r/pS/oyu80n
dJd20d/1a+1G1zgj7qeR/ZW6R2/T20k2r9K9OoPu5pnaI555nCsPkGJvte7T
O/QHbcwa836dRc84y7hrcSY8GPfA/lo9oJk1S9wL8zo9qLOZYj6sk/WQ9qFJ
nFWcC6/wKkft/aFHNFfcK12vx/ROvYtm5g16XOfE+zlpfUL70pyN1id1Lqc5
ZX1K+8VdY5P1GZ3HuXiP9VntH/eMzdbndT5/csb6gg6I+8gW64u6gL85a/2X
Doz7yVbrf3Qhl+N3WF/SQXEv2WZ9RfNo7rin5u16Ve+Os+eaeWrcG6aRlzZx
R3Rx3D9dpDc4b76uP8b9Zof1v5pPH4p7bN6lCWbwGn3ijOMuMTjuPjvN/+kS
8pvb6x69iVm8Tj/6xh1iiNfbsduciqXmAtpR92ka5lCJAfRnNkO93oG95tQs
MxfUznpAb2YelRnEQOYyLL5D7DenpRAP08XeIU3HQt5geTwPXcB8hsd3hoPm
W3iUR+I7ZO+I3soSqrDC3uB4zvGMGWHdlcPm9DzOY/Swd1Qz8CSFKcITFGVk
fN/4H7DE9Rc=
          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.08653017241379313, 
       0.8086256351237194}}, {{0.43444683908045967`, 0.06499953160445726}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-1.033441091954023, 
       0.9480555295335811}}, {{0.23028017241379306`, 0.3274558034347851}}, {{
       0.3499640804597701, -0.01975197284075275}}}]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[2], PointBox[CompressedData["
1:eJw9kw1M01cUxRs0oLAxQQKIbMOgWBWrK+IKAw5DowjFQIdZHOIKw48xtJpo
1uDQKg0IkaDL2BhsBVScCk6wtUHp/JePjnagrFClBfpNC5SWVsZwgrK1S+xJ
Xl5+eTm5N+fetyaXxTjkQSKRYp3HdYeM7uV12OTE58lhTcwSBybuOYooPjIi
qWq/xPDKhr7duV3frJUSJUtXsdY4rGgZHVzWG99DmCPqFtUF0/jzkH7hQGA3
8c8PR49fjrCCLPHJY4g6iYNZtjaqjwPVld0lL5M7iYER1u1+kR3MB7/4fX9G
THA38sslL6fcTEnZeFJBt4N97GreUISQ8FlO1STpJsGhlwdJr1/EGz+n8fXU
vuFKvKnP6Xnfl/3qFmaNPzUqYyzgyGfDgtP4qD5t0AzesiAsM5WTdL8NFzVn
Pyky28AOyXFWlIIR+Vt6jNgCcvv2jHtfydzvzbddkqNZ7Bdl2D/p5n2e4dFV
wimQzlTN3f10AKe3WVKT4k2gOd0r1ylQOHE/YH7DOIKl19nn6UO4W/N1UEK6
xc1xXuTg/lVT2BblkhLLuPnUtNVK/B9nhQoLJ58wrKE2iFWxs7V3hiGU7fBb
F2tEvbbg3fnHIyAHn6P0X2tx8yn70y+LTvAhSlkYahKMYhev63fSaq2bH08r
91TqDBC1u6RB4gXynsVAA5Kfe/wYsEULgV0dKdthwIpLN7w6jmqRn8Eou3bY
Auqv0g1Gbx2CrLJ6vXAMYuM7XnFndZBv9TVGT2uwtjUnwb9Wh8VCWqb3RxoE
COYZH2/Sg55BDVxxsAf5XBNvl1KP7Ly/UhOkCnxnHd4poxhwuK9cfadBiW+z
a8mq6DGUvV18Ar4aiCSXn2RdGsMmSa5EU6p2s0dDDX3Q0wxXO+WhJsxxP5xp
StShvrfzxYNmE1g32niUzwz4I6rt57glZgzIb25Z/rcCpxQV0buzx7G+eHMk
rVCPZw3OwArHwY7PTGNmPQMvrnhExh/HjEgddaRbipm3jq/vZ06gtJHfPjtn
wEPXOtZMwD/FezFxZ5+bRc0rX/D2PoXCvz598/lJxFxgFqgyVaDpnpcu4U2C
zKrb3mTphev3aI9YcKyP8XDgCz1CzOGtOY8sEFzl1vG7OyAscyZw0wqSp+D1
v4kVhGv6LQfseOQd+kE4T4Kl752j6Vod2NplgteVavwHaGbnfQ==
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxlUn9Q0wUU/6qVCR5xhKgJNuIsQ4Qup4A53kgSDsSAo26GkiJDLA4l4Vpc
Fj832AkuoSITQifcmkoS8uMc8lC3NVBk4PyywYSNsQFfdI2DZBPw+s4/6I/+
ePfuc/fevff54ZtyPIG7nCCIXXQ5+3BK1PhW5TQK28aCdXorNOxG3c7rNmTL
Zgz8V55A1Rk531Fiw4AT8tO8T63g+tmp32vX2LDIv0mocExBHS9/r/BnK26o
/fHYL2IL5Lqfrl8ZbsU/zn29NiyOgoRg0jvHNIU13VGzydWjsDo1oZ1dT2Hx
3diBKmIUJD8RxV+UUli+zZz+6qAZPupqiK3MoLBXFRY4RZqWMPM3Ef9z9jgk
KteEcvWTuCXYMft3mgk0ZdsjH2knMH9tgZvxdQPs4ViPFXEn8H2F/8UV0RbY
SSnPia0WFNQ1yWafjgLNlp+dbEFbUJ+eETsB5vX6fTXhFqy85eXlfXMClntK
N7F9zfgsZIXsyNZRYLjxFozEGPJYibGHksglnMOkYj5kmeGs9r03S8tMmJW3
sVAYZ4JA15HxP0+YlvhMBCcJvts2iu7JVTM9D4zwVnXrun6HEcOpucWowEeQ
dzN6fuDyCHJeK9vRpNGDe0HfLGPdMLJ2BGz/IXwI0ozzB7w69Cj3vFzitlkH
e1++2pGo1uH80ZXaTZ/0Q0cvl57Q4fPckESXD4bBzrz91cd+OjyYOhMTptJA
RvmNRouExOw9T7P2t96H20/GaMYP0SPa5Tk74h4w26p3FQ5pkHm/UuybPgCZ
Ps96yAsazC4tKZJkauAKfY2KuYvlKZPF3ctIeGnj9yGG6S7s/mu91ufLW/BY
fbzFbVG+tM+w2e8sOyPDejPf3janANrdVXGSGyjqnMZ98UrgvBC4Gfdfe6eQ
P9QPBr/Gw2EeYuQdnYsvb7gEeb5OgUr/w6p3TcLzBejuVaeiIqVA0HZzTmYD
cc+z7ny7EAjnO4IKyP31gGBMqgRDhDMwl4CTM7ihhJSB6MUD7UCoHfI3/CJQ
TV4YyfDpgM6sipYj/jVwqCeeTugdiGMZyxb8RVAlzrwSSsmhKeJbblBOH2zW
NZeePaiATmVA3RZWC7S5LaZNqRWglfkNNjZfxWu2U7TlXdBqjwwcP/wA2G8r
XFMTukE7H8MMjhKDOmn1ZLvi/zhd6pBWGCXAcNL9pgf6+yRBq/7RAOekM9G9
4J2UL9CQ14FweehRG6cGSbLqsb3gIi7QaejlkiBqFOToQyvxX+6GAyI=
       
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.4% Marg=0.0412\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.110883620689655, 
   1.0434267241379311`}, {-0.058026845816008865`, 1.0328070339787911`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.600633817859412*^9, 3.600633879575737*^9, {3.600633916698587*^9, 
   3.6006339915512037`*^9}, {3.601218489652751*^9, 3.6012184974546328`*^9}, 
   3.60155905782364*^9, 3.6015719848275137`*^9, 3.601572961195009*^9, 
   3.602859191746373*^9, 3.6028603327363863`*^9, 3.607435246854671*^9, 
   3.6375663428422832`*^9, 3.6375742022727137`*^9, {3.637583922046226*^9, 
   3.637583926164082*^9}, 3.637586133285777*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
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
AEcunBE=\
\>"]]
}, Open  ]],

Cell["", "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tConclusion"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.5998959933365173`*^9, 3.5998959950405684`*^9}, {
  3.599899418576304*^9, 3.599899421983275*^9}},
 CellTags->"conclusions"],

Cell[TextData[{
 "In this notebook we presented several max-margin and SVM classifiers, both \
in the linear and non-linear setting, partially following the exposition in \
",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". We have exploited the Quadratic Programming functionality of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve most of the optimization problems presented. With the help of \
dynamic interactions, as dataset drawing and direct manipulation of the \
algorithm parameters, this Notebook can help understanding the algorithms and \
the role of their parameters.\nThe implementations provided here could \
virtually be used to address any binary classification problem. It is to note \
however, that in order to extend the applicability of the methods to larger \
problems (with more than a few hundreds of examples), it would be necessary \
to abandon the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver and implement a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " interface to existing and efficient C++ SVM implementations."
}], "Text",
 CellChangeTimes->{{3.600633087076248*^9, 3.600633575187806*^9}, {
  3.60066866290123*^9, 3.600668954013122*^9}, {3.600680784775477*^9, 
  3.600680883372558*^9}, {3.600680966600589*^9, 3.60068099644777*^9}, {
  3.600681077199624*^9, 3.600681094620131*^9}, {3.601559105921438*^9, 
  3.601559198545088*^9}, {3.601559249982498*^9, 3.601559282462489*^9}, {
  3.60162661258946*^9, 3.601626632824834*^9}, {3.602859200950872*^9, 
  3.602859222123472*^9}, {3.607435279179245*^9, 3.607435281253655*^9}, {
  3.637581868498744*^9, 3.637581869905108*^9}, {3.637583980164358*^9, 
  3.637583982248032*^9}, {3.6375842030551443`*^9, 3.637584203566497*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.5998994728452187`*^9, 3.599899474304348*^9}}],

Cell["\<\
\t1.\tNello Cristianini and John Shawe-Taylor. An introduction to Support \
Vector Machines and other kernel-based learning methods. Cambridge university \
press, 2000\
\>", "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellChangeTimes->{{3.6016267198091307`*^9, 3.601626780317151*^9}},
 CellTags->"00004F53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"Presentation",
WindowToolbars->"EditBar",
WindowSize->{1920, 1056},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->(FrontEndExecute[{
   FrontEnd`NotebookApply[
    FrontEnd`InputNotebook[], #, Placeholder]}]& ),
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->"/home/marko/print.pdf"},
PrivateNotebookOptions->{"NoteStyle"->"NumberedNote"},
ShowSelection->True,
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Creative"}, "NaturalColor.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["DisplayFormula"]], 
   Cell[
    StyleData["FigureCaption"], CellMargins -> {{54, 24}, {10, -5}}, 
    TextAlignment -> Center, LineSpacing -> {1, 2}, 
    ParagraphSpacing -> {0, 5}, LanguageCategory -> "NaturalLanguage", 
    ScriptLevel -> 1, CounterIncrements -> "FigureCaption", FontFamily -> 
    "Times New Roman", FontSize -> 12]}, Visible -> False, FrontEndVersion -> 
  "10.1 for Linux x86 (64-bit) (March 23, 2015)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "intro"->{
  Cell[16423, 366, 315, 8, 135, "Section",
   CellTags->"intro"]},
 "linear_classifiers"->{
  Cell[24394, 541, 571, 12, 135, "Section",
   CellTags->"linear_classifiers"]},
 "fig_geometry"->{
  Cell[35785, 842, 71955, 1189, 363, "Text",
   CellTags->"fig_geometry"]},
 "sec:max_margin"->{
  Cell[119831, 2343, 578, 12, 135, "Section",
   CellTags->"sec:max_margin"]},
 "margin_bound"->{
  Cell[120434, 2359, 151, 2, 67, "Subsection",
   CellTags->"margin_bound"]},
 "theorem1"->{
  Cell[125639, 2507, 1772, 53, 131, "Text",
   CellTags->"theorem1"]},
 "eq:max_margin_hard"->{
  Cell[146585, 3100, 1158, 39, 79, "DisplayFormulaNumbered",
   CellTags->"eq:max_margin_hard"]},
 "eq:1norm_svm"->{
  Cell[188705, 3935, 1705, 48, 163, "DisplayFormulaNumbered",
   CellTags->"eq:1norm_svm"]},
 "subsec:hinge_loss"->{
  Cell[239199, 4940, 207, 3, 67, "Subsection",
   CellTags->"subsec:hinge_loss"]},
 "sec:svm"->{
  Cell[342683, 7114, 467, 10, 135, "Section",
   CellTags->"sec:svm"]},
 "primal_problem"->{
  Cell[345542, 7174, 1226, 38, 116, "DisplayFormulaNumbered",
   CellTags->"primal_problem"]},
 "eq:dual_problem"->{
  Cell[350604, 7334, 844, 26, 79, "DisplayFormulaNumbered",
   CellTags->"eq:dual_problem"]},
 "eq:kkt"->{
  Cell[358025, 7555, 2242, 75, 236, "DisplayFormulaNumbered",
   CellTags->"eq:kkt"]},
 "eq:hard_margin_svm_L"->{
  Cell[363848, 7720, 1491, 54, 84, "DisplayFormula",
   CellTags->"eq:hard_margin_svm_L"]},
 "eq:hard_margin_svm_w"->{
  Cell[369402, 7912, 878, 25, 172, "DisplayFormulaNumbered",
   CellTags->"eq:hard_margin_svm_w"]},
 "eq:hard_margin_svm_Dual"->{
  Cell[382816, 8318, 1511, 54, 136, "DisplayFormulaNumbered",
   CellTags->"eq:hard_margin_svm_Dual"]},
 "eq:soft_margin_svm_L"->{
  Cell[535772, 11155, 2038, 72, 84, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_L"]},
 "eq:soft_margin_svm_w"->{
  Cell[542353, 11379, 1194, 32, 214, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_w"]},
 "eq:soft_margin_svm_Dual"->{
  Cell[552880, 11728, 1376, 47, 136, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_Dual"]},
 "eq:svm_w"->{
  Cell[622641, 13267, 971, 30, 229, "DisplayFormulaNumbered",
   CellTags->"eq:svm_w"]},
 "eq:2norm_svm_Dual"->{
  Cell[639202, 13769, 1336, 48, 136, "DisplayFormulaNumbered",
   CellTags->"eq:2norm_svm_Dual"]},
 "sec:kernel_svm"->{
  Cell[694794, 14909, 582, 12, 135, "Section",
   CellTags->"sec:kernel_svm"]},
 "conclusions"->{
  Cell[1027837, 20942, 509, 11, 135, "Section",
   CellTags->"conclusions"]},
 "00004F53"->{
  Cell[1030675, 21004, 347, 8, 39, "Reference",
   CellTags->"00004F53"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"intro", 1032451, 21054},
 {"linear_classifiers", 1032543, 21057},
 {"fig_geometry", 1032643, 21060},
 {"sec:max_margin", 1032740, 21063},
 {"margin_bound", 1032838, 21066},
 {"theorem1", 1032931, 21069},
 {"eq:max_margin_hard", 1033027, 21072},
 {"eq:1norm_svm", 1033144, 21075},
 {"subsec:hinge_loss", 1033261, 21078},
 {"sec:svm", 1033358, 21081},
 {"primal_problem", 1033451, 21084},
 {"eq:dual_problem", 1033568, 21087},
 {"eq:kkt", 1033675, 21090},
 {"eq:hard_margin_svm_L", 1033789, 21093},
 {"eq:hard_margin_svm_w", 1033908, 21096},
 {"eq:hard_margin_svm_Dual", 1034038, 21099},
 {"eq:soft_margin_svm_L", 1034169, 21102},
 {"eq:soft_margin_svm_w", 1034297, 21105},
 {"eq:soft_margin_svm_Dual", 1034429, 21108},
 {"eq:svm_w", 1034549, 21111},
 {"eq:2norm_svm_Dual", 1034662, 21114},
 {"sec:kernel_svm", 1034782, 21117},
 {"conclusions", 1034880, 21120},
 {"00004F53", 1034973, 21123}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 1321, 31, 19, "Input",
 CellOpen->False,
 InitializationCell->True,
 InitializationGroup->True],
Cell[1891, 55, 949, 15, 19, "Print",
 CellOpen->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[2877, 75, 806, 10, 124, "Title"],
Cell[3686, 87, 444, 6, 38, "SmallText"],
Cell[CellGroupData[{
Cell[4155, 97, 102, 1, 45, "Subsubtitle"],
Cell[CellGroupData[{
Cell[4282, 102, 98, 1, 67, "Subsection"],
Cell[4383, 105, 12003, 256, 732, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16423, 366, 315, 8, 135, "Section",
 CellTags->"intro"],
Cell[16741, 376, 7616, 160, 949, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24394, 541, 571, 12, 135, "Section",
 CellTags->"linear_classifiers"],
Cell[24968, 555, 1816, 45, 53, "Text"],
Cell[CellGroupData[{
Cell[26809, 604, 536, 16, 56, "Item"],
Cell[27348, 622, 228, 6, 53, "Item"],
Cell[27579, 630, 291, 6, 53, "Item"]
}, Open  ]],
Cell[27885, 639, 1466, 29, 89, "Text"],
Cell[29354, 670, 1011, 29, 41, "DisplayFormulaNumbered"],
Cell[30368, 701, 1831, 50, 57, "Text"],
Cell[32202, 753, 690, 20, 41, "DisplayFormulaNumbered"],
Cell[32895, 775, 2887, 65, 241, "Text"],
Cell[35785, 842, 71955, 1189, 363, "Text",
 CellTags->"fig_geometry"],
Cell[107743, 2033, 1103, 28, 128, "Text"],
Cell[108849, 2063, 865, 22, 41, "DisplayFormulaNumbered"],
Cell[109717, 2087, 2411, 69, 163, "Text"],
Cell[112131, 2158, 746, 22, 41, "DisplayFormula"],
Cell[112880, 2182, 2574, 56, 311, "Text"],
Cell[CellGroupData[{
Cell[115479, 2242, 1433, 34, 19, "Input",
 CellOpen->False],
Cell[116915, 2278, 2755, 55, 470, "Output"]
}, Open  ]],
Cell[119685, 2336, 109, 2, 52, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119831, 2343, 578, 12, 135, "Section",
 CellTags->"sec:max_margin"],
Cell[CellGroupData[{
Cell[120434, 2359, 151, 2, 67, "Subsection",
 CellTags->"margin_bound"],
Cell[120588, 2363, 1948, 49, 89, "Text"],
Cell[122539, 2414, 560, 15, 41, "DisplayFormulaNumbered"],
Cell[123102, 2431, 1615, 45, 89, "Text"],
Cell[124720, 2478, 535, 16, 43, "DisplayFormulaNumbered"],
Cell[125258, 2496, 378, 9, 52, "Text"],
Cell[125639, 2507, 1772, 53, 131, "Text",
 CellTags->"theorem1"],
Cell[127414, 2562, 880, 26, 69, "DisplayFormulaNumbered"],
Cell[128297, 2590, 2264, 54, 304, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130598, 2649, 179, 2, 67, "Subsection"],
Cell[130780, 2653, 2382, 78, 164, "Text"],
Cell[133165, 2733, 1291, 36, 65, "DisplayFormula"],
Cell[134459, 2771, 1397, 28, 126, "Text"],
Cell[135859, 2801, 998, 34, 65, "DisplayFormula"],
Cell[136860, 2837, 1363, 20, 89, "Text"],
Cell[138226, 2859, 997, 32, 65, "DisplayFormula"],
Cell[139226, 2893, 3228, 82, 245, "Text"],
Cell[142457, 2977, 1148, 37, 106, "DisplayFormula"],
Cell[143608, 3016, 2974, 82, 109, "Text"],
Cell[146585, 3100, 1158, 39, 79, "DisplayFormulaNumbered",
 CellTags->"eq:max_margin_hard"],
Cell[147746, 3141, 4664, 111, 218, "Text"],
Cell[CellGroupData[{
Cell[152435, 3256, 2096, 31, 50, "Subsubsection"],
Cell[154534, 3289, 2428, 39, 126, "Text"],
Cell[156965, 3330, 2462, 69, 430, "Code",
 Evaluatable->False],
Cell[159430, 3401, 1049, 18, 237, "Text"],
Cell[CellGroupData[{
Cell[160504, 3423, 468, 8, 60, "Input",
 InitializationCell->True],
Cell[160975, 3433, 5388, 101, 435, "Output"]
}, Open  ]],
Cell[166378, 3537, 1910, 31, 348, "Text"],
Cell[CellGroupData[{
Cell[168313, 3572, 1866, 30, 93, "Input"],
Cell[170182, 3604, 13729, 233, 430, "Output"]
}, Open  ]],
Cell[183926, 3840, 1649, 26, 311, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[185624, 3872, 179, 2, 67, "Subsection"],
Cell[185806, 3876, 2896, 57, 237, "Text"],
Cell[188705, 3935, 1705, 48, 163, "DisplayFormulaNumbered",
 CellTags->"eq:1norm_svm"],
Cell[190413, 3985, 5058, 138, 458, "Text"],
Cell[CellGroupData[{
Cell[195496, 4127, 173, 5, 50, "Subsubsection"],
Cell[195672, 4134, 1631, 26, 126, "Text"],
Cell[197306, 4162, 3538, 95, 578, "Code",
 Evaluatable->False],
Cell[200847, 4259, 1270, 20, 163, "Text"],
Cell[CellGroupData[{
Cell[202142, 4283, 356, 6, 60, "Input",
 InitializationCell->True],
Cell[202501, 4291, 28610, 486, 435, 1642, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[231126, 4780, 1118, 26, 274, "Text"],
Cell[CellGroupData[{
Cell[232269, 4810, 3271, 52, 96, "Input"],
Cell[235543, 4864, 2744, 51, 529, "Output"]
}, Open  ]],
Cell[238302, 4918, 848, 16, 163, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[239199, 4940, 207, 3, 67, "Subsection",
 CellTags->"subsec:hinge_loss"],
Cell[239409, 4945, 1265, 28, 89, "Text"],
Cell[CellGroupData[{
Cell[240699, 4977, 879, 26, 52, "Item"],
Cell[241581, 5005, 1249, 42, 52, "Item"]
}, Open  ]],
Cell[242845, 5050, 669, 19, 52, "Text"],
Cell[243517, 5071, 548, 17, 41, "DisplayFormula"],
Cell[244068, 5090, 1302, 35, 91, "Text"],
Cell[245373, 5127, 944, 31, 84, "DisplayFormulaNumbered"],
Cell[246320, 5160, 3965, 115, 259, "Text"],
Cell[250288, 5277, 489, 15, 41, "DisplayFormulaNumbered"],
Cell[250780, 5294, 632, 11, 89, "Text"],
Cell[CellGroupData[{
Cell[251437, 5309, 2162, 55, 19, "Input",
 CellOpen->False],
Cell[253602, 5366, 6766, 135, 519, "Output"]
}, Open  ]],
Cell[260383, 5504, 1118, 17, 126, "Text"],
Cell[CellGroupData[{
Cell[261526, 5525, 641, 17, 52, "Item"],
Cell[262170, 5544, 1009, 28, 54, "Item"]
}, Open  ]],
Cell[263194, 5575, 16, 0, 52, "Text"],
Cell[CellGroupData[{
Cell[263235, 5579, 173, 5, 50, "Subsubsection"],
Cell[263411, 5586, 210, 5, 89, "Text"],
Cell[263624, 5593, 3228, 91, 541, "Code",
 Evaluatable->False],
Cell[266855, 5686, 225, 7, 126, "Text"],
Cell[CellGroupData[{
Cell[267105, 5697, 199, 4, 60, "Input",
 InitializationCell->True],
Cell[267307, 5703, 27770, 474, 435, 1642, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295114, 6182, 3946, 61, 96, "Input"],
Cell[299063, 6245, 2343, 44, 529, "Output"]
}, Open  ]],
Cell[301421, 6292, 384, 9, 163, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[301854, 6307, 256, 3, 67, "Subsection"],
Cell[302113, 6312, 1957, 44, 200, "Text"],
Cell[CellGroupData[{
Cell[304095, 6360, 173, 5, 50, "Subsubsection"],
Cell[304271, 6367, 686, 14, 52, "Text"],
Cell[304960, 6383, 1033, 33, 84, "DisplayFormulaNumbered"],
Cell[305996, 6418, 1189, 24, 126, "Text"],
Cell[307188, 6444, 2770, 77, 467, "Code",
 Evaluatable->False],
Cell[309961, 6523, 333, 8, 126, "Text"],
Cell[CellGroupData[{
Cell[310319, 6535, 202, 4, 60, "Input",
 InitializationCell->True],
Cell[310524, 6541, 27238, 467, 435, 1642, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337799, 7013, 1697, 30, 96, "Input"],
Cell[339499, 7045, 2071, 41, 525, "Output"]
}, Open  ]],
Cell[341585, 7089, 1037, 18, 163, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[342683, 7114, 467, 10, 135, "Section",
 CellTags->"sec:svm"],
Cell[343153, 7126, 1766, 33, 163, "Text"],
Cell[CellGroupData[{
Cell[344944, 7163, 114, 1, 67, "Subsection"],
Cell[345061, 7166, 478, 6, 52, "Text"],
Cell[345542, 7174, 1226, 38, 116, "DisplayFormulaNumbered",
 CellTags->"primal_problem"],
Cell[346771, 7214, 1565, 42, 128, "Text"],
Cell[348339, 7258, 1830, 62, 84, "DisplayFormulaNumbered"],
Cell[350172, 7322, 429, 10, 52, "Text"],
Cell[350604, 7334, 844, 26, 79, "DisplayFormulaNumbered",
 CellTags->"eq:dual_problem"],
Cell[351451, 7362, 1126, 33, 89, "Text"],
Cell[352580, 7397, 2988, 91, 131, "Text"],
Cell[355571, 7490, 2451, 63, 96, "Text"],
Cell[358025, 7555, 2242, 75, 236, "DisplayFormulaNumbered",
 CellTags->"eq:kkt"],
Cell[360270, 7632, 2493, 53, 165, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362800, 7690, 111, 1, 67, "Subsection"],
Cell[362914, 7693, 415, 9, 89, "Text"],
Cell[CellGroupData[{
Cell[363354, 7706, 161, 2, 50, "Subsubsection"],
Cell[363518, 7710, 327, 8, 52, "Text"],
Cell[363848, 7720, 1491, 54, 84, "DisplayFormula",
 CellTags->"eq:hard_margin_svm_L"],
Cell[365342, 7776, 1445, 48, 109, "Text"],
Cell[366790, 7826, 2340, 79, 196, "DisplayFormula"],
Cell[369133, 7907, 266, 3, 52, "Text"],
Cell[369402, 7912, 878, 25, 172, "DisplayFormulaNumbered",
 CellTags->"eq:hard_margin_svm_w"],
Cell[370283, 7939, 416, 11, 52, "Text"],
Cell[370702, 7952, 3267, 111, 297, "DisplayFormula"],
Cell[373972, 8065, 3167, 88, 166, "Text"],
Cell[377142, 8155, 4458, 135, 408, "DisplayFormula"],
Cell[381603, 8292, 1210, 24, 89, "Text"],
Cell[382816, 8318, 1511, 54, 136, "DisplayFormulaNumbered",
 CellTags->"eq:hard_margin_svm_Dual"],
Cell[384330, 8374, 3887, 71, 143, "Text"],
Cell[388220, 8447, 1479, 54, 87, "DisplayFormulaNumbered"],
Cell[389702, 8503, 4382, 98, 128, "Text"],
Cell[394087, 8603, 2964, 90, 203, "DisplayFormula"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397088, 8698, 238, 3, 50, "Subsubsection"],
Cell[397329, 8703, 5101, 120, 274, "Text"],
Cell[402433, 8825, 185, 5, 59, "DisplayFormula"],
Cell[402621, 8832, 1039, 18, 200, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[403697, 8855, 177, 5, 50, "Subsubsection"],
Cell[403877, 8862, 1124, 26, 129, "Text"],
Cell[405004, 8890, 4252, 116, 689, "Code",
 Evaluatable->False],
Cell[409259, 9008, 547, 12, 126, "Text"],
Cell[CellGroupData[{
Cell[409831, 9024, 85, 2, 60, "Input",
 InitializationCell->True],
Cell[409919, 9028, 27915, 476, 435, 1642, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[437849, 9507, 1212, 23, 274, "Text"],
Cell[CellGroupData[{
Cell[439086, 9534, 3800, 56, 93, "Input"],
Cell[442889, 9592, 91452, 1525, 430, 71899, 1203, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[534356, 11120, 808, 15, 200, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[535201, 11140, 107, 1, 50, "Subsubsection"],
Cell[535311, 11143, 458, 10, 89, "Text"],
Cell[535772, 11155, 2038, 72, 84, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_L"],
Cell[537813, 11229, 213, 4, 52, "Text"],
Cell[538029, 11235, 4002, 136, 332, "DisplayFormula"],
Cell[542034, 11373, 316, 4, 52, "Text"],
Cell[542353, 11379, 1194, 32, 214, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_w"],
Cell[543550, 11413, 1240, 37, 89, "Text"],
Cell[544793, 11452, 3955, 131, 297, "DisplayFormula"],
Cell[548751, 11585, 2020, 70, 129, "Text"],
Cell[550774, 11657, 1391, 45, 105, "DisplayFormula"],
Cell[552168, 11704, 709, 22, 106, "Text"],
Cell[552880, 11728, 1376, 47, 136, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_Dual"],
Cell[554259, 11777, 8510, 212, 515, "Text"],
Cell[562772, 11991, 2391, 84, 170, "DisplayFormula"],
Cell[565166, 12077, 3302, 45, 52, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568505, 12127, 177, 5, 50, "Subsubsection"],
Cell[568685, 12134, 3888, 65, 129, "Text"],
Cell[572576, 12201, 5088, 141, 763, "Code",
 Evaluatable->False],
Cell[577667, 12344, 452, 8, 163, "Text"],
Cell[CellGroupData[{
Cell[578144, 12356, 85, 2, 60, "Input",
 InitializationCell->True],
Cell[578232, 12360, 27819, 475, 435, 1642, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[606088, 12840, 4041, 63, 96, "Input"],
Cell[610132, 12905, 2128, 43, 545, "Output"]
}, Open  ]],
Cell[612275, 12951, 482, 11, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[612794, 12967, 162, 2, 50, "Subsubsection"],
Cell[612959, 12971, 847, 16, 52, "Text"],
Cell[613809, 12989, 1696, 53, 126, "DisplayFormula"],
Cell[615508, 13044, 1166, 22, 126, "Text"],
Cell[616677, 13068, 1826, 63, 84, "DisplayFormula"],
Cell[618506, 13133, 645, 8, 52, "Text"],
Cell[619154, 13143, 3259, 117, 258, "DisplayFormula"],
Cell[622416, 13262, 222, 3, 52, "Text"],
Cell[622641, 13267, 971, 30, 229, "DisplayFormulaNumbered",
 CellTags->"eq:svm_w"],
Cell[623615, 13299, 1361, 28, 89, "Text"],
Cell[624979, 13329, 4042, 136, 297, "DisplayFormula"],
Cell[629024, 13467, 3805, 114, 155, "Text"],
Cell[632832, 13583, 5154, 158, 408, "DisplayFormula"],
Cell[637989, 13743, 1210, 24, 89, "Text"],
Cell[639202, 13769, 1336, 48, 136, "DisplayFormulaNumbered",
 CellTags->"eq:2norm_svm_Dual"],
Cell[640541, 13819, 7590, 200, 430, "Text"],
Cell[648134, 14021, 2635, 83, 203, "DisplayFormula"],
Cell[650772, 14106, 3455, 63, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[654264, 14174, 177, 5, 50, "Subsubsection"],
Cell[654444, 14181, 3120, 47, 126, "Text"],
Cell[657567, 14230, 2042, 58, 282, "Code",
 Evaluatable->False],
Cell[659612, 14290, 215, 6, 126, "Text"],
Cell[CellGroupData[{
Cell[659852, 14300, 200, 4, 60, "Input",
 InitializationCell->True],
Cell[660055, 14306, 28142, 479, 435, 1642, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[688234, 14790, 4631, 71, 96, "Input"],
Cell[692868, 14863, 1853, 38, 545, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[694794, 14909, 582, 12, 135, "Section",
 CellTags->"sec:kernel_svm"],
Cell[CellGroupData[{
Cell[695401, 14925, 104, 1, 67, "Subsection"],
Cell[695508, 14928, 2703, 48, 200, "Text"],
Cell[698214, 14978, 183468, 3014, 499, 97512, 1603, "CachedBoxData", \
"BoxData", "Output"],
Cell[881685, 17994, 2900, 52, 163, "Text"],
Cell[CellGroupData[{
Cell[884610, 18050, 84, 1, 50, "Subsubsection"],
Cell[884697, 18053, 1677, 35, 52, "Text"],
Cell[886377, 18090, 535, 18, 41, "DisplayFormula"],
Cell[886915, 18110, 3874, 93, 348, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[890826, 18208, 106, 1, 50, "Subsubsection"],
Cell[890935, 18211, 1676, 60, 92, "Text"],
Cell[892614, 18273, 1974, 37, 79, "DisplayFormula"],
Cell[894591, 18312, 1917, 35, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[896545, 18352, 223, 3, 50, "Subsubsection"],
Cell[896771, 18357, 2179, 45, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[898987, 18407, 215, 3, 50, "Subsubsection"],
Cell[899205, 18412, 1589, 56, 89, "Text"],
Cell[900797, 18470, 2927, 117, 227, "DisplayFormula"],
Cell[903727, 18589, 757, 17, 52, "Text"],
Cell[904487, 18608, 1663, 63, 136, "DisplayFormula"],
Cell[906153, 18673, 659, 16, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[906849, 18694, 173, 5, 50, "Subsubsection"],
Cell[907025, 18701, 509, 9, 89, "Text"],
Cell[907537, 18712, 2086, 61, 504, "Code",
 Evaluatable->False],
Cell[909626, 18775, 16, 0, 52, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[909691, 18781, 172, 2, 67, "Subsection"],
Cell[909866, 18785, 2131, 62, 240, "Text"],
Cell[912000, 18849, 1426, 50, 87, "DisplayFormula"],
Cell[913429, 18901, 400, 8, 89, "Text"],
Cell[CellGroupData[{
Cell[913854, 18913, 175, 5, 50, "Subsubsection"],
Cell[914032, 18920, 541, 11, 89, "Text"],
Cell[CellGroupData[{
Cell[914598, 18935, 221, 4, 60, "Input"],
Cell[914822, 18941, 1648, 45, 428, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[916507, 18991, 2378, 43, 131, "Input"],
Cell[918888, 19036, 2741, 52, 579, "Output"]
}, Open  ]],
Cell[921644, 19091, 196, 6, 126, "Text"],
Cell[CellGroupData[{
Cell[921865, 19101, 58, 1, 60, "Input"],
Cell[921926, 19104, 1413, 42, 428, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[923376, 19151, 1119, 23, 131, "Input"],
Cell[924498, 19176, 2224, 44, 543, "Output"]
}, Open  ]],
Cell[926737, 19223, 679, 13, 200, "Text"],
Cell[CellGroupData[{
Cell[927441, 19240, 994, 21, 131, "Input"],
Cell[928438, 19263, 2001, 41, 545, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[930476, 19309, 679, 13, 93, "Input"],
Cell[931158, 19324, 96587, 1608, 456, 75812, 1266, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[1027760, 20935, 16, 0, 52, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1027837, 20942, 509, 11, 135, "Section",
 CellTags->"conclusions"],
Cell[1028349, 20955, 2189, 41, 274, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1030575, 21001, 97, 1, 135, "Section"],
Cell[1030675, 21004, 347, 8, 39, "Reference",
 CellTags->"00004F53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
