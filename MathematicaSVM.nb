(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    916400,      19386]
NotebookOptionsPosition[    896439,      18823]
NotebookOutlinePosition[    901230,      18959]
CellTagsIndexPosition[    900350,      18932]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"$Path", "=", 
   RowBox[{"Join", " ", "[", 
    RowBox[{"$Path", ",", 
     RowBox[{"{", 
      RowBox[{"NotebookDirectory", "[", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Get", "[", "\"\<MathematicaSVM`\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}], "//", "Quiet"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
     RowBox[{"loadData", " ", "[", "\"\<banana.mat\>\"", "]"}]}], ";"}], 
   "*)"}]}]}], "Input",
 CellOpen->False,
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.600092953254756*^9, 3.600092955367569*^9}, {
   3.600093561777714*^9, 3.600093573991499*^9}, 3.6000936160971107`*^9, {
   3.600093655594242*^9, 3.6000936633743477`*^9}, {3.60041483141713*^9, 
   3.6004148351879187`*^9}, {3.600525085388228*^9, 3.600525090629882*^9}, 
   3.600528824845894*^9, {3.600543944567115*^9, 3.6005439558129797`*^9}, 
   3.600588170045826*^9, {3.600671000405999*^9, 3.600671016591625*^9}, {
   3.60067207858484*^9, 3.600672100077403*^9}, {3.6006724181907578`*^9, 
   3.60067243328294*^9}, {3.6375854261910458`*^9, 3.637585427189118*^9}, {
   3.6376592143569202`*^9, 3.6376592152032824`*^9}}],

Cell[BoxData["\<\"SVM Package Loaded\"\>"], "Print",
 CellOpen->False,
 CellChangeTimes->{3.637659327748053*^9, 3.6376596475574417`*^9, 
  3.6376713955967703`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["A hands-on introduction to Support Vector Machines", "Title",
 CellChangeTimes->{{3.41783940236821*^9, 3.4178394062050323`*^9}, {
   3.435291780155868*^9, 3.43529178092163*^9}, {3.468557035897552*^9, 
   3.4685570550125637`*^9}, 3.5442382141880083`*^9, 3.544238351303344*^9, {
   3.577353300017419*^9, 3.5773533139229527`*^9}, {3.5773537360629873`*^9, 
   3.577353752656562*^9}, {3.577360010706706*^9, 3.577360032241975*^9}, {
   3.5773623107856827`*^9, 3.5773623335992813`*^9}, {3.577366518781762*^9, 
   3.5773665255746326`*^9}, {3.6006674743663063`*^9, 3.600667515305976*^9}, {
   3.6006724810398617`*^9, 3.600672484136705*^9}, {3.60067811062516*^9, 
   3.600678199962726*^9}, {3.600678268573207*^9, 3.600678294242147*^9}, 
   3.601298617085761*^9, {3.6074354021223297`*^9, 3.607435406715845*^9}}],

Cell[" This file is part of the MathematicaSVM Software", "Text",
 CellChangeTimes->{{3.6375914910152884`*^9, 3.637591493596785*^9}, 
   3.637593842609106*^9},
 TextAlignment->Center],

Cell["Feb 3, 2014", "SmallText",
 CellChangeTimes->{{3.511439683975197*^9, 3.5114397034510307`*^9}, {
  3.544238057548271*^9, 3.54423806068119*^9}, {3.563082604004828*^9, 
  3.5630826078039503`*^9}, {3.5762506934144382`*^9, 3.576250700712188*^9}, {
  3.577360043793089*^9, 3.577360047111844*^9}, {3.587640689382739*^9, 
  3.5876406916604958`*^9}, {3.600522942653962*^9, 3.600522947743492*^9}, {
  3.600675320404994*^9, 3.6006753342597103`*^9}}],

Cell[CellGroupData[{

Cell["Marco Fornoni", "Subsubtitle",
 CellChangeTimes->{{3.577360037879161*^9, 3.577360051866151*^9}}],

Cell[CellGroupData[{

Cell["Abstract", "Subsection",
 CellChangeTimes->{{3.4685570921061563`*^9, 3.468557093653076*^9}}],

Cell[TextData[{
 "Nowadays computers can be trained to perform a variety of tasks, \
traditionally associated with intelligence. Recognizing people, classifying \
webpages, recognizing human speech, performing online trading, are just a few \
examples of tasks that can be performed by machines. \nBehind this very \
diverse set of abilities there is a branch of ",
 StyleBox["computer science",
  FontSlant->"Italic"],
 " and ",
 StyleBox["artificial intelligence",
  FontSlant->"Italic"],
 ", called ",
 StyleBox["machine learning",
  FontSlant->"Italic"],
 ", which deals with the problem of constructing and studying systems able to \
learn from data. In a ",
 StyleBox["supervised",
  FontSlant->"Italic"],
 " machine learning setting, problems are directly specified by sets of input \
data, with associated desired outputs. The goal of a learning machine is then \
to learn a mathematical model able to reproduce the desired output on the \
training data, while preserving ",
 StyleBox["generalization",
  FontSlant->"Italic"],
 " abilities on unseen data. This approach results to be very useful when the \
functional dependency of the output w.r.t. the input is not known, or is too \
complex to be modeled exactly.\n\nOne of the most successful machine learning \
tools that is widely used to solve classification and regression problems is \
called ",
 StyleBox["Support Vector Machine (SVM)",
  FontSlant->"Italic"],
 " ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ".  The key assumption of this model is that training and testing samples \
are generated i.i.d. according to an unknown but fixed distribution. Given a \
set of i.i.d.  training instances ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         StyleBox[
          SubscriptBox["x", 
           StyleBox["1",
            FontWeight->"Plain"]],
          FontWeight->"Bold"], ",", 
         SubscriptBox["y", "1"]}], ")"}], ",", 
       RowBox[{
        SubscriptBox[
         RowBox[{
          StyleBox["(", "InlineFormula"], 
          RowBox[{
           StyleBox[
            SubscriptBox["x", 
             StyleBox["2",
              FontWeight->"Plain"]], "InlineFormula",
            FontWeight->"Bold"], 
           StyleBox[",", "InlineFormula"], 
           SubscriptBox["y", "2"]}], 
          StyleBox[")", "InlineFormula"]}], 
         RowBox[{",", "\[Ellipsis]", ","}]], 
        RowBox[{"(", 
         RowBox[{
          StyleBox[
           SubscriptBox["x", 
            StyleBox["n",
             FontWeight->"Plain"]],
           FontWeight->"Bold"], ",", 
          SubscriptBox["y", "n"]}], ")"}]}]}], "}"}], "InlineFormula"], ",", 
    " ", 
    RowBox[{
     RowBox[{"where", " ", 
      StyleBox[
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "InlineFormula"]}], 
     StyleBox["\[Element]", "InlineFormula"], 
     StyleBox["X", "InlineFormula"], 
     StyleBox["\[Subset]", "InlineFormula"], 
     StyleBox[
      SuperscriptBox["\[DoubleStruckCapitalR]", "d"], "InlineFormula"]}]}], 
   TraditionalForm]], "Text"],
 " is an input and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["y", "i"], "\[Element]", "\[DoubleStruckCapitalR]"}], 
    "InlineFormula"], TraditionalForm]]],
 " is the desired output, a SVM predicts using a real valued function ",
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], 
     StyleBox["X", "InlineFormula",
      FontSlant->"Italic"]}], 
    StyleBox["\[Subset]", "InlineFormula",
     FontSlant->"Italic"], 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[DoubleStruckCapitalR]", "InlineFormula",
       FontSlant->"Italic"], "d"], 
     StyleBox["\[RightArrow]", "InlineFormula"], 
     StyleBox["\[DoubleStruckCapitalR]", "InlineFormula"]}]}], 
   TraditionalForm]], "InlineFormula"], "InlineFormula"],
 ", parametrized by a vector ",
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], " ", "\[Epsilon]", " ", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], TraditionalForm]], 
  "InlineFormula",
  FontSlant->"Italic"], "InlineFormula"],
 StyleBox[" and a scalar ", "InlineFormula"],
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "\[Element]", "\[DoubleStruckCapitalR]"}], 
   TraditionalForm]]],
 " (",
 StyleBox["bias",
  FontSlant->"Italic"],
 "). This prediction function ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"]}]], "InlineFormula"], TraditionalForm]]],
 " is chosen to maximize a quantity called ",
 StyleBox["margin",
  FontSlant->"Italic"],
 " and it is linear. ",
 StyleBox["Kernel methods",
  FontSlant->"Italic"],
 " can be used to extend SVM to the non-linear setting, without modifing the \
analysis and implementation of the method.\n\nThe goal of this notebook is to \
present the very basic theory of linear classifiers, max-margin classifiers \
and Support Vector Machines and to explore the use of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve the optimization problems that arise",
 StyleBox[".", "DisplayFormula"],
 " Following the presentation in ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ", this notebook explicitly derives, implements and compare several \
classifiers, demonstrating them on synthetic 2D-data generated by the user, \
with visualizations involving direct hyper-parameters manipulations. It can \
thus be considered a hands-on introduction to the topic."
}], "Text",
 CellChangeTimes->{{3.4178394136694803`*^9, 3.417839428740713*^9}, {
   3.435291790854022*^9, 3.435291847713936*^9}, {3.435291966315791*^9, 
   3.435291977441812*^9}, {3.435292037892099*^9, 3.43529205339745*^9}, {
   3.435292093987976*^9, 3.435292116665512*^9}, {3.43529216806837*^9, 
   3.435292168632934*^9}, {3.468557118215548*^9, 3.46855718512158*^9}, {
   3.46855721597228*^9, 3.468557850172822*^9}, 3.4685583296453753`*^9, {
   3.5114393871615458`*^9, 3.5114394394283047`*^9}, 3.5442380739013147`*^9, 
   3.54423811926757*^9, 3.544238181361961*^9, {3.544238219239573*^9, 
   3.544238219600222*^9}, {3.563082613137628*^9, 3.563082617149609*^9}, {
   3.576250708729867*^9, 3.576250710544142*^9}, {3.576250746308978*^9, 
   3.5762507601422777`*^9}, {3.577353720714952*^9, 3.5773537245951014`*^9}, {
   3.577353755031596*^9, 3.577353830618239*^9}, {3.5773540172759666`*^9, 
   3.5773541162480803`*^9}, {3.577354152066833*^9, 3.577354413093473*^9}, {
   3.5773544432664547`*^9, 3.577354529607409*^9}, {3.5773545645004063`*^9, 
   3.577354609881363*^9}, {3.577354646693754*^9, 3.577354719256816*^9}, {
   3.577354804577231*^9, 3.577354815180592*^9}, {3.577354859759325*^9, 
   3.577354878122208*^9}, {3.577354937657115*^9, 3.57735497397362*^9}, {
   3.5773551128436937`*^9, 3.577355124374435*^9}, {3.577355287847395*^9, 
   3.577355291745131*^9}, {3.577355331502981*^9, 3.5773555238018637`*^9}, {
   3.5773556441864843`*^9, 3.577355680529611*^9}, {3.577355764746146*^9, 
   3.57735603616667*^9}, {3.577356067609832*^9, 3.577356088698545*^9}, {
   3.5773566127012033`*^9, 3.577356646538927*^9}, {3.577357259521092*^9, 
   3.577357262049225*^9}, {3.577357426760705*^9, 3.577357749278442*^9}, {
   3.577357796111245*^9, 3.5773578084046593`*^9}, {3.577357892477436*^9, 
   3.577357900054429*^9}, {3.577357991703231*^9, 3.57735800683899*^9}, {
   3.577358336912718*^9, 3.577358356808399*^9}, {3.57735841721972*^9, 
   3.57735849711208*^9}, {3.577358566418222*^9, 3.577358587755087*^9}, {
   3.577358622872891*^9, 3.577358733602942*^9}, {3.5773587638068533`*^9, 
   3.577358768925439*^9}, {3.577358808147798*^9, 3.5773588098055563`*^9}, 
   3.577358901440624*^9, {3.577358941533095*^9, 3.577359165805587*^9}, {
   3.5773591962207117`*^9, 3.5773592177684097`*^9}, {3.577359248474031*^9, 
   3.5773593667376966`*^9}, {3.5773594331034393`*^9, 
   3.5773594896816797`*^9}, {3.577359523693625*^9, 3.577359534295063*^9}, {
   3.577359620018565*^9, 3.577359678937852*^9}, {3.577359798296011*^9, 
   3.57735998655851*^9}, {3.5773601049909*^9, 3.577360237113104*^9}, {
   3.577360270767872*^9, 3.577360311467051*^9}, {3.577360856695126*^9, 
   3.577360857977613*^9}, {3.577360929098216*^9, 3.57736095463447*^9}, {
   3.577361698337792*^9, 3.577361771468536*^9}, {3.577361809866765*^9, 
   3.577361875240674*^9}, {3.5773619792408257`*^9, 3.577361982504136*^9}, {
   3.577362428808133*^9, 3.577362524010764*^9}, {3.57736260183395*^9, 
   3.577362609007038*^9}, {3.5773631916012077`*^9, 3.577363194621887*^9}, {
   3.577363443192843*^9, 3.577363497664022*^9}, {3.577363577378818*^9, 
   3.577363580696754*^9}, {3.577363666202127*^9, 3.577363668237071*^9}, {
   3.577363743420475*^9, 3.577363761484745*^9}, {3.577363871084654*^9, 
   3.5773639581458473`*^9}, {3.577363993050496*^9, 3.577364010484871*^9}, 
   3.5773641351947107`*^9, 3.577364201631631*^9, {3.577364306749485*^9, 
   3.5773643334205103`*^9}, {3.57736441377666*^9, 3.577364488304467*^9}, {
   3.577364523400754*^9, 3.5773645248374968`*^9}, {3.577364582099708*^9, 
   3.577364591155931*^9}, {3.577364621168502*^9, 3.577364661622953*^9}, {
   3.5773647598942966`*^9, 3.5773648991330013`*^9}, {3.5773652346321173`*^9, 
   3.577365236397955*^9}, {3.577365302172237*^9, 3.5773653024409237`*^9}, {
   3.5773655683095427`*^9, 3.5773655851660433`*^9}, 3.577365637306139*^9, {
   3.5773656911417418`*^9, 3.577365717371419*^9}, {3.57736585258633*^9, 
   3.577365852839656*^9}, 3.577366675224243*^9, 3.577366729881351*^9, {
   3.577366799324977*^9, 3.577366807334918*^9}, {3.577366876537867*^9, 
   3.577366878036584*^9}, {3.577367027497939*^9, 3.577367034261444*^9}, {
   3.577367087240992*^9, 3.577367089335643*^9}, {3.577367169963922*^9, 
   3.5773671704316463`*^9}, 3.5998996090176907`*^9, {3.599899692790882*^9, 
   3.599899718820017*^9}, {3.5999117123308287`*^9, 3.5999117350698566`*^9}, {
   3.599911780274081*^9, 3.599911781937955*^9}, {3.5999118178722878`*^9, 
   3.5999118223204803`*^9}, {3.599924786788741*^9, 3.5999247907428427`*^9}, {
   3.5999824626267967`*^9, 3.5999824865906353`*^9}, {3.599982518201003*^9, 
   3.5999826042331457`*^9}, {3.6000003857849197`*^9, 
   3.6000003884372997`*^9}, {3.600667542168519*^9, 3.600667641114686*^9}, {
   3.600668540601487*^9, 3.600668595923644*^9}, 3.6006754649573*^9, {
   3.600675520062149*^9, 3.600675601239461*^9}, {3.600675681972083*^9, 
   3.6006757348788013`*^9}, {3.600678216351714*^9, 3.600678261538052*^9}, {
   3.6006783078520327`*^9, 3.6006783573405323`*^9}, {3.60067840334352*^9, 
   3.600678559458737*^9}, {3.6028560933902903`*^9, 3.602856093727703*^9}, {
   3.6074285100030327`*^9, 3.607428510388282*^9}, {3.637557072823853*^9, 
   3.637557119311878*^9}, {3.6375571727361917`*^9, 3.637557173731791*^9}, {
   3.637557208739818*^9, 3.637557209268497*^9}, {3.637573339934503*^9, 
   3.637573342011644*^9}},
 TextAlignment->Left,
 TextJustification->1.]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tIntroduction"
}], "Section",
 CellChangeTimes->{{3.5998938857987137`*^9, 3.5998939022215014`*^9}, {
  3.599894124600873*^9, 3.5998941509689074`*^9}, {3.5998942049690657`*^9, 
  3.599894208887265*^9}, {3.599895819252528*^9, 3.5998958414230003`*^9}},
 CellTags->"intro"],

Cell[TextData[{
 "As computers are applied to address increasingly complicated problems, \
situations arise in which there is no known method to build a model able to \
produce a desired output, from a given set of inputs.\nConsider the task of \
recognizing hand written digits. The goal is to estimate a function that will \
take numerical representation (e.g. a raster image) of an hand-written digit \
and that will output the identity of the digit in the image: 0, . . . , 9. At \
first glance, one would think that a possible way to address such problems \
could be to hard-code some rules to perform the recognition. Unfortunately, \
this approach would demand huge human efforts to analyze a representative \
dataset of digits and to find stable patterns that could be used for the \
recognition task. Moreover, due to the large variability in the hand \
writings, it may produce poor results when applied to digits produced by \
writers that were not considered during the rule making process. Finally, the \
skills acquired while addressing the digit recognition problem would not be \
transfered to other unrelated problems like, for example, automatically \
recognizing spoken words.\nA more modern approach to tackle such problems is \
to use machine learning to design general ",
 StyleBox["pattern recognition",
  FontSlant->"Italic"],
 " algorithms and to study their generalization properties. These tools could \
then be applied to any pattern recognition problem (such as the above \
mentioned digit recognition and speach recognition problems), with a \
comparably very limited human effort.\nPattern recognition algorithms make \
use of a set of training examples of the form ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"(", 
     RowBox[{
      StyleBox[
       SubscriptBox["x", 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"], ",", 
      SubscriptBox["y", "i"]}], ")"}], "InlineFormula"], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], "\[Element]", " ", "X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], "InlineFormula"], 
   TraditionalForm]]],
 " is a numerical representation of an input instance and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["y", "i"], "\[Element]", " ", "Y"}], "InlineFormula"], 
   TraditionalForm]]],
 " is an associated desired output. \nSuppose that the training examples are \
drawn from a given distribution \[CapitalDifferentialD] on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"X", "\[Times]", "Y"}], "InlineFormula"], TraditionalForm]]],
 StyleBox[". ", "DisplayFormula"],
 "The goal of a pattern recognition algorithm is to automatically learn a \
function ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["f", "v"], ":", 
     RowBox[{"X", "\[RightArrow]", "Y"}]}], "InlineFormula"], 
   TraditionalForm]]],
 " (where ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]]],
 " is a parameter, or a set of parameters to be estimated) able to produce \
the desired output ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " on each training example ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["x", 
     StyleBox["i",
      FontWeight->"Plain"]], "InlineFormula",
    FontWeight->"Bold"], TraditionalForm]]],
 " and to perform well on other (unseen) example drawn from the same \
distribution \[CapitalDifferentialD].\n\nOne of the most powerful and widely \
used tools to solve pattern recognition tasks is the Support Vector Machine \
(SVM) ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". Over the last 15 years, this class of algorithms have become the de facto \
standard in several fields. In this notebook we will present the basic theory \
of SVMs and present some simple implementations using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".\nAn outline of the notebook is as follows. In Section\[NonBreakingSpace]",
 
 
 CounterBox["Section", "linear_classifiers"],
 " we introduce the basics concepts of linear classifiers. Section\
\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:max_margin"],
 " presents the theory of max-margin classifiers and the resulting algorithms \
and implementations. In Section\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:svm"],
 " we introduce Support Vector Machines, the related optimization tools and \
several implementations. Section\[NonBreakingSpace]",
 
 CounterBox["Section", "sec:kernel_svm"],
 " finally discusses the usage of ",
 StyleBox["kernel methods",
  FontSlant->"Italic"],
 " to turn the SVM classifiers into non-linear ones, without any modification \
to the learning algorithms and the analysis. We conclude in Section ",
 
 CounterBox["Section", "conclusions"],
 "\[NonBreakingSpace], pointing out some possible extensions of this work."
}], "Text",
 CellChangeTimes->{{3.5998943087684813`*^9, 3.5998943271227007`*^9}, 
   3.599894407253346*^9, 3.5998948280174227`*^9, {3.5998951864442167`*^9, 
   3.5998951952238407`*^9}, {3.599896658295856*^9, 3.599896727209674*^9}, {
   3.599898813372349*^9, 3.599898816683291*^9}, {3.5998988627056*^9, 
   3.599898898867103*^9}, {3.599898937396241*^9, 3.599899016660832*^9}, {
   3.599899055552977*^9, 3.599899152596859*^9}, {3.5998992798243923`*^9, 
   3.5998993971280947`*^9}, {3.599899542183464*^9, 3.599899564379373*^9}, {
   3.599911881099936*^9, 3.599911974310871*^9}, {3.599921388866708*^9, 
   3.59992147049356*^9}, {3.599921722923037*^9, 3.5999217446395407`*^9}, {
   3.5999217874217176`*^9, 3.599921801417346*^9}, {3.599921897618664*^9, 
   3.599921905508203*^9}, {3.599921954931614*^9, 3.599922668857256*^9}, {
   3.599922705859602*^9, 3.599922924914104*^9}, {3.599922955624147*^9, 
   3.5999231184498*^9}, {3.5999231516651506`*^9, 3.599923241315639*^9}, {
   3.599923271374123*^9, 3.599923528304927*^9}, {3.599923562720948*^9, 
   3.599923778621764*^9}, {3.599923847071067*^9, 3.599923922580636*^9}, {
   3.599923962088328*^9, 3.599923988851654*^9}, {3.599924043221188*^9, 
   3.59992432636644*^9}, {3.599924358925447*^9, 3.5999244579349737`*^9}, {
   3.5999245088907957`*^9, 3.5999245206387987`*^9}, {3.599924565204747*^9, 
   3.5999246010434227`*^9}, {3.599982401872068*^9, 3.5999824378881817`*^9}, {
   3.6000004010460987`*^9, 3.6000004116739187`*^9}, {3.6006681285910587`*^9, 
   3.600668182653831*^9}, {3.600668232106468*^9, 3.600668284999237*^9}, {
   3.600668330536263*^9, 3.600668478955243*^9}, {3.600675783976914*^9, 
   3.6006758428460817`*^9}, {3.600675894162828*^9, 3.6006760349611263`*^9}, {
   3.602856353983424*^9, 3.602856355009945*^9}, {3.607428556074897*^9, 
   3.607428569902584*^9}, {3.607428954011552*^9, 3.607428974018379*^9}, 
   3.610027973954509*^9, 3.616701571920931*^9, {3.637557258513633*^9, 
   3.6375573888018293`*^9}, {3.637557425528923*^9, 3.637557456285863*^9}, {
   3.6375575215561743`*^9, 3.637557573154581*^9}, {3.637583943040402*^9, 
   3.637583964267373*^9}, {3.637584066449935*^9, 3.637584067015843*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tLinear Classifiers"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.59989587689098*^9, 3.599895892048147*^9}, {3.599895942273438*^9, 
  3.599895956106649*^9}, {3.599983213882422*^9, 3.599983223053462*^9}, {
  3.5999952940499563`*^9, 3.59999533593959*^9}, {3.600001907096558*^9, 
  3.600001907988482*^9}},
 CellTags->"linear_classifiers"],

Cell[TextData[{
 "Suppose we are given a set of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " training examples ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["S", "InlineFormula"], 
    StyleBox["\[Congruent]", "InlineFormula"], 
    RowBox[{
     StyleBox["{", "InlineFormula"], 
     RowBox[{
      StyleBox[
       RowBox[{"(", 
        RowBox[{
         StyleBox[
          SubscriptBox["x", 
           StyleBox["i",
            FontWeight->"Plain"]],
          FontWeight->"Bold"], ",", 
         SubscriptBox["y", "i"]}], ")"}], "InlineFormula"], 
      StyleBox[",", "InlineFormula"], 
      StyleBox[" ", "InlineFormula"], 
      StyleBox[
       RowBox[{"i", "=", "1"}], "InlineFormula"], 
      StyleBox[",", "InlineFormula"], "\[Ellipsis]", ",", "n"}], "}"}]}], 
   TraditionalForm]]],
 " drawn from a given distribution \[CapitalDifferentialD] on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"X", "\[Times]", "Y"}], "InlineFormula"], TraditionalForm]]],
 ", where:"
}], "Text",
 CellChangeTimes->{{3.5999833201968613`*^9, 3.599983333359153*^9}, {
  3.599983411766436*^9, 3.599983429731062*^9}, {3.599983469021221*^9, 
  3.599983699442152*^9}, {3.599983985304085*^9, 3.599983987420415*^9}, {
  3.599984055365138*^9, 3.599984095786604*^9}, {3.5999841276182547`*^9, 
  3.5999841634915257`*^9}, {3.5999841954486227`*^9, 3.599984283340876*^9}, {
  3.599984338350649*^9, 3.5999843408194103`*^9}, {3.599984373328288*^9, 
  3.599984388233059*^9}, {3.599984566838851*^9, 3.599984567148521*^9}, {
  3.599984694295349*^9, 3.599984694951599*^9}, {3.5999954171135883`*^9, 
  3.5999954338568573`*^9}, {3.599996209204809*^9, 3.599996266625684*^9}, {
  3.599996305172275*^9, 3.599996367763781*^9}, {3.599996444071846*^9, 
  3.599996462310013*^9}, {3.599996661334001*^9, 3.59999666841422*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  StyleBox[
   RowBox[{
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], "\[Element]", "X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "\[Element]", " ", "Y"}], ";"}]}], 
   "InlineFormula"], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.599996715715584*^9}, {
  3.600000424125843*^9, 3.600000430480761*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
   "X", " ", "is", " ", "called", " ", "the", " ", "input", " ", "space"}], 
   ";"}], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.599996714110073*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"Y", " ", "is", " ", "called", " ", "the", " ", "outcome", " ", 
   RowBox[{"(", 
    RowBox[{"or", " ", "decision"}], ")"}], " ", 
   RowBox[{"space", "."}]}], TraditionalForm]], "Item",
 CellChangeTimes->{{3.5999966697937927`*^9, 3.5999967110155077`*^9}}]
}, Open  ]],

Cell[TextData[{
 "In ",
 StyleBox["binary classification",
  FontSlant->"Italic"],
 " problems (problems with two classes), the decision space is defined as",
 Cell[BoxData[
  FormBox[
   RowBox[{"Y", "\[Congruent]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], TraditionalForm]]],
 " and a ",
 StyleBox["linear classifier",
  FontSlant->"Italic"],
 " can be defined in the following way:"
}], "Text",
 CellChangeTimes->{{3.5999833201968613`*^9, 3.599983333359153*^9}, {
   3.599983411766436*^9, 3.599983429731062*^9}, {3.599983469021221*^9, 
   3.599983699442152*^9}, {3.599983985304085*^9, 3.599983987420415*^9}, {
   3.599984055365138*^9, 3.599984095786604*^9}, {3.5999841276182547`*^9, 
   3.5999841634915257`*^9}, {3.5999841954486227`*^9, 3.599984283340876*^9}, {
   3.599984338350649*^9, 3.5999843408194103`*^9}, {3.599984373328288*^9, 
   3.599984388233059*^9}, {3.599984566838851*^9, 3.599984567148521*^9}, {
   3.599984694295349*^9, 3.599984694951599*^9}, {3.5999954171135883`*^9, 
   3.5999954338568573`*^9}, {3.599996209204809*^9, 3.599996266625684*^9}, {
   3.599996305172275*^9, 3.599996367763781*^9}, {3.599996444071846*^9, 
   3.599996462310013*^9}, {3.599996661334001*^9, 3.59999666841422*^9}, {
   3.600676055582761*^9, 3.600676093519527*^9}, {3.6028563850033283`*^9, 
   3.602856385365007*^9}, {3.63756005606686*^9, 3.637560057624992*^9}, {
   3.637560217609866*^9, 3.6375602187926617`*^9}, 3.637560309064089*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox[
     OverscriptBox["y", "^"], "i"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}], ")"}]}], "=", 
   RowBox[{"sign", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["f", 
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], ",", "b"}]], 
      RowBox[{"(", 
       StyleBox[
        SubscriptBox["x", 
         StyleBox["i",
          FontWeight->"Plain"]],
        FontWeight->"Bold"], ")"}]}], ")"}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.599984391909471*^9, 3.599984400633883*^9}, {
   3.599984585296199*^9, 3.599984662219262*^9}, {3.599984803758453*^9, 
   3.599984813777051*^9}, 3.5999954402745743`*^9, {3.637557831401524*^9, 
   3.6375578562072363`*^9}, {3.6375593933864117`*^9, 3.637559394153325*^9}, {
   3.637559476361559*^9, 3.6375594822094307`*^9}, {3.637559798022852*^9, 
   3.637559798718795*^9}, {3.637560777886765*^9, 3.637560800588523*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["y", "^"], "i"], TraditionalForm]]],
 " is the predicted label for a given sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 ", using parametes  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}], ")"}], "\[Epsilon]", " ", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"], "\[Times]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]]],
 ", while ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], 
       StyleBox[",",
        FontWeight->"Bold"], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["b",
        FontWeight->"Plain"]}]], ":", "X"}], "\[Rule]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]]],
 " is a parametric linear function, defined as"
}], "Text",
 CellChangeTimes->{{3.59998470550469*^9, 3.5999847184918623`*^9}, {
  3.599995380838723*^9, 3.5999953847721653`*^9}, {3.6375579352423964`*^9, 
  3.6375579531649437`*^9}, {3.637559089793523*^9, 3.63755918088489*^9}, {
  3.637559225614257*^9, 3.637559314737771*^9}, {3.637559389430121*^9, 
  3.6375594510826883`*^9}, {3.637559492836709*^9, 3.6375596551386023`*^9}, {
  3.6375596967675*^9, 3.637559709104871*^9}, {3.637559762603465*^9, 
  3.637559764617177*^9}, {3.637559805293641*^9, 3.637559855297859*^9}, {
  3.6375598982607594`*^9, 3.6375599401862307`*^9}, {3.6375602460849648`*^9, 
  3.637560282315172*^9}, {3.63756032571612*^9, 3.6375603329679117`*^9}, {
  3.637560407198728*^9, 3.637560416593088*^9}, {3.637560824370755*^9, 
  3.637560839111212*^9}, {3.63756323623885*^9, 3.637563275448161*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], 
   RowBox[{"(", 
    StyleBox["x",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["x",
     FontWeight->"Bold"]}], " ", "+", 
   RowBox[{"b", "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.599984726788556*^9, 3.5999847764296103`*^9}, {
   3.5999848163245077`*^9, 3.599984820955571*^9}, 3.599995450163426*^9, {
   3.637559663616598*^9, 3.6375596641818447`*^9}, {3.637559859958955*^9, 
   3.637559861838345*^9}, {3.637560845157565*^9, 3.637560845442911*^9}}],

Cell[TextData[{
 "We refer to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " as to the ",
 StyleBox["scoring function",
  FontSlant->"Italic"],
 " of the linear classifier, as it provides a classification score for each \
sample. For brevity, we also sometimes refer to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " as to the classifier.\nThe geometry of this simple classifier can be \
understood by looking at the 2D visualization in the following figure. The \
points whose vector projection on ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " is grater than ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "b"}], TraditionalForm]]],
 " will be positively classified, while the others will be negatively \
classified. The equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], "+", "b"}], "=", "0"}], TraditionalForm]]],
 " thus defines a (hyper) plane separating the positively classified points \
from the negative ones.\n"
}], "Text",
 CellChangeTimes->{{3.5999848374383993`*^9, 3.599984853455332*^9}, {
   3.599984885735837*^9, 3.599985006272943*^9}, 3.599992786541381*^9, {
   3.599992831736384*^9, 3.599992906070362*^9}, 3.5999929741867743`*^9, 
   3.599993588724721*^9, {3.599993630655571*^9, 3.599993638290903*^9}, {
   3.5999938017619667`*^9, 3.59999385156149*^9}, {3.599993899101679*^9, 
   3.599993967704577*^9}, {3.599994078570162*^9, 3.599994083576499*^9}, {
   3.599994142489312*^9, 3.599994222918152*^9}, {3.599994259188177*^9, 
   3.599994278147274*^9}, {3.599995387200259*^9, 3.599995394053111*^9}, {
   3.599995470257247*^9, 3.5999954848046083`*^9}, {3.599998898143688*^9, 
   3.599998898467804*^9}, {3.600676141246665*^9, 3.60067615059121*^9}, 
   3.601386017267371*^9, {3.637557676688958*^9, 3.637557678075529*^9}, {
   3.63755771390899*^9, 3.6375577407034397`*^9}, {3.637559459727026*^9, 
   3.637559461548736*^9}, 3.637559530016273*^9, {3.637559659615926*^9, 
   3.637559660778345*^9}, {3.637559864308524*^9, 3.6375598839855556`*^9}, {
   3.637560000137486*^9, 3.637560016566737*^9}, {3.637560094699978*^9, 
   3.6375601526531*^9}, {3.637560284909622*^9, 3.637560306533741*^9}, {
   3.6375603436605043`*^9, 3.637560377416593*^9}, {3.6375608302942247`*^9, 
   3.637560842871337*^9}, {3.6375609618068333`*^9, 3.6375610182851067`*^9}, {
   3.637561053747444*^9, 3.6375611560891867`*^9}, {3.6375611945261307`*^9, 
   3.637561283777487*^9}, {3.637563188260047*^9, 3.6375632205032263`*^9}, {
   3.637563290262705*^9, 3.637563339425099*^9}, {3.637563445093539*^9, 
   3.637563459392502*^9}}],

Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
2b6+vrVq1Tpw4MD169c15U4WH02HDh1q1aoVJXbK9tJflbz++uv0egrq3LQu
iV1+nC6lkeEBAABAK2tg57vzt0ppqKcFeHBHjhyxsbGR9nYVJ/OCgoJXXnmF
x5nhuvfatWvTY7169Xbt2iUXy/RitXQNByMAAAAwXXdUhASAijl58mStWrX2
798va3g0GG5+FxTRvby8ZJRIivq8MGLEiJSUFG51l+iuIbcDAADA7aQWFyEB
oAJu3bp1+vTpBg0a+Pr6aqX9SdVDiZc5k/OLP/zwQ66TkQFnOMl/9tlnUjDD
jyhaAwAAAFFQUJCWlqZrFQSA+1dSUhIWFtayZcuQkBCpUb/7VXBqaurIkSN1
48wQHx8fbrSXnE+/jX8VH6TSFI+6dwAACyOdm1SGZxNdebOGkglrQmEgKytL
HUkGTXwAD+rChQvNmzc/d+7cfb6ej7Lt27c3bdpU2ttlzJkJEyZcu3ZNU+6F
0es5t2PIVgAAy6N+w2tlX/KGo4XcKZwjt1uVgoICXkALHkDFREdHu7i4BAcH
S66+y/WvWjlz5cqVd999l0M7z7LKkzQ5ODh89913Wll7u/rbdF/vAABgAdT2
c+32kUOEmtN0rwfrIZ87GvEAKiYhIaF9+/ZpaWn89J6hWr5v6ZGOu7CwsG7d
ulF6p7jOAZ6WbWxsnnzyydDQUHk9vVJK2vB1DQBgSW6VkXAus3vw97/6MvUF
YD04Xej2ELTjATyopKSkxx577D7vWMkhJgv8PfzTTz85Oztzq7ug9D558uTC
wkJ+JX914xIbAMCSqAMaSLcmXSy/U0rnMwhKZayBNOLpBoQ04iYBmKO4uLge
PXpo991vVNfJVM3hr732mmF/VVdX1x07dqhNMYjuAACWR77buZcTZ3VuupF/
opzGQw0baRvB+NDSDvAwEhISfHx8NIO7V3fCJevqyDNSA1NcXBwaGtqzZ09u
eKcM7+joyEl+4MCBGRkZOFoBACyP2gu1oKDgwIEDc+fO/eijj+bNm7ds2bKr
V68GBQXNmTPn7bffnjVrVn5+PkYCBPRLBagAitCJiYnc3l7uzU0d9UAr96Ar
KfXZZ5/ZlNK1vc+fP5/bYQAAwDLwWYNb1HkksYiIiObNm/NoY4MGDdJKZ+6j
p7Vq1XrrrbcKCwvVSktuC0J7jjXApOoAD4m+LWNjYzt16lQpv40PSW5IoV87
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
euaZZ2i5bdu2a9eu1Up3RfVTAwAAAKgUFB2TkpJ69+599epVzTy71OlKjsmh
Q4coR3Xt2lXWpKWlcZv26NGjtdLmbvU3VFsdsuFgj7QmIiLiqaeeos2jbeYB
3tmf/vSns2fPyuapVxxgXGPGjOHP6Oeff6ZP8K9//Sst85j8ajcE1LcDAABA
5UpPT6fczrFQN+mnueCwxGmclps2bUo5ys/PT1ZSuFq9ejVnLQ7D3CJabX+p
lMdoSuG9+m7/+uuvdevWlZoZmWv1iy++UAv1wRTQweLu7k6f0dChQw8fPkwf
2S+//KKWu9+p9B0AAADgYaSkpHh4eCQkJJhpaNf1M92+fTunX/q7+AWce+Pj
47kKZezYsbzeKINelju/Eud5SoMzZsyQ9nYZKPLRRx89ePBgdW4k3NOGDRv4
Csve3v65555Th99Xhx4FAAAAqERJSUlt27al3G5YcGJ2aMtfe+01jruZmZlc
Vc4J6sqVK/Xq1aP13bt3l9jM434Y/e9VLz18fX29vb3VJnfOh2+++ebly5fV
Qia146p2e+dcs7v4MhfqoKMU17nKfffu3fIRyCsxbqc50l1QG/2bAQAAQCc5
Ofmxxx5TG9vNcbxBKVmfNGkSt1RzvbEoLCz08PCwt7enRw7zpvNnyiDt/CnQ
pn711VcODg48xSr9LVz3Xr9+/TVr1ugmitK17hpOLAWViC+O+PPas2cPX1j9
9a9/lReog/Dj/TdHN8rINRo+RwAAMBFFRUUpKSl9+/bVDEZTNBfq1tLZdunS
pZymAgICrpfSysJt27ZtbW1t//SnP+n+TCO2TnO6lg2gqw/pzEjLL774Iv8t
jo6OUj8zYMCAM2fOaMqg9PzjlPb53oG0yaPVvSpwQzq9vX369KHdia4E6XHH
jh2aQbduvP/mSL3teKuMcTcJAABApKWl+fj4UBox0/p2JjE1Li6O8+2bb77J
/8Qn4tzcXB4N8tdff9Vun4nJFP5kXfueRIWwsLAePXpIkztFRG6Bnzp1qtr5
0TBaYDCTqiA9oP/1r3/RZ3Hq1KlOnTrRx9GqVaucnBwNLe0WgY4stQjNFL4f
AAAAWEJCQteuXeU8ZV4lnerWcgEJ/SGDBw/mfp3x8fGSz//3v//Z29u3bNny
2rVrmmlkda10+2VLDOt2eOPpBZ999lmtWrXU/qoUGikrbtiwQV5MYVJtftdM
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
tHXrVt0MXPfcK9RdKyUlhX8hXQXwv/IoNwAAAFCJTpw40aVLF57sntcgxVkS
+jTVme5nzZp1/PhxzWDmSgz6YWHu0tBNGXvUqFEcs7n0nZP8sGHDzpw5c5+D
wXJjPv8vtF+98sor3Ok1NTWV/4nds90eAAAA7hOdUoOCgh5//HF+Sukdod3C
6DoPSojiZlKpdsB4fdZAPnR63LNnT6tWrXhiJhlzhoL3v/71r3v+HrVlnh4P
Hz7Mv2fJkiWyF8mFA/YrAACAyhIVFeXj46MpLWM4z1oY3Zh++HyFWtHNOVOO
Aqks4noPiykeU7udpqWlffDBB9LezkPBkG7dum3bto1fo9tb1B1Jkrm3tzf9
Bjc3t2r5CwAAAKwUnZTDw8O7du1q7A2BKsTDcWsWFD4rkZRhG745uj7altRl
Wy5PKHvHxMQMGzaMh4iU6G5jYzN48GB1eFi1F7OmFNJs3bqVS25+++23av87
AAAArEtUVFSPHj2kpR31EpZEZtI5e/bsuXPnNDS2367cKC59LWlBSrUto37s
LoVwq1atcnZ2lv6qjo6OPMz7V199RW+CvCe6aqucnJy6detS2n/mmWeq7a8A
AACwWhcuXOjTpw/inAW7du1aixYtvvzyS2NviClS70S8//77o0aNev755/v2
7Tt8+PDTp0/zCyxsaBSZGVm3/tKlS5MnT5Ymd657p6deXl7h4eHys2p7+4wZ
M/jFkZGRlnFpAwAAYMpiYmIGDBhg7K2AKvTRRx917NhRZsNEvlJxCk1OTm7d
ujVl1J9++snf33/t2rXc7Dx79mx+mdQamTV1ZCFZyVFc/sBdu3Y9+uijMkok
V7+Tt956q7i4WO5E0EJsbCy9jP7pww8/NMqfAwAAYG0iIiIGDhyoKb0XLamO
FyhrURA9f/48P0WJu4qrwkiXLl0ooB48eJDfHzoE1q1bZ1tq06ZN/GILyO2a
UjolT9Uwz8uXL1+eN2+eNLlLeq9Xr97OnTu1sku/oUOH0vpGjRpxB1VMsQQA
AFClKIqcPHmyZ8+eGEnGUqnjtyNZlWv58uWUz729vTUl1tJC165dKZe6urqq
pd0WQw3w8idrpVd2/D2QkJDQt29fHhySB5zhuvfhw4fn5OT8/PPPPPXqypUr
MUg7AABA9Th06FDnzp11Y0SAZZDBDNVYhYgleIfv1asX5c9Ro0bxU7nx9PXX
X3O5yO7duy0jtKsfvW5+ZL71ILdj5F9/+OGHOnXq8PugNr9zGfzQoUOr9y8A
AACwXnR2PnXqVKdOnS5fvqyVndaR68yOesFl2DjMg6LISCD4fHV4HJWXXnpJ
bXYmR44c4aS6YsUK67yk5X0pPT199OjR0uQuY844ODhMnz5dLvl1XQCwvwEA
AFQuOqWeOHGiR48eam4HsyMNxTJ5ED1u2bJl4cKFulmE8BGr6H2jd4anDe3d
uzevpMDJb1dQUBCtr1279pw5c4y6mcZUUFDAC/RF0b9/f2lpp9DOGX7s2LG5
ubny+ltlLLK4CAAAwLgOHTr0xBNP8JkXoc58qbXK9DlmZ2d37Nhx3rx5nOTV
3I4opaL3p3PnzjY2No0aNVL3f8qrISEhnE43b96sWeXRIX+y7EUrVqzguM7v
jKOjIz02bNjw66+/ltdLNwq10ysAAAA8vO3bt/fr1y8rK0uzymRiGbiFU43u
R44cGT58OCcotWIBH7FKNwh5TEyMpnTMXLNmDa1s3bq13M4w7tYahfRr5rs5
9BgWFjZkyBAeYUYCPF34dO/enUe8Z9dLaegNDQAAUHl+/fXXxx///9g77/go
qi7uP6SCCIr0BJUQCEIoIfQWQAFFQdEHRQQsFBuCgkpRbGABVBBQUQSlWpBe
jBQpgkSkg/QWCB1CII0EH5n3vDnvnvdkZncTAsm23/eP/czOzszenZ177++e
e+45TU6dOmXKYw48Dvb64G1ZYCgxt+UYF5TMjaGbc+TIkeDgYHZx1w//Pffc
Q9J03Lhxhq/6e/DdsOu4vmzZspIlS+ookRw286233kpMTDSU75aLyg4AAAB4
IVOnTm3QoMHZs2dFmaCr9Ti0IZ02eCGqowOAIM/8nDlzWH++//77NNJJTU0d
MGAAvX3uueckortLS+oy+IfL0I82xNWKblT//v05K5MsVqXXChUqLFiwgA7I
yMjAgwcAAADcQL777jvS7cnJyehePRe7qpI9Z+RV9iP1kkaClq9evbpZs2aF
Cxdu3LhxTExM3bp1x4wZo4/x8QpCN8H65NCjdfz48Tp16vzHwhNPPHH69GlD
aX4AAAAAXCdTpkxp2LAh98g+rkw8GlZHly9fXrRo0aVLl3inyffJlCsTGGrt
JL/Gx8evX79+27ZtOouoz9YOJ0+LlvH0vNHwv3jx4hxqhqDhD72WLl16xIgR
BVVYAAAAwPuZP39+y5YtDVsfbbLNAndDJ/Q0lOzk1X+ff/55vXr1eP2ga8sJ
vB7tA0MaPjU1tXPnzqzbOe49y/ioqCgaCukTJaGAXS8aPLrXgwy19GhUg+kP
AADwXKiLjI2NjYmJMXzYg9eD0P+R9f9KSUkJCwubPn26oy4bgBuCxCbSi2LY
/L5y5cpGjRrxSlX2eOeYMy+88AJPA5l0I53FtgLEO7ohHDhw4OzZs6zeOSsH
jeKtDQLUOwAAeCKcd6lp06auLgjIFdwdZ2Rk6J2SWYk+XbhwoRwJ3Q7yCUms
bJXZHEXzk08+4dDuot5po1ixYkuWLDFsD6d42pjCvOO5zTPnzp3r1KlTmTJl
7rzzThrCv/LKK7SzR48e5cuXL1eu3MCBA6np4LsNfzkAAPBQdu7c2ahRI94W
L2iXlgjkCu5/RTjpbdLw+BOBC6HHjxqW7t2760CRHHamadOmHCjSpPnZeg97
+3WSlJRUs2ZNvuGzZs2iPSNHjgwICHj66adTUlIMuCEBAICHc+jQofr16/M2
dLubY1pEaahQJ9rL3bDE3AYg/xDJzVZcWcZLrFq1KiQkREJEysLVd999l881
tTZ4aK8H9n45d+5cYGBgcHDwww8/nJGRER4eXq1aNdN9xnwcAAB4ItRLHjly
pE6dOq4uCLg2RL2zUNf55WUGHBII5BMm27h2TTc5TvOD+t577+k4Myzjy5Yt
O3v2bD6MH13TAwyuFWkWvvnmG77JkZGR/v7+nAjYsA2pkMEWAAA8FNbttWvX
NiDzPAG9DFBEOymlPn36pKamSiwga94lAG4sJqd07a/1vyxEwHN0owsXLjRt
2lRWqop6f+KJJ+Lj4w1lpS/wn+Jt8J1v1qxZQEAAifZPP/1UD6ZkbYLLygcA
AOA6oE6Tdbt4XKBJd1usCYCoR54wYUJ0dLQ+wEC8CJD/mOzthsXpRa9/5Afy
xx9/LFKkiISIZI93kpfDhw+XOLQF+hu8C6n1dOc3bdrE46MBAwbITsP2r5nW
tgMAAPAUDhw4UK1aNUM5t8Pv0W0xKXbeePfdd5cvX67NlRDtwA3hxzIpKemp
p55iSUnqnSO9E7Vr196wYYMsqbY+6lrS8zbHUCron+HGSNNNt4WGQnxvaXC0
aNEi3s+thH4FAADgWRw6dKhmzZquLgXILabEWOyEIPH0RM+4rHwA2IN9uvhB
pad06dKl4eHhYnKXaDOPPfYYRx03Odukp6cbyrBv1fDAsOl2uiH79u0rVKhQ
7969IyIiaKNatWpyJ9mJDjcNAAA8lMOHD0dFRfE2GnOPgHtesUyKaNez5AZc
WIG7wk4a9Hy+8cYbbBPmVw75XrRo0a+++koO5kbJrlc2P/AYpWpofEQNwu23
3166dGl6S+Mjns744IMP+O6JmR32dgAA8ET27dtXs2ZN7hyh99wckSimPldC
8BmIAAncDwlgoj1eeG11QkLCAw88ILmZJFxkw4YNN2zYYGQ9z6Ylq7QBrW4X
vrGDBg2i27hq1Soj68536dKFh0VbtmzhrFgGUjwAAIBnQm34tm3bSLcjmIOn
IF4x8fHxx44dM2kYWZ6AvxK4FfTQytBSz+vx5NHSpUtLliwphnfxfu/fvz8f
xiKfnWcMNbukfWkA3aXPPvuMbl3Lli3pbVpaGr0uW7aM72fx4sXXr1/PR0K0
AwCAhxIXFxcdHS1+p64uDnCG/EHnz5+///7758yZw9b1f7IwpUx1XTEByAY1
L6b0vv+zYdhmiy5evNivXz/tMMPbZcqUWbJkiUww2V24ChgayDdp0qRUqVIP
P/wwLxOguzRy5MjIyMhq1aqFhYX16NEjMzNT3OBdXV4AAADXzK+//lq7du30
9PR/baBDdH/mz5//6KOPpqWlWTtfeBEAN0RaFdGNhvKfkSCQa9asIYUpot3f
358jRj722GP0VMvKDiQXswvdjbNnz6ampiYmJho2lzl65VW9hgr/COd2AADw
RKhJ//HHHyMiIpKSktAVegQcUmPLli0HDhzgPToZkz4SIZqBmyCrSuVZ1fYB
HZaQW6HRo0eXKlVKHGbEeWbkyJE6HAqSTVjRawd4jx4xGVmjHtw0AADwUKht
//DDDyMjI3lSFV7u7oaWN6ZkqYayUrqqeADkB6QtqUXq2LGjLFPlDaJhw4a7
d+82smdolbMMe8HeAQAAAK/ho48+uuuuuy5cuGDYekAsWXI5euikTWccvN00
sIJEAd7Kzz//fOedd/IaVS3g+/TpIz4zhvL6EJ95QznhAAAAAN4B9XFDhgy5
/fbbz549a0roA1wL/R2cU8m0X2t4A4Ms4KXQky9e2R9++CEb22XJKhEWFrZ8
+XLDJt11ZdG5DAAAAACvgTq4oUOHhoeHp6amwtjuPmijOtvbeU9sbOzLL7+s
M9FgtAW8EtMs0q5du+655x6W7kRwcDCb3++99959+/ZZ3cZQKQAAAHglH3zw
QUREhCnVJnATOGa1vG3VqtUbb7xhqBypLisZAPmG6HBeWy0rrBcsWHDzzTdz
eiZ2mOGAM59++qmefmIXGtQOAAAAXgavSw0JCUlLS4OFyq0wGdJTUlIOHDjw
0EMPJScnG8p3F+IEeB+S/1fsCRzdlB57qgg9evQoXLjwf7JTq1atNWvWoBED
AADg3Xz++eehoaE6ZiD6PvdBB2MnJUOiRVxoEOYReDF6HYcenPLbU6dOVa9e
nQO8i/mdePrpp5OSkvhIhCgHAADgfXz77bdhYWEyMQ3R7iZYwy+b4l0j6SHw
YqyPvaw2vWpj2rRpZcqU4WgzrOHp9dZbb/3www8h2gEAAHgf1BUuWrSoRIkS
iJnmbojw0KlqXFccANwLrg6nTp164YUXRLqL33t0dPS2bdtE4Rsq95O+iGSs
QAonAAAAHkFsbGyZMmU4iR73XNCHLkece/kf2bt3LwZWAPybhWlncnLyqlWr
oqKiAgMDZbEqR57p2bNnfHy8kT2jnI7xjrYOAACAZ0FdXlhYmN4Du5M7wMGr
6b9YsmTJ7bfffvLkSVeXCAB3gR1mdLQlUuYfffQRu8qwaGcLfLFixagGcZum
reuGbfUrXQrRmQAAAHgE1G0tX76cdTu6LfdBD52qVq06ePBgLD0AwLDkdDZ5
vxw+fLhDhw4i2jnLakBAQIsWLfbt28fHWAO8Y54RAACAR0Ad1sqVKyMiIgyb
Vwb8PN0EFuqkJWbOnGlg/SkAWYiXyz9Z6LAzsiRk4cKFpUqVYl93Eu3iPDNk
yBC5Dp9Ip/AG8qsCAADwCNauXRsZGWkoyxV0u3sC6Q6AYQnwyNmE9adERkYG
qXSW7oGBgZJotWrVquvWrRNHdz5Fe7wDAAAAbgt1eUuXLg0PDzcgC90SPXeP
8RTwcXQbZWqvOEeqqY7s27evadOmrNiDg4Ml4MyTTz55/PhxPkuug/oFAADA
/Vm2bBnpdklQCPXuDmiHW36FqADAUCFlrC2VXl4q8Zeo4nz++ec333yz2N55
o0iRIiNGjOBj0OgBAADwFL799tuqVasaNg9P+HkWMDoCpw5PN3jw4C1btuj4
dQCAa0Xc1znMu4maNWuuX79eH48F4AAAANwWkoUTJ06sWLGiAaOTKxDjoWlZ
wZw5c0qXLn3kyBHTwQVcPAA8Gm7TxAH+t99+q1GjhtVt5vnnn09ISDCyu8rz
tkxEAgAAAO7AzJkz2U+G38LWVJBoKa79Ybp169avXz/en5mZaTfdDADAOSy5
edIqIyPDyKplY8eOlQxNIt1vvfXWJUuWWMPCAwAAAG7F9OnTb7/99rS0NMNm
/oVELGBYJ4hPu6RJ1WHu8KcAkGe4folR4vTp0zExMYULFxbDO8d7f+CBB7Zu
3WpkSX2qfRJw0pVFBwAAAGyQGpw0aVL58uUTExMNGNtdgVYFTqLHmILdAQBy
Ay9QFYcZQ0V6nz17dlBQkClQJPHBBx/oc6HbAQAAuA9ff/11hQoVzpw54+qC
+CgSxkdEOzvG8DZP7ktwDABAntH1iKU7vfbu3Vv7zHCepqioqF9//dWAaAcA
AOBOkD787LPPQkNDExIS4IlR8IgbLfspXbx48cKFC7yHFbuRZXhnvQF7OwB5
w26KJaliq1evrlevHkt3emWfGeLFF1/ksPAAAACAmzB27NiwsLATJ05Atxc8
2vuFxPnrr78+aNAg6zGmDQBAbqDKJWFh7C69l9SrdNjw4cOLFi0qJnd+DQ0N
nTFjhguKDgAAANhjwoQJNWrUOHXqFPIGugoW5GvWrClWrNjatWtdXRwAfJTz
588/++yz2mGGbe8xMTE7d+7kFlIHipShNO1kjxoEogEAAJCvfP3117Vq1Tp7
9qzug1xbJJ+C7YHU3W/YsGHatGmuLg4APg1VRg6xJctUOWgkCfg333zz0qVL
RnY/eVPQSDSeAAAA8pVJkyZFR0cnJSXJHnQ9BYYpOSMLePjDAOAqJNj7W2+9
xSZ3f39/Mb+XL1+eA0XqbAvshIMVrAAAAAqAqVOnNmjQIDU11dUF8WnYZCcL
5QAAroK94mmDJPoDDzwg3jIcNLJQoUJPPPGEDsAl6t1lJQYAAOAzfP/9902a
NEGkQZfA8sAULgYusgC4BD3bJXnQpk+fXqRIEZ2kiSPPjB071mRj53MxXwYA
ACD/mDVrVvPmzWEschW7du0aOnSo5IXBHwGAC2E/GTG5szJPSkrq3r37fxT+
/v4BAQFRUVHr1q1j9zaTzxsAAACQH8yZM6dFixauLoWPQiKhffv2jz/+OMsD
TLgD4EJ4+Gw3ZjvJ+P3799eoUUNWqorre48ePTjtAtdiOLoDAADIP+bNm9ey
ZUvehmIsYPbt2xceHp6QkGDYbr4ElAYAFDAmXzVZcMr7eeO9997Thnd2fS9d
uvT48eNdWXQAAAC+werVq1u1amXAOTP/YU0u5jjSAMnJySTa9X44twPgbphy
nx05cqRfv36s2wvZoO3atWsfOHDAULVYL2CRPTwKEF96NLkAAAByT1xc3N13
3y1vYXLPD0wZWwxlV5dJeT4GXrIAuCEm75cLFy4sWbKkbNmyOkkTL1x96aWX
0tPTRavL0hWq8pDoAAAArpPNmzdr3Q7yCS3dOd4jKwGkuwLA/ZF6KoKcdfir
r74q8SHZ6k6UKFFi3rx5+kQep5tm02T1KwAAAJAbqNfYunVrTEyMGIVcXSLv
hJMqct/NN/nkyZOG0up6RSoEPABuhbWeam+3w4cPN2nSRNxm/LOg7Yceeujo
0aNGdtHOwWfkggghBQAAIPdAtxcM2s5GPf6mTZtq1qxJ0t1ul41/AQB3498s
jOwaXoeB+uKLL7TDDAl4Pz8/EvCjRo0ybN7sWqVDsQMAAMgD8JMpAEyxYh5+
+OEHH3zQUNnSodUBcFuoemoDu2yIFOdP9+3b16FDB9btHCuSDe916tTZtm2b
nKXlOpvfC/bXAAAA8GCwLrVg0G6xffr0OXHiBL+VmXfpvvEXAOCesMOb3cXj
VMG5Cv/111+VK1f28/Njv3cJ9t63b9+UlBQ+mBoBVHMAAAB5AHEgCwa2zmnb
Gm9b7XgAADfEiWcLj8qlLtORr732mg7wzktWQ0NDp06davKaQ8UHAACQe379
9VfOl2ry3gQ3EOtdxfgIAO8mPj6+Y8eO4vHOAt7f379du3Z79+7lY8R3TvvP
oBEGAADgiAULFtSrV093H5CU+YFOuWggGToA3oueWZs1a1a5cuVYsbN0ZwYN
GnT+/HkjS7rrGO98FuzwAAAArGRkZFC3Eh0dnZqaCnt7fjNlypQ9e/bIW4yP
APBW2HOGBfnZs2ffeuut/yhYwJctW3bZsmWGrSnQbjYGhvYAAADsMW/evKZN
m6alpfFb6PZ84s8//wwLC1uxYoWBVWkAeDUsuTn2o+xct27dHXfcoXU7L1nt
3bv36dOnZd26gUlPAAAAjpk2bVpUVNSZM2e4p+BoCa4ulLdB/fiYMWOog+a3
EO0AeD3isi5uMCTOv/zyS39//+DgYC3daXvcuHE6s6qBVgIAAIA9vv3224YN
GyYmJrq6IF7OiRMnuEfOyMjgPRgfAeCtcO2WOi5qnDhz5sz999+vV6qyEb5p
06YbNmwwbE0EdDsAAAArkydPvvvuu1NSUqiLyczMlLSA4MbCvTD3yNSJ62lx
AICXQc2pdlDnbar1osZ/+eUXdpsR3c5K/qWXXkpKSjKyS30AAACAmTBhQsuW
LcW/3cB6yXxGbi/s7QB4N5JKVcOCnD6iVvf1118Xw7u4zURERMyaNcsV5QUA
AODWkHSkDqJp06aSyM85GRkZIjslxzfmcwXrkIfuMFvPAABA4GF7Zmbm7t27
mzdvzmHe6ZUzNJGSb9myJX0kDaw0szrsjG57YW8BAABfYO7cuY0bN05NTeXo
B85DGVy+fFmsxJDrdpH5cb6Nr7zyyqBBg1xdKACAu6AXqxo255mxY8cWLVrU
5DZDjB49Oj093cjuMG8V8wZ0OwAA+Abz5s2rW7cuG9JzlOLatcNu3wEYvlFH
jx4NCQmZPn26q4sDAHAvdG4m5tKlS7169WJ7Owt41vBhYWHr16+nA7SAN5QD
PDzuAADAR6AGf8GCBTVr1syDreaqDdh5NDyK4UHQpk2bPvroI1eXCADgRoih
g6U7IcvV6ZUajaioKG1yL1KkSFBQUM+ePSXql7jK0KUwAQoAAD7FypUra9So
kfvj4dDuBImBz2//ycKlJQIAuBdWS7thy69q2MK8T5o0KTg4uFChQrxSlZes
FitWbPTo0XIFU35VAAAAvsCWLVtYt+dykSl0e46Y4rQj5CMAQCNOibot1cN8
2jh16lSbNm3+kx1/f//mzZufOHFCFtGItwxMBAAA4Avs37+/Zs2aRp6cJCWk
TD6Uy1NhlW6S7gAAQG2s3ajsHBNA3rIfOzNz5szq1av7+fmJ3zsHjXz11Vcv
XbpkQK4DAIAvQZL72LFjUVFRhnLMdnI8z8+KUIft3S7U7Y4ZM4a3cX8AAIIT
8wi3vSzstbzPzMx86qmndIB3lu6hoaHz5s0zssJ8GfCWAQAA3yA+Pr5JkyaG
rUNB458H9OJc2u7UqVPjxo316jPXFc3jIQGjl/oatqEQmxlhbATejTQjcXFx
7dq1Y1cZsb3TRkxMzJEjR/TBOs6MthtIVdI1CAAAgAdBWmjfvn3169c3EEws
T5iymVOHeODAgbvuumvjxo28h01h4HpgdyzeNrkZ8AQQRkbAK+G2RZKu0sak
SZOKFy9Oct3Pz08EPL2OGjVKn5iZmck1xdqq06VQXwAAwHPZs2dPo0aN9B64
duQS7a0qU9Xp6elnz541bM7tWnOCa0XfOlm1xzt1UA5IEeCtyEMuT/ilS5ee
e+45WakaHBzMzjN33nlnXFycrghSU6hJp5bK9BHaeeChWB9duOwCn2Lt2rX1
6tVzdSk8DG1jpw6R+1brKlSIyeuH1/lqmSExq023F+028DIks6pVvW/durVm
zZo61Aw7vfft2/fkyZOmswQdr6aAfgMANxq7TT3af+AjUC8wZ84c9pMxoDOv
BW3jpf5RB3vUdmAXlMy7MEl06yOKOHjA69GDVtlJD/yMGTNuvfVWXq8qPjNB
QUEjRoyQYwxVNaj66JxNBfcDAAAA3CC+/PLLBg0a8DYmm64HVpi8RlWcru2G
fQPXREZGBt9Mnu5fsmTJuHHjPv7449jY2NOnTxtQIMBLMfm3iOrW+d0yMzO7
dOmiTe78GhMT8/vvvxu22qHbdjRNwAtAsw98E+oFhgwZUqtWLWnVURdyg+49
2dJ+4sSJTp067dixQ3xK9ZEgb4i0YB+kadOmVa1aNSoq6s0332zfvn1gYKC/
vz/tdGkZAch3rB4vaWlphlpEs27dusjISDG5S7SZzp07UyXiw6Rth2IHng6P
YRFMA/gmL7/8MuddspplgBNYkKemphpZvedrr71WqVKlc+fOpaSk/Pnnn/Hx
8QZu5g2CZcaqVatIqEdERNA955u/dOlSNi1KtHwAvAzt4iKL3HW8R5YuvD1i
xAhZrEqvQUFB9FqyZMnZs2ezdJe4NC76NQDcGNg3VUKbGniqgS/Rt2/fqlWr
it0GUjM3aKdr3mYBWatWrdKlS/v7+//3v/81EEzmupH7TBvly5enO/zHH3+I
PxJBTy/tLFKkyPnz5zG1AXwcqikHDx5s1aoVq3dqiHSY93379hnKRM+niEef
bs2AO4NYQEbWQHX37t3nzp0zoNiBj0Gt9GuvvRYZGSmxUFAFconkNCG5SBsT
Jkxo1qyZzFD36tVL4syA64Ru48yZM+mulilThic45Mb++uuvbFT88ssvXVpG
AFyPWF1+/PHH4sWLS35V2Rg0aJBeQS/b2nMG419PgQQ8/YPsMeVT8BhTcqMg
hQfwNd59913S7SkpKYaKsAdyRE9YG7amIzQ0NCiLlStXypG4pdcDS4tnn32W
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
tGSno+Ll319j/YrcfJejY+w2lY7sJKa6bPepyOWeXBbSebvh6CJXVUNk6toc
ncUPodyNHJ83+S5TH62/0foHXbXXUxg5PZx2nyv9LxhOb7v1wdYXMf1qvZ8q
rLWns+6xu6FvgrVhN5VEn8Lbq1ataty4scR45/WqRN++fTMyMuTg3Pg/262Y
0hbJcMPuX2C3aucG000w3QfrXyZ/hOl4Rw2vk0ohukiXxLDcB9126cP06MY6
FDVd09H+q5b2U+80lZz+RFPXwH/rX3/9NXz48Hbt2rVs2bJTp07Dhg3jGC9G
dqcpU1Flf45rKxYuXEhP1Lhx4+htVFTUE088wadcvnyZC0DX1KmXcv8k6Gpi
91YYju+hYe+pu2qLZm/6B60jKcNeK3fVMdZTrI+u9Wp2f4L1kdOLi53/WOtO
u4ra+aNoGstcVaOb3Ndfu/fHWk5Hd9LuFzna6eiRMOkKuwfnHrkPpsfpqhLq
+tXJc2LYezhzU4Acj5e+5mr2uvM/G7rwTq7mRKnmplQ5PiqObov+1PlZjr6I
RwF2v+WqrUpa++6r1zItZThoHBzpPVP7L8Vw8nsd3QE9lDM9Tna/2npNRzc8
xxZGhhiSEMTJ7XI+2LGLbnMcjYb0D5EjtQHW0XOlz9WF18fYLbP1HlrLYD3M
yOmW5v622P26vJ2l3+bmanKLHA0qTSrd+khftYwdGJOA4VbrX9uElLVG65KY
yu/8uXX0HDr6+Xb/R+s8juy/ausUrJ86Ko/dL9I6XILvjRw5Urxl6DUwMDAg
ICAkJOS7774z1MDfGuDd7veaTCWOjnSO6fnXFc10zdw8YLlvcq9aOl+5gukB
s3tjpcDOTcFGdutKjo+WtUJd6y8ylfmfLAxbLeBKkZqaumDBgocffrhixYp1
69b99NNPd+zYwZauf5ULOr3ymE5bhJwUYNeuXfRElS9fvlmzZgMHDtRPoJGV
O9X5FfLWiTi6iKMOJced1maHN3IZMdXUF9i1FVjL7KgX+NdmSrX7RboR+9fe
OMj0u/SGtRnPsZyOCm+61ayX7DZxebi+nGWaDbGWXO+xHub8+narnt2SO+p9
eEObi53fz9zcB7u/JZefWo+8qnSj84ad74aTdShX7ZmbHN15Rx85wVGtt3sp
/ej+a5k1y0MBclMXcvO38j00VQS5bzmWMw81UU4x/TtO1LX+uqv2hJlUZ0cF
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
g6Cpvzm0Wtpq2VFqeUuzPb+vsTucBYSOAwzdFhOaO7nNhYIM7+bW236ta9nj
rnlm0v1750vFzRn3722/e2ouC3R0vpyzr7GZWDu5zjR/u9Sy21sr+a3zVzC1
kva3JtpHgopZL/qlQpazfq2gsFZ7oK3qev0nS1V7G2iufTU511d61sdCIM2l
dXp+rkBnlpjqdaGOzt/vRHkW07Iatn379h07duzcuVO6a9cu1X/66aeoipLo
qZ1f95TqWWQLB3VVpEe+/teM/S59ZHmT8ixaZlnvxx9/3NUJOmNFXJTVwvDJ
92rCnKSKOGQJMSvVUSWf5dAsrNUek6mNin4p4fBPLQpzCvZV74axJU13dN4e
yUcYtm7dmhazDIvJtm3b4sy6XxxmZTWswpaSZKQ0ZPW1Jk9JljRrh0D6JWva
UUsnyWhIPk1EJvbG5N+qL2vF0ujJEne8B1n9pjOFyYDWN2/eHD9v2rRpy5Yt
WU9ev369RsNTxY0bN2aVmwz5rDMrzKp4VlkJZG2cfLov68k0kFEeL4VSRhdz
4sbYCNFPMvSyy7C5E1mBjwzgkI2JL7/8MrsM9Rr+mjVr8MniPKC3du1akspX
rFiRhX21Vq1alerLli2Tl1m+fLmS1atXM00TKjYbldHounXr0hfcqDC7OdHz
UQVN0IMPJVlOzx/BZEH76wqoLl68eP78+dlVnDVr1rRp0+bNm7dw4cJFixY5
hWQ2mD6rkHx2N7LFkMySJUu0GMO16HDp0qWYKJGm6dDIkn7cmxHF7ToLf9oo
yabY+++/P3v27DfffDPbbSsqYK7TeQ9/KXu1lW2aqVOnTpgwYcyYMWPHjpWZ
NGmSkuyNzpw5MztZ0uwrZXtu7ty5CqULFizI/tfjjz9+9NFHJ4AXyc+ZMyf7
dFjFdhzWVP/gk05hV9yenaPsLXLgxIkTEUBj8uTJaEyfPl1D2f/iljiWJBqE
X61Q779nJTZ70MGIESMcZitt/PjxjGJRvb+WLVctjhs3ju3OZucxu67ZvGOj
5tiCZ/qLOcYGi0I7jsq+8KhRo7J3P2jQoEceeWT48OHZYc/+KXM0ly1OzTk7
ePDggQMHhnkWllNxyJAhpg/ZBB86dCgDhw0bxpaRI0dm3zl7yq+88golCukf
PXp0ziphMhrqZvd2ypQpWtfRdWcxKuaTR09z2sorIlnSFOr369cvS83mMgMG
DMDw0Qp5iyDb9w4Rznsj5hEidnOZrCKK280KE7GL3k0P8en4G16VKSgoKCgo
KCgo+P+GiVXfvn379OkjOEzJ3/j+ecGhhuZCXLMTm0s9LauvdUVzsfvvv79r
167HHHNM7969TTqUtHzSv6CgoKCgoKCg4I9Fds069vdmeMHhgubeZUrq/frf
Oj8HWp/KCxibN28eO3bs7bff3qtXr7POOqtbt24PPvjgunXr8tuQJsp4KCgo
KCgoKCj4w1F/0Cz4/QBfqys4xNH+GmrHAb7Q9e23344ePfraa6897rjjxOr9
+/cXvW/btq3jf39ysIyEgoKCgoKCgoJDDS3fjC04fFG/KlOvrte/CxOZjxkz
5qabburRo0eXLl369u07bdq0PXv21D+pO8j7UWW9vaCgoKCgoKDgkEL7f1EV
HC6oP6jS/F7Ehg0b5syZc99993Xv3r1nz559+vR58sknV65c2XGAz3S0fHSi
DIOCgoKCgoKCgkMKLf8nWKK1wxR1x+3du3fGjBl33HHHmWeeeeyxx95yyy3T
p09v/rFX3d0km5+h2++6esvXDgsKCgoKCgoKCv4Q7Peb0n8Ik4L/CxJ415+h
vvfee6+77roJEybs3r27+c3hWn6/vVwvs//e+KvcgoKCgoKCgoKCQwHt/9XS
Ud5nPpyRt2XqV9bb/82nLml5LepAi+olgC8oKCgoKCgoKCg4XPA/j0CbrQ==

     "], {{0, 601}, {1000, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{621., Automatic},
   ImageSizeRaw->{1000, 601},
   PlotRange->{{0, 1000}, {0, 601}}]], "Input",ImageCache->GraphicsData[
  "CompressedBitmap", "\<\
eJyFnQncdVVV/y/3PuM7ggwqKZiaiGAKipSQogkVqWiOmEIIKGao4QAJYZqS
IablkJIBKpqKmlqopYYmhaZpg1EO9do8jzb+e5/n/Pd37fXbe+19zn27n8/z
nHvPsPfaa695rb3Po857wUUXXnzeC551/nl3+65LznveRc86//l3O+O5l6RT
i4Nms/nFs9lBL7zbjO/DbKZ/9vlf/q0M29vbs4WdSN84zJ5i/1ft99bWlh11
bW3i/jn/53ZhNm5ZLXDnk/Od//u//5ua58LrXve64VWvetXwH//xH/xOt/PQ
6rB///7YrZ2dc8cidLOff9aBdX52BWOPNf7Hf/zHw/XXXz9cdNFFw/Of//zh
He94x/Cbv/mb1hkNqxPu5XsBOozC0cBlv8XueErumq8HMxxrQ8evfe1rw/Oe
97zhO7/zO63f3/7t3x7+8R//0RoI2NDxoFGfa02fYRp8iOlsQCx4y8PeZSBw
7q//+q+HT33qU8OrX/1qG/4P/dAPDa9//euHf/qnf4ogeNerfF/vZjZPRPq/
WsfazrudC5PfPjvvrq7FqxGI3PRKczl9llLabKXH4NxboNHQyqLO6GrTem1O
IOaxDP7Jty8d1BjW/tYC5do0wEuGnGHdHMEaZro0v6tjr9JgGEo+Z2MsrDM1
nraVjQOMO/LlgSZ/4TQKPTodZ2IK93HOaLmy8BRm7Vq6K4uNReGiQvaLcsti
+H//7/8tvc+aSqMLMHF/YVvH8CJSFNd0j9qe+2jE8uoojyd3/j//8z/2XDqm
c+lbwAVQGK26nAvt29O5/fXRrKu/3BotL9SHnXPguLBaGlQHGZD//u//ztCs
2FMBEwbeSmiVaxkaIN1TJJKeCT3TbPNbR4MnXZzttcf+67/+yy5xO9//8z//
047IY33nWvyeQUhPOfAZwBZdnFspT3gPc04koaPO1NE3vvGN4V//9V/nw7/8
y7+kltJX9ZdaSt/m3DHbYRf+7d/+TffbUb8DgLmbXeWU0PHv//7vdmvqZfjn
f/5ne5RmfNxzYEm0yG2cRj38/d///fC3f/u3w9/8zd8M//AP/8C5NS4mKGmF
25L4nmXIV02U67xjMN2Z2s8I2TAw6JYbafvv/u7vrG0eSucjCEDKbdzyl3/5
l8Of//mfD3/xF3/B9zm6ZA5giQgAiyYAk3sdzOEP//APhwsvvHB46lOfas9y
jVE74jKSVgv+BVFqKg0ndZQQSLdoLZoDQo7qjib/9E//dPiTP/kTU65Jsc+H
ffv2pWn6+te/bpd59K/+6q9GR66lphfW1+EN4ADnuDBgOc8jQEJvmA9f/vKX
7chvzqtpoKLrr3zlK2kEX/3qV+fcmoaYvnLSwOQGoJzz+Hz4sz/7syTbOQlq
aTGOKV21HjJO0ugTSdMLvXEt3TMf/uAP/iCd/tKXvjT87u/+7nD77bdzZm5Q
7BZmCgi///u/P/zO7/yOmR8f/ehHhyc84QnD3e9+9+G8884b3vnOd9Lz7CCT
NVnfZcE//OIv/uLwMz/zM8NP/MRPmPnwmte8Zvipn/opzs2HN73pTbPjzWJ7
xSteMbzsZS8bfuzHfmx46UtfOvz4j//48KM/+qPDS17ykuHyyy8fnvvc5w5X
XHHFcOWVV9r1V77ylcNVV101XH311XYf52iDc7RDd6997WuHN7zhDcMb3/jG
4ed//ueHt7/97cO73vUuO/7cz/2cgcL9L3/5y61dnr/kkkvs90/+5E9a2/T5
whe+0Pp/1rOeNTz72c+e82N27PCc5zzHbv/hH/5hM4iwzfiOrfaCF7zAfr/4
xS8eLrvsMmueZmnuR37kR6zbCy64wMC89tprh7e+9a0GEkbVT//0T9v9PEfX
tENfGF4cL774YusDcPhO33DL93//9w9PfOITh/PPP3945jOfyf1p6tPVJPyf
8Yxn2D3xmR/8wR+0kcwZxeww6w9UXnrppcOLXvSigmrQAFygku/ATztM/Nln
nz08+clPHp72tKdZ/49//OOH7/3e7x2+7/u+b86F2R3KLVx6zGMeMzzucY8b
HvvYxw6PetSjhu/5nu+xY7rdzj3pSU+y+2F80AOIdJV+z4enP/3psyMNC4we
CIGYyQarQA6mgOqcc84ZHvnIR1qzHE855RQ70hXHM88807r+7u/+7uG7vuu7
htNPP92u0f2jH/1oSHs+POUpT0mIY2BAf9ZZZxnF8xsQfuAHfiAhLqE6MRDI
BeHpHH/59MIAZ/7A7pyhJL0FdAwUyIDg1FNPHb7jO75jeOhDHzqcccYZBgXQ
PeIRjxhOO+204SEPeYhde/jDH57aSB5AwgDXuAeQuF+gMWr6ZG5BnpAIWIyM
39zD74RLGwZYBEboCrrhPibpYQ972Hz49m//9oSBk046aXjAAx4wnHzyyYZI
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
uTlrdPzhnAQK9uioWZqCB4IROG52dtD/B2xYQLQ=\
\>"]],
 "\nGeometry of a linear classifier (Adapted from ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ")"
}], "Text",
 CellChangeTimes->{{3.637659491383601*^9, 3.6376595473154373`*^9}, {
  3.637661475999682*^9, 3.637661476767228*^9}},
 TextAlignment->Center],

Cell[TextData[{
 "\nLet ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalChi]", "(", "r", ")"}], TraditionalForm]], 
  "InlineFormula"],
 " be the indicator function of the predicate ",
 Cell[BoxData[
  FormBox[
   StyleBox["r", "TI"], TraditionalForm]], "InlineFormula"],
 " and let ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " be a the scoring function of a linear classifier. A natural measure for \
the performance of a binary classifier is given by the 0/1 istantaneous \
error, which for a sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 " can be written as"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995499436138*^9, 
   3.599995539266868*^9}, {3.599997582821453*^9, 3.5999975860480633`*^9}, {
   3.599998976253676*^9, 3.5999989914597387`*^9}, {3.599999170742371*^9, 
   3.599999173138685*^9}, {3.599999714269641*^9, 3.5999997234665003`*^9}, 
   3.601386016087184*^9, {3.63756129218629*^9, 3.637561333457786*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", 
   RowBox[{"(", 
    RowBox[{"h", ",", "i"}], ")"}]}], "=", 
  RowBox[{"\[CapitalChi]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["y", "i"], "h", 
       RowBox[{"(", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], ")"}]}], "<", "0"}], ")"}], 
    "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999944603634357`*^9, 3.599994493588257*^9}, {
   3.599995527890851*^9, 3.599995607101728*^9}, {3.59999759190174*^9, 
   3.599997605387134*^9}, {3.599998685361197*^9, 3.599998685502387*^9}, 
   3.5999987301762114`*^9, {3.5999989185448513`*^9, 3.5999989188784037`*^9}, {
   3.5999989939314337`*^9, 3.5999990018287563`*^9}, {3.599999423831132*^9, 
   3.599999448026225*^9}, {3.600000447372196*^9, 3.600000448986864*^9}, 
   3.607429382585763*^9}],

Cell[TextData[{
 "As it can be seen, if the sign of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], ")"}], TraditionalForm]]],
 " disagree, the prediction will be counted as erroneous and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "1"}], TraditionalForm]]],
 ". In the other case, if the sign of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], ")"}], TraditionalForm]]],
 " agree, the prediction will be considered correct and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "0"}], TraditionalForm]]],
 ".\n\nUsing the error function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"e", "(", 
    RowBox[{"h", ",", "i"}], ")"}], TraditionalForm]]],
 ", we can now define the ",
 StyleBox["risk functional",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 " of a classifier ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " over a distribution ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " as"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
  3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
  3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
  3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
  3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
  3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
  3.599997646412861*^9}, {3.5999987264237432`*^9, 3.599998748160718*^9}, {
  3.5999989206421623`*^9, 3.599998967244173*^9}, {3.599999031887761*^9, 
  3.5999990785253983`*^9}, {3.6074293768330593`*^9, 3.607429631218378*^9}, {
  3.6074302685756474`*^9, 3.607430273193674*^9}, {3.607430379106879*^9, 
  3.607430398069633*^9}, {3.6074306202107058`*^9, 3.607430620210925*^9}, {
  3.637561416089044*^9, 3.6375614250470753`*^9}, {3.637563519716991*^9, 
  3.637563520313816*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], 
    RowBox[{"(", "h", ")"}]}], "=", 
   RowBox[{"\[CapitalDifferentialD]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], ",", 
        SubscriptBox["y", "i"]}], ")"}], ":", 
      RowBox[{
       RowBox[{"e", 
        RowBox[{"(", 
         RowBox[{"h", ",", "i"}], ")"}]}], "==", "1"}]}], "}"}]}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.599999082706435*^9, 3.5999991473256493`*^9}, 
   3.5999992125321608`*^9, {3.599999450499954*^9, 3.599999453716419*^9}, 
   3.6074299688686123`*^9, 3.607430001086486*^9, 3.6074301179761*^9}],

Cell[TextData[{
 "which is the expected error rate of the classifier over the set of samples \
generated according to ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 ". This quantity represents the true risk that a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 " generated according to ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " is missclassified by the classifier.\nThe so called \
\[OpenCurlyDoubleQuote]",
 StyleBox["generalization ability",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] of a classifier can then be defined as its ability \
to have a low true risk on ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 ", and thus have a low expected error on samples which were possibly not \
considered when constructing ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " (",
 StyleBox["unseen samples",
  FontSlant->"Italic"],
 ").\n\nSince the distribution ",
 Cell[BoxData[
  FormBox["\[CapitalDifferentialD]", TraditionalForm]]],
 " is often unknown, this quantity is not directly measurable. Moreover, the \
error function used by this functional is non-smooth, its gradient is zero \
and it is thus not very tractable, as can be seen in the following figure.\n"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
   3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
   3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
   3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
   3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
   3.599997646412861*^9}, {3.5999987264237432`*^9, 3.599998748160718*^9}, {
   3.5999989206421623`*^9, 3.599998967244173*^9}, {3.599999031887761*^9, 
   3.5999990785253983`*^9}, 3.5999991505011597`*^9, {3.60067619505227*^9, 
   3.600676195415215*^9}, 3.60138602053524*^9, {3.607429643154152*^9, 
   3.60742965332517*^9}, 3.607430075464189*^9, {3.607430119374009*^9, 
   3.607430338750307*^9}, {3.607430408471323*^9, 3.607430461779922*^9}, {
   3.607430546133355*^9, 3.607430579954646*^9}, {3.607431805744916*^9, 
   3.607432028681036*^9}, {3.637560644871584*^9, 3.637560645260613*^9}, {
   3.637561443933708*^9, 3.6375614927949877`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"err", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Full", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".5"}], ",", "1.5"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Background", "\[Rule]", "White"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Thickness", "[", ".01", "]"}], "}"}]}]}], "]"}], ",", 
   "\"\<Error function e, as a function of: \!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{
SubscriptBox[\"y\", \"i\"], 
RowBox[{\"h\", \"(\", 
SubscriptBox[\"x\", \"i\"], \")\"}]}], TraditionalForm]]]]]\)\>\""}], 
  "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.5999944603634357`*^9, 3.599994493588257*^9}, {
  3.599995527890851*^9, 3.599995607101728*^9}, {3.59999759190174*^9, 
  3.599997634142555*^9}, {3.599998769467708*^9, 3.599998882743507*^9}, {
  3.5999990056548223`*^9, 3.599999008217857*^9}, {3.599999195190351*^9, 
  3.5999991997650547`*^9}, {3.599999331756563*^9, 3.599999344516803*^9}, {
  3.600092833145628*^9, 3.6000928702255983`*^9}, {3.60009296960063*^9, 
  3.600092970173424*^9}, {3.6074305028656063`*^9, 3.607430508832467*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Hue[0.67, 0.6, 0.6], 
       Thickness[0.01], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBWIQnbx+wvv//7/vZwCDD/Z1qrcOpLUj+LNmK086y4fg
z7/fkR/I+Q3OF7sQ7K8p+hXOPxEQ7HJa9Quc76GpWqKs9BnOt1oXs+y8/ic4
/1dXmrCR5kc4/+v3JVPj1D/A+UeUJpnsy30H51uz1m/WTnkD509xMDd3rH0F
5yfPiXj6av4LOP/8cjlOxlnP4Hw5ng2G+7c9gfO5FJ6df7nqEZyfE9I6Y8WK
B3B+wuH7p+Um3YXzlWz/BR5tvAnnr8zY/HD3tqtwftbnjTHdsy7C+Xp1rJFs
yqfhfOHKK9zTZh+G86+n5Gitf7wNzi9l/t6r2LkOzi+v0uo7OXUenH8vX9k0
xqMfzr/WfuzXhQh/OB8AvXOlrw==
        "]], 
       LineBox[CompressedData["
1:eJxFz21I0wEQBvA5s0XkQMVwk0wNoyhGoC5touYLivlCWzMjy1FarrSBlk4l
YeG0xaZ/QQsXuilprYnWejHFSelYg8o022LQbJiNNU3LLRcbywri7uB4+H05
nos6I2CXkUkkUvrf/ZemFr1npqgghfR/VIy+2m1jbHCXsPvnnJEHtpj5w735
5eBoFpMveCkAx+aL2iOU1eDa4bwjy2ENYLo1dg/H2Ag+vUVGtmSLwKTE6k/p
AWJwhjylK6hRCu7UaCiZxa3g6i/BrKQdBFjnE6sE3nbwOUZFs2mkE3y/LSH1
zoFu8CadYpwS1wMu+bU58eJBBfjGA0cYTaEEJ9NGg6z9feABB9f/0qMBsFDW
ZpNMD4Fb+SIT79oIONCVyxo8OgW2XtbH1TS9Aq+M5k3WGmbxfksvr1RiBMes
q0OEt83gec1OLavcAubesl5fIqzgnn6pNvfmAv57svJbQN0ieJqnustusoGf
BNJPuSvs4N3yKDsl1wH21DT51Jxl8JInnHovYQWsPN/yPnzXdzBx+LWUFvMD
TBWo06ZC18ATGc+0T+lOsK+yhFlIdYH9KO+69vnQzOyqyRzSOvb5OGgPXUNn
VBiIvHW0zPs5QexBR9LDJS6yG5x1XLJ3LgTdMVt2gYhHM/QRy1vr0ELuoY60
q+gXi9ykehH6mL9M+lWCbkj17jfI0YaxD5XicXRwjjNU+xxdbKZOuHToVXcm
tfQNenv846G0eTRP97awfgGt4iz9fmhDJ1VFF0Stopv9kt1FTvQMcUJBuNH0
yCtZBi/67DCxurGB/gMrHxCb
        "]]}, {}}, {{}, {}, {}}}, Axes -> True, 
    AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> 
    GrayLevel[1], BaseStyle -> {"Palatino", Bold, 16}, GridLines -> Automatic,
     ImageSize -> 600, Method -> {}, PlotRange -> {{-1.5, 1.5}, {-0.5, 1.5}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], Automatic}],
   "\"Error function e, as a function of: \
\\!\\(\\*Cell[TextData[Cell[BoxData[\\nFormBox[\\n\\n  \
RowBox[{\\nSubscriptBox[\\\"y\\\", \\\"i\\\"], \\n\\n   RowBox[{\\\"h\\\", \\\
\"(\\\", \\nSubscriptBox[\\\"x\\\", \\\"i\\\"], \\\")\\\"}]}], \\n  \
TraditionalForm]]]]]\\)\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{3.6074305182405767`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.601386029889903*^9, 3.6013860331555233`*^9}, 
   3.60743052878615*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tMaximal-margin classifiers"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.59989587689098*^9, 3.599895892048147*^9}, {3.599895942273438*^9, 
  3.599895956106649*^9}, {3.599997812882894*^9, 3.5999978173844213`*^9}, {
  3.600001523801238*^9, 3.6000015293877583`*^9}, {3.600001797005638*^9, 
  3.600001802768417*^9}},
 CellTags->"sec:max_margin"],

Cell[CellGroupData[{

Cell["Margin-based Generalization Bounds", "Subsection",
 CellChangeTimes->{{3.6000018604500504`*^9, 3.600001896893854*^9}},
 CellTags->"margin_bound"],

Cell[TextData[{
 "In the previous section we have introduced linear classifiers, the 0/1 \
error function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"e", "(", 
    RowBox[{"h", ",", "i"}], ")"}], TraditionalForm]]],
 " and the risk functional ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["err", "\[CapitalDifferentialD]"], "(", "h", ")"}], 
   TraditionalForm]]],
 ". Starting from these definitions, a more optimization-friendly performance \
measure can be obtained by using the definition of ",
 StyleBox["functional margin",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Gamma]", "i"], TraditionalForm]]],
 ", of a classifier ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " over a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.599994302797205*^9, 3.5999943241344013`*^9}, {
   3.599994362972232*^9, 3.5999944444415607`*^9}, {3.599995241059703*^9, 
   3.5999952572511787`*^9}, {3.599995618292294*^9, 3.599995667540577*^9}, {
   3.599995727457095*^9, 3.599995748864458*^9}, {3.599995787655945*^9, 
   3.599995912903537*^9}, {3.599995962020927*^9, 3.599996010283751*^9}, {
   3.599996073913365*^9, 3.599996074383387*^9}, {3.599997644131403*^9, 
   3.599997654536499*^9}, 3.599999465685328*^9, {3.599999741572907*^9, 
   3.5999997654585238`*^9}, {3.6000013609599867`*^9, 3.600001361172513*^9}, {
   3.600001563186242*^9, 3.600001626437427*^9}, {3.600676347164753*^9, 
   3.600676371773777*^9}, {3.601586899455288*^9, 3.601586910593154*^9}, 
   3.6028564935711327`*^9, {3.607429719504444*^9, 3.60742972158954*^9}, {
   3.607430604408039*^9, 3.607430656303341*^9}, {3.637563102385953*^9, 
   3.637563124193836*^9}, {3.637563496670677*^9, 3.637563497522789*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Gamma]", "i"], "=", 
  RowBox[{
   SubscriptBox["y", "i"], "h", 
   RowBox[{
    RowBox[{"(", 
     StyleBox[
      SubscriptBox["x", 
       StyleBox["i",
        FontWeight->"Plain"]],
      FontWeight->"Bold"], ")"}], "."}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999959493023653`*^9, 3.599995953719469*^9}, {
  3.599996014195363*^9, 3.599996034756254*^9}, {3.599999769055859*^9, 
  3.599999772772359*^9}, {3.600001653935862*^9, 3.60000165485928*^9}, {
  3.600091396276722*^9, 3.600091400954399*^9}}],

Cell[TextData[{
 "Note that whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], ">", "0"}], TraditionalForm]]],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "0"}], TraditionalForm]]],
 " and the sample ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 " is correcty classified, while if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "<", "0"}], TraditionalForm]]],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", "(", 
     RowBox[{"h", ",", "i"}], ")"}], "=", "1"}], TraditionalForm]]],
 " and the sample is missclassified. \nWe can than define the ",
 StyleBox["minimal functional margin",
  FontSlant->"Italic"],
 " of a classifier using a scoring function ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]]],
 " on a training set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", as"
}], "Text",
 CellChangeTimes->{{3.599996048918401*^9, 3.599996060837015*^9}, {
  3.59999618849629*^9, 3.59999619102376*^9}, {3.59999771033974*^9, 
  3.599997750823564*^9}, {3.5999977831216793`*^9, 3.5999978863941708`*^9}, {
  3.599997995922997*^9, 3.599997999004837*^9}, {3.599999476675037*^9, 
  3.5999995251109858`*^9}, {3.599999778635126*^9, 3.5999997804083443`*^9}, {
  3.6000016490258417`*^9, 3.600001673828826*^9}, {3.60158691936445*^9, 
  3.601586922364491*^9}, {3.602856522113866*^9, 3.602856523214366*^9}, {
  3.60742973303699*^9, 3.607429835232155*^9}, {3.607431069027816*^9, 
  3.607431085163354*^9}, {3.637563146992399*^9, 3.637563165012268*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["m", "S"], 
   RowBox[{"(", "h", ")"}]}], "=", 
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["\[Gamma]", "i"]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.5999978955436907`*^9, 3.599997988866353*^9}, 
   3.599999793796834*^9, {3.600001681671842*^9, 3.6000016844109898`*^9}}],

Cell[TextData[{
 "Using this quantity we can now state without proving the following result \
from the Generalization Theory of max-margin classifiers ",
 ButtonBox[Cell["[1]", "Citation"],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". "
}], "Text",
 CellChangeTimes->{{3.6000021520783777`*^9, 3.600002156522519*^9}, {
  3.60742984679766*^9, 3.6074298490243063`*^9}}],

Cell[TextData[{
 StyleBox["Theorem 1. ", "Subsection"],
 "Let ",
 Cell[BoxData[
  FormBox["\[ScriptCapitalH]", TraditionalForm]]],
 " be the set of linear scoring functions having a unit weight vector ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", on an input space ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ". For any probabilty distribution on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", "\[Times]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], TraditionalForm]]],
 ", with support on a ball of radius ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]]],
 " around the origin, with probability ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "-", "\[Delta]"}], TraditionalForm]]],
 " over ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " random samples ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", the error of any classifier using a scoring function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "\[Element]", "\[ScriptCapitalH]"}], TraditionalForm]]],
 " with a minimal margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", "h", ")"}], " ", "\[GreaterEqual]", " ", 
    "\[Gamma]"}], TraditionalForm]]],
 " is bounded by"
}], "Text",
 CellChangeTimes->{{3.600002045349361*^9, 3.600002064902932*^9}, 
   3.60000216302361*^9, 3.600002197076413*^9, {3.600007053813912*^9, 
   3.600007054102824*^9}, {3.6074315808767147`*^9, 3.607431582604834*^9}, {
   3.607432079682301*^9, 3.607432101606476*^9}, {3.63756335849697*^9, 
   3.637563374431131*^9}, {3.637563405298534*^9, 3.6375634281897793`*^9}, {
   3.6375635551548777`*^9, 3.637563593847636*^9}, {3.637563632802895*^9, 
   3.637563640810668*^9}},
 CellTags->"theorem1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["err", "\[CapitalDifferentialD]"], 
     RowBox[{"(", "h", ")"}]}], "\[LessEqual]", "\[Epsilon]"}], "=", 
   RowBox[{
    FractionBox["2", "n"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"64", 
         SuperscriptBox["R", "2"]}], 
        SuperscriptBox["\[Gamma]", "2"]], "log", " ", 
       FractionBox["\[ScriptE]n\[Gamma]", 
        RowBox[{"4", "R"}]], "log", " ", 
       FractionBox[
        RowBox[{"128", 
         SuperscriptBox["R", "2"]}], 
        SuperscriptBox["\[Gamma]", "2"]]}], "+", 
      RowBox[{"log", " ", 
       FractionBox["4", "\[Delta]"]}]}], ")"}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600000006374289*^9, 3.6000002062180643`*^9}, 
   3.6000002573346148`*^9, {3.600000475231299*^9, 3.60000048884702*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Gamma]", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 "and provided that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", ">", 
    FractionBox["2", "\[Epsilon]"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"64", 
      SuperscriptBox["R", "2"]}], 
     SuperscriptBox["", 
      SuperscriptBox["\[Gamma]", "2"]]], "<", "n"}], TraditionalForm]]],
 ".\nThis bound tells us that the generalization ability of a linear \
classifier trained on a set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " composed of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " random samples drawn from \[ScriptCapitalD], is directly related to the \
minimum margin acheived by the classifier on the training set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ". We also note that the generalization does not depend on the \
dimensionality of the input space ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ".\nIn other words, this theorem tells us that whenever ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " is normalized to one, a classifier with a large minimal functional margin \
\[Gamma] will also have a low true risk on \[ScriptCapitalD] and thus perform \
well also on unseen samples drawn from \[ScriptCapitalD].\n"
}], "Text",
 CellChangeTimes->{{3.600000213585745*^9, 3.600000221727106*^9}, {
   3.600000261689476*^9, 3.600000292450082*^9}, {3.600000520930485*^9, 
   3.6000006628593903`*^9}, {3.600000859861929*^9, 3.600001272563404*^9}, {
   3.6000013728450623`*^9, 3.600001439133802*^9}, {3.600001709608714*^9, 
   3.6000017098448877`*^9}, {3.600001781941401*^9, 3.600001783769779*^9}, {
   3.6006764429267817`*^9, 3.600676445095525*^9}, 3.601558704488698*^9, {
   3.602856581445754*^9, 3.6028565916141043`*^9}, {3.6074307306914167`*^9, 
   3.607430760664345*^9}, {3.607430803758081*^9, 3.607430888817957*^9}, {
   3.607430919063895*^9, 3.607431044586088*^9}, {3.607431105422138*^9, 
   3.607431144164812*^9}, {3.607431268806119*^9, 3.607431350873888*^9}, {
   3.6074317901328917`*^9, 3.607431791885376*^9}, 3.607432142163611*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: hard margin", "Subsection",
 CellChangeTimes->{{3.6000018233736467`*^9, 3.6000018292632837`*^9}, {
  3.600511116033592*^9, 3.600511153981496*^9}}],

Cell[TextData[{
 "Recall that the functional margin on a sample was defined as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubscriptBox["\[Gamma]", 
      RowBox[{"i", "="}]], 
     SubscriptBox["y", "i"], 
     RowBox[{"h", "(", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"], ")"}]}], "InlineFormula"], 
   TraditionalForm]]],
 ". For a linear classifiers this definition specializes to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "=", 
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
   TraditionalForm]]],
 ". This quantity obviously depends on the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", as it is affected by any rescaling of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ". In order to remove this dependency, instead of forcing ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " to be normalized to 1 (as in Theorem 1), we consider the ",
 StyleBox["geometric margin",
  FontSlant->"Italic"],
 ", which is the Euclidean distance of the point to the hyper-plane given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], "+", "b"}], "=", "0"}], TraditionalForm]]],
 " .\nFor any ",
 StyleBox["correctly classified",
  FontVariations->{"Underline"->True}],
 " sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", 
     SubscriptBox["y", "i"]}], ")"}], TraditionalForm]]],
 ", the geometric margin can be computed as"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQfS52Y2rppVeO65hXpIPou/fe5oPo68o/CkA0x4nu
6SC694P+PBDtEyezGER7LP66DEQ/6luzBkRvaXbdCaJ9T8n8B9Fiv54alwFp
vYfHw0F0w+mZCSA6Qdg1DURzumgXgegZuiwVIFrl/UcwLeFV3w6iX3F1gmll
rx0zweqcjWaB6JiKuvkgev8xkUUg+tdig5Mg+lT3gcsg2k5pyV0Qffj/2/sg
+onM5fjqq68c536RTgDRLRsOpoDonvMO6SC669kNqYUPXjkeuTdFA0TLLPGp
BdF/v9eD6TW9rFZSUq8dZXxd7EC0W2uoK4i2e5cDpgFdQLL6
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    FractionBox["1", 
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
    SubscriptBox["y", "i"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], "|", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], "|"}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.60000405249175*^9, 3.600004093162671*^9}, {
  3.60000413469939*^9, 3.600004162886248*^9}, {3.6000042185678997`*^9, 
  3.6000042203326073`*^9}, {3.600004436032797*^9, 3.600004463584036*^9}, {
  3.600004545307625*^9, 3.6000045933056927`*^9}, {3.600004705129046*^9, 
  3.600004716759162*^9}, {3.6000048170476103`*^9, 3.600004829213614*^9}, {
  3.60000499390374*^9, 3.6000049958444643`*^9}, {3.601587007749618*^9, 
  3.601587028944851*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " has the role of inverting the sign of the projection, in case the sample \
was negative. As we can see, this is basically a rescaled version of the \
functional margin defined above, making it independent from the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\nThe minimal geometric margin over a set of examples ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " can then be defined as"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005147477468*^9}, {3.600005887337599*^9, 3.600005971401277*^9}, {
   3.601587422816578*^9, 3.6015874927953777`*^9}, {3.607431704532465*^9, 
   3.60743176222755*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], 
    "."}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.6015874543083487`*^9, 3.6015874979330187`*^9}, {
   3.601587531451908*^9, 3.601587553132724*^9}, 3.601587593340803*^9}],

Cell["\<\
Using this definition and following the intuition provided by Theorem 1 (that \
we should select a classifier with a large minimal margin) we could thus \
define the following max-margin objective function, maximizing the \
generalization ability of the classifier\
\>", "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005147477468*^9}, {3.600005887337599*^9, 3.600005971401277*^9}, {
   3.601587422816578*^9, 3.60158744344695*^9}, {3.6015875835414953`*^9, 
   3.601587584494212*^9}, {3.601587647951623*^9, 3.601587653187126*^9}, {
   3.60158768521929*^9, 3.601587687820085*^9}, {3.601587737498707*^9, 
   3.601587737953657*^9}, {3.607431559672174*^9, 3.60743164211471*^9}, {
   3.637564204633869*^9, 3.6375642278032227`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], 
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600005137443612*^9, 3.600005170947382*^9}, {
   3.600007440536175*^9, 3.600007441317205*^9}, {3.602778391536978*^9, 
   3.602778399922*^9}, {3.602778480605424*^9, 3.602778482625045*^9}, 
   3.6074316295513077`*^9}],

Cell[TextData[{
 "for any linearly separable problem ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 " (a problem for which there exist a linear scoring function ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], TraditionalForm]]],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], ">", "0"}], 
   TraditionalForm]]],
 ").\nThis is a non-linear non-convex objective function, which is very is \
difficult to optimize. A way to ease the optimization could be to impose ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], "=", "1"}],
    TraditionalForm]]],
 " (as also suggested also by Theorem 1), however this would result in a \
problem with quadratic constraints (Second Order Cone Programming), which is \
still not immediate to solve.\nAlternatively, since we are considering a \
linearly separable dataset ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 ", instead of normalizing ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " by imposing ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], "=", "1"}],
    TraditionalForm]]],
 ", we could equivalently rescale it until ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", "1"}], 
   TraditionalForm]]],
 ", resulting in the following optimization problem"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.600006296152946*^9, 3.600006338062229*^9}, {3.60000639992452*^9, 
   3.6000064036079407`*^9}, {3.600006887328807*^9, 3.600006926233221*^9}, {
   3.600676541491768*^9, 3.600676547884078*^9}, {3.601587689418614*^9, 
   3.601587713721084*^9}, {3.6074316248336983`*^9, 3.6074316635456877`*^9}, {
   3.607432234252885*^9, 3.607432276677658*^9}, {3.637564262008259*^9, 
   3.6375643193380127`*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["max", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], ",", "b"}]], 
  FractionBox["1", 
   RowBox[{"\[LeftDoubleBracketingBar]", 
    StyleBox["w",
     FontWeight->"Bold"], 
    "\[RightDoubleBracketingBar]"}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"s", ".", "t", ".", " ", 
    SubscriptBox["min", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        StyleBox[
         SubscriptBox["x", 
          StyleBox["i",
           FontWeight->"Plain"]],
         FontWeight->"Bold"], ",", 
        SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]]}], " ", 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
  "1."}]}], "DisplayFormula",
 CellChangeTimes->{{3.600005137443612*^9, 3.600005170947382*^9}, {
   3.6000062569968653`*^9, 3.600006282663604*^9}, 3.600006347788377*^9, {
   3.6000070849495296`*^9, 3.600007113916357*^9}, {3.600007430799041*^9, 
   3.6000074343497953`*^9}}],

Cell[TextData[{
 "By noting that the maximization of ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 " can be equivalently replaced by a minimization of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"], 
   TraditionalForm]]],
 " and that the constraint ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["min", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], ",", 
         SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], " ", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", "1"}], 
   TraditionalForm]]],
 " can be replaced by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
     "1"}], ",", 
    RowBox[{"\[ForAll]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], 
         RowBox[{"i", ","}]], 
        SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]}]}], 
   TraditionalForm]]],
 ", we obtain the final objective function of the maximal margin classifier"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006949860783*^9, 3.6000069561934233`*^9}, {3.601587795583527*^9, 
   3.601587811156686*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["min", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], ",", "b"}]], " ", 
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "\[CenterDot]", 
   StyleBox["w",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"\[ForAll]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], 
       RowBox[{"i", ","}]], 
      SubscriptBox["y", "i"]}], ")"}], "\[Element]", 
    RowBox[{"S", "."}]}]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, 3.600523071368231*^9},
 CellTags->"eq:max_margin_hard"],

Cell[TextData[{
 "The classifier obtained by solving problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") is also called ",
 StyleBox["hard-margin classifier",
  FontSlant->"Italic"],
 ", as it requires linear separability of the data, imposing a functional \
margin of 1, for all the training points. Indeed, with this approach any \
feasible solution ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}], TraditionalForm]]],
 " will correctly classify all the training points with a functional margin \
of at least one. The minimal geometric margin of the optimal classifier can \
thus be computed as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["min", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["x", "i"], ",", 
          SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
      FractionBox["1", 
       RowBox[{"\[LeftDoubleBracketingBar]", 
        StyleBox["w",
         FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{"\[LeftDoubleBracketingBar]", 
         StyleBox["w",
          FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
       SubscriptBox["min", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["x", "i"], ",", 
           SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
       RowBox[{
        SubscriptBox["y", "i"], "(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], " ", "=", 
      FractionBox["1", 
       RowBox[{"\[LeftDoubleBracketingBar]", 
        StyleBox["w",
         FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], " "}]}]}], 
   TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.607432502051855*^9}, {
   3.6074326608421707`*^9, 3.607432663009742*^9}, 3.6074339643873463`*^9, {
   3.637564474128066*^9, 3.637564497960371*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.6074325729420013`*^9}}],

Cell[TextData[{
 "It can also be noticed that (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") has the form of a standard ",
 StyleBox["Quadratic Programming (QP)",
  FontSlant->"Italic"],
 " problem (a quadratic objective function, with linear constraints). It can \
thus be solved using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver, as showcased by the following code snippet:\n"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.60051103512566*^9, 3.600511111467135*^9}, {
   3.600522972533334*^9, 3.60052315738151*^9}, {3.6005232298775167`*^9, 
   3.600523241826931*^9}, {3.600676588934862*^9, 3.600676637503007*^9}, 
   3.601386038116662*^9, {3.601580874222579*^9, 3.6015809456751137`*^9}, {
   3.6015867987659073`*^9, 3.60158683093867*^9}, {3.60158687541459*^9, 
   3.601586879292193*^9}, {3.601587051065177*^9, 3.601587075992231*^9}, {
   3.6015871204221783`*^9, 3.601587236661607*^9}, 3.601587269857855*^9, {
   3.601587308767202*^9, 3.6015873855278673`*^9}, {3.601587828753072*^9, 
   3.601588071883095*^9}, {3.601622264602642*^9, 3.601622266385192*^9}, {
   3.602856707658133*^9, 3.602856774199655*^9}, {3.607432377958168*^9, 
   3.607432390255774*^9}, {3.6074324887112722`*^9, 3.6074325188927917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainMaxMargin", "[", 
    RowBox[{"fTr_", ",", "yTr_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "nTr", ",", "fTr2", ",", 
       "d", ",", "w", ",", "v", ",", "b", ",", "i", ",", "sol", ",", 
       "cnstr"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"cnstr", "=", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "<=", "0"}], "&"}], "/@", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"fTr", ".", "w"}], "+", "b"}], ")"}], "yTr"}]}], 
            ")"}]}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"w", ".", "w"}], ",", "cnstr"}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}]}], "]"}], ",", " ", 
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}]}],
         "]"}]}], ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{"1", "/", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600523181274065*^9, 3.6005232173178873`*^9}, {
  3.601373409791304*^9, 3.601373430582547*^9}, {3.63756456790762*^9, 
  3.6375645689313183`*^9}}],

Cell[TextData[{
 "\nAs it can be seen, the basic max-margin classifier can be implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using just a few lines of code. \nHere is an example, using the SVM \
package imported in the initialization cell of the notebook. First we make \
use of the function ",
 StyleBox["createData", "Code"],
 " in order to draw an arbitrary training set. After calling this function, \
it is possible to draw samples in the plot by clicking and dragging. A single \
click in any point of the plot will change the color/label of the samples \
that are going to be drawn subsequently.\n"
}], "Text",
 CellChangeTimes->{{3.600523190135332*^9, 3.600523306766039*^9}, {
  3.6005234114043703`*^9, 3.600523464140204*^9}, {3.6005235065280943`*^9, 
  3.600523538476019*^9}, {3.600676656209612*^9, 3.600676761650674*^9}, {
  3.601373446221478*^9, 3.6013735793660107`*^9}, {3.601386040044692*^9, 
  3.601386042277657*^9}, {3.601588084111608*^9, 3.601588084226252*^9}, {
  3.602856836313241*^9, 3.602856844435326*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.599821879624202*^9, 3.599821882910767*^9}, {
   3.5998374136334047`*^9, 3.599837414563703*^9}, {3.600524449261044*^9, 
   3.600524449764729*^9}, 3.6005251182019*^9, {3.601286452426608*^9, 
   3.601286459340432*^9}, {3.60129586541825*^9, 3.601295882607009*^9}, {
   3.601297623282825*^9, 3.601297623691505*^9}, {3.6015599058363*^9, 
   3.6015599096616507`*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$824 = MousePosition["Graphics"]; 
     Private`p$824 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$824], 2], 
          Union[
           Partition[Private`pt$824, 2]]}, 1]]; 
     If[Private`s$824 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$824}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$824}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$824 = {}; 
     Private`s$824 = Private`s$824 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600020789808509*^9, 3.600020856659668*^9, 3.600021064090733*^9, 
   3.600021134472349*^9, 3.600025702389955*^9, 3.600026032842807*^9, 
   3.600026264079362*^9, 3.600026352841942*^9, 3.6000264126599073`*^9, 
   3.6000266007209597`*^9, 3.600027976298297*^9, 3.600028028405682*^9, 
   3.600176728446885*^9, 3.600181734032493*^9, {3.6001820217877293`*^9, 
   3.6001820304202747`*^9}, 3.600183345188478*^9, 3.600193136661227*^9, 
   3.60019316869851*^9, {3.600193335742634*^9, 3.600193344481193*^9}, 
   3.600438694419705*^9, {3.600439402461076*^9, 3.6004394069642553`*^9}, 
   3.600439466620039*^9, {3.60044152359057*^9, 3.600441528715617*^9}, 
   3.600450816131914*^9, 3.600451015125469*^9, {3.6005233399931498`*^9, 
   3.6005233509012213`*^9}, {3.600523680628913*^9, 3.600523704957892*^9}, 
   3.600524451211219*^9, 3.6005249111054897`*^9, 3.600524941735911*^9, {
   3.6005251156066513`*^9, 3.6005251187154427`*^9}, 3.600525168965639*^9, 
   3.600525292059767*^9, {3.600525322085216*^9, 3.600525330520967*^9}, 
   3.600526153903242*^9, 3.600526235268276*^9, 3.600526277068296*^9, {
   3.600526507556377*^9, 3.6005265656547403`*^9}, 3.600527230231511*^9, 
   3.600527878259603*^9, 3.60052839679093*^9, 3.600528963692533*^9, 
   3.60054517201192*^9, 3.6005464231918573`*^9, 3.600547776709139*^9, 
   3.600602781421591*^9, 3.600603522757304*^9, 3.600603576649341*^9, 
   3.600603945564912*^9, 3.6006129983382263`*^9, 3.6006138118956957`*^9, 
   3.6006326440948353`*^9, {3.600671117185631*^9, 3.600671117554494*^9}, {
   3.600671642124771*^9, 3.600671642372834*^9}, {3.600671803610708*^9, 
   3.600671803934524*^9}, 3.600671901390617*^9, 3.600672265372055*^9, {
   3.600672525750431*^9, 3.600672526281946*^9}, 3.601206370211595*^9, 
   3.601209436802705*^9, 3.6012114669108763`*^9, {3.6012122645074587`*^9, 
   3.601212290623011*^9}, 3.601212668051188*^9, 3.601213356298387*^9, 
   3.601214040242144*^9, 3.6012146080914593`*^9, 3.601218004364975*^9, {
   3.601286272870986*^9, 3.601286273244032*^9}, 3.60128646017093*^9, {
   3.601295889847659*^9, 3.6012958903741693`*^9}, 3.60129593000884*^9, 
   3.601295972447404*^9, 3.601296089913126*^9, {3.601296909696188*^9, 
   3.601296910072357*^9}, {3.601297170354568*^9, 3.6012971707230797`*^9}, 
   3.601297661914198*^9, 3.601298894516284*^9, {3.6012989470897703`*^9, 
   3.601298947392427*^9}, 3.601301317888859*^9, {3.6013046934166737`*^9, 
   3.601304694792658*^9}, {3.601372884991866*^9, 3.601372909370584*^9}, {
   3.601375277091938*^9, 3.601375277422819*^9}, 3.601375321553116*^9, {
   3.601559771686858*^9, 3.6015597721311703`*^9}, 3.601559873485691*^9, 
   3.601559911233698*^9, 3.601559949586494*^9, 3.601560118698316*^9, 
   3.601562166296884*^9, {3.601563111904537*^9, 3.601563112365608*^9}, {
   3.601571644995494*^9, 3.601571645289775*^9}, {3.60157248923569*^9, 
   3.601572489691409*^9}, {3.6015726916095533`*^9, 3.60157270745105*^9}, {
   3.6016261561211157`*^9, 3.601626156488168*^9}, 3.601626313809525*^9, {
   3.602856855577692*^9, 3.602856855902801*^9}, {3.602859724447907*^9, 
   3.602859724787682*^9}, 3.607430517746237*^9, {3.6074324482242804`*^9, 
   3.6074324485746603`*^9}, {3.6375647250204363`*^9, 3.637564725294656*^9}, {
   3.6375655257112837`*^9, 3.637565526049217*^9}, {3.637565654608366*^9, 
   3.637565654942616*^9}, 3.637565699808429*^9, 3.637565819224247*^9, {
   3.637566042031205*^9, 3.637566042379583*^9}, {3.637573360944421*^9, 
   3.637573361280225*^9}, {3.637573767281982*^9, 3.6375737928044043`*^9}, 
   3.63757430800124*^9, {3.637574367287339*^9, 3.637574381441729*^9}, 
   3.6375818994135513`*^9, 3.637582140732675*^9, 3.637582201391613*^9, 
   3.637583464094264*^9, {3.6375855254372063`*^9, 3.637585530625801*^9}, {
   3.6375885584057913`*^9, 3.637588558971067*^9}, {3.637659185098592*^9, 
   3.637659189816359*^9}, {3.6376593282207327`*^9, 3.637659328738759*^9}, {
   3.637659648175241*^9, 3.637659648680043*^9}, 3.637659685247384*^9, {
   3.6376598721829567`*^9, 3.6376599029846077`*^9}, 3.637659935052434*^9, 
   3.6376600085031557`*^9, {3.637671396073104*^9, 3.637671396568841*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nThe 2D coordinates and associated lables of the drawn points are then \
obtained by calling the function ",
 StyleBox["{fTr,yTr,fTe,yTe}=getTrTeData[trPerc]", "Code"],
 ", which also randomly split the data into a training and a testing set, \
with a specific percentage used for training.\nIn the following we will use a \
30/70% training/testing split.\nFinally, the classification algorithm can be \
run on the selected dataset by using the command ",
 StyleBox["runMaxMarginExperiment[fTr,yTr,fTe,yTe,trainMaxMargin]", "Code"],
 " . This command will produce a plot reporting, in the title, the training \
error, the testing error and the achieved minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "s"], "(", "h", ")"}], TraditionalForm]]],
 " (the Euclidean distance of the closest point to the separation surface). \
The training points are represented with a large marker, while the testing \
points are represented by a small marker.\n"
}], "Text",
 CellChangeTimes->{{3.6005234829998817`*^9, 3.600523504323905*^9}, {
  3.6005235434255257`*^9, 3.600523553821986*^9}, {3.600523605337965*^9, 
  3.600523633003153*^9}, {3.60052421959686*^9, 3.6005242417990026`*^9}, {
  3.600525621685663*^9, 3.600525630796471*^9}, {3.600671934415372*^9, 
  3.600671937229444*^9}, {3.600676780381122*^9, 3.600676808730955*^9}, {
  3.600676840736334*^9, 3.60067691149102*^9}, {3.601286538518358*^9, 
  3.6012865418126507`*^9}, {3.6012871286472797`*^9, 3.601287158922804*^9}, {
  3.601373587673876*^9, 3.60137400323562*^9}, {3.6013741141416483`*^9, 
  3.601374143172521*^9}, {3.601374336687283*^9, 3.6013743372265387`*^9}, {
  3.6013860440825567`*^9, 3.601386046101164*^9}, {3.601588105156858*^9, 
  3.601588126085878*^9}, {3.602856877459526*^9, 3.602856922171908*^9}, {
  3.607432471489798*^9, 3.60743248038743*^9}, {3.607432616632223*^9, 
  3.607432616925638*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"results", "=", 
  RowBox[{"runMaxMarginExperiment", "[", 
   RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainMaxMargin"}],
    "]"}]}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, 3.6006004425513983`*^9, {3.600603595693391*^9, 
   3.6006035959711657`*^9}, {3.600671920796858*^9, 3.600671925004285*^9}, {
   3.601286465650691*^9, 3.601286520255199*^9}, {3.601296113882533*^9, 
   3.6012961143798037`*^9}, {3.6012971986150007`*^9, 
   3.6012972506912613`*^9}, {3.60285717644379*^9, 3.60285717809779*^9}, {
   3.637574841944762*^9, 3.63757484577633*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxlkl1Ik1EcxscMizJMG5QTlwoSTlZaZoYXx7oxLGSoubE0IxAjqA1bfqRl
o9CVhhFddGFLMipBqaw0VnSak3dO3Vx+Irmac2ZtJsuVUpSrLp4TvF28vPz4
n+f5f8YdU+eWCAUCgerP9/evD5HUpscGqL27SVcT2kuj2hZnPgRdjCtHVJON
QhMBj0a2yGW6T4yhlz/5dfzBwSECPRh6MPRg6Jst7vzAfQ/Tg6EHQw+GPiXC
nHXklZ/pwdCDoQeLlJu+JLX46Krlt3ZF4z3mB+60LNU5TE4Chh4MfVCbuqiI
9DE9GHo+8/NjnoiDEefXDz/rxGjG1ko/FWsfR9u4dlrwYn3/2hQPASP+6IAz
80rWAkEcjHr5euSHnp8fesT59wE/+PPzw6/84+7D9eetbN5gTWq8OqZ6ijH6
BSMfGPcExn2A+feAfD8TjSHflluoXqna9r6ihzHqxz0hf1rra6O+eIL1g/eo
B/EcQ0NrgnOOvefvG/3BH4z3YfWON883jDP2+veEmsqmGfPrQb+4H/ihXzDq
hT/i8EMc9WN+YPhj3t2bh6sa4kYI/JRc+ilFXB/bR6krWxuezFFXnVeWFHuL
7IiMr5J6rXRBdkN0WzVFbj5VWToDVlp0dLmixjBFjJldK6XFNqq2aLRna7zE
oj8hLui20YQwvaT6mY/MRQUvXqvr/W//p0X51+WFk4QrK1NKXg6weeza0r5v
tmCIzV/ij/4eyOPYvbXNXA3MaznqLU0TZrs7SG3/cMx0RB/tXzMurdXYScmg
OTnH2EuXOJpnTjDRFcUFU6h4iI6F93xdnesnDw1uzaWxASp9t7ejUDhLmpoP
zRgX/t3vmcT5DOvdAbpTXRT05HvIyv4mm+6yje3v8w9FV8P2Plp+7qRUu85B
3E7BRsedQTbv3999DXM=
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{84, 47, 79}, {23, 24, 15}, {62, 8, 12}, {66, 65, 43}, {
          30, 34, 4}, {67, 66, 43}, {19, 68, 7}, {65, 66, 11}, {66, 67, 46}, {
          32, 24, 23}, {63, 64, 7}, {23, 65, 11}, {43, 65, 15}, {64, 63, 
          42}, {19, 20, 8}, {34, 30, 26}, {68, 19, 8}, {36, 32, 28}, {30, 20, 
          19}, {38, 30, 4}, {28, 32, 23}, {26, 30, 19}, {63, 62, 11}, {65, 23,
           15}, {12, 23, 11}, {86, 42, 73}, {48, 19, 7}, {28, 23, 12}, {26, 
          19, 3}, {42, 63, 11}, {62, 68, 8}, {47, 43, 15}, {19, 48, 3}, {69, 
          68, 62}, {30, 38, 20}, {77, 42, 72}, {32, 40, 24}, {46, 42, 11}, {
          88, 43, 75}, {72, 42, 86}, {48, 50, 3}, {78, 46, 85}, {83, 50, 
          71}, {74, 43, 88}, {50, 53, 3}, {49, 48, 7}, {40, 32, 16}, {63, 69, 
          62}, {66, 46, 11}, {69, 63, 7}, {11, 62, 12}, {81, 49, 82}, {68, 69,
           7}, {87, 46, 78}, {32, 36, 16}}], 
         PolygonBox[{{89, 64, 42, 77}, {80, 48, 49, 81}, {75, 43, 47, 84}, {
          71, 50, 48, 80}, {73, 42, 46, 87}, {85, 46, 67, 90}, {70, 7, 64, 
          89}, {90, 67, 43, 74}, {82, 49, 7, 70}, {76, 53, 50, 83}}]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{31, 22, 21}, {81, 41, 80}, {17, 25, 2}, {21, 51, 14}, {
          44, 41, 2}, {54, 51, 10}, {27, 31, 21}, {29, 37, 25}, {83, 44, 
          76}, {90, 54, 85}, {39, 31, 13}, {31, 39, 22}, {45, 58, 6}, {27, 21,
           14}, {57, 59, 10}, {61, 54, 10}, {21, 22, 9}, {52, 55, 14}, {84, 
          52, 75}, {51, 52, 14}, {6, 56, 5}, {56, 57, 10}, {29, 33, 1}, {37, 
          29, 1}, {10, 21, 9}, {59, 61, 10}, {58, 57, 6}, {9, 56, 10}, {35, 
          31, 27}, {41, 45, 6}, {60, 52, 51}, {18, 17, 5}, {18, 29, 17}, {77, 
          45, 89}, {29, 25, 17}, {33, 29, 18}, {5, 17, 6}, {70, 45, 82}, {56, 
          9, 5}, {41, 6, 2}, {57, 56, 6}, {51, 21, 10}, {87, 59, 73}, {54, 60,
           51}, {89, 45, 70}, {31, 35, 13}, {80, 41, 71}, {74, 54, 90}, {17, 
          2, 6}}], 
         PolygonBox[{{78, 61, 59, 87}, {82, 45, 41, 81}, {88, 60, 54, 74}, {
          79, 55, 52, 84}, {72, 58, 45, 77}, {75, 52, 60, 88}, {86, 57, 58, 
          72}, {85, 54, 61, 78}, {71, 41, 44, 83}, {73, 59, 57, 
          86}}]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
         LineBox[{76, 83, 71, 80, 81, 82, 70, 89, 77, 72, 86, 73, 87, 78, 85, 
          90, 74, 88, 75, 84, 79}]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], CompressedData["
1:eJw9k31Mk1cYxev4CKCrDFizCDJUZN1wqJurFhNPGURIRAaNU+YY0SqzDATm
nHEVt6IGmmUg21w01mDBjDCwUSSAo9S30Jc2ZkALrXyUtrRibcvHwPEpq3F9
XXhP8vzx++Pe+5znOXeDoJCf48NgMHjeWuWt17zF7lp9nN/eScS8cdUTIx3B
msPn/5A96iBaDsntoZ9bkKl5k5uTpaT5biIxHD/XSrgYfmPcY9MI6BCKgn+6
R8R2CbqsZRaIZ1mJ8YUlIB21eakMN2QFt7njmhqIXM1hy+86MXM+bvWoswUa
Yk163YIbwe72rsreVrSZT5cHRk0j6sA+8cfN91HekcZdXB7F3bzQzQqOEqf+
dK8L5f2NmYRt1yN9CXx/o8TSyHKDvbij89QnHeApZm2l/lNIEaiLozmdeBj/
esngrA1HejJ2DkSokV3QpvGtnIZ4l+1ZmQ+J7v17XiiGJxFc8I7OdobE5Dm/
sNwjT2kmto/UXAl14j7zxZcT+i6U/d6kmFt4DF4SJQ2+Eh+szakw4azHLta+
3Q3+FmU6VzWOyhNFu7/z70Hm2nJOk9GMzG+M5R8l67AxTsuSl7ppXnnfVRee
V9GmQ39f3dbAeSMYQY9CZOl67Oi9cmuDcBCViJhZUutBhjVImOxh3K6n1IeX
4QaZJcEIklrPz/1gJQiHk10Gmo3FQYs1agdejdPXgJPd/Lb+Y3bYvN0yzxog
OKNNE/lqUdRCGTTQ+/BMfGoiso2o+NAhDDA5aGa3L6lVuZPwZLEe6HIGUKl6
RqRlaGj+Whx58cf0MUh++ULKHh7AYeY2ZVCsmubUjA9YwdlamlPGCdPJGQfS
31/ldTyImCxqQSrkX7tMlj4fRPfF91Jjgu7RfGFvaeyt3XqoqLjVDsF8NeVf
z/qHkPhE/rDLNgRPzwHl8sFGXDptFaQ4TYgj/VI5VjVko/nrl3tG0Nt6uaTY
nySW7hzKfSky0/OSvWrAAnbhTU7D+F8QTugLW5hWBMxG6KojqoktpdSFVkii
55ck52RY4ZXzc1Fv7V97wQqG/jm5blMS0a6gZMXeKrWGET6K6Maje0KkNixc
2vlPA8+G8X1+8gdGG0TSrLIn9RqY06o6po7bMaTYZGpslhMrfO1Jd5WPu56o
cXsDX2XHfEh15/WjJvi3/nqiSGGn/fZS8Z63o47kI9l+By7qO408xlR94PZY
yQDmpPJE4rOnaEoqztn6bd//+dI7oWeOCX7Lv0n8B+WBFDk=
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], CompressedData["
1:eJxFlHtM01cUx4ss4oCVx4ShFaaRaB0PpxgFmRwMrKBRB8TxkjGKZQibiA4S
ZA4EWtqRiUucC5Gw4UBlklVgYBmjOy2PMh4FW0ppi4U+foI8ywyCIIEVCb/d
5PzxyU1uvvdzzr27Ei9FJFlSKBSGuSzMtclc8aV0dUPnC6SyD9pd0eqg5GZb
4SJvFuN3Mf1M9n1QMNTp0/jZLFKPqPPi4kUkn5VGldl26MC9lhngWGrC6EwN
jaf8C0RGO6uPckx4sSeiSX5eDz99s535514TBo/fYZezW8GH/88+o7WZD885
PLYkYAujvyChfgZjqR8KrT1a4b2go5cOuM/glH2UM6WoAaY1wZ186TR2b/06
yWdCD68Hq+tzj03jPW7O34eqBqDN4ibsSJ9E3WTxWzFtt6F/5eUH0yMTmJW8
EF7MrwRbVkRz4P0JVOyvTbkR3A7mNA8cnCcwMJ9+YsXZAIJbyen+i+Po0Z7Y
PszVguSH3nO2KePIP+1WRJd1gu85bs4fL5+jYYpvz3MQk7wy1VtA204AI3om
hZ30HN1+W00ViAch8lPzGhhDvskprDJPDWUCF/lVmzHkdJ8eLKEYQLkj87xU
NoqrtP5y7XEFNNWOVtEmn2GNvyPLIUoHKvP1hF0EZjDmL8cIeoEfhOqjGQTm
63wZvX5iZK/5dyUwZLmbwkntg53UrGU9hcDixHFOl4USmgP3tNsQRgwYlOSx
QmXgbTMyVpduRCUn45VIr4QL6f5XNx8xYlxr9GqqeBgC1hqgM2DhUvhcLF0O
NXKzwIsGzPiOx65KUwAn9e2wKmcD0l1yvfsqakh2cmQ1c0RGSFnNvj2/X4+N
DQ20kodSkr/oKdL+fldF8g3xGb+FpRGoYA3uOTmvw5iavQWFQ3KS601az84g
A0xI7lSkeepI32/8PhvBIr6r0NFJAS+4lm65viPIOqhqya8QkEy8m5a/WGgA
z+nPH8lXhrE055Tu344hsM+Xze10GUbbLwMEdbF1GDrmVZgxrMXKbVNednMC
kl+7Z7Yry3rA89ov3S0LT3FZela4FFm73o+TT/Ed9ZMQFfUJyT93hc7FlxnW
/c5qMGuT1SgzEtf9CjSYELWZW/GAixt8nZG1rzqOSe435oWNHudXw9byMC8L
aw3p89Whliuf7FaT56eu+XukQtmvlY4hUgK+Kl6bGCVml8ZxiYcS4L1ZA+S8
b/BG/g0u96MMhQvrSBZJPO95HHsMOnP6b70VSK87cGLprgzarrkf7gnpJ/Ms
6693vE/tJ/+D7+9biS9ky7C8kq9qumUEic3aA/ufiR8vf3xmmxQTXJO9A3dz
4D9FpGob
       "]]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334],
       AbsoluteThickness[2], PointBox[CompressedData["
1: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
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxFlQs0lOkfx7VqK5WW0FbatEo2FaUQ5VH808oKYd1SNopKbMnqJia5JP1r
11ab3KrJLZaQW/zcTUNym4sxmJsZ91uoRbXvcN5nn3PmvOdz5jzv8/5+z/f7
/a3/xdfW8ysZGZkE4id9Rsh+d91A7T3sd72z1XmZEC2nNI2rsccwv8i9XmJR
PAav3pgqbDQUoq+U0jaauI9ClVJ6hLxmG5pxVSl9Rx2BnQ0xT9d7sdC5Te94
ATtGQEPhwYxGbDta4nwtNVF5BCgHwrSeGjWi/kMLMkpbhyGcmlM8PilAG7Ld
jRVjh8F/mOF9zS8HlQmXL9wTNAxmeuMKr2RF6Cjxek/3YbhbNgpWNjWYV0/o
PvnSysB855fem/R5TMxNOvLCXUOd6P6V1e6Fm4bhD5U8K8oQC+lm0n4Qyv23
n2Sfetui5hN8RA0Msbz1YAi+P1qn65vZhvalayvnXh6CdzTjbf1MIZpmpede
3zsIPZN7vS7EtqKHckSBaoN4f5PvK/lP4gHYH/W7hequFsyxQZa80dp2JMdQ
TLTOGABnl0gLtTQhuppQV/Fh9wDev6r5UtT6tQPgWun45XR5J8qbr2l3SGYA
jnq8P2RMa0VRj3dk0lL7QWWfV5t5Twv6dLK/0VevH+i1q9hrz5Sjls8Tmwe7
+kC0/3xCcWYzWuph+9rkeR8Y9GTYZDoUYM59EpqQU1WOearmbJStFRfzZKj+
WLoJD6Xcl7l5OrIPPrrFMRfq8zFPGcgWn9gqQIJpQgCH++DxiGC5bDIf2dUo
7/bk9sIWray0nMjXmMn6Rj5Wzvs/9MKMoncCqAtRzd0Gl6XevZC7WPuzjl8R
ZjuXcp9pCQc91mzLi1TsBf8Dk7865TdgdkguCfEq4SMDl/CgnIkeKDveBQ5G
LCT//h5bJ6EHhEks255kLiLUmuRM6cH1HXAc8g717IGXyoEHfX7io+ASi2mW
Vg8sjb/Ba1tciAq/T76tNSYBlQS/FfX6VcjBnlgMCZzvGdRnnOpEY+GEYQok
IK/fFuLqVobuFGWLU2Il+HytwWN/NwdJsB9o6+QDZ9wluD6ie4utNSVwOtjh
uecdzn88NsAI8OGhuPxvmy8tkcDY6w7dU1U0ZNhX8+jpkBh0+qtKko90owuH
1bd8yBWD23L7Fez73egbqV8fioEaHlS6M4WBeWNqrTn3Bm/Ov1fEcLL+VkdG
EhsdlGwN83cTw0Fq+scU9VzMt85EpVUebUAUy1sraRvEEArzo13VixGRDrzR
hWK4HOsaLkqrwUzWR3LXsSeF+x7xkLQda/q7wVlep0ROqxKzWe+j0MTQSjSu
Ymrom90NZzvdeL0ddLRVaoDfuoFGC7CpUWrHTPabTdithC6C6HKr3R+mujDH
0w+Ou8UJkIJ03RPBRwWzH8fyy1CmKbQZ+otAb0tcBzW/FlkE+Dzx+FkEihZy
n03M6jGT/Qttf6NbsFaE+02yccxOX+V7dei1iUb1EpEQ54fThdboXbVCcLzI
WRPBLEaTVIrDsTQhfJf65XR+OQv9ztZZFxkthFI51e3q8dWYJxSTKh65c9C2
JV2Sl35CXF/d3ugs7hEh9rOXn9Glr/WFMH1qIXujfTNKYjyQc/4kAKXEt7f9
+R3IeNGBlhs8AWj6Juil99VhJu8/q5kIAB8BzieSyTwhOctI0UPhZx6yJOLY
zloAy9oazdnyjZjJPCV5qYHe9PxFHCSVa4qKAOcBkbb8aS4fCvLy1jxMe4uZ
zAPvL5f/nNTmQ/CBwB/SXd0x33TKTw5fz8VM6ltZ++6PoxQezk/peFhzkgdh
UzbjzprNc35N7wK1hYuoRgo0VCT16/kumJpXNGZ9pBJm/WnQBQ/owSsN29uQ
NM40qjshcK/dT8ddmChe6q+oTqB7K8T/taZpTv+dHWAybq/L6A0Eksn7nfXD
sw48z2b1u70DbjtdD30hFKEtswHOhVQji/CBGBZSnBUkF5JaXk5cLW6Z0xur
Hc8vkgfTFm/XimDO6WGEAybBKyny/AuYC0Ksxfsy0+f0kM/Bec0xHI/NMOXA
4eSJZ6bTbKSUaL11nhwH7GdcihqGGjH7R0aEppxrRR93Vpw/rN4GTlmbboS1
NyPicA2LADbkmF311L7YhLiE3OP2sLE/Sd5WtcBSr7MSWcUMcMzesMB8po6I
qneYye8vc6N+6rdnwfSGi9XMuHo0RcQ7UmVBq3a2d7RZNeaHmpE2pZvp6Oxs
YDLBHLmtaF3PQM/eSxvKxOd1OkoNxsT5GjG7GEAztorecyUZ8zcqVFqfeRrm
44PTsn8pZWBWdQkJb2XmYvbYwa6gPM3HTOY9yeS8qhgUreJaMXC+PCfsvdmr
FSIcnbd1/VaBqq5u0Ks3b8H/z/CDa9fJtwC7WJ2TnZcBeuYdRAXN4Lr/z7Hj
m/JgNdcqvnywCSiy49/ahdKRAVP14om3jSAebDlpf02IZq/3j0bQ0v9nfPik
EKUlSg3fiM9TPSNtWAPwjjj5LigpRP70AkLxb7E+RDG//s9q1VuQqVeiPn59
C70otWvsO1SHv08tchkxEekgWnGO8k+YAP0L1jdw/g==
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.8% Marg=0.0551\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.1953663793103448`, 
   0.7970186781609194}, {-0.15644794775238186`, 1.046476631469954}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.600525281598768*^9, 3.6005253136889677`*^9}, {
   3.6005253478571663`*^9, 3.600525371143449*^9}, 3.600525473291607*^9, {
   3.600525698422022*^9, 3.6005258048029137`*^9}, 3.6005259032103653`*^9, {
   3.6005261610614653`*^9, 3.600526281106331*^9}, 3.600526573182786*^9, 
   3.600526777281084*^9, {3.6005272235439568`*^9, 3.600527240872759*^9}, 
   3.600528404990016*^9, 3.600528509066758*^9, 3.6005289681701803`*^9, 
   3.600529089956275*^9, 3.600545179203183*^9, 3.600599486802042*^9, {
   3.600600439179556*^9, 3.600600443029963*^9}, {3.600603585410226*^9, 
   3.600603596615411*^9}, 3.600671168649715*^9, {3.600671657502849*^9, 
   3.6006716662418337`*^9}, 3.600671813286641*^9, {3.6006718972369537`*^9, 
   3.600671925372246*^9}, 3.600672554362094*^9, 3.6012141439917803`*^9, 
   3.601214215409931*^9, {3.601286475085067*^9, 3.601286520742255*^9}, {
   3.601295996336068*^9, 3.601296015130075*^9}, 3.601296095374415*^9, {
   3.601297208860219*^9, 3.601297219178059*^9}, 3.601298964909574*^9, 
   3.601301325744738*^9, 3.601304700631179*^9, 3.601372920719833*^9, 
   3.601375313063343*^9, 3.601375344736702*^9, 3.601559816717133*^9, {
   3.601559851094203*^9, 3.60155986282467*^9}, 3.601559893370398*^9, 
   3.60155996690933*^9, 3.601560101652937*^9, 3.601560139156393*^9, 
   3.601560664405232*^9, 3.601563125004244*^9, 3.60157166248385*^9, 
   3.6015725047098017`*^9, 3.601572725661755*^9, 3.601626190133806*^9, 
   3.6016262228601522`*^9, {3.6016262668611517`*^9, 3.601626330040524*^9}, 
   3.6028569435795317`*^9, 3.602857179012652*^9, 3.6028573805641193`*^9, {
   3.60285974033444*^9, 3.602859782181679*^9}, 3.60286008254284*^9, 
   3.607432691675115*^9, 3.6375648212489023`*^9, 3.6375649416831427`*^9, 
   3.637565535374145*^9, 3.637565667239622*^9, 3.63756572103988*^9, 
   3.637565860554153*^9, 3.6375660638111267`*^9, 3.637573403188794*^9, {
   3.637573822994574*^9, 3.637573972374054*^9}, {3.6375743232779303`*^9, 
   3.637574364556185*^9}, 3.637574402084166*^9, {3.637574848704534*^9, 
   3.637574858207715*^9}, 3.6375753120064096`*^9, 3.6375820359715137`*^9, 
   3.637582314386149*^9, 3.637583530043165*^9, 3.6375855989602222`*^9, 
   3.637588908588122*^9, {3.6376597478871107`*^9, 3.637659866003551*^9}, {
   3.637659992998116*^9, 3.63766000164018*^9}, {3.637660062593515*^9, 
   3.637660213189596*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it can be seen, if the training data is linearly separable (if there \
exists an hyperplane separating the two classes), the max-margin classifier \
will always return the hyperplane maximizing the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "s"], "(", "h", ")"}], TraditionalForm]]],
 " between the two classes.\nUnfortunately, if the training data is not \
linearly separable this learning algorithm will fail to find a feasible \
solution (try drawing a non-linearly separable dataset for a direct proof). \
Moreover, while margin-maximization is a desirable property for \
generalization, when the training and the testing datasets do not exactly \
follow the same distribution (which is often the case due to noise, or too \
small training sets), exact margin maximization can result in poor testing \
performances. A way to address these problems is represented by the so-called \
\[OpenCurlyDoubleQuote]soft-margin\[CloseCurlyDoubleQuote] classifiers, \
introduced in the following Subsection.\n"
}], "Text",
 CellChangeTimes->{{3.601374016160015*^9, 3.601374108453491*^9}, {
   3.6013741701092167`*^9, 3.601374185867347*^9}, {3.601374300517311*^9, 
   3.6013743112997437`*^9}, {3.601374349818544*^9, 3.60137435164546*^9}, {
   3.6013754753413553`*^9, 3.6013758242855387`*^9}, 3.601386048099481*^9, 
   3.601558698679441*^9, {3.601588174036932*^9, 3.601588259533139*^9}, {
   3.607432723483946*^9, 3.6074328364540586`*^9}, {3.6375742776000977`*^9, 
   3.637574280398279*^9}, {3.637574436133092*^9, 3.637574476278235*^9}, {
   3.6375745098118353`*^9, 3.6375745166992073`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: soft margin", "Subsection",
 CellChangeTimes->{{3.6000689928004103`*^9, 3.6000690070043983`*^9}, {
  3.600511161175296*^9, 3.600511163195389*^9}}],

Cell[TextData[{
 "The formulation introduced above is designed for linearly separable \
problems. However, it often happens that a dataset does not satisfy this \
condition, or it is difficult to know in advance whether it holds or not. In \
case the problem does not turn out to be linearly separable, the max-margin \
learning algorithm will fail to find a solution satisfying the constraints, \
leaving us without a solution.\nIn order to addess this problem, soft-margin \
classifiers have been designed ",
 ButtonBox[Cell["[1]", "Citation"],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 " to allow the algorithm to violate the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", by an amount ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " (called ",
 StyleBox["slack variable",
  FontSlant->"Italic"],
 ") as little as possible.\nIn this case, the optimization problem can be \
written as:"
}], "Text",
 CellChangeTimes->{{3.600001837542701*^9, 3.600001853250449*^9}, {
   3.600001919433455*^9, 3.600001927754375*^9}, {3.600002236368168*^9, 
   3.600002289498114*^9}, {3.600002328886511*^9, 3.600002359676182*^9}, {
   3.6000024053924417`*^9, 3.600002506172327*^9}, {3.600003064899695*^9, 
   3.600003487186778*^9}, {3.6000037742462378`*^9, 3.6000038448060913`*^9}, {
   3.600004329736326*^9, 3.600004331982662*^9}, {3.6000044371635923`*^9, 
   3.600004522438382*^9}, {3.600004588409666*^9, 3.6000045912136917`*^9}, {
   3.6000047699081697`*^9, 3.60000484041494*^9}, 3.600004881401889*^9, {
   3.600004928685863*^9, 3.600004939763482*^9}, {3.60000509381358*^9, 
   3.600005140308243*^9}, {3.6000051749544783`*^9, 3.6000052935184383`*^9}, {
   3.600005771388554*^9, 3.600005876688408*^9}, {3.600005983761335*^9, 
   3.600006185968944*^9}, {3.600006223808519*^9, 3.600006249618011*^9}, {
   3.60000634500441*^9, 3.600006352663932*^9}, {3.60000643341108*^9, 
   3.600006500426401*^9}, {3.6000065326787663`*^9, 3.600006672039229*^9}, {
   3.600006778648384*^9, 3.6000068159838963`*^9}, 3.600006859047031*^9, {
   3.6000071391314363`*^9, 3.600007141303833*^9}, {3.60006894880341*^9, 
   3.6000689860687838`*^9}, {3.6000690359654818`*^9, 3.600069616392734*^9}, {
   3.6000698086840277`*^9, 3.600069819840662*^9}, 3.6000698520984077`*^9, {
   3.600069946376136*^9, 3.6000699712854137`*^9}, {3.6000701256232224`*^9, 
   3.60007014793779*^9}, {3.600071495706664*^9, 3.60007150754605*^9}, 
   3.6006769472261*^9, {3.60158827235858*^9, 3.601588326002502*^9}, {
   3.607432874239674*^9, 3.60743288050905*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b", ",", 
     StyleBox["\[Xi]",
      FontWeight->"Bold"]}]], " ", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{"C", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Xi]", "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    SubscriptBox["\[Xi]", "i"], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n", ",", 
  "\[IndentingNewLine]", "          ", 
  RowBox[{
   SubscriptBox["\[Xi]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                      ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, {3.600069619878358*^9, 3.6000696976499662`*^9}, {
   3.6000698340070744`*^9, 3.600069843688924*^9}, {3.6000703147873783`*^9, 
   3.600070318851357*^9}, 3.600070748774111*^9, {3.6004338335707273`*^9, 
   3.600433892615193*^9}, {3.6005188532159567`*^9, 3.6005188733822203`*^9}},
 CellTags->"eq:1norm_svm"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " tunes the importance of the slack variable minimization, w.r.t. the margin \
maximization. A big value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will push the optimization algorithm to find a hyperplane on which all the \
points are correctly classified with margin 1, while lower value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will allow the learning algorithm to commit margin - or decision - \
mistakes on some samples, without heavily affecting the decision boundary.\n\n\
In this case the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "S"], "(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}], TraditionalForm]]],
 " of the optimal classifier cannot be computed simply as ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 ", since there is no guarantee anymore that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    " ", "1"}], TraditionalForm]]],
 ". Nonetheless for all the points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "<", "1"}], 
   TraditionalForm]]],
 " we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", while for the others we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 ". Therefore, the minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["max", "i"], 
        SubscriptBox["\[Xi]", "i"]}]}], ")"}]}]}], TraditionalForm]]],
 ". For linearly separable datasets and with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[Rule]", "\[Infinity]"}], TraditionalForm]]],
 ", we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["max", "i"], 
     SubscriptBox["\[Xi]", "i"]}], "=", "0"}], TraditionalForm]]],
 " and the margin obtained with this approach will correspond to the one \
obtained by the max-margin classifier. On the other hand, on non linearly \
separable datasets, we might have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], ">", "1"}], TraditionalForm]]],
 ", resulting in negative geometric margins. In this case the geometric \
margin behaves as a signed Euclidean distance, with a negative sign meaning \
that the problem is not separable.\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529771801248*^9, 3.6005297753873158`*^9}, {3.600544039843444*^9, 
   3.600544087555781*^9}, {3.6006769921215057`*^9, 3.600677024230349*^9}, 
   3.6015586958593483`*^9, {3.60162113767901*^9, 3.601621155282135*^9}, {
   3.601621185743477*^9, 3.601621278323886*^9}, {3.601621321146552*^9, 
   3.6016213355989933`*^9}, {3.601621427863902*^9, 3.6016216153973618`*^9}, {
   3.601621664497609*^9, 3.601621699926613*^9}, {3.601621776837029*^9, 
   3.601622163930435*^9}, {3.60162220858821*^9, 3.601622236455072*^9}, {
   3.601622299066782*^9, 3.601622393699473*^9}, 3.601626091685643*^9, {
   3.602857085844995*^9, 3.602857088063904*^9}, {3.607432973261351*^9, 
   3.607433063362577*^9}, 3.60743395766329*^9, 3.637574559415341*^9, 
   3.63757460024273*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433046905921*^9, 3.607433060149661*^9}}],

Cell[TextData[{
 "Even if at a first glance the optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 ") does not look very friendly, it can be shown to still be a QP program. It \
can thus be again directly solved using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver, as shown by the following code snippet:\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529771801248*^9, 3.6005297753873158`*^9}, {3.600544039843444*^9, 
   3.600544087555781*^9}, {3.6006769921215057`*^9, 3.600677024230349*^9}, 
   3.6015586958593483`*^9, {3.60162113767901*^9, 3.601621155282135*^9}, {
   3.601621185743477*^9, 3.601621278323886*^9}, {3.601621321146552*^9, 
   3.6016213355989933`*^9}, {3.601621427863902*^9, 3.6016216153973618`*^9}, {
   3.601621664497609*^9, 3.601621699926613*^9}, {3.601621776837029*^9, 
   3.601622163930435*^9}, {3.60162220858821*^9, 3.601622236455072*^9}, {
   3.601622299066782*^9, 3.601622393699473*^9}, 3.601626091685643*^9, {
   3.602857085844995*^9, 3.602857088063904*^9}, {3.607432973261351*^9, 
   3.60743303565504*^9}, {3.6375747573619413`*^9, 3.637574760010569*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainSoftMargin", "[", 
    RowBox[{"fTr_List", ",", "yTr_List", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "nTr", ",", "fTr2", ",", 
       "d", ",", "w", ",", "v", ",", "b", ",", "xi", ",", "x", ",", "i", ",", 
       "sol", ",", "obj", ",", "cnstr"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"xi", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"x", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"cnstr", "=", 
       RowBox[{
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "<=", "0"}], "&"}], "/@", 
           RowBox[{"Flatten", "@", 
            RowBox[{"(", 
             RowBox[{"1", "-", "xi", "-", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"fTr", ".", "w"}], "+", "b"}], ")"}], "yTr"}]}], 
             ")"}]}]}], ")"}]}], " ", "&&", "\n", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", ">=", "0"}], "&"}], "/@", 
           RowBox[{"Flatten", "@", "xi"}]}], ")"}]}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{"w", ".", "w"}], "+", 
        RowBox[{"regC", " ", 
         RowBox[{"Total", "[", "xi", "]"}]}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "cnstr"}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}], ",", "xi"}], "]"}], ",", " ", 
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}]}],
         "]"}]}], ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b", ",", "xi"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"sol", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"Max", "[", 
           RowBox[{"model", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ")"}], "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"model", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600529613144619*^9, 3.60052963238398*^9}, {
  3.600603885117957*^9, 3.600603886505888*^9}, {3.601374403830535*^9, 
  3.601374430109478*^9}, {3.601573493622208*^9, 3.601573493847793*^9}, {
  3.6015883741683693`*^9, 3.601588380449217*^9}}],

Cell[TextData[{
 "\nAs before, we report here an example of usage, where ",
 StyleBox["createData[]", "Code"],
 " is called in order to draw a dataset and  ",
 StyleBox["{fTr,yTr,fTe,yTe}=getTrTeData[trPerc]", "Code"],
 " is used to obtain the coordinates of the training and the testing points, \
using a 30%/70% training/testing split.\n"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090464055588*^9}, {
   3.6000905913737497`*^9, 3.6000906103354588`*^9}, {3.600090696746578*^9, 
   3.6000907045061502`*^9}, {3.6005295644428997`*^9, 3.600529577817708*^9}, {
   3.600529678813099*^9, 3.600529764249748*^9}, {3.600544095482354*^9, 
   3.600544177035437*^9}, {3.6006719488475933`*^9, 3.6006719512135572`*^9}, {
   3.6013744660606613`*^9, 3.6013745296506243`*^9}, {3.601374565839364*^9, 
   3.601374849821602*^9}, {3.6013748857814693`*^9, 3.601374950895156*^9}, {
   3.601386057433106*^9, 3.601386058982265*^9}, 3.6015586941993*^9, 
   3.637576734611086*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601207826661016*^9, 3.6012078322261257`*^9}, {
  3.6012096925331287`*^9, 3.6012096929102297`*^9}, {3.6012976309206133`*^9, 
  3.601297631575138*^9}, {3.601297918675498*^9, 3.6012979195420094`*^9}, {
  3.6012979550010023`*^9, 3.601297955892606*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$667 = MousePosition["Graphics"]; 
     Private`p$667 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$667], 2], 
          Union[
           Partition[Private`pt$667, 2]]}, 1]]; 
     If[Private`s$667 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$667}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$667}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$667 = {}; 
     Private`s$667 = Private`s$667 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.600529782509405*^9, {3.600529990283494*^9, 3.600530002186282*^9}, 
   3.600530090211268*^9, 3.600530210238405*^9, {3.600530256815338*^9, 
   3.600530286011044*^9}, 3.600530410375724*^9, 3.6005304763736343`*^9, 
   3.6005441825365047`*^9, 3.600545003679199*^9, 3.600545595081881*^9, 
   3.6005462589772253`*^9, 3.600602781576613*^9, 3.6006030832068377`*^9, 
   3.6006033180255737`*^9, 3.600603522890913*^9, {3.6006039456108847`*^9, 
   3.600603945809247*^9}, 3.600612998413377*^9, 3.600613811986126*^9, 
   3.6006326441470413`*^9, 3.600671117240415*^9, 3.600671642169813*^9, 
   3.6006718036689577`*^9, {3.600672265428256*^9, 3.600672275933691*^9}, 
   3.600672525805505*^9, {3.600672575455937*^9, 3.600672628747901*^9}, 
   3.600672677987822*^9, 3.600672730325946*^9, 3.60067293990129*^9, 
   3.600673032365019*^9, 3.600673142949374*^9, {3.60120637031126*^9, 
   3.6012063706503887`*^9}, 3.601207775277233*^9, 3.601207832529253*^9, 
   3.601207865996746*^9, 3.601208442423897*^9, 3.601208487025152*^9, {
   3.601208525644061*^9, 3.6012085352612534`*^9}, {3.601208774940124*^9, 
   3.60120878254042*^9}, 3.6012091167445087`*^9, {3.601209436890952*^9, 
   3.601209437447448*^9}, 3.601209693426746*^9, 3.601211466975379*^9, {
   3.601212264522111*^9, 3.601212290660997*^9}, 3.60121266810853*^9, 
   3.6012133563570623`*^9, 3.6012140403085938`*^9, 3.601214608162497*^9, 
   3.601218004410623*^9, 3.601286272904632*^9, 3.601295889896371*^9, 
   3.601296909732279*^9, 3.601297170396491*^9, {3.601297662001245*^9, 
   3.6012976623672943`*^9}, 3.601297956422258*^9, 3.601298894647387*^9, 
   3.601298947126103*^9, 3.601304693462337*^9, 3.601372885040307*^9, 
   3.6013752771477337`*^9, 3.6015597717449512`*^9, 3.601562166361266*^9, 
   3.601563111969944*^9, 3.601571645033457*^9, 3.601572489292029*^9, 
   3.601626156175782*^9, 3.6028568556284237`*^9, 3.602857141081953*^9, 
   3.602857220153934*^9, 3.60285972449185*^9, 3.60285988514993*^9, 
   3.602859990583866*^9, 3.6028600338423443`*^9, 3.607430517793701*^9, 
   3.607432448278328*^9, 3.637564725066325*^9, 3.637565525764845*^9, 
   3.637565654656723*^9, 3.637566042079208*^9, 3.6375733609909153`*^9, 
   3.637575000818576*^9, {3.637575033777073*^9, 3.637575055248712*^9}, 
   3.637575142158746*^9, {3.637581899470537*^9, 3.637581927595129*^9}, 
   3.6375819602768717`*^9, 3.637581994823217*^9, 3.6375821407731237`*^9, {
   3.637582201438532*^9, 3.63758220173599*^9}, {3.637583464142974*^9, 
   3.637583464430566*^9}, 3.637585525555756*^9, 3.637588558476117*^9, 
   3.6375886491685677`*^9, {3.6375887838990593`*^9, 3.637588821476104*^9}, 
   3.637659185154929*^9, 3.637659328273262*^9, 3.6376596482351027`*^9, 
   3.637671396122485*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nThis time, in order to use the soft-margin classifier with a \
regularization parameter ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", we will use the command  ",
 StyleBox["runMaxMarginExperiment[fTr,yTr,fTe,yTe,trainSoftMargin[#1, #2, \
C]&].", "Code"],
 " In this case the classifier funtion is created as an anonymous function \
with two parameters (corresponding to fTr and yTr - see the documentation -) \
while the third parameter, the regularization coefficient",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " is fixed. Finally, in order to show the behavoir of the algorithm when \
varying the regularization parameter, we will also make use of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function ",
 StyleBox["Manipulate", "Code"],
 " to dynamically adjust the plot while varying the parameter ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.601374954867086*^9, 3.6013751014899483`*^9}, {
   3.601375184833784*^9, 3.601375193858099*^9}, {3.601386061880291*^9, 
   3.601386063628708*^9}, 3.637576779599946*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainSoftMargin", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, {
   3.600600462988875*^9, 3.600600490747484*^9}, {3.6006006023090973`*^9, 
   3.600600617351081*^9}, 3.600603164788883*^9, 3.600603990447899*^9, {
   3.600604112686928*^9, 3.6006041143637753`*^9}, {3.600671965092746*^9, 
   3.600671965294054*^9}, {3.600672656770911*^9, 3.600672658595111*^9}, {
   3.601286614709449*^9, 3.601286623982645*^9}, {3.601286700237975*^9, 
   3.601286764071398*^9}, {3.601286988876445*^9, 3.601287001193364*^9}, {
   3.601297278695887*^9, 3.601297290837179*^9}, {3.6012974792041807`*^9, 
   3.601297500526369*^9}, {3.601297538358511*^9, 3.601297585092586*^9}, {
   3.601297713310603*^9, 3.6012977413100033`*^9}, {3.601297914356962*^9, 
   3.601297914769359*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    1001., {8., 20.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$10285$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$10285$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainSoftMargin[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1052., {61., 70.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.601372966250511*^9, 3.601559984712159*^9, 3.6015601463192863`*^9, 
   3.601560648196865*^9, 3.601560819491561*^9, 3.60156314165327*^9, 
   3.6015716781021643`*^9, 3.6015725231652803`*^9, 3.60157259248239*^9, 
   3.601572737232231*^9, 3.601626243854045*^9, 3.6016263428498783`*^9, 
   3.6028571191699953`*^9, 3.602857154839723*^9, {3.602857243070468*^9, 
   3.602857338210691*^9}, 3.602859809329527*^9, 3.602859871915287*^9, {
   3.602859904005724*^9, 3.6028600446975718`*^9}, 3.607433127612075*^9, 
   3.637564853024686*^9, 3.637565731869989*^9, 3.63756588020093*^9, 
   3.637566075614814*^9, 3.637574905470798*^9, {3.637574944557906*^9, 
   3.637574972840777*^9}, 3.637575017511821*^9, {3.637575080167186*^9, 
   3.637575128583579*^9}, 3.6375751609028873`*^9, {3.637581917568626*^9, 
   3.63758194152759*^9}, 3.637581977725383*^9, 3.637582010113209*^9, {
   3.637582230820006*^9, 3.637582274309915*^9}, 3.637582304993907*^9, 
   3.6375834981706343`*^9, 3.637585576056095*^9, {3.6375857930855513`*^9, 
   3.6375858087978992`*^9}, {3.637588683766335*^9, 3.637588752579894*^9}, 
   3.637588838137336*^9, 3.637588888596665*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it is possible to see, in agreement with the theory when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[RightArrow]", "\[Infinity]"}], TraditionalForm]]],
 ", the solution returned by soft-margin classifier reduces to the one of the \
max-margin classifier. On the other hand, reducing ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " might results in the max-margin principle being violated, resulting in a \
different separation hyperplane. When the noise in the data is high, this \
might result in better performance on unseen samples."
}], "Text",
 CellChangeTimes->{{3.601375224930306*^9, 3.6013752325484877`*^9}, {
   3.60137540215469*^9, 3.6013754610603323`*^9}, {3.601375835744356*^9, 
   3.601376069596875*^9}, 3.6013860666940823`*^9, 3.601558688900959*^9, {
   3.607433175066598*^9, 3.607433249435253*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal margin classifier: hinge-loss", "Subsection",
 CellChangeTimes->{{3.600090403054838*^9, 3.60009041228967*^9}, {
  3.6005111769690857`*^9, 3.600511189362093*^9}},
 CellTags->"subsec:hinge_loss"],

Cell[TextData[{
 "An interesting property of the formulation introduced in the previous \
sub-section is that, by using the fact that the objective function is \
minimizing w.r.t. ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Xi]",
    FontWeight->"Bold"], TraditionalForm]]],
 " and performing a simple case analysis, it is possible to see that for any ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.600069920637766*^9, 3.600069926661518*^9}, {
   3.6000707445299873`*^9, 3.600070773052685*^9}, {3.600070804101396*^9, 
   3.600070934762741*^9}, {3.600071131358141*^9, 3.6000713933531446`*^9}, {
   3.600071526059894*^9, 3.600071534814129*^9}, {3.6000719764203243`*^9, 
   3.6000719857932177`*^9}, {3.600090387921981*^9, 3.600090420965437*^9}, {
   3.6000907095950127`*^9, 3.6000907169789877`*^9}, 3.600155060116129*^9, {
   3.600544262412472*^9, 3.600544264853862*^9}, 3.60067706256285*^9, {
   3.601389838113303*^9, 3.6013899348842487`*^9}, {3.601389968160818*^9, 
   3.6013899697787113`*^9}, {3.601390108620432*^9, 3.60139013955446*^9}, {
   3.637576893202181*^9, 3.637576945874955*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 " whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "\[LessEqual]", 
    "0"}], TraditionalForm]]],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 " (no additional slack is necessary to satisfy the constraints);"
}], "Item",
 CellChangeTimes->{{3.60007140215028*^9, 3.6000714048159437`*^9}, {
   3.600071471087552*^9, 3.600071486127376*^9}, {3.600071539107299*^9, 
   3.6000715483156967`*^9}, 3.60007159412475*^9, {3.600433271266449*^9, 
   3.6004332719557037`*^9}, {3.6004333262443323`*^9, 3.6004333277650023`*^9}}],

Cell[TextData[{
 "whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ">", "0"}], 
   TraditionalForm]]],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
   TraditionalForm]]],
 " (the minimal ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " satisfying the constraints)."
}], "Item",
 CellChangeTimes->{{3.60007140215028*^9, 3.600071453305488*^9}, {
   3.6000715661678467`*^9, 3.600071607546055*^9}, 3.600072002455305*^9, {
   3.600433273163218*^9, 3.600433276731516*^9}, {3.6004333300526257`*^9, 
   3.600433336539894*^9}, {3.60138813785434*^9, 3.601388143645668*^9}, {
   3.601388199359839*^9, 3.60138821253098*^9}}]
}, Open  ]],

Cell[TextData[{
 "We can thus write a closed form solution for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " as a function of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.6000716232316027`*^9, 3.6000717172050867`*^9}, {
  3.600071797373171*^9, 3.600071804208117*^9}, {3.600072063822472*^9, 
  3.600072139207631*^9}, {3.60007219023997*^9, 3.600072247029084*^9}, {
  3.601389991992825*^9, 3.601390056675672*^9}, {3.601390087604802*^9, 
  3.601390168739094*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[Xi]", "i"], "=", 
   SubscriptBox[
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
     "\[RightBracketingBar]"}], "+"]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.601390068246149*^9, 3.6013900714502153`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"|", "x", 
     SubscriptBox["|", "+"]}], "=", 
    RowBox[{"max", "(", 
     RowBox[{"x", ",", "0"}], ")"}]}], TraditionalForm]]],
 ".  By construction, for any given ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}], ")"}], TraditionalForm]]],
 " this choice of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " ensures that all the constraints are satisfied. We can thus subsitute for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " in the objective function and remove the constraints, obtaining the \
following optimization problem:"
}], "Text",
 CellChangeTimes->{{3.6000716232316027`*^9, 3.6000717172050867`*^9}, {
  3.600071797373171*^9, 3.600071804208117*^9}, {3.600072063822472*^9, 
  3.600072139207631*^9}, {3.60007219023997*^9, 3.600072247029084*^9}, {
  3.601389991992825*^9, 3.601390035029743*^9}, {3.601390073716324*^9, 
  3.601390076351453*^9}, {3.60139019456527*^9, 3.601390333031674*^9}, {
  3.601390401102871*^9, 3.601390402716786*^9}, {3.601390687937025*^9, 
  3.601390690051483*^9}, {3.637576996041149*^9, 3.637577005157626*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b"}]], " ", 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{"C", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
      "\[RightBracketingBar]"}], "+"]}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
  3.6000722300726633`*^9, 3.600072241744952*^9}}],

Cell[TextData[{
 "This is a non-smooth unconstrained convex optimization problem, which can \
be solved by using simple sub-gradient descent procedures.  As before, the \
minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["max", "i"], 
        SubscriptBox["\[Xi]", "i"]}]}], ")"}]}]}], TraditionalForm]]],
 ", where in this case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], "(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], 
      "\[RightBracketingBar]"}], "+"]}], TraditionalForm]]],
 ". We can also equivalently compute it using its definition, whichever is \
faster in the implementation.\n\nRecalling that the functional margin is \
defined as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Gamma]", "i"], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["f", 
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], ",", "b"}]], "(", 
      StyleBox[
       SubscriptBox["x", 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"], ")"}]}]}], TraditionalForm]]],
 " and the 0/1 error function as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalChi]", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], 
      RowBox[{
       SubscriptBox["f", 
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], ",", "b"}]], "(", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ")"}]}], "<", "0"}], ")"}], 
   TraditionalForm]]],
 ", we can see that both the 0/1 error and the constraints violation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    SubscriptBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"1", "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{
         SubscriptBox["f", 
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], ",", "b"}]], "(", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], ")"}]}]}], "\[RightBracketingBar]"}], 
     "+"]}], TraditionalForm]]],
 " (often refered to as ",
 StyleBox["hinge-loss",
  FontSlant->"Italic"],
 ") can be expressed as a function of the functional margin ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Gamma]", "i"], TraditionalForm]]],
 ". Moreover we have"
}], "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.600091297397209*^9, 3.6000912978433123`*^9}, {
   3.600094482291164*^9, 3.600094502641637*^9}, {3.600094577882024*^9, 
   3.600094581776475*^9}, {3.600153228630068*^9, 3.6001532599410954`*^9}, {
   3.600153423589492*^9, 3.600153435742185*^9}, {3.601390340706565*^9, 
   3.60139035926153*^9}, {3.601622444788268*^9, 3.601622507610202*^9}, {
   3.601622931148408*^9, 3.601622956020783*^9}, {3.6016230015286903`*^9, 
   3.6016230218652573`*^9}, 3.601626109910359*^9, {3.602857486784349*^9, 
   3.60285749239607*^9}, {3.637577039962811*^9, 3.6375770716417427`*^9}, {
   3.6430865302926817`*^9, 3.643086568489581*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FormBox[
    RowBox[{
     RowBox[{"\[CapitalChi]", "(", 
      RowBox[{
       SubscriptBox["\[Gamma]", "i"], "<", "0"}], ")"}], "\[LessEqual]"}],
    TraditionalForm], 
   SubscriptBox[
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Gamma]", "i"]}], "\[RightBracketingBar]"}], "+"]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600091506754642*^9, 3.600091546586398*^9}, 
   3.600154643457857*^9}],

Cell["\<\
as it can also be seen in the following figure.
\
\>", "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.60009129225014*^9, 3.6000914835746737`*^9}, {
   3.600091573755001*^9, 3.600091589195252*^9}, {3.6000930824444017`*^9, 
   3.600093086838382*^9}, 3.60009438495957*^9, {3.600153284105681*^9, 
   3.600153284728677*^9}, 3.601386071870221*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Labeled", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"err", "[", "x", "]"}], ",", 
        RowBox[{"hinge", "[", "x", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1.5"}], ",", "2.5"}], "}"}], ",", 
      RowBox[{"PlotLegend", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<0/1 Error\>\"", ",", "\"\<Hinge Loss\>\""}], "}"}]}], 
      ",", 
      RowBox[{"LegendPosition", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".5", ",", ".2"}], "}"}]}], ",", 
      RowBox[{"LegendShadow", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".02", ",", 
         RowBox[{"-", ".02"}]}], "}"}]}], ",", 
      RowBox[{"LegendSize", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.4", ",", "0.2"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Full", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".5"}], ",", "2.5"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Background", "\[Rule]", "White"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", ".01", "]"}], ",", "Blue"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", ".01", "]"}], ",", "Red"}], "}"}]}], 
        "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
    "\"\<Hinge Loss and istantaneous error, as a function of the \
margin.\>\""}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.600093131245949*^9, 3.600093279883689*^9}, {
  3.600093324189554*^9, 3.6000933347352867`*^9}, {3.600093368172399*^9, 
  3.600093404706318*^9}, {3.6000934567967463`*^9, 3.6000934816712933`*^9}, {
  3.600093515357876*^9, 3.6000935181937037`*^9}, {3.600093692311961*^9, 
  3.600093749388242*^9}, {3.60009378075563*^9, 3.600093970889696*^9}, {
  3.600094016823143*^9, 3.600094032366508*^9}, {3.600094118782789*^9, 
  3.600094357553536*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{
     InsetBox[
      GraphicsBox[{{{}, {}, {
          RGBColor[0, 0, 1], 
          Thickness[0.01], 
          LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQrWcv9ur//+/7GcDgg31Q+9nVxvEIfvn5ltz0fd/g
/CtXuF8dTPwK58seyBcxl/kC52/NPsLKf/cTnJ/QY/jhZtNHOP/HpOqO/fYf
4Hw32T3GBoffwvlWU5OeLBN+Deez3zz0IWjSCzj/F1vI+ye3nsL5xxjme64J
fAznG1SfNrS8+gDOb9gfKBHhegfhP4WGlhU21+H8wlCBq0eOX4Tzp4ofb7px
4wScH56+csrPrXsR7lnza8nW+5vg/LyH07MeCy2A8z+YZYREcEyD8znCHJdf
vtoO51tM+exzqqAa4b6PE3W3Xo+B8y1Z9Zc/eBoC5wMAciCYww==
           "]], 
          LineBox[CompressedData["
1:eJxF0HtI0wEQB/C5TdNJQyskMDGtOQ3NIFuGwtbAB7IEh7k/VptODZymopUZ
BmnbciLTRMlwTmI656M5KYviZ7g/jDIEHzXNpm5aosyV5msOHxXV3cFxfODg
jm+QpICfTSaRSPG/+8+84B7Zbv2Wyib9K880/wnbpBi8wrqcN+slBednqDZ1
h4vAWcyfLFFwCVj/2SJcaLkH1hL0nYvM+2BNC0fdbJCD67NbLan9VeABZ58h
43oduFt2N3KkSg3mJisazRI9uKTagxp1qAP3hxQFD01ov4QH8bzjXWA7u3Ld
NP0UPHQ0Tp/W3Qu+QUugcpkvwfO3GKJqugn/E2hneKMfwGpqgLPJMQb2VirU
g6JJ8LubZUpZ8TS4zSiIuHLeBubEDpzwsc+DyTv5b1SFC5jX6PI1ZvgS3gtR
lrum7GBTTy6nUfgd/LdWwOntKo9QJXqtlsbOGV4FR79uMCZ4r4Fz8j3Dzmat
gw2xmjWKbgNsbfAftJG3wAwvYrE10Qk+RuTGuVdug/e3yR1Fcy7wZkq/aJCx
A56KEvszZLvgAoGPb7BlD/NMKgqvoJM4/22OGBkvJdCdGvbJryI3sKCH5Ruw
h74jf1Ju6SSD2xcDmug8CriiWZ4+k4wW8R0MQwrajyCMlwRoeY3wbbUEncl6
vEorRQfKjiQe0KFd0WUHJ/Ros2N+TNeFVgmeXY3vRe+e4hfLCfSX0RoNZRz9
QrGVOf4JXRcjDtNOopPaTj/nzqBf3R5+X76Ero84V5OyjC6cU6cG/UCH8vJm
B9bRVLePrbVbaGtfjDTdhSak2sgzu+hHgd4b+/voXxvoAeM=
           "]]}, {
          RGBColor[1, 0, 0], 
          Thickness[0.01], 
          LineBox[CompressedData["
1:eJxlyX8w23ccx/HUF+2OGsakh6Ita1VNSmsc9/6y0qGlVZ1eR5EOm1+hLaE4
qWV+7Ky1UpJrmM2Pou6YYnbCJzSUsvlRBF1aRExFkJHmx6L23d/743XPe9zL
hkoLjtYikUhexP6rI3y4ururQOVWevLdXQynqQ4XqNQK1Kkx4mftYHjLE4rd
llyBZmbJJSo1hp88ep66LFGgA6V2lC05hrsaMedGBArE2eeduCzBcFwke85u
VqAqWbp4RIDhwfm/P3aOUKCGp8tT7GYMp48yE2N73iJubF+HcwSGT07qrfZG
yVHcqo58vkULt+TRTFwttpHBvOt35gZaeHs8X+d94d9o7tRibn7SHjyyiLI5
mytDTgNkZUIvCVfezyxAsImyhjz5r61IuK8l19npqRRVG7w6wFp4B+4PqEt1
H0hQhT/lxovCHdg727cZfH8FMROi0o/5aUCtG7KxNCdG2Vgj/YZUDQOkH/2a
LorQdcbokel6FThlDlPcpuYRq1vM4sQpgYEukq/4/InmaSa6nxspINiawaz3
ECCTfdY29qNySLlsOMV/No7CTM+ckqVswwOzZ7kzM4Noa/GKobn5FoTGNpSq
2rtRapk/O+KlDJIWyuNExlVID4WYlzM2wTswjzVNrQeLh/SyiYx1EKXZXisy
6IWzP6ethHElwAutfnVufBgM7UMHm/TeAEfbUvlQOgGt2TLsZOEy6BXmcfqv
zcDtLi6lYkwEg6lZhcybQrDo9+ry9F2A2pbQE2GuC9BReaH27A9CwD14hw0l
ImDk53S+PjYDWpqknrvJy6DZe+ibxYMvoHJ8LeYjhzdQ8Nu5L6lBw8CxK7yj
npNAcfRLlWkpD3gtTKVmSQIkT6mlfgIPxO4M2u66BBJMdr20zvDAMYgero2t
QXGej4nwLwQ8erSbwfE1IHlPutx91APiQS+ZTeYazHTKUjftuOAYr470M5dC
cZ2Dss32VwiWywUBtlJIvnwB/2mqA+g5ssDAj6Xwmfatgu+/7QBeyYrHpU+l
QKJ2kWPE7XCJO00Oj5fCV5b+bma1bZC+/8lYcpcU8NLY2xlHWqG3OR5nfbEO
m5iPKtO3ETzSKq1uxqwDziHr/sFqgE6P8XfnU9aB4bJmbC2ph5ah091Y/jqQ
oksc+PceQZVojzutlfDAQoT+bA0wzFjOvu9tAMlwp8hNUAka4XNjG5MNYOA1
dcLMCkiv2ZH9c5D4UwJ4d6w5kEy53vKLC+EJ9tbQ12yIDHA8YRlJuPT01aua
EsBz+HbbHYSd5gPfeucC10ehM9pL+FC4djY5Bz7Rtxc3jBBeUsXtf5wBbRNh
fKaAcF3ZeIXnLXBi36uOWCQ8FpMcVpUITRF9ue5SwiFVntn9VDhqJ48yVRKO
jD2e3hj0P/8LtygPrQ==
           "]], 
          LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQPSFSd8JTtg/2DFBwbs+x/0E8CD6PQkL+AUEEv+PZ
JL/ZMgh+Q/EPnkAjBH/ftYk1+8wR/D+W2m+0bRH8Coa402weCH5B7+HOPbEI
fsLyPjaNTgSfbXoBt2Ufgr+mLUjAazKC/zNVTCpnLoI/SWWe7oaNCP7RhWtD
LG4h+Fpzzizy0P4I53+ewGWfeRbBt9g1dYM792c4PzOPQ9M45Qucv85m3mfm
ZV/h/AdTpY8+ZPoO56ty7nmxxOMHnC+zJ9uVteMnnP//J9PKoke/4PxvgXvj
jqr+gfNvmcRLq7b8hfPzwwUEle78g/O5vYp0mvgYHGD8a7oXLlfuQfBXzbNX
eRLHCOeHrzcTlP2H4Fe1Lmy8s4oJzl/+QnY2nw8znN80tzXhnh+CHxf0VnVd
IIIvtmfPBt9wBL+1P/pYTxKCn2w28yNXJYIv3yLiwb4Mwf9lUcN7fQWCf+3t
40vLViP4feGbY902Ivh/tYKKW/cg+Lcv9s9jvozgb2v7nnz5KoI/yTpec/EN
BN9rqd4Wp3sI/s6KsycbXyL4U3RN+wPfIPgFj+aEKL5H8DV8cu4f+ILgszBe
WTLhO4L/YKt1VsIvBH9P1mJ9g78I/nR57q///yP4ANxNyrs=
           
           "]]}, {}}, {{}, {}, {}, {}}}, Axes -> True, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> 
       GrayLevel[1], BaseStyle -> {"Palatino", Bold, 16}, 
       DisplayFunction :> $DisplayFunction, FormatType -> TraditionalForm, 
       GridLines -> Automatic, ImageSize -> 600, Method -> {}, 
       PlotRange -> {{-1.5, 2.5}, {-0.5, 2.5}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {
         Scaled[0.02], Automatic}], {-1, -0.75}, {Left, Bottom}, {2, 1.5}], 
     GraphicsGroupBox[{{
        GrayLevel[0], 
        RectangleBox[{0.52, 0.18000000000000002`}, {0.92, 0.38}]}, {
        GrayLevel[1], 
        EdgeForm[{
          GrayLevel[0], 
          Thickness[0.001]}], 
        GraphicsGroupBox[{
          RectangleBox[{0.5, 0.2}, {0.9, 0.4}], 
          InsetBox[
           GraphicsBox[{{{
               InsetBox[
                GraphicsBox[{
                  RGBColor[1, 0, 0], 
                  Thickness[0.01], 
                  LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {Left, Bottom}, {
                1, 1}], 
               InsetBox[
               "\"Hinge Loss\"", {1.2100000000000002`, 0.58}, {-1, 0}, 
                Automatic, {1, 0}]}, {
               InsetBox[
                GraphicsBox[{
                  RGBColor[0, 0, 1], 
                  Thickness[0.01], 
                  LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {Left, Bottom}, {
                1, 1}], 
               InsetBox[
               "\"0/1 Error\"", {1.2100000000000002`, 1.74}, {-1, 0}, 
                Automatic, {1, 0}]}}, {}}, AspectRatio -> 0.5, FormatType -> 
            TraditionalForm, PlotRange -> {{-0.1, 3.26}, {-0.1, 2.42}}], {0.5,
            0.2}, {Left, Bottom}, {0.4, 0.2}]}]}}]}, AspectRatio -> Automatic,
     Background -> GrayLevel[1.], ColorOutput -> Automatic, ImageSize -> 600.,
     PlotRange -> All],
   "\"Hinge Loss and istantaneous error, as a function of the margin.\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.600093265892646*^9, {3.600093328029045*^9, 3.600093335201136*^9}, {
   3.600093371478383*^9, 3.6000934054485064`*^9}, {3.6000934650536947`*^9, 
   3.6000934821932898`*^9}, 3.600093518904855*^9, {3.600093682488847*^9, 
   3.600093715270859*^9}, 3.600093758144931*^9, {3.600093789457769*^9, 
   3.600093971955018*^9}, 3.600094026985216*^9, 3.6000941262722054`*^9, {
   3.600094159026362*^9, 3.6000943633867397`*^9}},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

The hinge loss is thus clearly a convex piecewise-linear upperbound of the \
0/1 error function. Using this intuition, the hinge-loss classifier objective \
function can be virtually decomposed in two parts: \
\>", "Text",
 CellChangeTimes->{{3.600072201825953*^9, 3.6000722083525143`*^9}, {
   3.600072271422114*^9, 3.6000723155509863`*^9}, {3.600072364013007*^9, 
   3.600072392412217*^9}, {3.600090845600378*^9, 3.6000908459810553`*^9}, {
   3.600090878254984*^9, 3.600090932290251*^9}, {3.600091001853043*^9, 
   3.600091166851041*^9}, {3.60009129225014*^9, 3.6000914835746737`*^9}, {
   3.600091573755001*^9, 3.600091589195252*^9}, {3.6000930824444017`*^9, 
   3.600093086838382*^9}, {3.600094486669729*^9, 3.600094545714559*^9}, {
   3.600094624204111*^9, 3.600094647449463*^9}, {3.600094709463649*^9, 
   3.600094787988662*^9}, {3.6001532947532673`*^9, 3.600153317960039*^9}, {
   3.600154676245984*^9, 3.600154687314789*^9}, {3.6006771590608683`*^9, 
   3.600677176207753*^9}, 3.6013860745439253`*^9, {3.602857536788834*^9, 
   3.602857562095058*^9}, {3.6375770934446173`*^9, 3.637577117789996*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "a \[OpenCurlyDoubleQuote]",
 StyleBox["regularizer",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ", named in this way because of its role in favoring simple solutions"
}], "Item",
 CellChangeTimes->{{3.600091181152338*^9, 3.6000912605961437`*^9}, {
  3.600094803062545*^9, 3.600094835866577*^9}, {3.6001533264864693`*^9, 
  3.600153364470174*^9}, {3.600154693739958*^9, 3.600154696004071*^9}, {
  3.6074333453055277`*^9, 3.6074333499646683`*^9}, {3.6430864186280327`*^9, 
  3.6430864196400146`*^9}}],

Cell[TextData[{
 "a weighted loss function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       "\[RightBracketingBar]"}], "+"]}]}], TraditionalForm]]],
 ", measuring the hinge-loss on every sample"
}], "Item",
 CellChangeTimes->{{3.600091181152338*^9, 3.6000912878115053`*^9}, {
  3.600094569178194*^9, 3.600094570439437*^9}, {3.6000947993169937`*^9, 
  3.600094825127008*^9}, {3.600153369950371*^9, 3.600153383222048*^9}, {
  3.607433357603455*^9, 3.607433359757029*^9}, {3.607433932426351*^9, 
  3.6074339359775047`*^9}}]
}, Open  ]],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433368352339*^9, 3.607433374420573*^9}}],

Cell["\<\
As before, we report here the code snippet of this implementation
\
\>", "Text",
 CellChangeTimes->{{3.6005442882927713`*^9, 3.6005443042883883`*^9}, 
   3.601386076379731*^9, 3.6074333625220213`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hinge", "[", "x_", "]"}], ":=", 
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "-", "x"}], ",", 
         RowBox[{
          RowBox[{"1", "-", "x"}], ">", "0"}]}], "}"}], "}"}], ",", "0"}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"trainSoftMarginHinge", "[", 
    RowBox[{"feats_List", ",", "labels_List", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "b", ",", "d", ",", "nTr", 
       ",", "v", ",", "w", ",", "regularizer", ",", "loss", ",", "obj", ",", 
       "sol"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "feats", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"regularizer", "=", 
       RowBox[{"w", ".", "w"}]}], ";", "\n", 
      RowBox[{"loss", "=", 
       RowBox[{"Total", "[", 
        RowBox[{"hinge", "@@@", 
         RowBox[{"(", 
          RowBox[{"labels", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"feats", ".", "w"}], "+", "b"}], ")"}]}], ")"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{"regularizer", " ", "+", " ", 
        RowBox[{"regC", " ", "loss"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{
        RowBox[{"FindMinimum", "[", 
         RowBox[{"obj", ",", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"w", ",", 
            RowBox[{"{", "b", "}"}]}], "]"}]}], "]"}], "//", "Quiet"}]}], ";",
       "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"labels", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"feats", ".", 
               RowBox[{"model", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", 
              RowBox[{"model", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}], "]"}], ")"}],
         "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"model", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600544854869842*^9, 3.600544869258173*^9}, {
  3.600603635602695*^9, 3.6006036366102333`*^9}, {3.601376250280011*^9, 
  3.6013762567611713`*^9}, {3.601573476747438*^9, 3.6015734770535173`*^9}, {
  3.601623044296619*^9, 3.601623056384856*^9}}],

Cell["\<\

An example of usage is as follow
\
\>", "Text",
 CellChangeTimes->{{3.6005448879827833`*^9, 3.60054489880509*^9}, {
  3.601386078534184*^9, 3.6013860796351767`*^9}, {3.601560585359741*^9, 
  3.601560587116675*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.60121194128167*^9, 3.601211945994905*^9}, {
  3.601213846066174*^9, 3.601213846423414*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$693 = MousePosition["Graphics"]; 
     Private`p$693 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$693], 2], 
          Union[
           Partition[Private`pt$693, 2]]}, 1]]; 
     If[Private`s$693 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$693}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$693}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$693 = {}; 
     Private`s$693 = Private`s$693 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005449418843603`*^9, 3.600545026353217*^9, 3.600545344832444*^9, {
   3.600549892714267*^9, 3.600549896275764*^9}, {3.600587742396299*^9, 
   3.600587757977747*^9}, 3.600602781749795*^9, 3.600603523043189*^9, 
   3.6006039456469507`*^9, 3.600612998820183*^9, 3.600613812104033*^9, 
   3.6006326442290087`*^9, 3.600671117281825*^9, 3.600671642210066*^9, 
   3.60067180370498*^9, 3.600672265467708*^9, 3.600672525853112*^9, {
   3.600672836554018*^9, 3.600672850631194*^9}, 3.6012063703524323`*^9, 
   3.601209437147979*^9, 3.6012114671204643`*^9, 3.601211946322893*^9, {
   3.6012122448130617`*^9, 3.6012122910579147`*^9}, {3.601212668169895*^9, 
   3.601212668525999*^9}, {3.601213356436779*^9, 3.601213356823247*^9}, 
   3.601213402009972*^9, {3.6012134433127337`*^9, 3.6012134609849977`*^9}, 
   3.601213643644863*^9, 3.601213852234685*^9, 3.601214040359129*^9, 
   3.601214608246007*^9, 3.60121800451103*^9, 3.601286272936027*^9, 
   3.6012958899364843`*^9, 3.601296909755733*^9, 3.601297170433475*^9, 
   3.6012976620494633`*^9, 3.6012988947650013`*^9, 3.6012989471568413`*^9, 
   3.6013046935022507`*^9, 3.601372885069866*^9, 3.601375277184816*^9, 
   3.601559771791875*^9, 3.6015608051139927`*^9, 3.60156216642771*^9, 
   3.601563112013534*^9, 3.6015716450697536`*^9, 3.601572489368885*^9, 
   3.601626156217442*^9, 3.602856855665761*^9, 3.60285972452811*^9, 
   3.607430517837002*^9, 3.607432448325654*^9, 3.63756472510083*^9, 
   3.6375655258096*^9, 3.637565654687269*^9, 3.637566042116534*^9, 
   3.6375733610310087`*^9, 3.6375818995097313`*^9, 3.637582140823168*^9, 
   3.637582201471571*^9, 3.637583464194372*^9, 3.637585525650531*^9, 
   3.6375885585333138`*^9, 3.6376591852004957`*^9, 3.637659328318981*^9, 
   3.6376596482811728`*^9, 3.6376713961710167`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainSoftMarginHinge", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.6005479317609177`*^9, 3.600547943871744*^9}, 3.6006036721231003`*^9, {
   3.600604130271123*^9, 3.6006041313075647`*^9}, 3.600672824777946*^9, {
   3.600672888585968*^9, 3.600672926349937*^9}, {3.600673201958695*^9, 
   3.600673221709093*^9}, {3.601211506662661*^9, 3.6012115593205023`*^9}, {
   3.601211963663365*^9, 3.60121206767241*^9}, {3.6012123175245247`*^9, 
   3.60121252049656*^9}, {3.601212561616869*^9, 3.6012125815873137`*^9}, {
   3.601212612434774*^9, 3.601212627681984*^9}, 3.601212679938843*^9, 
   3.6012127106813993`*^9, {3.6012133667569923`*^9, 3.601213367635418*^9}, {
   3.6012134119254217`*^9, 3.6012134339214478`*^9}, {3.601213662321473*^9, 
   3.601213675149495*^9}, {3.6012137652131767`*^9, 3.6012137742405357`*^9}, {
   3.601213833558949*^9, 3.601213835855653*^9}, {3.601213887084127*^9, 
   3.601213912709806*^9}, {3.601287015355753*^9, 3.601287025155109*^9}, 
   3.601287106576169*^9, {3.601297927697929*^9, 3.601297927958023*^9}, {
   3.601298003109445*^9, 3.60129803642181*^9}, {3.601373005470107*^9, 
   3.6013730104967957`*^9}, {3.601373041330082*^9, 3.601373050067439*^9}, 
   3.6028575856574078`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    1065., {8., 20.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$12773$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$12773$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainSoftMarginHinge[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1116., {61., 70.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.60137303558141*^9, 3.601373053759708*^9}, 
   3.601560219901368*^9, 3.601560605644328*^9, 3.6015606951247168`*^9, 
   3.6015608530852222`*^9, 3.601563162058833*^9, {3.601563636857156*^9, 
   3.601563641360997*^9}, 3.601563683412404*^9, {3.6015637241738586`*^9, 
   3.6015637381113367`*^9}, 3.6015717330080233`*^9, 3.601572618322707*^9, 
   3.6016263703538713`*^9, 3.602857586810186*^9, {3.602859831611567*^9, 
   3.602859859544814*^9}, 3.602860149431301*^9, 3.6074333953964863`*^9, 
   3.6375648805595827`*^9, 3.6375659061552477`*^9, 3.6375660985779543`*^9, 
   3.63758205550838*^9, 3.6375823520399103`*^9, 3.637585618610615*^9, 
   3.637588922277966*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

As it is possible to see, the behavior of this classifier is very similar to \
the one of the original soft-margin algorithm (though the solution might \
slightly differ, for numerical reasons).
\
\>", "Text",
 CellChangeTimes->{{3.601376100004849*^9, 3.601376134040353*^9}, 
   3.601386086412291*^9, 3.601558674131753*^9, {3.607433419237398*^9, 
   3.607433442678946*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Minimizing the 0/1 error", "Subsection",
 CellChangeTimes->{{3.601209915340871*^9, 3.601209917694199*^9}, {
  3.60121504252315*^9, 3.601215073415551*^9}, {3.6012152593121233`*^9, 
  3.601215263961134*^9}, {3.60121530191003*^9, 3.601215315701867*^9}}],

Cell[TextData[{
 "For what we said above, soft-margin maximization - and thus good \
generalization abilities - can be acheived through the minimization of the \
regularized hinge loss function: ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       "\[RightBracketingBar]"}], "+"]}]}]}]], "InlineFormula",
  CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
   3.6000722300726633`*^9, 3.600072241744952*^9}}],
 ".  On the other hand, we have also seen that the hinge-loss is a convex \
piecewise-linear upper-bound to the 0/1 error, which ultimately is the \
quantity that we care about. What would happen if we replace  the hinge-loss \
in this regularized objective function, with a 0/1 error function?\n"
}], "Text",
 CellChangeTimes->{{3.6012099215635433`*^9, 3.601210038930832*^9}, {
   3.601210344003456*^9, 3.60121039523493*^9}, {3.6012144715930243`*^9, 
   3.601214527549773*^9}, {3.601215077486929*^9, 3.601215109167843*^9}, {
   3.601215146221079*^9, 3.601215238753796*^9}, {3.601215269929373*^9, 
   3.601215285806988*^9}, {3.601215331093032*^9, 3.601215398032632*^9}, {
   3.601373105606681*^9, 3.60137322428964*^9}, {3.602857624875058*^9, 
   3.602857634939942*^9}, 3.6074334826529284`*^9, 3.60743392661095*^9, {
   3.637577217810164*^9, 3.63757721874469*^9}, {3.637582771103168*^9, 
   3.6375827734851513`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607433486692894*^9, 3.607433492728703*^9}}],

Cell[TextData[{
 "We can verify this by using the numerical optimization abilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " (",
 StyleBox["NMinimize", "Code"],
 ") to solve"
}], "Text",
 CellChangeTimes->{{3.6012099215635433`*^9, 3.601210038930832*^9}, {
   3.601210344003456*^9, 3.60121039523493*^9}, {3.6012144715930243`*^9, 
   3.601214527549773*^9}, {3.601215077486929*^9, 3.601215109167843*^9}, {
   3.601215146221079*^9, 3.601215238753796*^9}, {3.601215269929373*^9, 
   3.601215285806988*^9}, {3.601215331093032*^9, 3.601215398032632*^9}, {
   3.601373105606681*^9, 3.60137322428964*^9}, {3.602857624875058*^9, 
   3.602857634939942*^9}, 3.6074334826529284`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["min", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], " ", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], "\[CenterDot]", 
     StyleBox["w",
      FontWeight->"Bold"]}]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{"\[CapitalChi]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "<", "0"}], 
       ")"}]}]}]}]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6000721591150208`*^9, 3.600072181415753*^9}, {
   3.6000722300726633`*^9, 3.600072241744952*^9}, {3.6012104743903723`*^9, 
   3.601210487709112*^9}, 3.60121053938375*^9}],

Cell[TextData[{
 "Note that, although the objective function still includes a regularizer, \
the indicator function ",
 Cell[BoxData[
  FormBox["\[CapitalChi]", TraditionalForm]]],
 " does not measure the margin obtained by ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", but only the 0/1 error. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " we can minimize this function for example, by asking NMinimize to perform \
a random search, as shown in the following code snippet\n"
}], "Text",
 CellChangeTimes->{{3.60121049972244*^9, 3.6012105058656883`*^9}, {
   3.601210541564143*^9, 3.6012105688797617`*^9}, {3.60121453139952*^9, 
   3.601214578522887*^9}, {3.6012154037449617`*^9, 3.601215408313727*^9}, {
   3.601373232196843*^9, 3.601373252758483*^9}, 3.601386088896632*^9, {
   3.637582608594431*^9, 3.637582632277896*^9}, {3.637582716462081*^9, 
   3.637582735381411*^9}, {3.637582788322219*^9, 3.637582801326556*^9}, {
   3.6375828373589354`*^9, 3.6375829585811663`*^9}, {3.6375830268854923`*^9, 
   3.6375830292114697`*^9}, {3.637583192864036*^9, 3.6375831970239058`*^9}, {
   3.6375832709007597`*^9, 3.637583345646347*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainZeroOneError", "[", 
    RowBox[{"c_", ",", "feats_", ",", "labels_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "results", ",", "model", ",", "margin", ",", "b", ",", "d", ",", "nTr", 
       ",", "v", ",", "w", ",", "regularizer", ",", "loss", ",", "obj", ",", 
       "sol"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "feats", "]"}]}], ";", "\n", 
      RowBox[{"w", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"regularizer", "=", 
       RowBox[{"w", ".", "w"}]}], ";", "\n", 
      RowBox[{"loss", "=", 
       RowBox[{"Total", "[", 
        RowBox[{"err", "@@@", 
         RowBox[{"(", 
          RowBox[{"labels", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"feats", ".", "w"}], "+", "b"}], ")"}]}], ")"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{"regularizer", " ", "+", " ", 
        RowBox[{"c", " ", "loss"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"NMinimize", "[", 
        RowBox[{"obj", ",", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"w", ",", 
           RowBox[{"{", "b", "}"}]}], "]"}], ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<RandomSearch\>\""}]}], "]"}]}], 
      ";", "\n", 
      RowBox[{"model", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "b"}], "}"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"1", "/", 
         RowBox[{"Norm", "[", 
          RowBox[{"model", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], 
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"labels", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"feats", ".", 
               RowBox[{"model", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", 
              RowBox[{"model", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}], "]"}], 
         ")"}]}]}], ";", "\n", 
      RowBox[{"results", "=", 
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.601210571525784*^9, 3.6012105835260897`*^9}, {
  3.601573414482918*^9, 3.601573440950531*^9}}],

Cell["\<\

Following is an example of usage of this code
\
\>", "Text",
 CellChangeTimes->{{3.6005448879827833`*^9, 3.60054489880509*^9}, {
  3.601210632252318*^9, 3.601210638991849*^9}, {3.601373260890164*^9, 
  3.601373269229082*^9}, {3.601386091010215*^9, 3.601386092805372*^9}, {
  3.637582593947945*^9, 3.6375825954243917`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601214091257781*^9, 3.601214096377967*^9}, {
  3.601214601576762*^9, 3.6012146018379908`*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$719 = MousePosition["Graphics"]; 
     Private`p$719 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$719], 2], 
          Union[
           Partition[Private`pt$719, 2]]}, 1]]; 
     If[Private`s$719 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$719}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$719}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$719 = {}; 
     Private`s$719 = Private`s$719 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.60121087419002*^9, {3.601210940269863*^9, 3.6012109481673*^9}, 
   3.60121099324424*^9, {3.601211467185676*^9, 3.6012114673875103`*^9}, {
   3.601212264618929*^9, 3.6012122907590446`*^9}, 3.60121266821483*^9, 
   3.601213356497918*^9, {3.601214040450753*^9, 3.601214040704617*^9}, 
   3.60121409680414*^9, {3.601214608348693*^9, 3.601214608629203*^9}, 
   3.6012180045608263`*^9, 3.601286272978816*^9, 3.601295889980215*^9, 
   3.601296909781158*^9, 3.601297170474646*^9, 3.6012976620815477`*^9, 
   3.60129889488898*^9, 3.601298947184609*^9, 3.601304693536516*^9, 
   3.601372885110718*^9, 3.601375277226056*^9, 3.6015597718380957`*^9, 
   3.601562166493429*^9, 3.601563112057412*^9, 3.601571645114797*^9, 
   3.601572489412768*^9, 3.6016261562586946`*^9, 3.602856855701194*^9, 
   3.6028597245657988`*^9, 3.607430517877798*^9, 3.607432448368534*^9, 
   3.637564725132847*^9, 3.637565525847085*^9, 3.637565654716428*^9, 
   3.637566042161289*^9, 3.6375733610705833`*^9, 3.6375818995422907`*^9, {
   3.637582140871317*^9, 3.637582141111209*^9}, 3.637582201506496*^9, 
   3.637583464222974*^9, 3.637585525737719*^9, 3.637588558595929*^9, 
   3.637659185250656*^9, 3.637659328373419*^9, 3.637659648328662*^9, 
   3.637671396219679*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runMaxMarginExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"trainZeroOneError", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "10", ",", ".2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.601206412072904*^9, 3.601206439602756*^9}, {
   3.601207402577566*^9, 3.601207422893263*^9}, {3.601207473430217*^9, 
   3.6012074880340767`*^9}, {3.6012075318410597`*^9, 3.601207549397902*^9}, {
   3.601207579515867*^9, 3.6012076661646357`*^9}, {3.601207702131342*^9, 
   3.601207756902109*^9}, {3.60120779520131*^9, 3.601207802489641*^9}, {
   3.601207892818038*^9, 3.601207942630393*^9}, {3.6012079732655983`*^9, 
   3.60120805640635*^9}, 3.6012085698823757`*^9, {3.601208744131277*^9, 
   3.601208749528508*^9}, {3.601208846906273*^9, 3.601208878723583*^9}, {
   3.60120891918299*^9, 3.601208982964459*^9}, {3.601209016606789*^9, 
   3.601209071829247*^9}, {3.601209105216289*^9, 3.601209105504429*^9}, {
   3.601209176094448*^9, 3.601209188093761*^9}, {3.601209465009707*^9, 
   3.601209465726193*^9}, {3.601209495974411*^9, 3.6012095473117437`*^9}, {
   3.601209578809228*^9, 3.601209584813322*^9}, 3.6012096397776337`*^9, {
   3.60120985755095*^9, 3.6012098579378023`*^9}, {3.601287041349455*^9, 
   3.6012870991566477`*^9}, {3.601298065938662*^9, 3.601298071661854*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 7.4, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 10, 0.2}}, Typeset`size$$ = {
    400., {197., 203.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$21516$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$21516$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runMaxMarginExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`trainZeroOneError[#, #2, 10^$CellContext`c$$]& ], 
      "Specifications" :> {{$CellContext`c$$, 0, 10, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {247., 256.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.601563369208535*^9, 3.60157175384159*^9, 3.6015726548731318`*^9, 
   3.6016264029562387`*^9, 3.602857644758247*^9, 3.602860159017392*^9, 
   3.607433503336472*^9, 3.6375650928769083`*^9, 3.6375659287909822`*^9, 
   3.637574038211939*^9, 3.637582074764988*^9, {3.637582156703615*^9, 
   3.6375821690456257`*^9}, 3.637582360592127*^9, 3.6375856319604073`*^9, 
   3.637588951460347*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs it is possible to see ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " may be able to find an hyperplane minimizing the training 0/1 error. \
However, not only the optimization is much harder (as the objective function \
has always sub-gradient 0) but, more importantly, without promoting any \
margin maximization the generalization abilities of the classifier are \
clearly negatively affected. This in turn results in a high testing error \
rate."
}], "Text",
 CellChangeTimes->{{3.6012106431864967`*^9, 3.601210688540284*^9}, {
   3.601210771627122*^9, 3.6012108692579308`*^9}, {3.6012146700441027`*^9, 
   3.6012146935613422`*^9}, {3.601214731122373*^9, 3.6012147453805923`*^9}, {
   3.601214817452739*^9, 3.601215028390627*^9}, {3.601215415462797*^9, 
   3.601215415846622*^9}, 3.6013860958792686`*^9, {3.6028576648450603`*^9, 
   3.602857666219592*^9}, {3.607433538013639*^9, 3.607433541302189*^9}, {
   3.607433572582103*^9, 3.607433574507115*^9}, {3.6375834173384123`*^9, 
   3.637583426863504*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tSupport Vector Machines"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.600154775042107*^9, 3.6001547788358383`*^9}},
 CellTags->"sec:svm"],

Cell[TextData[{
 "In the previous Section we introduced the basic theory of max-margin \
classifiers. A Support Vector Machine is basically a max-margin classifier \
(hard or soft-margin) trained in a different way. In this section we will \
first briefly introduce the ",
 StyleBox["convex optimization",
  FontSlant->"Italic"],
 " theory ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 " necessary to derive the SVM algorithm, and then perform the derivations \
necessary to obtain SVMs and finally present the resulting implementations.\n\
"
}], "Text",
 CellChangeTimes->{{3.600154875125265*^9, 3.6001549181816397`*^9}, 
   3.600155031827753*^9, {3.6001553088687277`*^9, 3.600155366668939*^9}, {
   3.600155430120121*^9, 3.600155445536603*^9}, {3.6001554825240726`*^9, 
   3.600155496361331*^9}, {3.600155582648361*^9, 3.6001555947194567`*^9}, {
   3.600414871766923*^9, 3.600414873146832*^9}, {3.600429222572053*^9, 
   3.600429337504127*^9}, {3.600511207971109*^9, 3.600511228061693*^9}, {
   3.600512833942341*^9, 3.6005128343868933`*^9}, {3.600677197978772*^9, 
   3.6006773089673767`*^9}, {3.600677372353778*^9, 3.600677376555369*^9}, {
   3.6006786361826878`*^9, 3.600678644731577*^9}, 3.601558667665824*^9, {
   3.607433596645958*^9, 3.607433614258649*^9}, {3.637577530666527*^9, 
   3.637577531167904*^9}}],

Cell[CellGroupData[{

Cell["Convex Optimization Theory", "Subsection",
 CellChangeTimes->{{3.600429345878928*^9, 3.600429351035904*^9}}],

Cell["Suppose we are given an optimization problem of the form", "Text",
 CellChangeTimes->{{3.600415182339123*^9, 3.600415235021255*^9}, {
  3.6004152679843388`*^9, 3.60041532191236*^9}, {3.600415439755579*^9, 
  3.6004155884965687`*^9}, {3.600415641729501*^9, 3.600415652938727*^9}, {
  3.600416054015314*^9, 3.6004160579326*^9}, {3.600416453336545*^9, 
  3.600416454451515*^9}, {3.600416911156144*^9, 3.600416911686496*^9}, {
  3.600678620696653*^9, 3.6006786305596952`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    StyleBox["w",
     FontWeight->"Bold"]], "f", 
   RowBox[{"(", 
    StyleBox["w",
     FontWeight->"Bold"], ")"}]}], ",", "         ", 
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "\[Element]", "\[CapitalOmega]", "\[Subset]", 
   SuperscriptBox["\[DoubleStruckCapitalR]", 
    "d"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", 
     SubscriptBox["g", "i"]}], 
    RowBox[{"(", 
     StyleBox["w",
      FontWeight->"Bold"], ")"}]}], "\[LessEqual]", "0"}], ",", " ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{"\t ", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["h", "i"], 
     RowBox[{"(", 
      StyleBox["w",
       FontWeight->"Bold"], ")"}]}], "=", "0"}], ",", " ", 
   RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
   "m"}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600415328840414*^9, 3.6004154058700333`*^9}, {
   3.600415665891083*^9, 3.6004157237966223`*^9}, {3.600415896963788*^9, 
   3.600415897999427*^9}, 3.600417100003827*^9, {3.600418690524115*^9, 
   3.600418694226101*^9}},
 CellTags->"primal_problem"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["h", "i"], ",", " ", 
    RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "m"}], 
   TraditionalForm]]],
 ",  are a set of real functions defined on a domain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalOmega]", "\[Subset]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "d"]}], TraditionalForm]]],
 " . This problem is refered to as the ",
 StyleBox["primal problem",
  FontSlant->"Italic"],
 ".\n\nThe ",
 StyleBox["generalized Lagrangian",
  FontSlant->"Italic"],
 " of the minimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 ") is defined as"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
  3.6004157289837933`*^9, 3.600415772365546*^9}, {3.6004158993933773`*^9, 
  3.600415899750411*^9}, {3.600416060875347*^9, 3.600416063338799*^9}, {
  3.600416102200801*^9, 3.600416104148707*^9}, {3.600416355581702*^9, 
  3.600416380401072*^9}, {3.600416414240261*^9, 3.600416532321621*^9}, {
  3.6004169138287563`*^9, 3.6004169213589773`*^9}, {3.600418102342947*^9, 
  3.600418115255018*^9}, {3.600428905610808*^9, 3.6004289099762383`*^9}, {
  3.600429414824535*^9, 3.600429429469164*^9}, {3.6006785802651653`*^9, 
  3.6006785805358467`*^9}, {3.6006786649110613`*^9, 3.6006786652763*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"L", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"f", 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", " ", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["g", "i"], 
       RowBox[{"(", 
        StyleBox["w",
         FontWeight->"Bold"], ")"}]}]}], "+", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "m"], 
      RowBox[{
       SubscriptBox["\[Beta]", "i"], 
       SubscriptBox["h", "i"], 
       RowBox[{"(", 
        StyleBox["w",
         FontWeight->"Bold"], ")"}]}]}]}], "=", " ", 
    RowBox[{
     RowBox[{"f", 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["g",
       FontWeight->"Bold"], 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["h",
       FontWeight->"Bold"], 
      RowBox[{"(", 
       StyleBox["w",
        FontWeight->"Bold"], ")"}]}]}]}]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600415778069233*^9, 3.600415886046279*^9}, {
  3.6004159335411863`*^9, 3.600416041078998*^9}, {3.600416311897974*^9, 
  3.600416312525124*^9}, {3.600417144930235*^9, 3.6004171523903913`*^9}, {
  3.600418677149428*^9, 3.600418685861945*^9}}],

Cell[TextData[{
 "and the ",
 StyleBox["Lagrangian dual problem",
  FontSlant->"Italic"],
 " is defined as"
}], "Text",
 CellChangeTimes->{{3.60041604667068*^9, 3.600416068173777*^9}, {
  3.600416116838738*^9, 3.6004161580773067`*^9}, {3.6004163089355993`*^9, 
  3.600416309859293*^9}, {3.600417049611938*^9, 3.600417053903081*^9}, {
  3.60067858810745*^9, 3.600678588418157*^9}, {3.600678666438592*^9, 
  3.600678666894721*^9}}],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["max", 
   RowBox[{
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ",", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}]], "  ", 
  StyleBox["\[Theta]",
   FontWeight->"Bold"], 
  RowBox[{"(", 
   RowBox[{
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ",", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"s", ".", "t", ".", " ", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"]}], "\[GreaterEqual]", 
   StyleBox["0",
    FontWeight->"Bold"]}], ","}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60041604667068*^9, 3.600416068173777*^9}, {
  3.600416116838738*^9, 3.600416290006764*^9}, {3.6004175737175837`*^9, 
  3.600417578551526*^9}, {3.600417988927905*^9, 3.60041806731647*^9}},
 CellTags->"eq:dual_problem"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["\[Theta]",
      FontWeight->"Bold"], "(", 
     RowBox[{
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}], "=", " ", 
    RowBox[{
     SubscriptBox["inf", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[Element]", "\[CapitalOmega]"}]], 
     RowBox[{"L", "(", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], ",", 
       StyleBox["\[Beta]",
        FontWeight->"Bold"]}], ")"}]}]}], TraditionalForm]]],
 ".\nWe will now cite the following important results from optimization \
theory."
}], "Text",
 CellChangeTimes->{{3.600416566102697*^9, 3.600416579133808*^9}, {
  3.600416648379065*^9, 3.600416683946109*^9}, {3.600416787348226*^9, 
  3.600416826918919*^9}, {3.600417294162068*^9, 3.6004173156659803`*^9}, {
  3.600418044059804*^9, 3.600418124542616*^9}, {3.600427516955368*^9, 
  3.6004275342828817`*^9}, {3.600429444385693*^9, 3.600429444854097*^9}}],

Cell[TextData[{
 StyleBox["Theorem 2 ", "Subsection"],
 StyleBox["(",
  FontWeight->"Plain"],
 StyleBox["Strong duality theorem",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[")",
  FontWeight->"Plain"],
 StyleBox[".", "Subsection"],
 " Let ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " be the solution of the of the primal optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 ") and let ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], "*"], ",", 
     SuperscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "*"]}], ")"}], TraditionalForm]]],
 " be the solution of the Lagrangian dual problem (",
 
 CounterBox["DisplayFormulaNumbered", "eq:dual_problem"],
 ").\nIf ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions (i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "i"], "(", 
     StyleBox["w",
      FontWeight->"Bold"], ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["a",
        FontWeight->"Bold"], "\[Transpose]"}], 
      StyleBox["w",
       FontWeight->"Bold"]}], "-", "d"}]}], TraditionalForm]]],
 "), then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}], "=", 
    RowBox[{
     StyleBox["\[Theta]",
      FontWeight->"Bold"], "(", 
     RowBox[{
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "*"]}], ")"}]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417605760099*^9, 3.600417622161007*^9}, {3.600418193059209*^9, 
   3.6004184479104156`*^9}, {3.600418526867786*^9, 3.6004185274644403`*^9}, {
   3.600419015125244*^9, 3.600419018595573*^9}, {3.600425897987835*^9, 
   3.600425898295209*^9}, {3.600426133978353*^9, 3.600426135471858*^9}, {
   3.600427111261457*^9, 3.600427112864626*^9}, {3.6004271726863937`*^9, 
   3.600427175101616*^9}, {3.600427520940413*^9, 3.6004275211997004`*^9}, 
   3.600427735726377*^9, {3.6004288268446207`*^9, 3.600428827126993*^9}, {
   3.600513222779529*^9, 3.600513223571279*^9}, {3.6375776532850857`*^9, 
   3.6375776972475224`*^9}}],

Cell[TextData[{
 StyleBox["Theorem 3 ", "Subsection"],
 StyleBox["(",
  FontWeight->"Plain"],
 StyleBox["Karush\[Dash]Kuhn\[Dash]Tucker",
  FontSlant->"Italic"],
 StyleBox[" - KKT - optimality conditions",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[")",
  FontWeight->"Plain"],
 StyleBox[".", "Subsection"],
 " Given a primal optimization problem (",
 
 CounterBox["DisplayFormulaNumbered", "primal_problem"],
 "), where ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[Element]", 
    SuperscriptBox["\[ScriptCapitalC]", "1"]}], TraditionalForm]]],
 ". Necessary and sufficient conditions for a point ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " to be an optimum are  the existence of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "*"], ",", 
    SuperscriptBox[
     StyleBox["\[Beta]",
      FontWeight->"Bold"], "*"]}], TraditionalForm]]],
 " such that"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417605760099*^9, 3.600417622161007*^9}, {3.600418193059209*^9, 
   3.6004184479104156`*^9}, {3.600418526867786*^9, 3.6004185274644403`*^9}, {
   3.600419015125244*^9, 3.600419018595573*^9}, {3.600425897987835*^9, 
   3.600425898295209*^9}, {3.600426133978353*^9, 3.600426135471858*^9}, {
   3.600427111261457*^9, 3.600427112864626*^9}, {3.6004271726863937`*^9, 
   3.600427175101616*^9}, {3.600427520940413*^9, 3.6004275211997004`*^9}, 
   3.600427735726377*^9, {3.600427809285172*^9, 3.600427885849931*^9}, {
   3.600427931483832*^9, 3.6004280662357693`*^9}, {3.600428420767791*^9, 
   3.60042842139086*^9}, {3.600428469156039*^9, 3.600428472735189*^9}, {
   3.600428831434767*^9, 3.600428831543598*^9}, {3.6004299159154577`*^9, 
   3.600429919811499*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", "L"}], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", 
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Beta]",
        FontWeight->"Bold"], "*"]}], ")"}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", "L"}], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       StyleBox["w",
        FontWeight->"Bold"], "*"], ",", 
      SuperscriptBox[
       StyleBox["\[Alpha]",
        FontWeight->"Bold"], "*"], ",", 
      StyleBox["\[Beta]",
       FontWeight->"Bold"]}], ")"}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Beta]",
     FontWeight->"Bold"]}]], "=", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Alpha]", "i"], "*"], 
    SubscriptBox["g", "i"], 
    RowBox[{"(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}]}], "=", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  RowBox[{"n", "                ", 
   StyleBox[
    RowBox[{"(", 
     RowBox[{"KKT", " ", "complementarity", " ", "condition"}], ")"}], 
    "Text"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["g", "i"], 
    RowBox[{"(", 
     SuperscriptBox[
      StyleBox["w",
       FontWeight->"Bold"], "*"], ")"}]}], "\[LessEqual]", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SuperscriptBox[
    SubscriptBox["\[Alpha]", "i"], "*"], "\[GreaterEqual]", "0"}], ",", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600428098450416*^9, 3.600428276349086*^9}, {
  3.60042830994925*^9, 3.600428360656294*^9}, {3.600428971555417*^9, 
  3.60042897299465*^9}, {3.600429597108923*^9, 3.600429603784739*^9}, {
  3.600515291370558*^9, 3.6005153267401447`*^9}},
 CellTags->"eq:kkt"],

Cell[TextData[{
 "Theorem 2 tells us that if ",
 Cell[BoxData[
  FormBox["\[CapitalOmega]", TraditionalForm]]],
 " is convex and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "i"], ",", 
    SubscriptBox["h", "i"]}], TraditionalForm]]],
 " are affine functions, the optimal value of the primal problem can be \
obtained by solving the Lagrangian dual problem. Moreover, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[Element]", 
    SuperscriptBox["\[ScriptCapitalC]", "1"]}], TraditionalForm]]],
 " Theorem 3 gives us the conditions characterizing the solution of both the \
primal and the dual problems. For example, the first condition in (",
 
 CounterBox["DisplayFormulaNumbered", "eq:kkt"],
 ") provides a way to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["\[Theta]",
     FontWeight->"Bold"], "(", 
    RowBox[{
     SuperscriptBox[
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], "*"], ",", 
     SuperscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "*"]}], ")"}], TraditionalForm]]],
 ", as it is showcased below for the SVM optimization problem.\n"
}], "Text",
 CellChangeTimes->{{3.6004156039110603`*^9, 3.6004156486544733`*^9}, {
   3.6004157289837933`*^9, 3.600415772365546*^9}, {3.600416874764727*^9, 
   3.6004168785045643`*^9}, {3.6004169244023333`*^9, 
   3.6004170120570917`*^9}, {3.600417044456476*^9, 3.600417076161985*^9}, {
   3.6004171677026377`*^9, 3.600417242629196*^9}, {3.600417279678604*^9, 
   3.600417289065919*^9}, {3.6004173207138443`*^9, 3.600417336754115*^9}, {
   3.600417411934288*^9, 3.600417423052297*^9}, {3.6004175079538803`*^9, 
   3.6004175395920963`*^9}, {3.600418577302629*^9, 3.600418671703981*^9}, {
   3.600418713467914*^9, 3.600418786173774*^9}, {3.600418820726795*^9, 
   3.6004188963217573`*^9}, 3.600418938868869*^9, {3.60041909773505*^9, 
   3.600419110274001*^9}, 3.600425266898609*^9, 3.6004255520373907`*^9, {
   3.600425630225403*^9, 3.6004256330049477`*^9}, {3.600427729505784*^9, 
   3.600427734453733*^9}, {3.600428975423246*^9, 3.600429058864686*^9}, {
   3.600429095992033*^9, 3.6004291459168453`*^9}, 3.600429196837678*^9, {
   3.600429940666926*^9, 3.6004299498798103`*^9}, {3.60043000224362*^9, 
   3.600430227450808*^9}, {3.6004302759189262`*^9, 3.6004302930976877`*^9}, 
   3.601385814964429*^9, 3.601558663281171*^9, {3.607433654410502*^9, 
   3.607433656197339*^9}, {3.607433715280018*^9, 3.607433715673252*^9}, {
   3.637578039799329*^9, 3.63757806250173*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support Vector Machines", "Subsection",
 CellChangeTimes->{{3.600429383935976*^9, 3.600429387959351*^9}}],

Cell[TextData[{
 "Support Vector Machines arise when applying the convex optimization theory \
outlined above, to the max-margin classifiers introduced in Section ",
 
 CounterBox["Section", "sec:max_margin"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600512740961812*^9, 3.600512801119184*^9}, {
   3.60051283892124*^9, 3.600512850395771*^9}, 3.601558659500217*^9, {
   3.601558736117927*^9, 3.601558740347517*^9}}],

Cell[CellGroupData[{

Cell["Hard-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.600510896273519*^9, 3.6005109006592607`*^9}, {
  3.6005128679886007`*^9, 3.6005128719736147`*^9}}],

Cell[TextData[{
 "The generalized Lagrangian of the optimization problem for the max-margin \
classifier (in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ")) is given by "
}], "Text",
 CellChangeTimes->{{3.6005128770847673`*^9, 3.600512943813957*^9}, {
  3.600677425738347*^9, 3.600677480971018*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["L",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   StyleBox["=",
    FontWeight->"Plain"], 
   RowBox[{
    RowBox[{
     FractionBox[
      StyleBox["1",
       FontWeight->"Plain"], "2"], 
     SuperscriptBox[
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", 
    "+", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         SubscriptBox["y", "i"], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            StyleBox["w",
             FontWeight->"Bold"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
       ")"}]}]}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600512955178851*^9, 3.6005129730155067`*^9}, {
  3.600513906229238*^9, 3.600513910547207*^9}},
 CellTags->"eq:hard_margin_svm_L"],

Cell[TextData[{
 "where, for simplicty we have divided the squared norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "2"], TraditionalForm]]],
 ". The objective function in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:max_margin_hard"],
 ") is convex and differentiable, while the constraints are affine function \
",
 StyleBox["(each constraint can be expressed as ",
  FontSize->12],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          StyleBox["w",
           FontWeight->"Bold"], "b"}
        }], ")"}], "\[Transpose]"}], 
     RowBox[{"(", GridBox[{
        {
         RowBox[{
          RowBox[{"-", "yi"}], " ", 
          StyleBox[
           SubscriptBox["x", 
            StyleBox["i",
             FontWeight->"Plain"]],
           FontWeight->"Bold"]}]},
        {
         RowBox[{"-", "yi"}]}
       }], ")"}]}], "-", "1"}], TraditionalForm]],
  FontSize->12],
 StyleBox[")",
  FontSize->12],
 ", and we can thus apply Theorem 3 to get the following KKT optimality \
conditions:"
}], "Text",
 CellChangeTimes->{{3.6005129784631653`*^9, 3.600513025922779*^9}, {
   3.6005130576397543`*^9, 3.6005130974873857`*^9}, {3.600513365653596*^9, 
   3.600513516719843*^9}, {3.600513650699325*^9, 3.600513760507359*^9}, 
   3.600517241981903*^9, 3.637577872750004*^9}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   "0"}], ",", "     ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                          ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, 
   3.600513870738564*^9, {3.60051722534639*^9, 3.60051723159496*^9}, {
   3.60051890411646*^9, 3.600518919036416*^9}}],

Cell["where the first two conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}, {3.600513867266624*^9, 3.600513867631464*^9}}],

Cell[BoxData[{
 RowBox[{
  StyleBox["w",
   FontWeight->"Bold"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"]}]}], "=", "0."}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
   3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
   3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
   3.600158661435207*^9, 3.60015866767249*^9}, 3.600513864747818*^9, 
   3.60051392712012*^9},
 CellTags->"eq:hard_margin_svm_w"],

Cell[TextData[{
 "We can then plug eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_w"],
 ") into eq. (",
 
 CounterBox["Title", "eq:hard_margin_svm_L"],
 "), to obtain"
}], "Text",
 CellChangeTimes->{{3.6005139229439096`*^9, 3.6005139327340612`*^9}, {
  3.600513998355977*^9, 3.600514040753975*^9}, {3.600514214591071*^9, 
  3.6005142148630037`*^9}, {3.602857905701252*^9, 3.602857907301415*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"L", 
   RowBox[{"(", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], 
     "0"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox[
         StyleBox["H",
          FontWeight->"Bold"], 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}, {
   3.60051411622726*^9, 3.600514161953629*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}], ")"}]}]}], TraditionalForm]]],
 ".\nWe note that both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared form this problem. However, after solving for ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ", the optimal ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " can still be obtained using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_w"],
 "), while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ". Indeed, by multiplying this constraint by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and summing over all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 ", we can compute the value of ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " satisfying all the constraints:"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.600174352033383*^9, 
   3.600174383955019*^9}, {3.600174491817814*^9, 3.600174537941121*^9}, {
   3.600175445275632*^9, 3.600175448682406*^9}, {3.600175506253343*^9, 
   3.600175508667962*^9}, {3.600175871676817*^9, 3.600175927236977*^9}, {
   3.600430909988146*^9, 3.6004309310256977`*^9}, {3.600514166631318*^9, 
   3.600514195458735*^9}, {3.6005152064756107`*^9, 3.600515283881835*^9}, {
   3.600515344928915*^9, 3.600515409862432*^9}, {3.600518062887248*^9, 
   3.600518095663272*^9}, {3.600677531332918*^9, 3.600677573255021*^9}, 
   3.64308709869904*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["y", "i"], "-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "-", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}]}], "=", 
  RowBox[{
   UnderscriptBox[
    UnderscriptBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["\[Alpha]", "i"]}]], 
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], 
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{"(", 
           RowBox[{
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "j"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["x",
              FontWeight->"Bold"], "i"]}], ")"}]}]}]}]}], ")"}]}], " ", "=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]], 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "n"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "n"], 
           RowBox[{
            SubscriptBox["\[Alpha]", "i"], 
            SubscriptBox["y", "i"], 
            SubscriptBox["\[Alpha]", "j"], 
            SubscriptBox[
             StyleBox["H",
              FontWeight->"Bold"], 
             RowBox[{"i", ",", "j"}]]}]}]}]}], ")"}]}], "=", 
      RowBox[{"-", 
       FractionBox[
        StyleBox[
         RowBox[{
          RowBox[{
           OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600174127286213*^9, 3.600174151893757*^9}, {
  3.600174192850265*^9, 3.600174297068885*^9}, {3.6001743312244453`*^9, 
  3.6001743320502377`*^9}, {3.600174395426324*^9, 3.60017448222078*^9}, {
  3.600174609257825*^9, 3.600174620294325*^9}, {3.600174700488557*^9, 
  3.60017476750701*^9}, {3.6001748058235807`*^9, 3.600174817131991*^9}, {
  3.600174862424131*^9, 3.600175009763543*^9}, {3.600175081076378*^9, 
  3.6001750843648157`*^9}, {3.6001751300761957`*^9, 3.600175142796803*^9}, {
  3.600175178151023*^9, 3.600175202209634*^9}, {3.60017552263131*^9, 
  3.6001755621461077`*^9}, {3.600175619176784*^9, 3.6001757437281857`*^9}, {
  3.600435176945134*^9, 3.600435180026492*^9}, {3.60051426419655*^9, 
  3.6005142837214518`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Alpha]", "~"], "i"], "=", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], TraditionalForm]]],
 ".\nThe Lagrangian dual problem can thus be defined as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.60017522567037*^9, 
   3.600175228536392*^9}, {3.600175718035424*^9, 3.6001757187181892`*^9}, {
   3.600175750944895*^9, 3.600175831350972*^9}, {3.6005143339971437`*^9, 
   3.600514339262733*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "\[GreaterEqual]", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], 
      StyleBox["\[Transpose]",
       FontWeight->"Plain"]}], 
     StyleBox["y",
      FontWeight->"Bold"]}], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox["0",
     FontWeight->"Bold"]}], ","}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.600677610391242*^9, 3.600677616531293*^9}, {
  3.6028583730545607`*^9, 3.6028583827818108`*^9}},
 CellTags->"eq:hard_margin_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ".  The KKT conditions guarantee us that solving this problem is equivalent \
to solve the primal max-margin optimization problem. Note that this is again \
a quadratic program, with simpler constraints, which can be solved by using \
off-the-shelf the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver. On the other hand, the prediction for a given sample ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 " can be computed with"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005456864968147`*^9, 3.600545700613552*^9}, {
   3.600546086295779*^9, 3.6005460870879908`*^9}, {3.600677628407139*^9, 
   3.6006777163858547`*^9}, 3.6015586551940937`*^9, {3.601622748825629*^9, 
   3.601622815469157*^9}, {3.6016231250698767`*^9, 3.601623127931273*^9}, {
   3.6016232604861717`*^9, 3.60162326741459*^9}, {3.6016233002996483`*^9, 
   3.6016233228344*^9}, {3.6016234515069513`*^9, 3.6016234630445004`*^9}, {
   3.601623543396038*^9, 3.601623545576292*^9}, {3.601623613108419*^9, 
   3.601623643378582*^9}, {3.601623826542027*^9, 3.601623827898641*^9}, {
   3.601623922085689*^9, 3.601623934134159*^9}, {3.601715356947105*^9, 
   3.60171540012154*^9}, {3.6017155563549356`*^9, 3.6017155944614773`*^9}, 
   3.6028579410764847`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], 
    RowBox[{"(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], " ", "+", "b"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "+", "b"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox[
         OverscriptBox["\[Alpha]", "~"],
         FontWeight->"Bold"], 
        StyleBox["\[Transpose]",
         FontWeight->"Plain"]}], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["k",
        FontWeight->"Bold"], 
       RowBox[{"(", 
        RowBox[{":", 
         RowBox[{",", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}]}], ")"}]}], "+", "b"}]}]}]}], 
  ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{3.601715407263446*^9, 3.601715444664547*^9, 
  3.601715481756896*^9}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["k",
     FontWeight->"Bold"], "(", 
    RowBox[{":", 
     RowBox[{",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}], ")"}], TraditionalForm]]],
 " is the vector containing the inner products between all the training \
instances and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["x",
     FontWeight->"Bold"], "i"], TraditionalForm]]],
 ".\n\nFinally, using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"], 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}]}], TraditionalForm]]],
 " and the facts that by construction ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", "1"}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"]}]}], "=", "0"}], TraditionalForm]]],
 ", we can compute the minimal geometric margin as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005456864968147`*^9, 3.600545700613552*^9}, {
   3.600546086295779*^9, 3.6005460870879908`*^9}, {3.600677628407139*^9, 
   3.6006777163858547`*^9}, 3.6015586551940937`*^9, {3.601622748825629*^9, 
   3.601622815469157*^9}, {3.6016231250698767`*^9, 3.601623127931273*^9}, {
   3.6016232604861717`*^9, 3.60162326741459*^9}, {3.6016233002996483`*^9, 
   3.6016233228344*^9}, {3.6016234515069513`*^9, 3.6016234630445004`*^9}, {
   3.601623543396038*^9, 3.601623545576292*^9}, {3.601623613108419*^9, 
   3.601623643378582*^9}, {3.601623826542027*^9, 3.601623827898641*^9}, {
   3.601623922085689*^9, 3.601623934134159*^9}, {3.601715356947105*^9, 
   3.6017154776947517`*^9}, 3.607433809000391*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], "=", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"j", "=", "1"}], "n"], 
        RowBox[{
         SubscriptBox["\[Alpha]", "i"], 
         SubscriptBox["\[Alpha]", "j"], 
         SubscriptBox["y", "i"], 
         SubscriptBox["y", "j"], 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
     RowBox[{"-", 
      FractionBox["1", "2"]}]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "j"]}]}]}]}]}], ")"}], 
     RowBox[{"-", 
      FractionBox["1", "2"]}]]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{
          SubscriptBox["y", "i"], "b"}]}], ")"}]}]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]], "=", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubscriptBox["\[Alpha]", "i"]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]]}]}]}], "DisplayFormula",
 CellChangeTimes->{{3.601623144017231*^9, 3.6016231451197367`*^9}, {
  3.601623205236801*^9, 3.601623208445745*^9}, {3.601623275581362*^9, 
  3.6016232794166937`*^9}, {3.601623336392014*^9, 3.601623425424549*^9}, {
  3.6016234710926313`*^9, 3.6016235157209797`*^9}, {3.601623561558578*^9, 
  3.601623604321465*^9}, {3.601623654255562*^9, 3.60162365866744*^9}, {
  3.601623692867774*^9, 3.6016237267201357`*^9}, {3.601623878819889*^9, 
  3.601623907696751*^9}, {3.601623941178073*^9, 3.601623995593197*^9}, {
  3.601625248429729*^9, 3.601625263276997*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support vectors and generalization  ability", "Subsubsection",
 CellChangeTimes->{{3.600516572783146*^9, 3.600516581479706*^9}, {
  3.6005167168202353`*^9, 3.6005167209714613`*^9}, {3.6005189316224546`*^9, 
  3.600518931785338*^9}}],

Cell[TextData[{
 "It is important to note that due to the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ", only a small subset of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " will be non-zero. Specifically the only ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "\[NotEqual]", "0"}], TraditionalForm]]],
 " will be those for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "-", 
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], "=", "0"}], 
   TraditionalForm]]],
 ", that is: only the training points with functional margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", "1"}], 
   TraditionalForm]]],
 " will have an ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " different from zero (for all the other points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " must be zero). These points are the ",
 StyleBox["Support Vectors",
  FontSlant->"Italic"],
 " of the considered problem. \n\nAn important theoretical result for Support \
Vector Machines is that the ",
 StyleBox["expected ",
  FontSlant->"Italic"],
 "generalization error of a SVM can be obtained by a ",
 StyleBox["leave-one-out",
  FontSlant->"Italic"],
 " argument ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". Since when a non-support vector is omitted, it is correctly classified by \
the remaining subset of the training data, the leave-one-out estimate of the \
generalization error is given by"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.6005165851954737`*^9}, {3.600677757555637*^9, 3.600677789539145*^9}, {
   3.601386623921225*^9, 3.6013866239214*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"#", "SV"}], "n"], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.60051574189585*^9, 3.600515750787139*^9}, 
   3.600515781307664*^9}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"#", "SV"}], TraditionalForm]]],
 " denotes the number of Support Vectors. \nA cyclic permutation of the \
training set shows that the expected error of a test point is bounded by this \
quantity. This gives us another criteria (besides the maximal margin \
principle) to perform model selection: when comparing two models with similar \
testing performances, the one with fewer support vectors should be prefered.\n"
}], "Text",
 CellChangeTimes->{{3.600515758635311*^9, 3.600515893314638*^9}, {
   3.6005162249309397`*^9, 3.600516380265181*^9}, {3.600516451187839*^9, 
   3.6005164690412903`*^9}, {3.6005461027436113`*^9, 3.600546157811988*^9}, {
   3.6006777934200277`*^9, 3.600677797195367*^9}, {3.6006790967491913`*^9, 
   3.600679109313181*^9}, {3.6006791538231916`*^9, 3.6006791542853107`*^9}, {
   3.600679203770637*^9, 3.600679222444211*^9}, {3.600679429138935*^9, 
   3.600679431559985*^9}, 3.6013767001944304`*^9, {3.607433896546997*^9, 
   3.607433913774089*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074339017542343`*^9, 3.6074339076858997`*^9}}],

Cell[TextData[{
 "A code snippet implementing hard-margin SVM and showing the support vectors \
is provided below, where ",
 StyleBox["KTr", "Code"],
 " is expected to be the matrix of inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["KTr", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], "\[CenterDot]", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}]}], TraditionalForm]]],
 " computed using the training samples\n"
}], "Text",
 CellChangeTimes->{{3.600515758635311*^9, 3.600515893314638*^9}, {
   3.6005162249309397`*^9, 3.600516380265181*^9}, {3.600516451187839*^9, 
   3.6005164690412903`*^9}, {3.6005461027436113`*^9, 3.600546157811988*^9}, {
   3.6006777934200277`*^9, 3.600677797195367*^9}, {3.6006790967491913`*^9, 
   3.600679109313181*^9}, {3.6006791538231916`*^9, 3.6006791542853107`*^9}, {
   3.600679203770637*^9, 3.600679222444211*^9}, {3.600679429138935*^9, 
   3.600679431559985*^9}, 3.6013767001944304`*^9, 3.607433896546997*^9, {
   3.637578920429126*^9, 3.637578920971682*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainHardMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nTr", ",", "d", ",", "H", ",", "f", ",", "a", ",", "alpha", ",", "b", 
       ",", "margin", ",", "sol", ",", "obj", ",", "constraints"}], "}"}], 
     ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{"f", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"a", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"H", "=", 
       RowBox[{
        RowBox[{"yTr", ".", 
         RowBox[{"Transpose", "[", "yTr", "]"}]}], " ", "KTr"}]}], ";", "\n", 
      
      RowBox[{"constraints", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"alpha", ".", "yTr"}], "]"}], "==", "0"}], " ", "&&", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", ">=", "0"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"alpha", ".", "H", ".", "alpha"}]}], " ", "-", " ", 
        RowBox[{"f", ".", "alpha"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "constraints"}], "}"}], ",", "alpha", ",", " ", 
         
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\[LineSeparator]", 
         RowBox[{"AccuracyGoal", "->", "1"}], ",", " ", 
         RowBox[{"PrecisionGoal", "->", "1"}], ",", " ", 
         RowBox[{"MaxIterations", "->", "100"}], ",", " ", "\[LineSeparator]", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}], 
         ",", " ", 
         RowBox[{"Gradient", ":>", " ", 
          RowBox[{
           RowBox[{"H", ".", "a"}], " ", "-", "f"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"(", 
        RowBox[{"alpha", "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"alpha", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "<", 
               RowBox[{"10", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "8"}], ")"}]}]}], "&"}], "/@", "alpha"}], ",", 
            "True"}], "]"}]}], "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", 
         RowBox[{"Total", "[", "alpha", "]"}]}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha", " ", 
           RowBox[{"yTr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}], ".", "H", ".", 
         "alpha"}]}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"Total", "[", "alpha", "]"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"alpha", " ", 
        RowBox[{"yTr", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"alpha", ",", "b"}], "}"}], ",", "margin"}], "}"}]}]}], "\n",
     "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600545717875956*^9, 3.600545751119782*^9}, {
   3.600585819582821*^9, 3.6005858288391867`*^9}, 3.6006042128918858`*^9, {
   3.600604265210268*^9, 3.600604273450542*^9}, {3.601588478974782*^9, 
   3.601588482089418*^9}}],

Cell[TextData[{
 "\nAs before, we make use of ",
 StyleBox["createData[]", "Code"],
 " to draw a datset and then we obtain the 2D training and testing matrices \
and labels, using ",
 StyleBox["getTrTeData", "Code"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600546320652032*^9, 3.6005463437612333`*^9}, {
  3.6006790268837757`*^9, 3.600679140519519*^9}, {3.600679171350915*^9, 
  3.600679201241987*^9}, {3.60067923626015*^9, 3.60067935278434*^9}, {
  3.601376421303667*^9, 3.601376633858713*^9}, {3.6013766911938267`*^9, 
  3.601376696855672*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$745 = MousePosition["Graphics"]; 
     Private`p$745 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$745], 2], 
          Union[
           Partition[Private`pt$745, 2]]}, 1]]; 
     If[Private`s$745 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$745}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$745}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$745 = {}; 
     Private`s$745 = Private`s$745 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600585746776744*^9, {3.600590623675686*^9, 
   3.6005906310066977`*^9}, 3.600590726854548*^9, 3.6005908772505617`*^9, {
   3.600598917722591*^9, 3.6005989405406446`*^9}, 3.600599110860197*^9, 
   3.600599443958766*^9, 3.600599582535881*^9, 3.600602782182436*^9, 
   3.600603523385064*^9, 3.6006039456721487`*^9, 3.600610585106822*^9, 
   3.6006129988954983`*^9, 3.600613812201179*^9, 3.600632644271154*^9, 
   3.600671117325617*^9, 3.600671642243865*^9, 3.600671803735737*^9, 
   3.600672265501902*^9, 3.600672525891562*^9, 3.60120637038491*^9, 
   3.6012094371933126`*^9, 3.601211467232752*^9, {3.601212264674571*^9, 
   3.601212290791333*^9}, 3.601212668249308*^9, 3.601213356535677*^9, 
   3.6012140404884243`*^9, 3.601214608386944*^9, 3.6012180046242743`*^9, 
   3.601286273026966*^9, 3.601295890024681*^9, 3.601296909804433*^9, 
   3.601297170515983*^9, 3.6012976621200314`*^9, 3.6012988950067387`*^9, 
   3.601298947215431*^9, 3.601304693568375*^9, 3.601372885156996*^9, 
   3.601375277266766*^9, 3.601559771884309*^9, 3.601562166577299*^9, 
   3.601563112101934*^9, 3.601571645145769*^9, 3.6015724894480963`*^9, 
   3.601626156297797*^9, 3.6028568557453737`*^9, 3.602859724608704*^9, 
   3.607430517929019*^9, 3.607432448405761*^9, 3.637564725159348*^9, 
   3.637565525882448*^9, 3.637565654749401*^9, 3.637566042202242*^9, 
   3.6375733611127863`*^9, 3.637581899581437*^9, 3.637582140909525*^9, 
   3.637582201539864*^9, 3.637583464261553*^9, 3.637585525828174*^9, 
   3.637588558654112*^9, 3.637659185302246*^9, 3.637659328428247*^9, 
   3.637659648377462*^9, 3.637671396275231*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nIn order to train a hard margin SVM, we will use the code ",
 StyleBox["runSVMExperiment[fTr,yTr,fTe,yTe,trainHardMarginSVM,linearKernel]",
   "Code"],
 ", where ",
 StyleBox["linearKernel", "Code"],
 " is the function used to compute the inner products between the samples, \
which is in turn used by the training algorithm to compute the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\nIn the following, only the Support Vectors will be marked with thicker \
markers (squares and circles), while the other training samples will be \
plotted with small marker size. Furthermore, in order to high-light the role \
of the Support Vectors (the closest training points to the separation \
hyper-plane) in the following examples we will not plot the testing samples. \
\n"
}], "Text",
 CellChangeTimes->{{3.60137662712603*^9, 3.601376639247032*^9}, {
  3.60137668044366*^9, 3.601376811776379*^9}, {3.6013849649473867`*^9, 
  3.601384971557229*^9}, {3.601385365180463*^9, 3.601385409684113*^9}, {
  3.601385995761528*^9, 3.601386003469253*^9}, {3.6028581504826813`*^9, 
  3.602858159332988*^9}, {3.63757932841257*^9, 3.6375793740726624`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"runSVMExperiment", "[", 
  RowBox[{
  "fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainHardMarginSVM", ",", 
   "linearKernel"}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005898842524137`*^9, 3.60058990481599*^9}, {3.600590770279476*^9, 
   3.6005907805314817`*^9}, {3.600590906007497*^9, 3.6005909295274487`*^9}, {
   3.600599100001532*^9, 3.600599103254562*^9}, {3.600599690230921*^9, 
   3.600599690557418*^9}, {3.6006105474506817`*^9, 3.600610631784918*^9}, {
   3.600631686689803*^9, 3.600631696086622*^9}, {3.6012171377628727`*^9, 
   3.601217160028503*^9}, 3.60121856408537*^9}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxl3XWUVXX/vnFAWlpKRBopaVB6g5IKiAoiIiEhIEh3SEmKlHQpMHSHlMhn
gOmiu4YcZhhGxJF6AH/jWu/r3r/l9/nnWa919jkwm33NOfcGoWiXfp90T5Mq
VaqJWVKl+vf/Oy4tfeHX8IcuZu+s8aPTB7lR8x9ta1vG96JZQZOfTv1T/nXa
3A5L7z6QT07sXK1uU9/X/vdl3kMf/SEXePDkaOrsSXKbW/MGNIpJlGefr1R4
2o/35MiolP81T5DTH+45MkeWeLnBr2lLt46Mk0dv+OXMwul35L3L60y81Oy2
/HBOyg+Q6ZZcfvLgq13Cbsgprz5j7ZTr8uq+m2smNI6VDwbPjmmf5apcZWtY
mZvTL8nrF6Sa9E2mC3KhsTVi/5xyVp7Xo3/tEelPy5lb/fuME3KqAYE3s2eI
kRMbVFpSKG24fD7XL63Kpw6Sp4QWzjb8+e9yx17/jJz/aJf8Td5Dx7pfX+2/
fvInDTZVrO7hWl2Oji7xToDcOPuEE8lFdsv9vl3V7dxbh+So7tdTfkWD5NiU
X76Wr4fLyUdTz/IKxsjfP23aZ9GsE3K2nP/+77S8KOVymzb3rFys/sov0uS+
IG9u++8XdEl+p1/lgL/yXpU7//vTbx4rlzwWO/ThjOtywsWG4Vujb8jb7qx/
o3e2W/Lgh1n6lvrotlzzZf/Am7PuyKkyn8n1y/E4mT6ihs5t3SjzYfWB6QPT
B6YPTB+YPjB9YPrA9IHpA9MHpg9MH5g+MH1g+sD0gekD0wemD0wfmD4wfWD6
wPSB6QPTB6YPTB96fesD0wemD0wfmD4wfWD6wPSB6UPXk/WB6QPTB6YPTB+Y
PjB9YPrA9IHpQ+fL+tD5tT7m9y77UcGCB9UHpg9MH5g+MH1g+sD0gekD0wem
D0wfmD4wfWD6wPSB6QPTB6YPTB+YPjB9YPrA9IHpA9MHpg9MH5g+MH3o9a0P
TB+YPjB9YPrA9IHpA9MHpg9dT9YHpg9MH5g+MH1g+sD0gekD0wemD50v60Pn
1/qYG1/x7y3F96gPTB+YPjB9YPrA9IHpA9MHpg9MH5g+MH1g+sD0gekD0wem
D0wfmD4wfWD6wPSB6QPTB6YPTB+YPjB9YPrQ61sfmD4wfWD6wPSB6QPTB6YP
TB+6nqwPTB+YPjB9YPrA9IHpA9MHpg9MHzpf1ofOr/Uxq0f1pV657eoD0wem
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
Yr0IOfrJkVs5a0fLdwvGTg1447jc8/eOhQMXn5ATOlz59VK+U/I3L9s3fzz/
tDe03ZN6CydFusQVF2/kyn1Wj2Me7+O1G1Fh7jk56dq57B/kuCD3HffZ2u4z
L8oPipypMz7LZbn/4U9PLZt+RX741cle+zJek2uOL53qm/dj5REnekQOS3Nd
3l903YJJh30/HXDnq5/G3fCff6Rk+ZXeTf/5ubo/2frS9/4uAUcP/n7Lf/7O
mzMjRt/2n/9K8S/O177jP//TLiXvPPO9f/XKB3/tj/Of/1fsb6lH3PWf37DI
lOw14v3nz+v0yZuPfe+/teLNcnsS/OdXu3q3xpB7/vMnvbm7cbVEr1HDf/93
3I048+XY1n8l+q9n5vH9JZd90GXnffnpkEt5+g9IkumdX096w1FD57ZulPmw
PL932Y8KFjwoz42v+PeW4nvkWT2qL/XKbZfzRw6ZsKp7gFxiZurlP8TPln+J
W1lub+wo/fjJ409WibuwQk7VqGOL4x02yRMDNoz7bN0umX8vHPPvI2P+PVjM
v3+J+ff+MP++Gebfc8L8+zWYf69D3x/s3yfA//378f/bC38fNebv38X8faOY
v18R8/fJYf7+LMzfF4T5+1Ewfx8E5r9/x/z3vnq+/feNer7991x6vv33K3q+
/Xl9Pd/+fLKeb38eU8+3P3+m59uft9Hz7c8X6Pn2+6l6vv3+kZ5v98v1/P/c
v/1vL9wfwexBzOdfzPvNjhbzEi82jHBZmowMWzzorBec8nEjqskxN23D2w/z
Fb/vlUpRl6OhLupRrRc/7D7j1e7+5ZxPQ6Jcr9Q/ZplzNNFr+b9zm3aPPaz3
Kz6/4eWF/n0DD3ZZQk8U/jT8sON43s84HnN83iwbbr+75Hcdz/sdx2OOf236
1h/CV+7V8bwfcjzm+BwZd1duv2GHjuf9kuMxxxfIMmjbha/W6XjeT/XvqZg5
vlSO54+eXl+g43m/5XjM8b88P/Rm0uOPdD55P+Z4zPF//nPu/PDri3Q879cc
jzn+5StfFVn81Xr1zfsdfWOuhxlxTzr++uc5Hc/7Icdjjs82ddjfx/td0PG8
X3I85viZpR/9kHj/oo7n/ZTjMcfnCB9cLGOfyzqe91uOxxw/u9df+4onXNHx
vB9zPOb4XJkHfuT1vKbjeb/meMzxzdo8GVh+UKyO5/2c4zHHT1vzbr3aVa7r
eN7vOR5zfPjfQzM1+9M/ns8DHI85PlPjPac/237D//nb5wX9/M36+S/4++du
/f6/zw/2fsv3F8z3g/CnvX8veeO+//5u78ccjzk+0webplZdmaTjeb/meMzx
fB7meuXzMp7x1qfT3v0wUM4duWlfqhUH5JzNdnScu2a3XHDmt5mafrHF/34y
fXib3r1Wyu/lzza51o1J8tnHwc1qXJ+mH//5+K9DyvZapZ8/n385n5jvj2km
tx+Z4YutvtOWS6hVZqeez+dlno85Pm2j0vkGlvxVTje5ZMMNRffp+Xy+5vmY
4zOEFhsQ++ZvcsaMRVbkK3BIz+fzOM/HHD8pYGb3Uj8EyukbZX3+XqYjej6f
33k+5vjJt3+Y23HKUf/Hn5y5zMh0wXo+n/d5Pub4qW9Nc/MnhsiZQzN8tiN1
mJ7PPuD5mOOn95icGDU2XM6SMd3Euy8i9Hz2BM/HHD9j/cTX046OkrM1S7O9
8LNoPZ/9wfMxx8+KH9e49vBj/tcfPLZvuVHH9Xz2Cs/HHN80j6tZs5bvqd1f
pm3y9ISez77h+ZjjI36te7z1vpP++Us/ZmmXYaf0fPYQz8cc/8FnB7/u/47v
6Wv/V/m7v0/r+0Xzhft/WlfFf3+IebdG2aPbz8stz+8JvFrB//5+fHj1ts82
X5Jbvb77fp5y/vfnk/urfF95w1W5zJbPf1z7mv/9tdeLhZ/vPul7Q4tzxY/M
8b8/xi/P+8exVv73vzJJbQ5cyX7T3xe2j/R5yazPL/XmT7oX43vanWq9B1a4
5e8P21P6fmjm+A0zT7d6+qPv8HcGvzPuvv989pe+P5o5Pv7qawUztPCdacqu
1DM339bz2Ws8H3N8mYqfxuXO4rvZuYdRS3vf8b9+23f6+s36+sfO3Vks0ve0
UlUWbSgb53/9tgf19Zv19R87MabSdN/hwwZ03RvvP5/9qK/frK+/cM5m9Zr5
zhS2vULw+rv+1297U1+/WV9//1a5m2f03Sz/g6cne8T7X7/tU339Zn39gbOu
tQv1Pa1nxeDYtxL8r9/2rL5+s77+HMc29pjsO3xf39lJt/3ns3/19Zv19XfO
NnRII9+ZMm1t/zzgnv/1217W12/W17+jRYOJaX03a3f/rczdEvV+uuHjqHMr
Jvjv3/ErX129uYH//lz24Qd9D6Ty32/Zz/TPXtX3d9urmL2K2av6fmZ7Vd9f
bK9i9ipmr2L2KmavYvYqZq9yPth3mH2H2XeYfafn277T823f6fm27/R823d6
vu07Pd/2nZ5v+07Pt33H53k+X/B5HvPrxecNvr/z9fP9kL2mz6f2/U+fT836
fmvfD7n++Plwvfx373G9vPbv/cvAI/q8xuPcf+FxPr/xOPdjeJzPczzO/Rke
5/Mdj3O/hsf5vMfj3L/hcT7/8Tj3c3icz4M8zv0dHufzIY9zv4fH+bzI+eb+
iK53e//kce6X8DjvpzzO/RP1Ye+vPM79FB7n/ZbHub/C47z/8jj3W3ic92Me
5/4Lj/P+zOPcj+Fx3q95nPsz6tfev3mc+zU8zvs5j3P/Rj++vb/r/ond79D3
Y/t+p/spdv9D32/t+5/ur9j9EB7n+yG/vty/49eX3vT12/0kff3WT9GcBUfW
ORik6//zdDX73/0zSNf7/Kdtvp5XKljX97H7A7+s3yFY13PmG7M+SZwbrOu3
8dnNTReFBet6HRsRXq/hy2BdnwcO3an2oKp//zF55yvllvXy7z/q8/rp1xqe
Sz7jJb0+emPb4v6/51cq2+JfXmnn//tlvdPsWbBtpv/vNS18dHJG+yD/36e5
mPDHhAzP/H+PI+e1LCN2VYzQ9dT0VJl+nbpH6PoZE9q4+6tLI3S97Pmta/u9
xyP8v19327iPu6b379+VDFjeJHsd//7dgEUH6v42IPL//P1xLR43+KTJiUSv
/z9Vfh9azv/zWqv/+mhXsa/8P5+SENdnQ8wC//fjc1ye9vPIKP/3Hy+9sWTO
/t1B7q+WIZlrDjnsQtt1iK57N8h1e6vWhK4Vf3e7FxbJdOSNYBe7NS6p9eC9
rlbfr3bnLRbuzve6EVA14qxXcnOJB0vahLsDGfY2e1zjvJcnIa5c4Wnhbsma
H5IOrLvgpSu9qcfqg+Fu5Pudf/ou7yXvfve+q0s9CHcdrler8d6ky1786srX
NhWPcDXGZrqSLvmK13PkwOmpyqb8/BJOdlzX4r5Xd1/1kO87xLhPatatnCld
klft0ZPUmebEuPpT173S+2CSV6Tawbo/BsW46udyno0a9Id3//QrcQP7BDv3
9eOaScmb3dvNygYPDQh2i5vnebb4u19c799brR55OdhdDo+6m7foOLex8rDx
3+UOcR2PdXj1zcuzvaQ1yztNaB7irqSeE9zlVoBXqdmwTZ2+D3G75rfLn3PD
dq9cgaC6k1Ocaub+Ce23bPcKTKkVd3NviKuVdfOmwt32eD1nJrwx/WCIy7Z0
46pJd/d4mYJfFOt5L8T99v3LehUKH/TWp8n57MfkEFds/dIj24r/7j1Oc7hj
YqFQV+i70r0K3Q/0Eoa+e37O26Fu2ReN/+yz7bB3u/73S/p/Euqu7T+xc03E
Ua/0vQ575ncLdSWv10udJjrIO/Fdk7PJk0Ldyr9HPn97fYjXtdP38xYvC3Wb
e7ybc2FCqBd4MHOuEftDXZfKJRrvnhTurWo8/HLk4Aj39qzqNSIKxHq3Dqw4
cGxzyp7ZXnV0xRuxXqGKwYtO3Ypw/U5WDpy34brXdfW9oecKRrpcyRXTPut/
w1uSL1ebS60j3a48FZp2qnHT+6TN1PHNZkS6Snf7bNv24qZ35YcaVa+luM27
b88I+uem1/CnD3+PdpGu8Lvnxuf89ZZXNFWnnDeDIt2Tz8seLxN6yytzItvT
j/+KdDkmN2g9qM9tr8vgSX/ceR7plowsnXvWzNte0ewnq519K8r9c3rTW2eK
3/FW3d0UnVAtytVZ9tbnyW3ueDlbzO//xRdRLql43qfvXLrjXfzy5KakPlHu
yu8llrV7M877a/rnm6/+GOViB46LXDQ3zit+4sm0hwFRbty1YrGHbsV5L8Pe
uNvlcJSLPJyw/FnK53G+v1Ur3O+jpGEpv97rihRt+rP/+xffLK2bL/m0//sX
v8z6Iusvmf3Pg1cnDnuleX3/82Ce4fOePh7ifx5s22fHH6s3+Z8Hj//87bbx
Gf/v7y9celBy5IXbN73VM85V7bHOv1+fOC65zGtX/Pv1pYbkLOJy+Z/nOveq
kLd3U//z3KIOH2bJ953/ee7Exz3THN3lf56rM6nEkV9y+PfT03/63b6dKT+f
/L0mPu+X56y3JejhlldzxrgCB/IWOJGc6DWstGL43KQw9ywya6r+7c94E+ts
azn6UbT7dmnPGY0WJHrpFmYd+/VK//539npjOnRfH+Rmb+/aOLjEEef9UHZI
rnP+/e6Pdq6u3Ss2yGVtfbZP52yH3LCxTXofyhKs+9sz3op4/dv8we5F49vN
3zm11+0c1O2rb94L1v3slWduNmz8UbDr+O789o3373BRSx487t8q2CXUTH47
y6IdLqnH+LZ5hwfrfvbM19aNi5gQ7PaMnTS73/N1Lkv2fGcHTw12W9ulLxC0
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
QwMi3OPvZ44eFhTrLXr+5fZn5yJc3KknLS+Muu4Nr1Uk8btXUz7fFOtatHbV
G97Xw2+WesWLdOEDov9alnDDm5YrvMacGf6f/2mU3OvnV9dGuvXZVy3q3O6W
F5r+ToW6R/w/D/Q0+MNi19dHupJNy1UY1vWWV79K+UuzLkS6BR2z9D6S47b3
5FmakvGP/T8v1LjWwFS3Y1N+vF5lBl4ue9ur0P9B3txZo9zkLUPrlgi77b3z
R+E35peP0v3oyVsXXb2bP8r1+aHUngYPb3sFtu76ZFH9KDf0eWz2yWPveF1u
1snZoGuU7j9HF3MHE1tFuexbSj5bu/+Oly5x6MyCg6Ncjw8/vBH3Tpy361y7
DPcXRel+8z8Lbi95MDXKbY0pXi/L+DjvQZlaEb+si3Jtl/y6u1lSnHcjcuiL
RTFRur/c/tUsI5IDo1ybB0UnDGh61+veqHDPR5ejXLHURUuU2HzXi+3xIl3J
S1GucXzhKZvW3PVKBf70V8O00bq/HJz+WvG45Ch3OEeb/l+mjvcGja3S9smT
KPdnziIhZ7PHe4v3N2r8LHe0O1qscM9pg+K9oDWBDTZki3Y1akxvl7VDvNdt
9/b4BzWjdb/ZNVzVqXfpaLetk3vv0L5478hfn1d/Xinaza9aKHOdc/HeqfJ9
SrxsHu26NXxzc1KtBG/zzYljyr8X7cpMSS7XL3eC99P66GvL+kXr/vOKCd2X
/tE+2q3cWiZPkf4JXlKPsa+l6hXtqrUp2HLligQv96q5adJMinbpv37jwadp
7nnLizbZv2NItMt/tuPL45EJ3sVlCWearonW/egfA0ufGzQr2s158VPc+FL3
vPqX1/z5yspod2Fogbnpv77njci7PzZdyoLZOuX1avvD73mLOmX+u/qGlNcv
GX68ysR73qtzMkQlX4zW/elFL+/lenIk2o1u/nL/zav3vKGtoo5luJByPhbl
P9u7fKK3Zfq1Q5n+jnYtN+QbXmhOojdkeXSlA5ej3ZNBVVfPq5Xo3X6ZbnnW
8jEuKSLPwYmf3/fef731+iPvx7iLOTM2/XzDfS/noLdH5ewe42YmvpYqvnCS
17htvluNh8W40M4DCxzonOR9G/dJuzzLY1y1bLkatoxL8urOv1g4cmOM27vt
cuIb+f/w7hT8Z+LsyUG6fzm1c8ztj67796ODWt+79L+8Ybof/aJpxpPrmofp
fnTtuiXDPp0QpvvRgyu/d+ifvWG6H72hZKfdm+6H6X5s6saTnvSN9+8XN621
KqlA4WjdL55Ywd0KaR2t+8Ubi12+OHB6tO4XZ8n39HihwGj/v9d+NW9oRMr5
4/5sjY3zf1z+TYi7s6vz8tcWbvLePzZ2QeuU/RJfYPjJE7nOep33rO06ZWCk
2xv4bsjLlTe9Ly7N7lMvZe8kHFk+5NGfid7/A6QvVcs=
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnXXcVsUSgN+vv/d7X7tFwUZCsUGxCxCkGxExsLsFJCxAFBDFvHZ3gEoo
oCIY17p23Wu3YqKIcudxn/19/DG/PXO25uzOzs7Ozu7Z+NATe55QWSgUljYU
ClUR/lZXKDwd8EzANdWFwpEBRwVca3h0wHWGxwT8y/DYgOsNjwu4wfD4gCYV
hcKXUfZXAevF8+cRfhHQKp5/j/CPgDblQuHwoOHVUqFwRoQvBlxWUyjcFvlP
CTg14HbD0wLuMDw94E7DMwLuMjwz4LCGRP/VATdKywkBNwecGHBSwE2+O9Hv
2zFgp4Brgo5C5N8r6Noy6PyVtgm4Lt5XxPt9433zeP9LIcVtEc8/FxK+eTz/
VEj4ZvH8YyHhJ0e5uwfsYX27BuwW8HMx1QutLSP9kkJql5OM3932hq62tjdh
O9ubcGe/b5eA9n5Te+toUZFop9xN43lxIdE0Jr5hi/iWe+ObNqhI/fN1wC22
DfSuX5H6iv47IJ7XCVgXiLjPgmE+D1g7nj+J8NOAleL53QjfC1glnt+P8IOA
zuaj/9eK9x9XpTwrV6e0pFu1OqX9MGD9eP4iwi8D1qlOZVNfz8jfLGCjgB4B
TcUbIs1bEf92QDme36lKdHSKuLWle73qRC/lHliRvg3e7CJd4Lf63fDcatWJ
lv8GrBHP/4vwo6pU1qfRHp8F9G5Iz9Sxe7TnK4FfGe05tiE9D6yNPoz3L8fz
tHg/qiE9bxnvdyknPp8a79vH87/j+fJ4Xr061Ul9VwW+PPhjj4g/uyGleSbG
xZrViRbasXVFGkNLA5pG+mYBH/DdkWd6pF8nwiYBj8fzBuXUD9DOONw18Jfi
/RWRZ0RDev4tyu9lG28cMCLq6hRwQHV6913k+z7gtqj7lIBTAx6O/G0jb9co
77zAuwf0CBhUkcYPPPhzxK8b6XaJ8NaIO9n8D0bcyIBzAx6gPvH7A4aL3xLp
TjLPTQEnBJxI3oCRAecG3BVwRsCZAXcEnBZwesDdUWfTqHOVoO3GwI83/82W
Qbm3+x3k+b6Y0twQ8EDACOv4gbaMsnaO8JEI20XYI8pcHmGTwHeL8LvI2946
KHvXgN0CxgZ0s10or1PAAbRbfNuogNEBZwe+f0CHgOEBHU13X8SdY1t0oA+j
rt35nhDcG8bzqhEObkhp7kV+xPN68FSEfwasH8+7NqRvbi9NnxcTr1BG3wj7
lFJZD9kP0MT7pvLS8Oj7jvLB/dLHd9xbleg+pyrJ4L0D9lEGE+6rLCbcL+As
w/0DzjbsELBJ1PFDIcmmARVJniJf+1ckeQo+0HfwE/PAngF7OVb3EB8pn3YO
ONewS3WSEd8WEu8iM74pJHzDiiTzwE+zPL4BvofHoekcaeT77/Nb+f79o01X
jfbZPMJLKxKvHxQwOWBwwMEVacyVI83GEd7D2Ixw9eCZ8x0fPQPuCTjLdpxk
GeS/U/6Fp++Wr0l3iW1BfQ9FmTtFmZ0d66XAN4pwYkVqR9I9A6/E+80ivNg2
JW5e4CvH+00jnBOwUjxvEuGDEe4YYcco84F43iGe94vn++N5+3jeO557Kxvo
tz6GzC3dK1Kb0sZfBzxGGzC3BDwq/mXADPEvAqaLfx7wiPhnFWlsgA/n+0pJ
ZhJ28fn7iJsdMIe+DZgZMAv+NX2L2iSHu8bzmAgPLKVnZHLGB9Wm9Af6HvlM
+bz7Rtop99OKNDag6WPlFHLrE0Pi7ouxdE7A8IC7A84MOAuIsjqVklxFhncs
pXdfxRg8NeJvC7i9Mj2fFnCH4ekBdxqeEXB+5OkWedeOfN/5rXz/vRF3tnVT
zwHWhTznmfa7X7pGBPyvIskU5Ot/lRnghzSk5w/pg8i3R+CPmp9yl0SZd0kL
33aP30fdm0Z8f/gn4CPLpo2+C/yCyP89fBbpFse7HwM2q0zhT4zvyhT+DN9U
pnanPzeoTHwDH20Szz9UpPzrVya+gY/W8Huos0llekeejSsTf5CnWWUq7zvr
mBcwH/lWmWiClv6ViY4tAvr5DnzfgNUCVkfWViZaoG+jylQedexdmeQocrhs
H60VfbRmZaILflm3MvE0PP5WxB8f6d6O8J2Ak+L53Qhnw9uMxVKq80P7p5ly
GJn9RoTHRJo3S0lvQ3+boewmPTSsV5nqoY3+E++PjDSvRzgzoFM8z4pwncrE
09C0dmXiY/C1KhO94LQF7fVLRfp+aKGtn4j83aKcJ0tJX0dvfy3CL4qpHfaS
L/YL2F9e2VccXqa99qlM8hp9cWVlLvoiOuA3UdZ5Uea3pSS70dvWV66jC6J7
3hhxVfB3Oc1JaxvX2fj1nH9WVY+7OdJXM84jfa+Ab+O5Zznp1+iOJfVswrLz
SVn60K9rAmrVwasCqgN+LKZndPdbo/yaKLN7Oc0hK/s96N9F62DeQ7dbw3mP
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
8iyWVyiXPSv2rthnY96dLX+NiTzTAx4JGGs7gS+UXmh9Tnrpp9GmhQ70g1mW
9ZU0Qvc30p71gpmmo++W1CfZNkseoo0mR1lPyxPckYPfFP5T+E7h98AZKO7I
wc8BHD9afCk4u8d9OfjW4mPLvhv+QNwFsXnIrJ9CVv1cm3wmiOfM0mbx/sfa
FMe9QfgOkYf7gfAroFxkYfOALZWJhC2UhZxXb62MbCl+kPHg+CFBO3cv4OfB
WoE9SmQwuu2mAnrrj+rV6NTgv9Qmfz58/fLaiTHLvVbLVtDjd1N+cafU7yus
sdo7zrkf69sV1nU7u+7jPqpfTLdMWc48x7qwnetEaIIe9mp/lZanbS/ezbNN
50kr88kWttdvpsX/cWlt8rlkzljiO3wtfzfEB/MPQ9L1tV02cx4j3Nx5bHPr
qJFGvuW+Uton5m425nN0/Rp1AtYhVeoEFeKcVyHvTHWBKvOgOxRMt1D72OHa
Chf6/JI2M+webxaTHe0lxzl8O0X8NdO1kxZ0+beVCa+Y/kXzvGv67aLMy4yb
YtoXxR9ZQWazluJ76Zth2g12KCfdn7mZ/mR9QLuDw6N/2A+chcB+sF05nXnA
BrZNOfHu7/ZDpWsv9CH8L9l/3rqceHqJ/dbCPganP36WZ1lLLHctyPqTtRbr
yCO1Ke1UTnpYrXGsN/52Hcm6BdrRuViLEBIHP/0iDzL+CKkbO/sk7e6HaPPN
exqE7Hv0LKb5gHmgm3INOdfd+QC8h/Hg/Z0bmBN6KdPJ36KYZBUya2AxzUPM
CYOcz8B7OzeQp69zA/PJOsWkX6B3lF3Dsa7fQtmNTrdlMa0LqKOrNCJf+0kL
ZfWxPOoYYP3Q2jrgj8i3NKBVPP9en/CWxUQv+BbuQbAf0aKQ2o49iJaFtJcB
3qqQ9jTA8/kQ2rV5Ie1ZkL+17Uu6rYwH39LySLdZIe19sC9yqW10UMCQYuJv
eHvrgD+DrmUBWxUT7eDrFlM7oa+RZ5Lte7D5mB8GG06y3Qdax0TbBZyzl/g9
c2/WMuet561jkThzaJeAA4tpr4P9C+zz2ObQY9CJDikm+qD3pHJKx572ENt9
K9OSp1MxldHRvKMtu6t81k2+Gy9/9JPnuq/Ag4SZZ3vKg+hRnaX1Qt/1lhf6
WNZFvusjv/RbgZf72y6b2//0DfrYAZbb2Tp4t0Exzd/oHesXkw6B3tG8mPgU
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
AWvRqX0=
          "]], PolygonBox[CompressedData["
1:eJwtlmlsVUUYhk+hLfbOJ+BSWVqoaMUdF3Bfo5FKRFEUBS2FIoIUaFGB0rJa
JKLgQgX3fflF/EHiHhdQ3BDBGGOMiooosglVFFSq+Lx5748v93lnzp05M/N9
75w+YxqG1nfIsqyVKCRuiizbl8uyEuJGuC+xEm4rybJK+O2UZUPQK3h2Onwd
bW3o7vBM+HhiNfo3nj8W3kD7VHRrUZZNgHcSC9BV9M+BPyPGoDcUZFktfAL/
eR/dFW6CF/G7hWfLaeuEfgJdAJ9GDNSz6OHwCOID+CmiA3w6MYj+59CF8JnE
EPQ2dAs8n9gOP0N0hM8gBtN/F/oX5itDF6I/Qt8AVxMfw58QNfAoYi38kNaQ
85gaezJxfbHbzg/vgfZCazoR/ob+23Lek2/hd4ih8NXESvgxIoMHEBfz/Dp0
bc57tB5+lxgGX0u8B+9IXsti5qyH7yQ2M19P2gr4/z3orehe6Bz6T/TlTDEY
vQfeTZShB6H/gK/kmSJ4h94Jfo22KvgCokF7Q8yF5xFb4FeJgXBfvSO8UecG
NxM/wr8Ti+DlvMM8rTU8dje4Gf6J31no2cTP8H3ENp7tjT6Q/gpiF/ot9JHw
Evq3oyuUI+hXkt+tlLbZ8AjaOmktxEj4Edr209cffSH6O/R0uJH4Hm4jFsJN
PDMXbuSZzsk5fxQ8gGinMCYr58I52TW/Zq39iPC7dc7/d2vy3igHlAsPEGtz
nlNzb05e6zH0T4Krw+/aQ/sAXxR+V+XAo7RdEs4F5fzj6L+Ta0858w9cR/9+
nS1xM7xX55O5Rv+Cy3WG8E7lRHgOzbVXOQxvSj6rPdTnxOQaVa3qnc+mv0U6
5xpTrdXQdoDG1nmHz1BnuQs9DK6GNzH/EvQ++PZkVs4qd2vD/+2pfYDfSM49
5eTUvIfIS3ZrD+E1ybXXhD+Mgi8N175q/El0d/TLcMDT4IOUX6x1BW2HwqXE
ryV+poe8Kbl2ShlvJPxhsndUoWvgXjzzunJPeRLeM+2d2nrDX9A+Hl5DTjTB
h4TnSvK5sGfKO9uJ8fBo2pcz9jL0fnhVcq1rj7RXl4W9Sh70NPqKsBfJs55F
f5rsNRpDY/2QnLurOaM6+Kqwt6lmn9fawmdRTFwDjwu/Sxl9c+CJRKa8UJ6E
c0a5o7ZJ2svkWh7H+hqTPV/ev0o5Gz4znZ3uiLFwx7DXyDMX0n5qeG/qaOuv
tRH9eNcp8li4S7i2VcP3y1vDZ62aVe1G2KvkAffS/zkxFv0wY86A+9D/Zs6e
IG8oCd8N8rjFqj15Rt4DX+C3X3gtGuMk+OTwWDrDU+Cl2uOcPWtj/gx1li+h
DwvngHJBcx4OHxz2HuVYaz7nlHuqsTKdhc68yB5/lt412WtVk9Pg0eHaUw2p
lr5O3hv9ZxZcHL57dOfdnezp8vZKflvo+yrZi7SnM+X98pic7yjdVcpp5bZq
tj1/5jp7ecSE8JmX5z1d3q6cV+5rjH+Ta0y1thT9H3xHMuvO093XLbw3qinV
1oLk3NYdpbtKHiIvWYc+l/5lySyPl9d/mZwb8tRmrSXs3fomqA+vsTLv2S8m
57hyXWd0Dn0N4W8HefYU+Jawd+uOuTX8DaFviYp8LjzI7/qc7yzdXfJcea/a
zqP/6HBud6F9RjjE+oY5LlxDqiV94wyH/wd5IC8f
          "]]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
DZ7/aMuuaGPnbAc/aHyeT7R/9K24A0B7+CzuGbBHwAGRdr44HRhwgfGDAi40
/m/7MSLgYMOLGlLuH+G44sO4d8BeAf8y/ULpdK9jsKd0Ysx3d4yh2dIBuwbs
ErCuYwn91nPsia/jN3DZwDE5zLG/zzbW9xtl1jYv+P7WnPk3tJ8PBNwfMC9g
ycbYc3B+Ch4RLhXwWPz+MeCHgA8CFo1viwR8GL/bNmb8o/i9WGPG5zZkHYtz
JtuQdVDvnIb8Rj7OQxgjziD2kAb0fzdpAN+tID9BpxXlG+IryXPEV27IOUB8
tYYcP3hqGeuCjqs05Nwg36qm72faKfLy6o435Ze3zT0cA9KZHzs1JA8xP3b2
G/G1pCvjvKYh/LKs4woey1kf8TVMp73HA36SvpzDNNa3nvk0eBaEjoj/26Xq
E9gcL1cvxN8P/z/88PATxS8PHz58T6+WFznjvLJNq5/fVeqal1svuuPF1nWI
7VzinGtX33q3YOP61jsHG3l+g28heBd3RAhfVcaNFNfiPhJtjDP9FWXflebj
HhL+gIWeyu9B6pf4LhZ3gwjxz+1lX+kn/t+j7f9Y60Z+oJ8OsDztcMZb+AwS
Pq1coB+cpRZ3nPAXRh/EPxi/3e3FBV/EzaQ17W9u28Q39Ru03868tL2V9VHX
FtZHmU3My5hwbrfBAud4hMU5HiHneNiXif8i3r8Zf9JvnO3hY8l5I+eJT/jt
pzatd6IoU5xfFueZq3nuVZxlkvaYdXA2iR/mG45xcR/pzzatd6uod8Na4BHj
t24t7yQxp/HxfNj2aAc/1e+NP2rdxPEvnW0b8AX8vqDfXuHHt6XneSXP/Yo7
K5t65kdfOeNc2zNPaEac/q/t+WNxbkp5+reWZ5OsAZt4jtngOeFW0qg4G1zd
s0finNNyJllx7dnCehs9q6T8ErU8021by76u6fnmqta3X33r+WhxXnqQbVwt
reevXc3pe4Tf0afItcaUy5+XU6YgY74qp3xEXn5Wzm/Ivy/L+Q15dnH8fizg
UXzFDR8J+KKc6dT1aTnLsf58Us5wqYBn4/cfAb9zX6CcMhSZ+nU5Q2Qw+svK
yuZfAuc/Iz4z4ONy1rFkwEW2+bC6zkrK9efKmf8P7wb0DOjh3YAjjG/kt8O9
s3FYwKHe6yA8xDsM+wXsq0/8/sZX9ts+3q/obvmV/La3dzyo4/+491HOtZa1
F73gDPQy1/IzjXOnoVfAkeW8t3G49W7iN/D+oTnzbCYe5waco55BfafZ/tkB
Z4nHWbbxSznbZ53/rZxrOThBow1d8xnDHwK+D5hRzvFmPO8uJ3/ACyuIN/24
LODJgCccB8p9F3Cp3x4PuDzgKfONDHgm4Gl550fbI99Pxh8oJx8w/vc5rvDj
QwHfyi/3+g38HvTb17b5s3XdI+6fyx/fWZ77DQc4lpfYNrhcWU6+fMa8q7v+
U9farsnzy7vmg+tars+0CV3JR3/WdE2Gv6ErtKZe4tD+CmnwlDRbQ33hKXmF
sbpLejOH7ijn/IH37/Qb8Z+bc05cE3BVOfn+Wev+zbqetD5wvLqc+cmH7+HP
6grcwzlQunA35l8BB5VTN30o4MGG1HHRydDR0D0fCXi4IXVZ0tH50GHR7R5t
SN38ceMj/EaZCy1HvejOc6wXvX+ucdK/g97W+zXywHa+MX6/3/7TkLrpV8in
htyjPGHb7CfmWe995iXfdPuB7vlHc8rCYl/0pOXRTdcMubhGY+pSazVm/PuG
/LZ6Y+K3WoSrNia+fCP+qOXJ+xkytTHl7OfIxcaMzxDfL+wTdazSmPHlGzPf
Q9LgG2n3vXQ51/7fZ39WjLwrNGb/VmrMOLRZuTHj0Iu6idMmeWmDfdrn4sie
6mPpdY94kXamc+lu5cq9ygZ45fyA8wwfdO5e4Fwl/lNz8iYy6xzn872WIS/7
1HMNSTvLumnvDNtkHnCXCzn673Le2SI8uJx3tw6WX/e1jbOd2+dZ92nOGebQ
6dZH/ELlAriuIb8zB450PjFXejqvkA3Id2QZMu/X5pSZrDGsQ+ju6PKsS7sY
Z2/N+sq+p7tznvJ3+A1a3yXtyXeEbdIesn+kZVhDkKeX2M+LxJ1+jzB+kN+g
fQ/xHWl/LnB8DhX3S6Ul9V0sLS+2rrn6s+J3O6cxfYiJf6Q/K/E5nIm1pI/J
h5xntaTPEedEbVvyjOcjzrha0v9kQku+C8CbAI3VjHdSPx/vfaIREXYNWCSg
iyFngOXIf3H8XjTgf/F7yQgPrabvy5xS+pPg+79US54d/FXN34dF+LJ3KLhL
sUnoTM/G93YRXmAbC7ekTwx14JuyWaQ9F982jXCdlsyPfF07wmdakpe3jrQX
4nf7CNeP8PmW3PsWPovUt0o17ytuXs6zx66eEW5Vy/xb1vIsifO/vp4H9ffM
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
9t7nq3lmwN772QgHuhfEfkzdJ8gfnP8hl1nHFnHd7aye0dX4UuglATtX8qwC
nfKpauofO5hvaXEk35Lm3amSZ4DgiJwu7v0iM07wbAFbMm8MTNOWPLyauvVr
1dTX0N3Q2W4spcyCv45yD1DcFydkf0CbJwWcSP+qqeO+UW19u4F5toq4IONX
NmR9WEJ8oc0a0gOackZ6sDSaVErZBx7o7HzH3nFELX12e6EnKNt5o4A7/Nzl
x9/laH/ztip2Pt6g5P3J5Wv5bWgt79vO1ia+Si3frx1WSxsf+bH58Y33MXmD
DxvlMPVQ3k3AXxA/oc7qqexlyQtv0+bLlp1vZ2zOMwf02tnabN80nOxvzibI
w7lDk/Jtvn23lGsDtFgo8JvKPrOa5aZaljtRjB22/OJeGTjRj0ftC75B06RV
kz5DFf2D+L2N4W3+vt3fTZab7m/oepe0naw9Ffyw4x4vjZaqZR3H1bLcLZYt
7uaRj7MLfnN+wfuHvCUIvaH1DH/39zfjebM40N9Fa1nn5UGHZtdKvp9SzXOI
GRGeVM294tvVvJcGbTgX6u85B2c+3BmbWMpzDO6cwbvwRXFvn3xz3PPd7n4Y
mYruwHnJPOfY0dbHfm6gdVDvYOcS9Q5zzk0p5fk6OhN63GnVPFP8rppn7fuY
VrwhAo1ZY5nnzJvhzmPm8KnVPI/5pppr51LKA9bSpZUlrO3LKDNYK7iXVbyp
Rli8qUbInTDO0rD//jfC0drbu9Ty7I0zoS+ruf5trU7M20rov8tX0ucefOFZ
zvY4x/q4mnZe7AAfVPMdJ/IuV8n1fzllLXrAsspgdJ3txRXdp4Px/p6TfVZN
OzK2kTnV1Dk6mo/3oNC7V1L/Zj+yj3HCvSvpC8z+qptrIPo4Ojt+wewJ2Tvi
07arcXwvdjO+pOmUx8cCvRZ9Fn+IPY0v6zfKrGibe0mjPQP2QG5W077wZjXv
KcKbxdsPhJwJ76C8hnd6l9JOgSxewfr2lI57uFbtWEr+oMzJ1bQlvVtNH2f6
yr55MUP2oKdX8+z8h2recR9jG31Lab8g3k++Jj7EsUU2c47xjfrEsX6D1zl7
xlbyeLX1TS7GZAX5fU/XdfZF7J92sq/FGxgn2Ad0BXgFHsGfm719F/WIL027
1zqIt7VPXdUd/msbS2m7xW57qLocOh22be5JcCfiUv0kDtWn40L9Ii7R14G0
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
u+WX01bHGzXFu0SEvLfDe0Pgup72Psrtpo1wd8twn/5n7Z0n2c4u6mob2Cfe
e+AcBZry7gNnJMR5owIcie9in5a2jWXE71DbL940Wt96zxRH3gLiXj405lyC
u/6cW0Br7vfzjTj7ZmyUM9x/YrvEJoq94W7T2JveZ9rXpj/o3vVe09gnc8e7
uCfPHXvuzf/gN84/vrQdyjysznqRgN5avB1FWLwpRci7TpfZZ/p6qWNAHNsw
bx3tK07YcbHhXmI58p0q7Rib72wbHLF5PGSc/T12ZOzK2Amw52LrxUZwq/E5
phM/xzaZY9gaplv+d23YzI2zHAfw+0b8aI/7lvjWj6wmbUbYV+w9d0l37BF3
GscecYfxx+1b8U7ApQ2t9/4J2RN8LO53SPeLLTNU/5NlakkbeHRd6Q1/MBfx
r0ePQYfhnbZT1bmWd81jveupfxp+asX7brz3xr0u7shhZ+MOFve1sCccp65/
k7J5qvsG3r3Dl+YOy6OXo7P31scGX5tT1M1vMz+/welI731w/4O7tdwp2KCW
b+r95tp2u2XucN0+VVx3sT3etjveu3ir1fJ+zgT3FsVbe8S5G8Oeh70Ud2PG
KUO5u3KjaQNNp0x/6xinDjHJfKeJz6nqFzeZNty7z2urw7KvQJ/kTszx0ox7
QsONowOyB0APLN5Y5N3AYfoRrVjLO0B8K953PMHyL6iL8X4n4/mDujRvtvK+
J++SYoNGjiOnsUVhk8J2xRugvL3Fm1j45aO+4f8/AL+lwOeYWp6vUA7Zw31c
vnNXdxB9xDctwr7e5eFOz0HmXdO5xJrE+oMMQw4W75wRIi+RwcubVrwvBu8i
c5czbX/rWM05urL17mMdKytX1nYOHIsPNP4KtdwPsk/8WLrCj7eoT0yRj6HX
z+p/hMyF0+Svn/3Nfau/rKe795K4n/Rv7y5xh6n4bznozj0J3hfgbgR3EbiX
wj0F7jpDt+JeOHguIk//5XxgbNnPT5c/pjnHuMPKfV3uVpxoP26WD6ab7znH
nDdi/x+zps1Z
          "]], PolygonBox[CompressedData["
1:eJwtlXmUl2Mcxd+mMTO/3/NUpqkpJxxxFO1lz9ZqiUiOrTgYjaLMNGXfQolo
s1baVSoVJcshxMkR4UiStE3alAjJqGnhc899/7jnd+/zvO/vfZbvvd/GJeU9
y3KSJBkPcsHSkCSbM0kyNpsk1fDeMUn2whsVJEkv+GTGNqDXgS7owejO8JHg
MXhPxnblJ8mv6Kvh10W/uwd9PXwiz6yFrwEd0VP1PfgmcDF6ELoTfAQYAp8B
dsJ3gO7MT0dvg28B3dA3gu4FXuNN8AnMr4avAheiO4Ef4YWMvwHGg+/R7cAC
+O3ML+L9anRfeD/GWsArwMPwWxkbwnwVugT+FGMT4ONAgu4K1sPrMv4muAy9
FV0Pvgj8AKo4zy8YO425dtH8VFDKXCv05/Cm4Db0d2BfxmOttXb0v+gv0Weg
24Dl8FNAH+0F/JPxWNvoMc2VgvuDv6Fv9QMPwK/gmV/g9eFvgavQu9HF8MXg
EnQlugi+EAwEHdBdwSPwvqA5vAw8pPMDzeD9wYPwCtARPhw8Cv8J7Gd9K9Bn
8d/z0FmwAH00ei68AMxCZ9FFoH1NzlJnCG8IBqAXo4+BP5e+Ow/URo9Bz4XP
BgH9LHo6fCo4Ct0U5FDYS3Vm8PeZ38h6RqH36WzBGN0f6AX/O3gul9/BPN8C
nM77yxhrCT8Q7I0i0Bt+HGNTWN976OPhHzFWmfF/7ocvAZvQo9FV8OGqQe0F
zNLdBc8Vghvgr4NMuqda0XdSnHrgSvQI+GT4RJAT7UF5UTU4KdhT8pZq/pW0
Juumnusc7YHC1CMdoj0ir8gT8oY8KC+qBqag54D89Ezzoz0n76nGpwV7Ut5U
Tb2Kng/2st/G/D7O3IlgJeezhPmT4KPSu54BCqJrsH7q6cuja64ozZiL0D2i
s0Q1OjP1VL00My5l7k5wJGsP36G7ivaKalK1qTvSXfUA92ptwVlVB/wFXwEa
aD/yGHwo7zfhdyv/V57uQXtRDZTw+wKo5tmWvNOeuT+Ds6o2+AP+qdaXdYZ+
Al+u+1NeydPwz7Rf9M/oZfAPdYZZ14hq5ePgtaqGVEsvgoPwVoydy/c2Bn/7
AGMb4N+Ahuht6K/he4K9Vwv8Dl8ZXGvbmf8W/m6wlwN4G/4yOMxcG/T5/P9L
6EPo1ujz0EODz0Z7OKzzCF679ngQfm10tivzr4GXRmepMrMP/Jbo7FRG3wx/
IvgsdAaH4E8Gr017+A8+LHgvupMjqtXoLFgIng/OXGWvPCQvyePy+jTwDHoc
OML7bdEXRHtEXpkEng7OCGXFHDA6OEOUJfPB2OCaVG3OBCPRZ6O/yronqDe8
A7pkXeOq9bXBWaiMVlbfxfM10sxUduoOdBcaK2Ouf3RtqWYHwOtG702ZqGxU
D1Av0Dfug88Geannc3n2Ne05uAfViK451V4OvwPR5dFcGawsPjM6e5XZyu71
wbWjPZ3DXJ3ovWfS7FEGKYu6gbvhFczXDO7J6s3yjLyjsUHRmansVA3fA/8g
+F1lrLI2Rp+1Ml5ZXzP6LrQH7WVrcK2pxrfAdwXfnWpyJ/y34F6tO90NXxPc
a9RT1VvXBfdq9Rj1ms3BXpFHK+E7gmtbNb0dviq4N6rHqteuDu6N6qHqpXnR
tZSXnn2D6N6jnlQMz0TXhjJR2XhsdParRzVSdkT3GmXeyfDm0b1DPaiZsiQ6
C9UzToj2oLzYJM2e/wFZ11Jx
          "]]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["

1:eJwV03e4jmUcwPH3FMneW3LsHISyGmRmhmPFOcfKaHCIM+xRyh7ZhcoeKVT2
qqxsKlQ2UVZG2pTP/cfn/f6u+32v53re+36e6C69YxOjIpFIjI9+GSOR4dzm
Fn0zRSKv09c8jJvcoI+13uE781B+5TqJ1nrRxzyEtXzOm+H3uj5cx/waPXmZ
V3mFoXSnBy/Rja4MoTNd6EAnOjKYeBJoRxztGURbXqQVbWjNQGJpSXMWupcW
+pk20wXaVOfrC/qpNtF52kg/1Ma6WhvqB/q8vq8NdJXW17laV+doPV2pdXS2
1tL3tLZ+os/pu1pTZ+nHvGFO1Gtc5QozqRH2Vi/zCz8zg2fDXuolLvIT03km
7LNe4DznmMbTYc/1LGc4zVSeCuegpzjJCapbqxbOyTyYH/mBqtaqhLMyD+J7
jlPZ2pPhHM0DOcZRnrBWKZypeQDf8S0VrVUI52zuzzcc4XFr5cNzYE5lDSsY
EZ4DXReuYy5LOR4jhjL0pxSlKU5JSpBKUYrxKNEUIYVHKEwBClGQZPKRn9zk
JQ9J5CQX2ZniXnLoR5pN39EsOlmz6nLNrJM0o07UTLpMM+gEfVjHa3pdqul0
nKbVsfqQLtE0OkYf0NH6oC7WKB2lEX1bF4X3OLw3ephDHOQt/qcTB9jPPkby
Hx3Zyx6+Du8t9+jAbnaxMzyj3CWBHWznq3A+/Es8X/IF2/iHv4kjha1s4S/+
pD3JbGYTf/A77UhiIxu4w2/089/uA5yfoTc=
          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.14637212643678166`, 
       0.43134474436762316`}}, {{-0.14637212643678166`, 
       0.43134474436762316`}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.2695761494252874, 
       0.6117834312509736}}, {{-0.22733477011494252`, 
       0.010321141639805631`}}}]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[2], PointBox[CompressedData["
1:eJw9k3tMk1cYxrtxCaCrDFizCDKcjHXDoW6uWkx8YBAhEVlpnDLHiFY7YSAw
54yruBU10CwDu81FYxcsmBEGNooEcBT8Cr3FrNBCK9DSllasvQADx1VW4/hc
+N7k5OT3xznnfd7nORt5pVz+yzQaLWVlkTtTveYYt6uXSHj1ij9BMoq1h879
IX3QQ7QflDkjP7MhV/Mam5/XTfHtNMKcPNdBeGhB4+yj0wjpKRCE/3iHSFTz
1PYqG4SzjLTk0gqoXA1FWTQvpCU32T5NPQSetqjld9yYOZe0ZszdDg2xltO4
4EW4t0st7u9Ap/VUdWjcNOL27xV+1HYX1T3Z7MXlMdwuinxLzurGyT+96yNT
/sZM6tZrsYEEvvutwtbC8IK5uL335Mc9SJHPOiqDp5DJU5bHs3pxP/mViuFZ
Bw735ewYilEiv6RTEyiehnCn40lVgAq6fbufyc2TCC95W+84rcLk2aCowsOP
KSa2jdZfjnTjLv3ZFxMGNap+b5XPLTxESjpZGnwpPNDAr7HgjN8p1L6hA3dz
N4et8EF8vGzXt8F9yF1XzWo1WZH7tan6www93kzSMmSVXopX3/c0RhfVdOox
ONC4JXTeBFrYgwgpx4Dt/ZdvbCwYhhgxM0tKA1RRzSI604ybTWQN4Hm0UWpL
NUFF2vPTIBipBeYMj5FiU3nYYr3ShRfjDDTihI7bOXjUCcdKt/QzRvBOa7MF
gVqUtZMCjZQf/olPLES+CTUfuApCLC6KmV1LSkXhJPx5jHt6/hDEiidEdo6G
4q+EsRd+4IxD9PPnEqZ5CIfoW7vDEpUUZ+W8zwjP11Kc6SMsJ2Zc4Lz30ori
YSTkkQYpUHz1kqry6TB0F97NSgi7Q/H5PZWJN3YZoCDj1jAC65XMf/0b7kMU
EPv9TscI/H37u5cPtODiKTsv021Bkiooi2VXQjpWvGG5bxT9HZcqyoNVxNKt
g4XPBVZqXtIXDdjALL3Oavb9hYIJQ2k73Y6Q2Rh9XUwdsbmSvNAOUfz8kuis
FKu8en4u7vV9687bQTM8Va3flE50ycmyY0+tUkOLHkN8y5HdERIHFi7u+Kc5
xQHf3iDZPZMDAkle1aMmDazZtT1Tx5wYkW+ytLTJiFW++khXG+BtIuq9K4Gv
dWI+oq732hELgjt+OV4md1J6+8l4zzvRqOIiw3kLHvI7jT7EVFPotkTREOYk
sjTi08doTS/nb/lm4P98Gdww0Md5vxZfJ/4D1bkUNw==
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxFlAtM01cUh4susgErjwlDEaaRaB0PpxgFmRwMrKCZDojjJWOAZQibiA4S
ZA4E+hqZuMS5EAkbDlQmWYUOLGN0p+VRVqBgC5QWLPTxF+RRygyCIIG1Ev67
yc3Nl5vc/O53zr27Ui5GpW6iUCh087SsieU0daP0OVKZB+0va7RQdqOdvcSd
w8RdyQEmhz4oHpH6NX02h9Qj6sKERBHJZ2QxFXadWvCsTw5yKjdhbM6wG1f5
F4gM9tYf5pvwQk9Us+KcDn76Znvyn3tNGDp5m1nJbAM/3j/7DDZmPjzv+Ggz
AW/S+4uTGmYxnvqB0MarDd4NOXrxgOcszjjEuFBKGsE4HCrlyYzYvfXrVL8p
Hbwaqm0oOGbEu5z8vw/VDEK71Q3YkTWN2unSN+Lab0H/6ov3jWNTmJu2GFnK
qwY7RlRL8L0pHNhfn349tAPMae47ukxhcBHtxKqLHgQ307IClybRqyOlY5Sj
AckPvWft0ieRd8qjhCaXgv9ZTv4fL56hfobnwHUUk7w601vstp0AeuxsOjP1
GXr8tpYhEA9B9KfmMTiBPJNzRHWhGioEroorthPI6j41VEbRg3JHzjmZfBzX
3PorNccHoLl+vMZt+inWBToxHGO0oDJfT9hFYDZ94VKcoBd4Iag+mk1gkdaf
3hsgRqbFvzuBYSvdFFZGH+yk5q7oKASWpkyyuqyU0BK8p8OWMGDQkKSQES4H
X9uxCX6WAZWs7JcinRLOZwVe2XLEgAltsWsZ4lEIshRAq0f2cuR8PE0BdQqz
wAt6zP6Oy6zJHABWxlsRNS56pLkW+PZV1ZHs7MRoYYkMkL6Wd2thvw6bGhvd
yh7ISP6ip0Tz+x0VydfFpwMWl8egijG05+SCFuPq9hazRxQkN5g03tIQPUxJ
bldlemtJ36/9Ph3DEp670Ml5AJ5zNnsU+I8h46CqtahKQDLxTmbRElsP3sbP
HypWR7E8/2Ptv50j4FAkn9/pOop2XwYJ+PF8DJ/wYWeParB624yP/byA5Fee
OR3Kih7wvvpLd+viE1yRnREuR9ev1+PkE3xb/ThMRX1M8s9d4fOJFfp1v3PD
mLvJejw5Gtf9CoYxKWYLp+o+Bzf4Gj13X21CMrnfVBgxfpxXC1srI3ysbIZJ
ny8PtV7+ZLeaPD/D4u+hCuW/VjuFyQj4qtTSMUrMK0/gEA8kwH09Bsl+3+CN
/BtcGUAZiRTySRZJvO96HXsEWnP6b30HkMY/cGL5jhzar3oe7gnrJ/Os6K51
vkftJ/+D7+9Zi8/nybGymqdqvmkAia3lgf3PxI+XPjq9TYZJ7mm+wbtZ8B81
BGoZ
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=2.8% Marg=0.0551\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.1742456896551725`, 
   0.7442169540229884}, {-0.15644794775238186`, 0.9863304025088373}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6006106325864277`*^9, 3.600631791493237*^9, 
  3.601214172307225*^9, 3.601373330066465*^9, 3.601385635359026*^9, 
  3.601563388476163*^9, 3.601571808574512*^9, 3.60157267290895*^9, 
  3.601572789367627*^9, 3.602858166897682*^9, 3.60286018871034*^9, 
  3.607434037714691*^9, 3.637565075088029*^9, 3.637566148960614*^9, 
  3.637574082276575*^9, 3.637583618103953*^9, 3.637583710190401*^9, 
  3.6375856927336187`*^9, 3.637589011851235*^9, 3.6376602842619267`*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
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
/nnAlB9McVEFjjkuR7PhayoX+kE8PeaS5AjnIWbRrN6+ez1x6cAPl1sGlMos
HOiEnCvGEDNroNTu28OZNRPigzLH5QHnCg50+sWTG+YNmfmnZUCpXMGBfnTp
dMxsYgsCHKhxHvKA8wIHNT8rLXTasE9ERlCM5grczn2VsV/5r2FzJSx7dxzi
g/0Atz2D4MWd4cXMt435wkVhKj1lVJM0CF7cGV7MnLLv4ZSNhYuZ8UCZfByx
z2BJW+YkLJAmwTalDIDbus7wYtadoFLbH963rnBpx/tG2lSA9c3OlL2hnzru
IG1hGQQ3qp3hxaw7RSWzP7yvXeF6NxUSEV8CZ/cPbCmj4uoPJ/gzY0zbcI5u
CZw5zElwgpPwGcRTXQxX3hVs7QcIMToQvudiuN6xBkpyMhfDB4Y50PfgAo9t
5QL7gVd2JvYDL4aPAGtcVDlUYrjsml+c8FL6YVuu0tkCpYrQ+/B+LcJwkQ68
s8ZFFaH34f3CcYFzhAYHljkuGk91EcQljYKL65B25l0aR3QRxOOMgsvuEMbT
sQA+HF9AoqNRcJGG98YMLupwfGFwLY0n8qPgIs0aF3WUcFyk/QfMh14AHxgc
6KSbFzcvGIyfqPsGPvTLGePKgriW38BHmznQL+GjzcdwkY4EfgMfbda4qKON
4yLthf0GPtqscVFHG8dFOnrGfLS/hI82DpS0p4E5UJqYKZavtvo6bU+g4SQZ
a6BUVuNAv9+/0++d4Z+5woFyHNAfDM7FYmkNkCJo5b04H6IMxDKPtDkDmjDq
LEhok4YqJhlGC6mijuosiHP1HVyHf2xDLKPDsvZ6dfmt9ACXSmdXGbhjttZV
ImwQiGUxAcntnChdDJcZLOpmxYtf7zJo5JdyU5KpFqItyeDYMaNDsG7lWREe
EcfKOC0MGbwYLow4taRtst/BbUxbattNXeK3ctrpNc8yz0aHTc543MirohBr
zGIuhksmTqI4Okz82qhFCow49Gk/7o2fNu2d65Ly5Ht5Rv1yv8MNK/wOl/4o
P5j8tUvi8Kk/hc6HWzC0J6RkJ5qqNpfsxPPCw1qrL/8VH7rf7VpWMNEL+rzw
YrhQ/wnxdrG1jJX92KVRmTNl6boVyMrOFlvf6X7xP5K61HWz7filoZydbQbB
fNLT2kCNdkntjS0P5Z7OSr/26MYmOVvgzRpOtyH/uo1dGvNwvnemA0ZX3s+e
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
obEF2MHVzKtGYsDNnt/F/+Z0+j+e3Ug2\
\>"]]
}, Open  ]],

Cell["\<\

As it can be seen, the decision surface, the margin and the training and \
testing error rates are exactly the same as the ones of the max-margin \
classifier introduced in the previous Section. However, the dual formulation \
used by SVMs allows to highlight the different role played by different \
training points: only the closest to the classification hyperplane become \
Support Vectors.
\
\>", "Text",
 CellChangeTimes->{{3.600677821135819*^9, 3.6006778968400593`*^9}, {
   3.600678723853957*^9, 3.600678731036479*^9}, {3.601385686619454*^9, 
   3.601385761512088*^9}, {3.60138586873499*^9, 3.601385998105983*^9}, {
   3.601386112492817*^9, 3.6013861486885233`*^9}, 3.6015586516546097`*^9, {
   3.602858233015098*^9, 3.602858233795185*^9}, {3.637579458246336*^9, 
   3.637579471458826*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Soft-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.6005166146535053`*^9, 3.60051661822272*^9}}],

Cell[TextData[{
 "A soft-margin Support Vector Machine can be obtained by constructing the \
dual problem of the objective function in eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 "). In order to do this we first have to write down its generalized \
Lagrangian"
}], "Text",
 CellChangeTimes->{{3.600516636306747*^9, 3.600516690310767*^9}, {
  3.600516741895606*^9, 3.600516782018572*^9}, {3.600585868042153*^9, 
  3.600585902895199*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["L",
    FontWeight->"Plain"], 
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Xi]",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], ",", 
     StyleBox["r",
      FontWeight->"Bold"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}]}], 
  StyleBox["=",
   FontWeight->"Plain"], 
  RowBox[{
   RowBox[{
    FractionBox[
     StyleBox["1",
      FontWeight->"Plain"], "2"], 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", "+", 
   RowBox[{"C", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["\[Xi]", "i"], "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}]}], 
   "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["r", "i"], 
     RowBox[{
      SubscriptBox["\[Xi]", "i"], "."}]}]}]}]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.6005167837231417`*^9, 3.600516818754175*^9}, {
   3.600517018284396*^9, 3.600517037891486*^9}, {3.6005170907660093`*^9, 
   3.6005170979284353`*^9}, 3.6005173739926243`*^9},
 CellTags->"eq:soft_margin_svm_L"],

Cell["\<\
We can then apply again Theorem 3 to obtain the KKT optimality conditions:\
\>", "Text",
 CellChangeTimes->{{3.600517085607532*^9, 3.600517125031438*^9}, {
  3.600585907463999*^9, 3.600585918802475*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["r",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"], ",", 
      StyleBox["r",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Xi]",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   "0"}], ",", "       ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["r", "i"], 
    SubscriptBox["\[Xi]", "i"]}], "=", "0"}], ",", 
  "                                               ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["r", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, 
   3.600513870738564*^9, {3.600517164523419*^9, 3.600517175284357*^9}, {
   3.600517215065008*^9, 3.6005172181227922`*^9}, {3.6005172610847588`*^9, 
   3.600517261443778*^9}, {3.6005189404219*^9, 3.600518966809108*^9}}],

Cell["where the first three conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}, {3.600513867266624*^9, 3.600513867631464*^9}, {
  3.60051726785408*^9, 3.600517268955271*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["w",
    FontWeight->"Bold"], "=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"], 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"]}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], "=", "0"}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"C", "-", 
    SubscriptBox["\[Alpha]", "i"]}], "=", 
   SubscriptBox["r", "i"]}], ","}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
   3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
   3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
   3.600158661435207*^9, 3.60015866767249*^9}, 3.600513864747818*^9, 
   3.60051392712012*^9, {3.600517274218824*^9, 3.6005172785205*^9}, {
   3.600517321977695*^9, 3.600517329588914*^9}, {3.600517734285067*^9, 
   3.600517735477496*^9}},
 CellTags->"eq:soft_margin_svm_w"],

Cell[TextData[{
 "and we note also that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"C", "-", 
     SubscriptBox["\[Alpha]", "i"]}], "=", 
    SubscriptBox["r", "i"]}], TraditionalForm]]],
 ", together with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["r", "i"], "\[GreaterEqual]", "0"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], 
   TraditionalForm]]],
 " gives us ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", 
    SubscriptBox["\[Alpha]", "i"], "\[LessEqual]", "C"}], TraditionalForm]]],
 ".\nWe can thus plug eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_w"],
 ") into eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_L"],
 "), to obtain"
}], "Text",
 CellChangeTimes->{{3.6005139229439096`*^9, 3.6005139327340612`*^9}, {
   3.600513998355977*^9, 3.600514040753975*^9}, {3.600514214591071*^9, 
   3.6005142148630037`*^9}, 3.6005173662300177`*^9, {3.6005174084987383`*^9, 
   3.600517410639308*^9}, 3.600517493801063*^9, {3.6005176012168417`*^9, 
   3.600517656733819*^9}, {3.6005176983272676`*^9, 3.600517753274816*^9}, {
   3.600585950168448*^9, 3.600585971146927*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"L", 
   RowBox[{"(", 
    StyleBox["\[Alpha]",
     FontWeight->"Bold"], ")"}]}], "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{"C", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["\[Xi]", "i"]}]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"]}], "-", 
   RowBox[{"C", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Xi]", "i"]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["\[Xi]", "i"]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["H", 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}, {
   3.60051411622726*^9, 3.600514161953629*^9}, {3.6005175054397173`*^9, 
   3.6005175537125998`*^9}, {3.600517850817155*^9, 3.600517859816524*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}], ")"}]}]}], TraditionalForm]]],
 ". As before, both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared from the Lagrangian, but once we have solved for ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ", we can compute ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_w"],
 "), while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can again be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ".  Indeed if we expand this multiplication and multiply by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "i"], TraditionalForm]]],
 " we obtain:"
}], "Text",
 CellChangeTimes->{{3.600518014507132*^9, 3.6005180517949467`*^9}, {
  3.600518111150139*^9, 3.600518210961157*^9}, {3.600518714069418*^9, 
  3.6005187146317987`*^9}, {3.600585987954084*^9, 3.600586028364172*^9}, {
  3.6006787835117826`*^9, 3.600678784047868*^9}, {3.6430871086626863`*^9, 
  3.643087109074937*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["r", "i"]}], "-", 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       SubscriptBox["r", "i"], 
       SubscriptBox["\[Xi]", "i"]}], "\[UnderBrace]"], "0"]}], "-", 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["r", "i"], 
    SubscriptBox["y", "i"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", "0"}],
   TraditionalForm], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600518224733889*^9, 3.6005183447924633`*^9}, {
  3.6005183855059032`*^9, 3.60051842792067*^9}, {3.600518462098566*^9, 
  3.600518480247355*^9}, {3.601568572081274*^9, 3.60156857359829*^9}, {
  3.601568628267521*^9, 3.601568628975306*^9}}],

Cell[TextData[{
 "which has the same solution: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 " as before.\nThe Lagrangian dual program for the soft-margin SVM is thus \
given by"
}], "Text",
 CellChangeTimes->{{3.6005184846577682`*^9, 3.600518599691503*^9}, 
   3.60051872505451*^9, {3.600678799014057*^9, 3.600678827809661*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], "0"}], "\[LessEqual]", 
  StyleBox["\[Alpha]",
   FontWeight->"Bold"], "\[LessEqual]", "C"}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "\[Transpose]"}], 
    StyleBox["y",
     FontWeight->"Bold"]}], "=", 
   StyleBox["0",
    FontWeight->"Bold"]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.6005186525864143`*^9, 3.600518665420229*^9}, {
  3.602858405929647*^9, 3.602858418096335*^9}},
 CellTags->"eq:soft_margin_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ".\nThis dual optimization problem is identical to the one for hard-margin \
SVM, the only difference being the additional upper-bound constraint on ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], TraditionalForm]]],
 ". As we can see, reducing the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " has the effect of maxing-out the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 ", reducing the influence of the outliers (i.e. samples that due to noise \
lie in unexpected areas of the input space). Note also that with the choice \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "=", "\[Infinity]"}], TraditionalForm]]],
 " we would obtain the same results as for the hard-margin SVM.\n\nAnother \
important observation is that the primal KKT condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ", implies that the only non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]]],
 " can only be those for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], "=", "1"}], TraditionalForm]]],
 ", while the points with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], ">", "1"}], TraditionalForm]]],
 " will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], "=", "0"}], TraditionalForm]]],
 ".\nWhen ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " is decreased from ",
 Cell[BoxData[
  FormBox["\[Infinity]", TraditionalForm]]],
 " (as in the case of hard-margin SVM) to some other finite value, the \
minimization of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " becomes relatively unimportant compared to the minimization of the squared \
norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 ", resulting in many samples being forced to have a large ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 ". This means that by lowering the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", more and more samples will satisfy ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["y", "i"], "(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "+", 
     SubscriptBox["\[Xi]", "i"]}], "=", "1"}], TraditionalForm]]],
 " (a reduction of the norm of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " forces the optimization algorithm to compensate for the reduction of the \
functional margin, with an increase of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 "). In other words, lowering the value of ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 " will result in an increased number of Support Vectors.\n\nUsing ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"], 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}]}]}], TraditionalForm]]],
 ", the minimal geometric margin can be computed as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623789258648*^9}, 
   3.6016238422875032`*^9, {3.6016240697312403`*^9, 3.601624070807952*^9}, {
   3.601624238015191*^9, 3.6016242450535603`*^9}, {3.602774151954455*^9, 
   3.602774156776572*^9}, {3.607434181731427*^9, 3.6074342053556147`*^9}, {
   3.6074343648118343`*^9, 3.607434365431916*^9}, {3.6074344644258537`*^9, 
   3.6074344679195747`*^9}, {3.6074345179825163`*^9, 3.607434602141087*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["g", "S"], 
   RowBox[{"(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}]}], "=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"]}], "+", "b"}], 
    ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "i"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
    RowBox[{"-", 
     FractionBox["1", "2"]}]], 
   SubscriptBox["min", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], ",", 
       SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]], 
   SubscriptBox["y", "i"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}], "+", "b"}], ")"}], 
    "."}]}]}]}], "DisplayFormula",
 CellChangeTimes->{
  3.601623787274074*^9, {3.601624044969468*^9, 3.6016241505183573`*^9}, {
   3.601624253957592*^9, 3.601624306644099*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623791360347*^9}, 
   3.607434623491053*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074346285535393`*^9, 3.6074346334192963`*^9}}],

Cell[TextData[{
 "We hereby give a code snap implementing this algorithm, using the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver where, as before, ",
 StyleBox["KTr", "Code"],
 " is expected to be the matrix of inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Ktr", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], "\[CenterDot]", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}]}], TraditionalForm]]],
 " computed using the training samples\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600514442780917*^9, 3.600514443539692*^9}, {
   3.6005144957366457`*^9, 3.600514781309287*^9}, {3.600514811696773*^9, 
   3.600514820651367*^9}, {3.600514893468878*^9, 3.6005150304588203`*^9}, 
   3.6005152536508083`*^9, {3.6005154416650743`*^9, 3.600515536326893*^9}, {
   3.6005155695046387`*^9, 3.600515572350175*^9}, {3.600515641195244*^9, 
   3.600515733940283*^9}, 3.600515834701779*^9, {3.6005165000796328`*^9, 
   3.600516557482274*^9}, {3.6005192988758183`*^9, 3.600519509045693*^9}, {
   3.600586060414323*^9, 3.6005861607995777`*^9}, {3.600587682571579*^9, 
   3.600587698788475*^9}, {3.6005880167961407`*^9, 3.6005881058564863`*^9}, {
   3.600588489445705*^9, 3.6005885150059023`*^9}, {3.600678839023799*^9, 
   3.6006788623943863`*^9}, {3.600679395142046*^9, 3.600679420592441*^9}, 
   3.601386162032139*^9, {3.6013867937536173`*^9, 3.601386810234634*^9}, {
   3.601386876966858*^9, 3.601387032900826*^9}, {3.601387128456703*^9, 
   3.601387390940136*^9}, {3.6013875024963818`*^9, 3.6013875079919662`*^9}, {
   3.601387630568596*^9, 3.6013876332279377`*^9}, {3.601387669120734*^9, 
   3.601387706090234*^9}, {3.601387757428145*^9, 3.601387929840722*^9}, {
   3.6013879633147306`*^9, 3.6013879641631603`*^9}, {3.601389814662716*^9, 
   3.601389816334907*^9}, {3.601390811041134*^9, 3.601390820891824*^9}, {
   3.601390916956274*^9, 3.601390968566141*^9}, 3.6013911649958563`*^9, {
   3.6015585186932077`*^9, 3.601558527174878*^9}, {3.601558558725401*^9, 
   3.601558605531126*^9}, {3.601623777993039*^9, 3.601623791360347*^9}, 
   3.607434623491053*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"train1NormSoftMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nTr", ",", "d", ",", "H", ",", "f", ",", "a", ",", "alpha", ",", "b", 
       ",", "nrm", ",", "margin", ",", "sol", ",", "obj", ",", 
       "constraints"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{"f", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{"a", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"H", "=", 
       RowBox[{
        RowBox[{"yTr", ".", 
         RowBox[{"Transpose", "[", "yTr", "]"}]}], " ", "KTr"}]}], ";", "\n", 
      
      RowBox[{"constraints", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"alpha", ".", "yTr"}], "]"}], "==", "0"}], " ", "&&", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", ">=", "0"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}], " ", "&&", " ", 
        "\n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "<=", "regC"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"And", "@@", "alpha"}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"obj", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"alpha", ".", "H", ".", "alpha"}]}], " ", "-", " ", 
        RowBox[{"f", ".", "alpha"}]}]}], ";", "\n", 
      RowBox[{"sol", "=", 
       RowBox[{"FindMinimum", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"obj", ",", "constraints"}], "}"}], ",", "alpha", ",", " ", 
         
         RowBox[{"Compiled", "->", "True"}], ",", " ", "\n", 
         RowBox[{"AccuracyGoal", "->", "1"}], ",", " ", 
         RowBox[{"PrecisionGoal", "->", "1"}], ",", " ", 
         RowBox[{"MaxIterations", "->", "100"}], ",", " ", "\n", 
         RowBox[{"Method", " ", "->", " ", "\"\<QuadraticProgramming\>\""}], 
         ",", " ", 
         RowBox[{"Gradient", ":>", " ", 
          RowBox[{
           RowBox[{"H", ".", "a"}], " ", "-", " ", "f"}]}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"(", 
        RowBox[{"alpha", "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"alpha", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "<", 
               RowBox[{"10", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "8"}], ")"}]}]}], "&"}], "/@", "alpha"}], ",", 
            "True"}], "]"}]}], "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", 
         RowBox[{"Total", "[", "alpha", "]"}]}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha", " ", 
           RowBox[{"yTr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}], ".", "H", ".", 
         "alpha"}]}]}], ";", "\n", 
      RowBox[{"nrm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"sol", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", 
            RowBox[{"Total", "[", "alpha", "]"}]}], ")"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"alpha", "=", 
       RowBox[{"alpha", " ", 
        RowBox[{"yTr", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"margin", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Min", "[", 
          RowBox[{"(", 
           RowBox[{"yTr", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"KTr", ".", "alpha"}], "+", "b"}], ")"}]}], ")"}], 
          "]"}], ")"}], "/", "nrm"}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"alpha", ",", "b"}], "}"}], ",", "margin"}], "}"}]}]}], "\n",
     "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{
  3.600587725325886*^9, {3.6005882122929983`*^9, 3.6005882133539057`*^9}, {
   3.600588457252429*^9, 3.600588465845796*^9}, {3.600604239380355*^9, 
   3.600604258229485*^9}, {3.6013862221202097`*^9, 3.60138626867194*^9}, {
   3.601573374294911*^9, 3.601573374464306*^9}, {3.601624324634869*^9, 
   3.6016243470122128`*^9}}],

Cell[TextData[{
 "\nAn example of usage is also provided where, as before, the Support \
Vectors are marked with thiker markers (squares and circles), whille ",
 StyleBox["linearKernel", "Code"],
 " is the function used to compute the inner products between the samples.\n"
}], "Text",
 CellChangeTimes->{{3.600588112937687*^9, 3.60058811849831*^9}, {
  3.600679475821672*^9, 3.600679492899036*^9}, {3.6013861641550417`*^9, 
  3.6013861804462967`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$771 = MousePosition["Graphics"]; 
     Private`p$771 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$771], 2], 
          Union[
           Partition[Private`pt$771, 2]]}, 1]]; 
     If[Private`s$771 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$771}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$771}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$771 = {}; 
     Private`s$771 = Private`s$771 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600587966493536*^9, 3.600588622107139*^9, 
   3.600599060660305*^9, 3.600599756925404*^9, 3.600599943665254*^9, 
   3.600600031844635*^9, 3.6006027823018436`*^9, 3.600603523507772*^9, 
   3.600603945706077*^9, 3.6006129989424667`*^9, 3.600613812248528*^9, 
   3.6006326443401413`*^9, 3.60067111736756*^9, 3.60067164227064*^9, 
   3.6006718037671747`*^9, 3.600672265537353*^9, 3.600672526081514*^9, 
   3.601206370436466*^9, 3.601209437237091*^9, 3.60121146727116*^9, {
   3.601212264723936*^9, 3.6012122908273897`*^9}, 3.601212668288314*^9, 
   3.601213356569628*^9, 3.601214040524703*^9, 3.601214608420601*^9, 
   3.601218004687706*^9, 3.6012862730919037`*^9, 3.601295890068576*^9, 
   3.601296909848271*^9, 3.6012971705533447`*^9, 3.601297662161875*^9, 
   3.6012988951245203`*^9, 3.601298947244832*^9, 3.601304693600175*^9, 
   3.601372885198304*^9, 3.601375277312167*^9, 3.601559771933028*^9, {
   3.60156216665177*^9, 3.601562166764254*^9}, 3.60156311216003*^9, 
   3.601571645190751*^9, 3.601572489481422*^9, 3.601626156335967*^9, 
   3.6028568557890673`*^9, 3.602859724672284*^9, 3.6074305179771147`*^9, 
   3.6074324484532547`*^9, 3.6375647251875*^9, 3.6375655259220457`*^9, 
   3.6375656547789993`*^9, 3.6375660422446527`*^9, 3.637573361150527*^9, 
   3.637581899618166*^9, 3.637582140942945*^9, 3.6375822015744867`*^9, 
   3.637583464295784*^9, 3.637585525938525*^9, 3.637588558709491*^9, 
   3.6376591853404627`*^9, 3.637659328478517*^9, 3.637659648438018*^9, 
   3.637671396317474*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", "linearKernel"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005503261330643`*^9, 3.6005503339339247`*^9}, {3.600588222815317*^9, 
   3.600588256649695*^9}, {3.600588290721298*^9, 3.6005882920536127`*^9}, {
   3.600588658316814*^9, 3.600588734521865*^9}, {3.600588793185359*^9, 
   3.6005888716015673`*^9}, {3.600631456422151*^9, 3.600631462528254*^9}, 
   3.6006732675642233`*^9, {3.601217196322742*^9, 3.601217210173666*^9}, 
   3.6015634594631166`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.2}}, Typeset`size$$ = {
    288., {147., 147.590157177521}}, Typeset`update$$ = 0, Typeset`initDone$$,
     Typeset`skipInitDone$$ = True, $CellContext`c$98130$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$98130$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`linearKernel], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{339., {194., 203.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006318422191973`*^9, 3.600673261291685*^9, 3.600673343449181*^9, 
   3.601214254651011*^9, 3.60121741903084*^9, {3.60156217734977*^9, 
   3.6015622005096703`*^9}, 3.601562274480063*^9, 3.601562323282482*^9, 
   3.601563399612978*^9, 3.601563460363524*^9, {3.601563612036623*^9, 
   3.601563625488894*^9}, 3.6028584609814587`*^9, 3.6028585071417828`*^9, 
   3.602860201154567*^9, 3.6074346521568537`*^9, 3.63756616309482*^9, 
   3.6375836272185097`*^9, 3.637589048050949*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nAs we can see, the behavoir of the algorithm is pretty much the same as \
the soft-margin classifier introduced in the previous section. Moreover, \
according to what have seen before, as we reduce the regularization parameter \
",
 Cell[BoxData[
  FormBox["C", TraditionalForm]]],
 ", the number of Support Vectors increases.\n"
}], "Text",
 CellChangeTimes->{
  3.601386276317622*^9, {3.6013912082698927`*^9, 3.6013913663932123`*^9}, 
   3.601558644935019*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2-Norm Soft-margin SVM", "Subsubsection",
 CellChangeTimes->{{3.600433955353394*^9, 3.600433963410952*^9}, {
  3.600510883688518*^9, 3.600510886226582*^9}}],

Cell[TextData[{
 "Another formulation for the Soft-margin SVM can be obtained considering the \
following modification of eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:1norm_svm"],
 ") in Section ",
 
 CounterBox["Section", "sec:max_margin"]
}], "Text",
 CellChangeTimes->{{3.600154875125265*^9, 3.6001549181816397`*^9}, 
   3.600155031827753*^9, {3.6001553088687277`*^9, 3.600155366668939*^9}, {
   3.600155430120121*^9, 3.600155445536603*^9}, {3.6001554825240726`*^9, 
   3.600155496361331*^9}, {3.600155582648361*^9, 3.6001555947194567`*^9}, {
   3.600414871766923*^9, 3.600414873146832*^9}, {3.600429222572053*^9, 
   3.600429391214848*^9}, {3.6004296738987913`*^9, 3.600429711036256*^9}, {
   3.600429775116506*^9, 3.6004297773881207`*^9}, {3.600429838787216*^9, 
   3.600429851892276*^9}, {3.600518748509136*^9, 3.600518796228572*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["min", 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], ",", "b", ",", 
     StyleBox["\[Xi]",
      FontWeight->"Bold"]}]], " ", 
   FractionBox["1", "2"], 
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold"], "\[CenterDot]", 
    StyleBox["w",
     FontWeight->"Bold"]}]}], " ", "+", 
  RowBox[{
   FractionBox["C", "2"], " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SuperscriptBox[
     SubscriptBox["\[Xi]", "i"], "2"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"s", ".", "t", ".", " ", "1"}], "-", 
    SubscriptBox["\[Xi]", "i"], "-", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        StyleBox["w",
         FontWeight->"Bold"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], "\[LessEqual]", 
   "0"}], ",", "   ", 
  RowBox[{"\[ForAll]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], 
       RowBox[{"i", ","}]], 
      SubscriptBox["y", "i"]}], ")"}], "\[Element]", "S"}]}], 
  ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.60000667883209*^9, 3.6000067752439413`*^9}, {
   3.6000070814275303`*^9, 3.600007111840486*^9}, {3.600007427356236*^9, 
   3.600007427719923*^9}, {3.600069619878358*^9, 3.6000696976499662`*^9}, {
   3.6000698340070744`*^9, 3.600069843688924*^9}, {3.6000703147873783`*^9, 
   3.600070318851357*^9}, 3.600070748774111*^9, {3.600155604909068*^9, 
   3.6001556221657333`*^9}, {3.600157793512041*^9, 3.6001577978772*^9}}],

Cell[TextData[{
 "where, for simplicity we have divided the objective function by two, and \
squared the slack variables, thus removing the necessity for the positivity \
constraints on the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 ". Due to the squaring of the slack variables, this is called the ",
 StyleBox["2-Norm",
  FontSlant->"Italic"],
 " SVM. \nThe generalized Lagrangian of this optimization problem is given \
by"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.6001562618603697`*^9}, {3.600157440600864*^9, 3.6001574459197187`*^9}, {
   3.6001578050061626`*^9, 3.60015784252039*^9}, {3.600414886880303*^9, 
   3.6004149465339603`*^9}, {3.600415011024856*^9, 3.6004150335388803`*^9}, {
   3.600429698647847*^9, 3.6004296999379463`*^9}, {3.600430410845685*^9, 
   3.600430426304928*^9}, {3.600433937591069*^9, 3.6004339786213217`*^9}, {
   3.60043403077953*^9, 3.600434038823875*^9}, {3.600519030390934*^9, 
   3.600519034895832*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["L",
    FontWeight->"Plain"], 
   RowBox[{
    StyleBox["(",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["w",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["b",
      FontWeight->"Plain"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Xi]",
      FontWeight->"Bold"], 
     StyleBox[",",
      FontWeight->"Plain"], 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"]}], 
    StyleBox[")",
     FontWeight->"Plain"]}]}], 
  StyleBox["=",
   FontWeight->"Plain"], 
  RowBox[{
   RowBox[{
    FractionBox[
     StyleBox["1",
      FontWeight->"Plain"], "2"], 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["w",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], " ", "+", 
   RowBox[{
    FractionBox["C", "2"], " ", 
    SuperscriptBox[
     RowBox[{"\[LeftDoubleBracketingBar]", 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "2"]}], "+", " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["\[Xi]", "i"], "-", 
       RowBox[{
        SubscriptBox["y", "i"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           StyleBox["w",
            FontWeight->"Bold"], "\[CenterDot]", 
           SubscriptBox[
            StyleBox["x",
             FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], 
      ")"}]}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.600156300029234*^9, 3.600156368405653*^9}, {
  3.600156621150298*^9, 3.600156661862521*^9}, {3.600157874303254*^9, 
  3.600157878691687*^9}, {3.600157924287451*^9, 3.600158010418242*^9}}],

Cell["and the KKT optimality conditions are given by", "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.600158028451982*^9, 3.600158032400323*^9}, {
   3.6001719912549667`*^9, 3.60017199222255*^9}, {3.600414981688201*^9, 
   3.6004149850697002`*^9}, {3.60042990556689*^9, 3.6004299270897017`*^9}}],

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["w",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", "b"}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"\[PartialD]", 
     StyleBox["L",
      FontWeight->"Plain"]}], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["b",
       FontWeight->"Plain"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Xi]",
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox["\[Alpha]",
       FontWeight->"Bold"]}], 
     StyleBox[")",
      FontWeight->"Plain"]}]}], 
   RowBox[{"\[PartialD]", 
    StyleBox["\[Xi]",
     FontWeight->"Bold"]}]], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          StyleBox["w",
           FontWeight->"Bold"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}]}], ")"}]}], "=", 
   
   RowBox[{
    RowBox[{"0", "          ", "i"}], "=", "1"}]}], ",", "\[Ellipsis]", ",", 
  "n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
  "                                                    ", 
  RowBox[{"i", "=", "1"}], ",", "\[Ellipsis]", ",", "n"}]}], "DisplayFormula",\

 CellChangeTimes->{{3.600156554617927*^9, 3.6001565591323*^9}, {
   3.600156717264855*^9, 3.600156812411139*^9}, 3.600156864861678*^9, {
   3.600156910962696*^9, 3.6001569205414753`*^9}, {3.600157072728825*^9, 
   3.6001571011797667`*^9}, {3.600158546688363*^9, 3.600158553918486*^9}, {
   3.600518978995328*^9, 3.600518991933605*^9}}],

Cell["where the first three conditions expand to", "Text",
 CellChangeTimes->{{3.600157083887292*^9, 3.6001571066608353`*^9}, {
  3.600158558436887*^9, 3.6001585591646*^9}, {3.600172004709982*^9, 
  3.600172009771409*^9}}],

Cell[BoxData[{
 RowBox[{
  StyleBox["w",
   FontWeight->"Bold"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    SubscriptBox["y", "i"]}]}], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox["\[Xi]",
   FontWeight->"Bold"], "=", 
  FractionBox[
   StyleBox["\[Alpha]",
    FontWeight->"Bold"], "C"]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.600157117284062*^9, 3.600157123893322*^9}, {
  3.600157245162938*^9, 3.60015732138794*^9}, {3.600157886285673*^9, 
  3.60015788974968*^9}, {3.60015856782475*^9, 3.600158618089786*^9}, {
  3.600158661435207*^9, 3.60015866767249*^9}},
 CellTags->"eq:svm_w"],

Cell[TextData[{
 "As before, since the optimization problem is convex and the constraints are \
affine functions, the KKT optimality conditions are also sufficient.\nThe \
Lagrangian dual problem is obtained by substituting the values of ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Xi]",
    FontWeight->"Bold"], TraditionalForm]]],
 " back into ",
 Cell[BoxData[
  FormBox["L", TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, 3.6001735723352222`*^9, {3.600430737886001*^9, 
   3.6004307396736*^9}, {3.6004308706986723`*^9, 3.600430873384021*^9}, {
   3.6005190465958643`*^9, 3.600519057388266*^9}, {3.600678954252145*^9, 
   3.600678958763721*^9}, 3.6074347480171423`*^9}],

Cell[BoxData[{
 RowBox[{"L", "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}]}]}]}]}], "+", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"2", "C"}]], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["\[Delta]", 
        RowBox[{"i", ",", "j"}]]}]}]}]}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "C"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["\[Delta]", 
        RowBox[{"i", ",", "j"}]]}]}]}]}], " ", "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"]}]}]}]}], " ", "-", 
   RowBox[{"b", 
    UnderscriptBox[
     UnderscriptBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], 
     "0"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "i"], 
       SubscriptBox["y", "j"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}], "+", 
         RowBox[{
          FractionBox["1", "C"], 
          SubscriptBox["\[Delta]", 
           RowBox[{"i", ",", "j"}]]}]}], 
        ")"}]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", " ", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["H", 
         RowBox[{"i", ",", "j"}]]}]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{
  3.6001735831201057`*^9, {3.6001754518709583`*^9, 3.600175487788825*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}], "+", 
       RowBox[{
        FractionBox["1", "C"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}], TraditionalForm]]],
 ". As before, both ",
 Cell[BoxData[
  FormBox[
   StyleBox["w",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " have disappeared from the Lagrangian, but ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["w",
     FontWeight->"Bold"], "*"], TraditionalForm]]],
 " can then be obtained using eq. (",
 
 CounterBox["DisplayFormulaNumbered", "eq:svm_w"],
 "),  while ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " can again be obtained by enforcing the KKT complementarity condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 ".  Indeed, we note that by substituting ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Xi]", "i"], TraditionalForm]]],
 " with",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     FractionBox["1", "c"], 
     SubscriptBox["\[Alpha]", "i"]}]}], TraditionalForm]]],
 ", multiplying the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "(", 
     RowBox[{"1", "-", 
      SubscriptBox["\[Xi]", "i"], "-", 
      RowBox[{
       SubscriptBox["y", "i"], "(", 
       RowBox[{
        RowBox[{
         StyleBox["w",
          FontWeight->"Bold"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}]}], ")"}], "=", 
    "0"}], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " and summing over all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 ", we can enforce the constraint by commputing"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.600174352033383*^9, 
   3.600174383955019*^9}, {3.600174491817814*^9, 3.600174537941121*^9}, {
   3.600175445275632*^9, 3.600175448682406*^9}, {3.600175506253343*^9, 
   3.600175508667962*^9}, {3.600175871676817*^9, 3.600175927236977*^9}, {
   3.600430909988146*^9, 3.6004309310256977`*^9}, {3.600519074233149*^9, 
   3.600519087924474*^9}, {3.600519135912731*^9, 3.600519219813518*^9}, 
   3.6028587952562847`*^9, {3.6074347855666656`*^9, 3.607434786508792*^9}, 
   3.643087119628641*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{
    SubscriptBox["\[Alpha]", "i"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["y", "i"], "-", 
      RowBox[{
       FractionBox["1", "c"], 
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}], "-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"]}]}]}], "-", "b"}], ")"}]}]}], "=", 
  "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["\[Alpha]", "i"]}]}], "=", 
  RowBox[{
   UnderscriptBox[
    UnderscriptBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"]}]}], "\[UnderBrace]"], "0"], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "i"], 
      RowBox[{"(", 
       RowBox[{
        FractionBox["1", "c"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}], ")"}]}]}]}], "-", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      SubscriptBox["y", "j"], 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "j"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}]}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["\[Alpha]", "i"]}]], 
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"j", "=", "1"}], "n"], 
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], 
          SubscriptBox["\[Alpha]", "j"], 
          SubscriptBox["y", "j"], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SubscriptBox[
              StyleBox["x",
               FontWeight->"Bold"], "j"], "\[CenterDot]", 
             SubscriptBox[
              StyleBox["x",
               FontWeight->"Bold"], "i"]}], "+", 
            RowBox[{
             FractionBox["1", "c"], 
             SubscriptBox["\[Delta]", 
              RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}]}]}], ")"}]}], " ", "=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"=", 
     RowBox[{
      RowBox[{
       FractionBox["1", 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]], 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "n"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "n"], 
           RowBox[{
            SubscriptBox["\[Alpha]", "i"], 
            SubscriptBox["y", "i"], 
            SubscriptBox["\[Alpha]", "j"], 
            SubscriptBox[
             StyleBox["H",
              FontWeight->"Bold"], 
             RowBox[{"i", ",", "j"}]]}]}]}]}], ")"}]}], "=", 
      RowBox[{"-", 
       FractionBox[
        StyleBox[
         RowBox[{
          RowBox[{
           OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["1",
           FontWeight->"Bold"], "\[Transpose]"}], 
         StyleBox["\[Alpha]",
          FontWeight->"Bold"]}]]}]}]}]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.600174127286213*^9, 3.600174151893757*^9}, {
  3.600174192850265*^9, 3.600174297068885*^9}, {3.6001743312244453`*^9, 
  3.6001743320502377`*^9}, {3.600174395426324*^9, 3.60017448222078*^9}, {
  3.600174609257825*^9, 3.600174620294325*^9}, {3.600174700488557*^9, 
  3.60017476750701*^9}, {3.6001748058235807`*^9, 3.600174817131991*^9}, {
  3.600174862424131*^9, 3.600175009763543*^9}, {3.600175081076378*^9, 
  3.6001750843648157`*^9}, {3.6001751300761957`*^9, 3.600175142796803*^9}, {
  3.600175178151023*^9, 3.600175202209634*^9}, {3.60017552263131*^9, 
  3.6001755621461077`*^9}, {3.600175619176784*^9, 3.6001757437281857`*^9}, {
  3.600435176945134*^9, 3.600435180026492*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Alpha]", "~"], "i"], "=", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], 
     SubscriptBox["y", "i"]}]}], TraditionalForm]]],
 ".\nThe Lagrangian dual problem can thus be defined as"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600174027303218*^9, 3.6001741208317432`*^9}, {3.60017522567037*^9, 
   3.600175228536392*^9}, {3.600175718035424*^9, 3.6001757187181892`*^9}, {
   3.600175750944895*^9, 3.600175831350972*^9}, {3.6005143339971437`*^9, 
   3.600514339262733*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["max", 
    RowBox[{"{", 
     StyleBox["\[Alpha]",
      FontWeight->"Bold"], "}"}]], 
   StyleBox[
    RowBox[{"1", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "-", 
  RowBox[{
   FractionBox["1", "2"], 
   StyleBox[
    RowBox[{"\[Alpha]", "\[Transpose]"}],
    FontWeight->"Bold"], 
   StyleBox["H\[Alpha]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox["s",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox["t",
    FontWeight->"Plain"], 
   StyleBox[".",
    FontWeight->"Plain"], 
   StyleBox[" ",
    FontWeight->"Plain"], 
   StyleBox["\[Alpha]",
    FontWeight->"Bold"]}], "\[GreaterEqual]", 
  StyleBox["0",
   FontWeight->"Bold"]}], "\[IndentingNewLine]", 
 RowBox[{"\t", 
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{"\[Alpha]", "\[Transpose]"}], "y"}],
    FontWeight->"Bold"], 
   StyleBox["=",
    FontWeight->"Plain"], 
   StyleBox["0",
    FontWeight->"Bold"]}]}]}], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.60017364117669*^9, 3.6001736928282843`*^9}, {
  3.6001737746175947`*^9, 3.60017385821412*^9}, {3.600175162048126*^9, 
  3.600175164631028*^9}, {3.602858809278606*^9, 3.602858817579302*^9}},
 CellTags->"eq:2norm_svm_Dual"],

Cell[TextData[{
 "with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "=", 
    RowBox[{"-", 
     FractionBox[
      StyleBox[
       RowBox[{
        RowBox[{
         OverscriptBox["\[Alpha]", "~"], "\[Transpose]"}], "H\[Alpha]"}],
       FontWeight->"Bold"], 
      RowBox[{
       RowBox[{
        StyleBox["1",
         FontWeight->"Bold"], "\[Transpose]"}], 
       StyleBox["\[Alpha]",
        FontWeight->"Bold"]}]]}]}], TraditionalForm]]],
 ". This optimization problem is once again very similar to the one for \
hard-margin SVM, the only difference being in the matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["y", "i"], 
     RowBox[{
      SubscriptBox["y", "j"], "(", 
      RowBox[{
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"]}], "+", 
       RowBox[{
        FractionBox["1", "C"], 
        SubscriptBox["\[Delta]", 
         RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}], TraditionalForm]]],
 ", which is in this case augmented with an identity matrix multiplied by ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "C"], TraditionalForm]]],
 ".  This has the effect of adding  ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "C"], TraditionalForm]]],
 " to the eigenvalues of the matrix, rendering the problem better \
conditioned. Note that, similarly to the 1-norm soft margin SVM, setting ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[RightArrow]", "\[Infinity]"}], TraditionalForm]]],
 " would produce the same results as the hard margin SVM.\n\nAs stated before \
the minimal geometric margin ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["g", "S"], "(", 
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], ")"}], TraditionalForm]]],
 " of the soft-margin classifiers cannot be computed simply as ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     StyleBox["w",
      FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
   TraditionalForm]]],
 ", since there is no guarantee anymore that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "\[GreaterEqual]", 
    " ", "1"}], TraditionalForm]]],
 ". Nonetheless, as before, for all the points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "<", "1"}], 
   TraditionalForm]]],
 " we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ", while for the others we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", "0"}], TraditionalForm]]],
 ". Moreover, for the 2-norm soft margin SVM, by construction we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Xi]", "i"], "=", 
    FractionBox[
     SubscriptBox["\[Alpha]", "i"], "C"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     RowBox[{
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["y", "i"]}]}], "=", "0"}], TraditionalForm]]],
 ", so that the minimal geometric margin can be computed exactly using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["g", "S"], "(", 
     SubscriptBox["f", 
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], ",", "b"}]], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"\[LeftDoubleBracketingBar]", 
       StyleBox["w",
        FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}]], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{
         SubscriptBox["max", "i"], 
         SubscriptBox["\[Alpha]", "i"]}], "C"]}], ")"}]}]}], 
   TraditionalForm]]],
 ", where"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625342579255*^9, 
   3.601625346803771*^9}, 3.6016254649026546`*^9, {3.601625513196022*^9, 
   3.6016255147196074`*^9}, {3.601625738411982*^9, 3.601625740020549*^9}, {
   3.6016257793836813`*^9, 3.601625834335587*^9}, {3.6074348083739433`*^9, 
   3.6074348457036133`*^9}, 3.6375806050677643`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[LeftDoubleBracketingBar]", 
   StyleBox["w",
    FontWeight->"Bold"], "\[RightDoubleBracketingBar]"}], "=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "i"], 
        SubscriptBox["y", "j"], 
        RowBox[{
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "i"], "\[CenterDot]", 
         SubscriptBox[
          StyleBox["x",
           FontWeight->"Bold"], "j"]}]}]}]}], ")"}], 
    FractionBox["1", "2"]], "=", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "i"], 
       SubscriptBox["y", "i"], 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"j", "=", "1"}], "n"], 
        RowBox[{
         SubscriptBox["\[Alpha]", "j"], 
         SubscriptBox["y", "j"], 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"], "\[CenterDot]", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"]}]}]}]}]}], ")"}], 
    FractionBox["1", "2"]]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"=", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "i"], 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          SubscriptBox["\[Xi]", "i"], "-", 
          RowBox[{
           SubscriptBox["y", "i"], "b"}]}], ")"}]}]}], ")"}], 
     FractionBox["1", "2"]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["\[Alpha]", "i"]}], "-", 
       RowBox[{
        FractionBox["1", "c"], 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"i", "=", "1"}], "n"], 
         SuperscriptBox[
          SubscriptBox["\[Alpha]", "i"], "2"]}]}]}], ")"}], 
     FractionBox["1", "2"]]}]}], ","}]}], "DisplayFormula",
 CellChangeTimes->{{3.601625083220161*^9, 3.6016250859167137`*^9}, {
   3.6016251764652*^9, 3.601625232068491*^9}, {3.601625540218547*^9, 
   3.601625569539563*^9}, 3.601625620222836*^9, {3.601625856881468*^9, 
   3.6016258594445*^9}}],

Cell[TextData[{
 "where again we have used the fact that for all the support vectors, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], "\[NotEqual]", "0"}], "\[Rule]", 
    RowBox[{
     SubscriptBox["\[Xi]", "i"], "\[NotEqual]", "0"}]}], TraditionalForm]]],
 "\[Rule]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], "(", 
     RowBox[{
      RowBox[{
       StyleBox["w",
        FontWeight->"Bold"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["x",
         FontWeight->"Bold"], "i"]}], "+", "b"}], ")"}], "=", 
    RowBox[{"1", "-", 
     SubscriptBox["\[Xi]", "i"]}]}], TraditionalForm]]],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625579044509*^9, 
   3.601625582859509*^9}, {3.6016258611374617`*^9, 3.601625976382901*^9}, 
   3.607434872065981*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6074348777288303`*^9, 3.6074348844254503`*^9}}],

Cell[TextData[{
 "Since the only difference w.r.t. the hard margin is in the addition of the \
diagonal component to the ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 " data matrix, we can reuse the code for the hard-margin SVM, with very \
little modifications, as shown by the following code snippet.\n"
}], "Text",
 CellChangeTimes->{{3.600155706880521*^9, 3.6001557139930696`*^9}, {
   3.600155813220395*^9, 3.600155816327116*^9}, {3.600155911005105*^9, 
   3.600155967262423*^9}, 3.600156085606361*^9, {3.600156260443994*^9, 
   3.60015629315687*^9}, {3.600156397433941*^9, 3.600156448083359*^9}, {
   3.6001564802410316`*^9, 3.600156483800024*^9}, {3.600156514005662*^9, 
   3.600156547087199*^9}, {3.6001580388088017`*^9, 3.600158069973619*^9}, {
   3.600172455547336*^9, 3.6001724707900953`*^9}, {3.600172505517021*^9, 
   3.600172506421205*^9}, 3.60017255434809*^9, {3.600172616949564*^9, 
   3.600172682450678*^9}, {3.6001735723352222`*^9, 3.600173627614605*^9}, {
   3.600173865511108*^9, 3.600173995758204*^9}, {3.6001753839450407`*^9, 
   3.600175433602771*^9}, {3.600175843890148*^9, 3.600175847904702*^9}, {
   3.600175953293795*^9, 3.600175961512011*^9}, {3.6001760093571663`*^9, 
   3.600176011940277*^9}, {3.600430466291836*^9, 3.600430472051145*^9}, {
   3.6004305521228857`*^9, 3.600430613473302*^9}, {3.600430802186534*^9, 
   3.600430823284212*^9}, {3.60043094327249*^9, 3.600430981806576*^9}, {
   3.600431082891284*^9, 3.60043116816341*^9}, {3.6004312157283907`*^9, 
   3.600431229444235*^9}, {3.600432559957159*^9, 3.600432562048987*^9}, {
   3.600432643678907*^9, 3.600432818959519*^9}, {3.600432874255698*^9, 
   3.6004328883758574`*^9}, {3.600432939260188*^9, 3.600432943998496*^9}, {
   3.6004330211493187`*^9, 3.600433053543309*^9}, {3.6004330860088882`*^9, 
   3.6004331246140823`*^9}, {3.600433159222672*^9, 3.600433216633389*^9}, {
   3.600433366598034*^9, 3.600433372224897*^9}, 3.600433418933416*^9, {
   3.6004344868365498`*^9, 3.600434488158559*^9}, 3.600435272615387*^9, 
   3.600438204224846*^9, {3.600519255984356*^9, 3.6005192706234426`*^9}, 
   3.600519336358122*^9, {3.600519522016282*^9, 3.600519563791518*^9}, {
   3.6005196079897547`*^9, 3.600519667647807*^9}, {3.600519698032007*^9, 
   3.600519739778841*^9}, {3.6005883622906*^9, 3.600588449297827*^9}, {
   3.6005889371326113`*^9, 3.600588965750765*^9}, {3.6005894612988358`*^9, 
   3.600589512926139*^9}, 3.600679002024119*^9, {3.600679541782709*^9, 
   3.600679542123994*^9}, {3.601217574370901*^9, 3.601217579243367*^9}, 
   3.601558780719802*^9, {3.60155881580094*^9, 3.601558835980789*^9}, {
   3.6016243808297043`*^9, 3.6016243821243896`*^9}, {3.601624474364224*^9, 
   3.601624502257472*^9}, {3.601624536150387*^9, 3.601624624211894*^9}, {
   3.601624658127282*^9, 3.6016246994802303`*^9}, {3.6016248856206512`*^9, 
   3.6016249224859123`*^9}, {3.601624977831212*^9, 3.6016249798796988`*^9}, {
   3.6016250182959948`*^9, 3.601625075849979*^9}, {3.601625579044509*^9, 
   3.601625582859509*^9}, {3.6016258611374617`*^9, 3.601625976382901*^9}, 
   3.607434872065981*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"train2NormSoftMarginSVM", "[", 
    RowBox[{"KTr_", ",", "yTr_", ",", "regC_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"model", ",", "nrm", ",", "margin", ",", "nTr"}], "}"}], ",", 
     "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "nTr"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "KTr", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"model", ",", "margin"}], "}"}], "=", 
       RowBox[{"trainHardMarginSVM", "[", 
        RowBox[{
         RowBox[{"KTr", " ", "+", " ", 
          RowBox[{
           RowBox[{"1", "/", "regC"}], " ", 
           RowBox[{"IdentityMatrix", "[", "nTr", "]"}]}]}], ",", "yTr"}], 
        "]"}]}], ";", "\n", 
      RowBox[{"nrm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"margin", "^", 
           RowBox[{"(", 
            RowBox[{"-", "2"}], ")"}]}], " ", "-", " ", 
          RowBox[{
           RowBox[{"1", "/", "regC"}], " ", 
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"model", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "^", "2"}]}]}], ")"}], 
        "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}]}]}], ";", "\n", 
      RowBox[{"margin", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"yTr", " ", 
             RowBox[{"model", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "/", "regC"}]}], ")"}],
         "/", "nrm"}]}], ";", "\n", 
      RowBox[{"{", 
       RowBox[{"model", ",", "margin"}], "}"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.601217585543953*^9, 3.6012175967916117`*^9}, {
   3.6015733486260433`*^9, 3.601573349901339*^9}, 3.60157396561836*^9, {
   3.601574336286237*^9, 3.60157433996602*^9}, {3.601625599750942*^9, 
   3.601625601329462*^9}}],

Cell["\<\

As usual, we report here an example of usage of the considered classifier.
\
\>", "Text",
 CellChangeTimes->{{3.601558789996739*^9, 3.601558793790901*^9}, {
  3.601558840426955*^9, 3.601558870594482*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601217265460456*^9, 3.601217274884696*^9}, {
  3.601217649958868*^9, 3.601217650244253*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$797 = MousePosition["Graphics"]; 
     Private`p$797 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$797], 2], 
          Union[
           Partition[Private`pt$797, 2]]}, 1]]; 
     If[Private`s$797 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$797}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$797}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$797 = {}; 
     Private`s$797 = Private`s$797 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{
  3.6005481748004313`*^9, {3.600548527014482*^9, 3.600548535300232*^9}, 
   3.60054881372934*^9, {3.600548863497181*^9, 3.6005488860857277`*^9}, 
   3.6005493036961613`*^9, {3.6005493502402*^9, 3.6005493713830833`*^9}, 
   3.600549479168809*^9, {3.6005495192934027`*^9, 3.6005495251830683`*^9}, 
   3.600550178410387*^9, 3.600589617150096*^9, 3.6006001989100113`*^9, 
   3.600600228965989*^9, 3.600600266088953*^9, 3.600600681760092*^9, 
   3.6006007941213007`*^9, {3.600600841457061*^9, 3.600600885139126*^9}, 
   3.6006013500386972`*^9, {3.600601383558695*^9, 3.6006013947936373`*^9}, 
   3.600601889657846*^9, 3.600602173557412*^9, 3.600602279086609*^9, {
   3.600602365064981*^9, 3.600602370242464*^9}, 3.60060278234803*^9, 
   3.600603523559029*^9, 3.600603945739794*^9, 3.6006091865576677`*^9, 
   3.600612999167354*^9, 3.6006138123158197`*^9, 3.600632644445119*^9, 
   3.600671117471401*^9, 3.600671642319047*^9, 3.6006718038665333`*^9, 
   3.6006722657928867`*^9, 3.600672526213133*^9, 3.601206370484069*^9, 
   3.601209437288204*^9, 3.601211467313223*^9, {3.601212264776905*^9, 
   3.601212290857061*^9}, 3.601212668321002*^9, 3.6012133566076183`*^9, 
   3.601214040568482*^9, 3.601214608470071*^9, 3.601217275255761*^9, {
   3.601217646676229*^9, 3.6012176510202503`*^9}, 3.6012180047532578`*^9, 
   3.60128627313862*^9, 3.601295890104985*^9, 3.601296909871706*^9, 
   3.6012971705877943`*^9, 3.601297662203429*^9, 3.60129889539428*^9, 
   3.601298947274419*^9, 3.6013046936347027`*^9, 3.601372885389017*^9, 
   3.6013752773626127`*^9, 3.6015597720353622`*^9, 3.601562166699974*^9, 
   3.601563112196547*^9, 3.601571645231084*^9, 3.6015724895165863`*^9, 
   3.601626156373807*^9, 3.6028568558258657`*^9, 3.602859724714912*^9, 
   3.607430518023924*^9, 3.6074324484962263`*^9, 3.6375647252164087`*^9, 
   3.6375655259622993`*^9, 3.637565654809787*^9, 3.637566042287871*^9, 
   3.637573361187119*^9, 3.637581899663452*^9, 3.637582140975326*^9, 
   3.63758220160777*^9, 3.6375834643307753`*^9, 3.637585526228755*^9, 
   3.637588558780424*^9, 3.637659185387072*^9, 3.637659328523855*^9, 
   3.6376596484876204`*^9, 3.637671396374318*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train2NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", "linearKernel"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.599821953811164*^9, 3.599822022857929*^9}, {
   3.599822054108838*^9, 3.599822091974762*^9}, {3.599822154460535*^9, 
   3.599822165892836*^9}, 3.599822209600809*^9, {3.599822321999631*^9, 
   3.5998223222894907`*^9}, {3.599822387708255*^9, 3.5998224007827997`*^9}, 
   3.599822675002933*^9, {3.599823609555605*^9, 3.599823609972664*^9}, {
   3.599829239247197*^9, 3.5998292425168533`*^9}, {3.599836730461629*^9, 
   3.599836732048378*^9}, {3.600026331599099*^9, 3.600026336718506*^9}, {
   3.600026874943771*^9, 3.600026887766361*^9}, 3.600523346368287*^9, {
   3.600523555818899*^9, 3.600523556013773*^9}, {3.600523867549584*^9, 
   3.600523878804373*^9}, {3.600523956766314*^9, 3.600524210460649*^9}, {
   3.60052427314493*^9, 3.6005243781939497`*^9}, {3.6005249635521603`*^9, 
   3.6005249636857758`*^9}, {3.600525198454364*^9, 3.600525198857278*^9}, {
   3.6005252724554987`*^9, 3.6005253131165867`*^9}, 3.600525471115404*^9, {
   3.600525661789124*^9, 3.600525799721908*^9}, {3.600526260902607*^9, 
   3.600526272709944*^9}, 3.600526922431601*^9, {3.600527181195888*^9, 
   3.600527238513834*^9}, {3.600527463765905*^9, 3.600527464552903*^9}, {
   3.600527621606209*^9, 3.600527691419077*^9}, {3.600527906920307*^9, 
   3.60052791102417*^9}, {3.6005280084182243`*^9, 3.600528029522358*^9}, {
   3.600528063913871*^9, 3.600528088848625*^9}, {3.600528151773035*^9, 
   3.600528193383729*^9}, {3.60052852737497*^9, 3.6005285402601233`*^9}, {
   3.600528979828767*^9, 3.6005290434859343`*^9}, {3.6005291030111094`*^9, 
   3.60052913561012*^9}, {3.6005291754442387`*^9, 3.600529206326358*^9}, {
   3.600529274193377*^9, 3.6005293059425287`*^9}, {3.600529819130739*^9, 
   3.600529832008511*^9}, 3.600529937761839*^9, {3.600529968422307*^9, 
   3.600529974082938*^9}, {3.600530044290557*^9, 3.6005300555801373`*^9}, {
   3.600530419906395*^9, 3.600530465923465*^9}, {3.6005305031041594`*^9, 
   3.6005305732630243`*^9}, {3.60054419679565*^9, 3.600544213073532*^9}, 
   3.600544981696217*^9, {3.6005450379414673`*^9, 3.60054508839544*^9}, {
   3.600545360991832*^9, 3.600545434011033*^9}, {3.600545472664554*^9, 
   3.600545559374083*^9}, {3.600545609202199*^9, 3.600545627332015*^9}, {
   3.600546178439096*^9, 3.6005461830908833`*^9}, {3.600546303917809*^9, 
   3.600546306938239*^9}, {3.600546466692848*^9, 3.600546480429881*^9}, {
   3.600546575005353*^9, 3.600546829060685*^9}, {3.600546921254654*^9, 
   3.600546922412047*^9}, {3.600547983007058*^9, 3.600547984587983*^9}, 
   3.600548231401762*^9, {3.600548779230706*^9, 3.600548782614275*^9}, {
   3.600548824203184*^9, 3.600548851107295*^9}, {3.600548917877345*^9, 
   3.600548952429632*^9}, {3.6005489875330772`*^9, 3.600549078996273*^9}, {
   3.600549319947598*^9, 3.600549338716949*^9}, {3.600549397645832*^9, 
   3.6005494246282473`*^9}, {3.600549555078596*^9, 3.600549632309577*^9}, {
   3.600549854018811*^9, 3.6005498691945553`*^9}, {3.600549923290716*^9, 
   3.600549974175603*^9}, {3.600550191104844*^9, 3.600550274904955*^9}, {
   3.6005503498927317`*^9, 3.6005503500576143`*^9}, {3.600588307237846*^9, 
   3.600588313868602*^9}, {3.6005889274131536`*^9, 3.600588931635717*^9}, {
   3.6005891095272827`*^9, 3.600589127253347*^9}, {3.600589674705143*^9, 
   3.600589752385747*^9}, {3.600589859798711*^9, 3.600589861823804*^9}, {
   3.600589919957633*^9, 3.600589961803607*^9}, {3.600600581791831*^9, 
   3.6006005872282553`*^9}, 3.6006006982191267`*^9, {3.600600957488339*^9, 
   3.6006009936816893`*^9}, {3.600601442677775*^9, 3.600601458020113*^9}, {
   3.600601917129445*^9, 3.600601917290449*^9}, {3.600602290255299*^9, 
   3.6006023161080647`*^9}, {3.600609493626485*^9, 3.600609592687899*^9}, {
   3.600609630505509*^9, 3.600609633516151*^9}, 3.60060971841512*^9, {
   3.600631593542777*^9, 3.600631605389091*^9}, {3.60121723787749*^9, 
   3.601217245142144*^9}, {3.6012172980760736`*^9, 3.60121730959201*^9}, {
   3.6012174024063387`*^9, 3.601217409105876*^9}, {3.60121753241619*^9, 
   3.6012175326047707`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    400., {199., 204.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$160790$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$160790$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train2NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`linearKernel], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{451., {248., 257.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.60121740986421*^9, 3.60121753326377*^9, 
  3.601298599640164*^9, 3.601558902793015*^9, 3.6015638865181103`*^9, 
  3.602858920663074*^9, 3.602860276956197*^9, 3.607434900961101*^9},
 TextAlignment->Center]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tKernel Support Vector Machines"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.5998959933365173`*^9, 3.5998959950405684`*^9}, {
  3.599899231509494*^9, 3.599899234925165*^9}, {3.60015516447847*^9, 
  3.6001551698116207`*^9}},
 CellTags->"sec:kernel_svm"],

Cell[CellGroupData[{

Cell["Kernel Methods", "Subsection",
 CellChangeTimes->{{3.600520519924685*^9, 3.6005205222261477`*^9}}],

Cell[TextData[{
 "Linear-threshold algorithms, like max-margin classifiers and the SVM \
algorithms introduced in the previous section can only learn linear \
separation functions. However it is often the case that data is not separable \
by a simple linear hyperplane. In such cases, a separating hyperplane could \
still be found by non-linearly pre-mapping the original vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], " ", "\[Element]", " ", "X"}], 
   TraditionalForm]]],
 " into a new space ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CurlyPhi]", "(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], " ", ")"}], " ", "\[Element]", " ", "F"}], 
   TraditionalForm]]],
 " called the Feature Space, where the samples become linearly separable. A \
linear classifier can subsequently be trained in this space.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998461259623`*^9}, {
   3.6005197554764442`*^9, 3.600519852482081*^9}, {3.600519892420924*^9, 
   3.6005199293763533`*^9}, 3.600519997453315*^9, {3.600520031766438*^9, 
   3.600520098523343*^9}, {3.600520221605938*^9, 3.600520222008019*^9}, {
   3.6005202556530447`*^9, 3.600520371355136*^9}, {3.6005204574178047`*^9, 
   3.6005204999975557`*^9}, {3.600520539060892*^9, 3.60052054057265*^9}, 
   3.600520817666068*^9, {3.60067956304256*^9, 3.60067980293848*^9}, {
   3.600679842850666*^9, 3.60067999337082*^9}, {3.6006800587681828`*^9, 
   3.60068005986121*^9}, {3.600680107219975*^9, 3.600680126672*^9}, 
   3.6015589426723757`*^9, {3.60743491618672*^9, 3.6074349195937653`*^9}}],

Cell[BoxData[{
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
0f2KWgpIdwDMBSh5S4Lr3unTp/fs2VPW3cjuTAEAAMhcjGPoz549i46OnjNn
jhjeScOTdKePkZGR/0tC5DpaCgBMFni2WzYHDx6sW7duUFCQluSviBsNAABW
guhwVZCfPHnyiy++YIcZtrpv2bKFv4WlHQBTRqajqu+pLLsGzB2qgZ88eVKl
SpX9+/fTLcadBQAAK0GNJ0ZbCe2uJTUNwcHBPXv2JNGeJ08e2tK+JGB3Slh4
ADALEhISIiMjszsXIMPo27fvxIkT1SOwpQAAgDWgzjbVDBHGqLlfvXp14cKF
Sbe///77N2/eZOmOaVAACLoOrBi6Hzx4EBERkV2Cil9SNsaSxrOzs5s0aRIf
5C1lDC+yWcAPmNwsqpY3bdoUEhKifgsrCgBAS+7C6yoEagj4uKyhjJ6+Diqx
MWPG1KhR49ChQ3Iw1dFM02w3xe+db/GxY8eqVq1K0n3lypWakmf+9iV3X1Kq
8Wdekl4s/5oS6CZ97ZHquq+2ero2zjTLH5gX/Dipw1VEXFxc69at+ZXRlNoy
C9DV27du3Xrrrbfo/f3oo48uX76camJgmrxoPtHTp081+D4BAAykumzHjRs3
tm7dyvuqxQYSSCCha2NjkzNnzlKlSh08eNCYQC1PE2w3KXt0NzmTEmema9eu
LVu25PYi7dOgKGXa57HK8yZHdFrolVB7lzoNLx8Rfx5kFPy88RNLDxi9MiSV
W7RoIQmy2CIqXdebN2/yFJW8efP+9ddfmjIikPW5Aq8EK3Oqo6QmpPslch2j
nwAAI6qVkgX8zJkzK1SoEB4erkoyoHLlypXcuXNTW0kN5TvvvHPr1i0qRp1t
xJSbS9U2KE18fHy8n5+flqTk1SjuL2k1jPb2tEh3LWU7FRcXl46wGP+XjJaa
VQqL0YCMRX3UecfLy8vW1rZMmTLR0dH8QmWxvuK3hv7U39+/QIECVB1RpeTh
4SEDprqcA1NDfWy4Ct20aVNkZCTtiOVEnaMEAACaoUJISEioWbNmrly57t27
Jwch4I2MHDlS4ihWqVJFLS7G9OMAkHKWHKpZfSUPluDg4JiYGDnDy58TWQdQ
tp6enmPHjtUpjTRy48aN6dOnP378WEtNqCNEHshAVL8yfownTJhAr3/BggX3
7t2bxSEZ1beV9h89esS6ndi9e7fqJIZXwMTheo+lO/W56tatGx4eLt9yv0yD
bgcAKOj8CqgJKFq0KNX/c+fOVQfsUP/roOq0e/fuvGhRzpw5GzZsKPWtdHNM
trJVdbLOYUZQE7zoPJSG+i9TpkxJYw9FbYZof+nSpR999NG8efNeVbfzeWJj
Y1u0aNGgQQMS8Jqy+LuaDIZ38PrIIJE665Ne+dKlS9esWXPo0KFyMGuM27qx
Leo7U6XNCzHs2bNHQ2h380GGHcPCwpo3b863j+tk3WRVAADQUqpxrit27txZ
rFgxao/atGmjS2yyKjTrEaFbq1YtmyRIvXft2pUtz1rWTlJLN6oTuOzTRUnm
0yKn69evX6dOHfV6X64WpDGaMWNGxYoVeWJv+jRGQkICbZ2dnUn8qxOE8aCC
jEXVTvx0+fr6du7cuX379rNmzWrbti07mGlJr0zWqGXxE6O8hYeHv//++2xv
37Rpk5byHTSLusg6UWdMjB8/3snJSUuuDI2R+dELAwBoKb0L2K9j9OjRzZo1
a9WqVceOHS9duqQl1So6MyZgqEwCAgKqVavGJndiyZIlYWFhWsqljkyz6MRk
p86BUh8GMVa/PJ6Mg4NDo0aNtOQpzGk0vM+cOTNPnjweHh6vcwmS2+7du9PZ
jh8/zkpeS7nCFNo78Pqo45KkhF1cXObMmTNixAgvL69OnTpt3rxZXqWsn50a
FBRUoUIFXkNt48aNcjzLOhEgfcjdOXLkSO3atYODg7WUz4+xQgMAAN2Qa79+
/RYvXjxgwIDhw4dPnjxZbYlQdahIydy+fbtcuXJs7LKzs9uyZcvzlGR3Tl+I
OudUZzBXs/3y+966dev//Oc/mhIy+l/t7SQtChQoQM+YzkfrlVAHCGJjY0uX
Lv3WW29dv36dWzo8qyADEbkuT2zLli1v3brVu3fvM2fOrFmzhh5mNWXW5EdC
kZBuL1++PFdBGzZskL4zXCxMBJ3znqbUlrSNiIho3749T0ww5fYCAGAiqDaZ
PXv29O/ff9u2bbQ9cuRIs2bN+DjqfyNqEEJ3d/e3336b280iRYrs379fU9Sv
mNxFG5tpP0geA9V738HBoUaNGpJGvWTV6C1aIiAggDRG/vz5SfBoKcMZGQPy
yHGd5f95yvA1z549W758ORX+119/LWH6jNkGIN2ow1Jnz561t7cPDQ3t1q3b
iRMnLl68WKdOHVJfWR9Phnforz/99FNbW1t6BX7//XcNPhUmjPHWDB8+fOrU
qfIR9RUAIC2wLvrhhx88PDwOHz48YsSIhw8ftm7d2sfHR0Qa/CRVVNsI7Wzf
vj1v3rw2NjZ2dnYVKlQ4fvz4i6pfc4wozqKFtpRzfgwSExNjYmL27dv38ccf
kw6/desW6Rm+Lt1zoovQPnjwYFIX1CWURZ1UhS8e9TJJVifmVQckdb1Ikk9U
+Lly5Zo3b56EaEA8DZDh0BO1a9cuFlqk248ePco73t7e2WUvjY6Orl69OvvJ
rF27VsOSeaaHWtHJoCRVUBcuXGjQoEFQUBDXk7hfAIC0wHUIVR1NmjTx8/Mj
CcoREsaNG7d+/frszp0poi6HERsby/uTJ0/miO60pWZUpqpxa67zNVWXyTML
1L5GfHz84sWLP/zww3z58pFUyJ07d8GCBWvUqEEynpdtkjZIlDNf7O3bt0uW
LEnl4+TkpIsMHxoaGhISQn0BKs/g4GCSInSqx48f81Rf+hgYGEhf0V/HxcVx
6B72W+CThIWFUQbozJ9++qmvr6+GxcFBRiOjZvSm79y5k/bbtGnzxx9/0M78
+fMnTZqkJsts1NcqISGhXr16rNtdXFw0pbdrXpWMBaMLNyT35eHDhxcvXtRS
W5MOAACMqBbLM2fOkJqiVmnLli2DBg2iOmTz5s20oxmWpASMsUAGDhxIrWf+
/Plpa29vz6HFU10DxbwGLyRyBe3TRX3//fd58uSpWbPmmjVrypYtW6lSpYkT
J5J0z5kzZ8+ePe/evSu/kuvlZ4zLp0iRIitXrpTSYxv+1q1bq1WrRoXWvHnz
eknUr1+/bt2606ZNo283bNjQokWLRo0a0ZH//Oc/9C8k8vnn4nvcvn17ygCH
MFXLHE0heH2ko03dyV69evFSax06dPDy8qLj586dc3BwyMoaUtct7dSpE/vJ
9OnTx+yG86wBdXBWfPxkLBK3DADwqlAdMn/+fBI8tO/q6jp48GCqW0ihdenS
RWIbQreriGM218NsdQ8LC/vuu+9IPebOnZu2nTt35ppZVLqEgDYvVMfyHj16
cK8kPj6e1DjLbDq+bds2Hmv4+uuv6ckxTlC9d+8eiXxKULhwYQnbKIZBEkJU
XDJgwcbDH3/8MSgoiEO1L1u2jL8i1XT48GGduzvBHjgE5UeX5ywoImDZyPN2
/fp10sZ8sGvXrp6enlqSW1fjxo3PnDmTZf1x3VNNDz8HpG3YsGFcXJxmmAMC
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
R8jUYFgAAGQ0z5U1sqXKXbx48fDhw42OBxbfNJsU1BR27NiRh6pp27p16+jo
aDVgi9wONA3WgCqEniWRjpOoHlnSEXj5qcSVy+gEYlUhp1LV7U2bNt2yZYs6
uSPbxSpl49q1a2+++aaNjU3OnDnnz5+f7nnfdF1xcXF8xLgAnPHWq77cFv9g
yMXy63P//n17e/srV65IAqNjFQAAZCwST2bhwoWOjo5qHFpJkF15s05CQ0Pr
168vfqTOzs5asvSSuwPRbg2oI+/yGqZ9nrKqt/mB4d+m5Y2WedPqeaQTIWLe
4ucXGGV5WFgYSbVt27ap72C2FwLJSOpQfPHFF+yF3rlz5/RVEUZPtpeb0NVn
zBrGX3Rd4AEDBkyYMEFLunaOi/s8eeJ8tnflAAAWhnHC+7Jly0aMGGHxDbEp
I77u9+/fr1ChQq5cuThg8syZM7WUCwwhXoGVwNpYU9bqSrsbrc4KqtoJ5Wz/
egbxnUh19V6LfwhTnZfavHnz3bt3m6AwowqcQ8qoaxm/EupCqHIk1TG+54YV
txkTLJYMRO3/+vr6duzY0cfHR31IXidYFgAAvASjbWTFihWjRo16yXgoyBq4
afjzzz+LFi1Kut3GxiZPnjyurq78rVVNBLNydCZTUs737t1L36nYG3nz5s3H
jh3718TGJeyps+Dl5XXq1Cn1OKsXy16vVqfbaSc0NLRly5Z79+41nRdQnpM9
e/bky5ePpDttT548+arnMQ4uqK0A9+BepOGt0H+Pekb8PqpxrtCAAgCyAK51
Sbc7OzurZhYNlU/WwvW/bHft2sXh14iSJUt6enrKfCjT0Qwg81At5HTH165d
W69evePHj//rr4yvbXR0dJ8+fT744INLly7xkX/VV6phnzS/u7t7+fLlFy1a
xPkRx61XuyRzI1Xd3qJFi/3794sh2kQqScoPyUiJ4k53Kh1nkH3jhOhUh2+e
K7z+JZg4co3sEqNiNLOjigYAZCAyoKlWtqQKRo0aZT0zjEwQcYoQabR8+XKJ
DPnOO++wwRNOMlaCThX//PPP9BisW7fu5b/S2UjpKfL39//222+/+eabR48e
8WnTLirEX5fOc+bMmQoVKowePZqeT9UUn+YLMldUjRoSEtK8efN9+/YZp/Zn
I9IL69y5M09pp85FOs4jVZAaQEZ3mapJR524mr5V2MwLKRZdmB3dIAVEOwAg
U+Gads2aNSNHjkSFk72ocfa0pFszadIk9nK3tbX96quv7t69q5nqIqogw+GZ
yGqgv/Xr16f95/ScJCQkkGL/8MMPWbSn6qZuRDe3Th5LLy+vggUL9ujRIy0n
sTyoQCIiItq1a0e6XUs58qW+kmJ/Vr0msqBqpZv7yy+/cDe/aNGiFy5c0JSa
RHvBWAxII3K76Z0KDg7WUJ4AgKxF6hzerlu3bvTo0S8aFVWtav869UZneJGA
t5pivpMELxmvlxxyGnUynW7+lGXr2F69enFEdxLw9vb2YWFh6t1RiwLdLnNE
fTu0lHpYvdGLFi3KlSsXvadqXFDVt1bEtnxFv/ruu+/s7Ow8PT211JQ2pyS9
l2oQDN0TxWmGDx9uY2Mzffp0zZqcmRkqjcjIyA4dOuzatcu47hhXUFSYPj4+
a9asGThwYLdu3SZMmLB58+Zr165xSpkOkLGvqtTPV69eLV26NEv3n3/+WVcz
QGS+JlySkydPdnV1RWECALKXtWvXqv7tukpJ4sLpNMaLME7PURcGZfthWlou
o5lIN8pvDcP0UVFRLVq0EIeZPn36iM+zbvBag1+leaL2bRn1BeEXZ+7cuXT3
N23apBkCwqjhW1UFPmXKlNy5czs4OIjnFT8zErNOfVrUKJHqEjw60/HNmzcL
FSpEp92xY4dmBVJQ142il5HKc+fOnWoauR1PnjyhXnbRokXpTjVr1oxEe/ny
5Wmftr/++mvmdXOeJ0f+iY+Pr1WrFlcUDRo04PWAjNYSkG4ePXpEHTeO2W7Z
9iIAgAnCepiqdGr3Fy1aZIwno4qBsLAwLc0WNm7IJKpkSEgInfzq1avUrEga
Vcm/KHu0vXv3LskPahDluFHhpCVL5gvdnYcPH1avXl2CunPQYAYtsgWg+kcJ
fIRfUpKLgwYNypkzJ916dVqcuB8bB7lIYJcpU4aeFlKMmuE5ISUv7xE9YNIT
VNO8yAhP7zKdtkqVKsHBwRbvgKHT7dHR0e3bt5c+CxcRb+kl/eabb/LkyUOF
06NHD54FcOPGjY8//piO5M+ff/z48c+VNe8yCl1IHxcXl9xJlC5d+u+//zY+
GBn411YINUZ0HzXUtwCALCRVZ5ilS5c6OzurDbe0xdS+r1ixomrVqr6+vvzt
y63c6jg+tRok1z/55JPevXuTeucEIiHozC+X7vRtRETE8OHDv/rqK2MIu3/1
tLEkrl+//vnnn4t0p/ulJd8I9WZZSWlYEi/xgqa7SWrwxx9/LF68ON/3vHnz
VqxYcezYsXfu3NFS9q9Vd2vaGTJkCKUvXLjw0aNH5amQN9dYCfAqmawqCfpI
vWySqWoO2Udu7dq1POfi559/lqxaqozRXVdsbGyvXr1k3SUpGSqr77//ngfF
ChQocPjwYfkJVV/s5GZnZ/fLL79oGf2S6sZlLl++XKJECX5UJH6sZjDFgHQQ
EBBQv379U6dOofsDAMgW1Dp8+fLlY8aMUVtzVUUsWrSIGoLz58+n3W7Djci5
c+cqVapELZesA6IOwacF0vYkNn766aeyZcvu379fU4IeaKnJD8tDrvfkyZNv
v/02L4mYP3/+VatWaUmCQZJlZy5BejFO/xQPqOPHj7O1tm3btt99912ePHka
NmzIy2LS6yBzVHVe03SeK1euFC1alJ4TSubv768pxnPqAJLybNeuXdeuXdu3
b9+pUyfap5N37Njx7t27gYGBAwcObNWqFf1jjRo1ateuvXnzZi2lU5aHhwdJ
U1tbW8pbZGRklhVUtqB7reh169GjB+l2nQzeuXOnTEIpVarUkydPJOoOdbGl
u12mTBkeOszYt1Vi/nBdQbePo8rQPdWUbl0G/qMVQgV4//596rTKkX+1OwEA
QMbyf8nrlRO//fabbvhPdHtiYuKSJUuoIbh48aKWhvpfwoz7+PhQO+Xg4MBW
Pl0AQ3bKfUm9p/rDxMbGjhw5Ml++fNRict7E1CxnS0cJmAUyfkFs3769cOHC
vB5T8eLFjx49qqa07EVwLBuZ9CHO6jdu3Hj//fdJfU2aNElL8m+nm87+7Y0b
N2YduGbNGi3lNG3emTFjhsQg4i6zvGhRUVEuLi7U76ME9FKz2vzggw9cXV3p
LdOS1vwiuU4HixUrRi8d6Xz+IZviKXu+vr7vvvsuZ0Dn6W15DjO66i4hIaFz
587sJ6Ml1z9UpI0aNeIONW2rVq0qvWkqLk9PT9HtuXLl+vXXX7mcMwqpDLVk
q8icOXM4J9SDkAU9wesjTVsa52cBAEDmsW7dusmTJ2up6XZi2bJlpBV5fDCN
8cP9/f0/+eQTat/ZCVaku05gp6X24zRPnjx57733SKyeOXNGU+yHVlJ/crnR
VS9cuFBkQOXKle/cuUMHU51pCMwC9W2S5/np06ekD+kWkyBkB7P58+fTxy1b
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
2rHcYI3omTNnzp075+/vD8F18+bNixcvXrt2DacYCyAxwgEBATdNBAYGPnjw
wG62AgFBraioQu3atduyZQudxipIpNI9I1SqwLzl8ePHkydPLlKkSBoTaH1g
782bN1+6dCkblvNdbNNumF4fU6dOnT59eoy11UdoVByn9+/f37Zt2+rVq9eu
Xbt///6IiAg1W7bs5Uw2bdpE+s/BgwcnuY8sSIoYNGgQVX6gYcOG6CDUyklI
SCczABogGhdG066IGnVm6sqVKy1atBg6dChtq2o1/LMLVrPTsx4+fNirV68c
OXL89ttvqm7f+RTY2bNnMfDhjlvN3Hn5BQLBy4AqwW7cuNG/f//ixYtnz569
QYMGtWrV8vDwyJUr14cffhgUFGS915VmS2IB7Lp06dK0BfOMGTO0pW3q/Lu6
QcatW7eqVav26quvFixYsLAJBEBFULCDBw/irvfff79cuXKIyZcvX9GiRZcv
X65pMAQCu0A9IX375s2bOSaJ8naC2pBDQ0Npw5dKlSpNnDgRraZYsWJeXl6g
zaAxHTt2ZNWZtpXSkydPunbtSjyHF7Jxk2TCj0HBnDlzqlatmjlzZjTAihUr
YlAAUoEGqNJ1Hg7QVL6fn1/evHmRMwqDpm1Ivy94mUAvExkZibEqVXtUPAxF
yZzbiGuInjD9BVHoZcuWoTx//PGHc2NRtTlzCQMDA1u1atWoUSNuPpphvCOQ
mgvNFvc2bdrU39+fG7Vd9b4KXDp58qSnp+fFixeFtwsE7gBusBjOo5fPkCFD
6tSpJ02aRJE0tQ2+XapUqVOnThmKcu/ftlmIC+IDINvWMmjaA9YSbN26FaUi
wk8bSWAcwQtk7ty54+3tjXiQB8jD6OhoVXMoEGhQKwY4aps2bVTebk3j/lB7
fwqDtPfu3RuNol69ejTcLlmyJIa66Lvnz59PTjYaN25MXuOMuJuZnjt3DlSc
2trq1atjbX7n1OZ57do1NGFargL5EBIScvv2bVo6lyVLlhEjRtC0l1UfeO/e
PfT+lPn06dMNMZURvGSgEhJZpTWqwMcff2xYvCclAG/nJ65atQrF2LZtm4ty
hhd3x9qWcv/000/g7apbNuflZ4oO2v/jjz+iwfIlbdiunXLJibdb16UKBIJE
AQmE8PDwZs2akVKifPnytDgdePToEXe1b731Fq2L0eyEDadyg5ONHTs2VapU
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
Sfu26sdUL7Hy03q0WyS2lOYAuwGM903VPLWf8mzQ3tFumGCt9q7k7OIf/LcF
VpuPtWpZoWXi6Feqp507dyZBV7VqVVV94UoJNb+O1syd5Mb/FGlIDw9xtHnz
5tGjR/fp0wfyc+jQobt37ybZq2alPosV+IKkhVhlvcOjR4/Yn4wmK5zc7uTS
C2+Mdh/x/Jm4Eq+1X2tjd14Su7k5F4BGXOHj6vs8B1zsvxjxvj4ncL38Tj7s
s5E3q2C0fnZHolstv91fZjex87eLN4HdbJ2X81/BxUy0L+YobLdi37p1q0mT
Jq/YMGzYMIonrbu2dEv7pPSXIYvOnDkzd+5cdEBg719//fXKlSsvXbrE67AM
B960Yl+O3lvzugYh+cYbb9AmU6odvka81VKp4VibXLVriRprUjWIZeu3ZVmt
yYRYhaKouan98v/Z4KSNu+JELtZm7KS5ttBeliNVVSG9mt331WK0KsqDGq0l
aq+AsGrExSnt8hMrDY6NT9hqFdVRYvUv2F0Por5XrI2hUeEdPd3uRzYU+Wb9
FNbv7ChnuyVkv08MR2TAWgBXBJRWT9Riq/9aExTWpmS9XS2k3Y/jOrid8qlK
zlHObt26kR8t8HZ1q2i7xXNOpWItgz7nZVPz5xZEPnhv3Ljx+eefN2vWrHr1
6iNHjty5c+f9+/fVG59a3EgKkgTUSkISgzb/+vPPPw3HOg1H9d9um7I+7t9S
UCeJn0F74yTeeQ6xSrdoTaY1AUfPtfuIpwpcucWaP4e1V7N2SbGOeyUnX8PR
K1PYbhf8r35xvB0la//srrVRX9l5Prw/hfPyWBOozcTFymM4qAaO0lg7X46P
90EaeMMj7Xc7UuzE+xbO03OZVcqBMqDjKFOmDLqzdOnS4fjJJ5/QJVdc16ps
FnliFLBx48bJkyf37NnTy8sLZP7y5ctqSaxV6IVT9/+Z4MzPnj1boECBRYsW
nTZx4sSJQ4cOHTt2DPEYbpw6dcrPz+/8+fO4hDDFIIyriLx48SIGIFeuXLl2
7doNGwICAgIDA+/cuYOAv78/Ely/fj04OBgyGUOY8PBwdMdPnjwJDQ2NiooK
CwtDJIX/MhETE4MjGAUCuIr0uBQSEnLdxB0TN03gY2K4gU4cj8NzUQZ6NC7R
cxGDz4viIYzA1atXKYC3OGuCXuekCQSOHDlyyMQRExzGN6FXPmoCd+H7YLyD
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
    "], {{0, 461}, {
    1000, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  AspectRatio->Full,
  BaseStyle->"ImageGraphics",
  ImageSize->{716., 325.},
  ImageSizeRaw->{1000, 461},
  PlotRange->{{0, 1000}, {0, 461}},
  ImageCache->GraphicsData["CompressedBitmap", "\<\
eJycnQe4bUdZ93d2OeXW3FRKAqEGpAkBQw9KRxCRYgkhREqoAgFFkRKI9K6g
QIRgIkVQICJiI1dEEAUUIQGC5aIUkWav3LPXN7933v/MO7PXvpFvP885u6y1
pry9zcz9znnaYx71xHOe9thHnHPKPc8758mPeewjnnrKPZ50XvppdtRkMv34
ZHLU3U+Z8HmYTPTPXsfxb7IYdnZ2Br2WyyXfJxt8mszitfzUz/Fv268ePny4
XD3J/k9qy1O7KTdPs9/4xjeGP//zPx/+5V/+ZTINzXONb/bkC+qTG8N///d/
D+973/uGP/qjPxr+9V//1bpLT8y5vNLdZI+1pEnw+sxnPjP8xE/8xPCIRzxi
uPjii4e//du/LT1qYtbhZFeZCu+/8zu/M/zMz/zM8MhHPnL4+Z//+eGjH/3o
8B//8R88d63crcav3viWf5vHOXF5PnLrwiEfB+yf8zR22cdZuYFvY33aHVN+
sU9bFXrzpuH0t3vdYGb1oZEJhauLvsk6rN0j47Und5cBTuYN3NPn+brRHmk8
8zLZRdcnt2yOPpZee/l4QjcOv2NaOpyNNLkocLP7tlqIh5H7y7DqBPWlL31p
+MM//MPhDW94w/DMZz5z+KVf+qXh93//94dDhw4N//7v/84g+onCfNby42ws
m2M0UmA/bzF0dBnW/pGJzMZmyLfdpYHpyNV5AFp4zdZRkl04vjS5fx2S09/e
daPcWwC5VaDfQbrB2yafNo5ApIty/0Y37sFIeHXax/tvkgsZL9YhHxc9EXlD
Gff/+7//O3z1q18d/viP/3h41ateNTzvec8zAfSBD3xg+PznPz/80z/9E89W
jNiDx1gbGdRJ+sXGXfLlWejJNXPtoeW/R4kuhG1Ukqhc8e1vfzv/PEKdueU1
DY3Kw3aMzv1Bbk3XdTMu7oYjiIbAleOQcbGROrxKATytjFgGvTkO2NzjVoMv
tavfRM7TdRMYB+Dggqu7sF3psGWeeZ5bA4tM3BsrU43klB4UhfGe/natQ/wY
rwTZmeXet771LZNx73nPe4z2H/vYx5rs+4d/+Ad1IiD8z//8j7WVqG5yrmNF
OoKmdC1qLh/6Cokwk2mZlK6qlUGcXvXIIpCyJhMlpDAvg0SdB7S23Y1BZy3R
LsaeOCLpV34dU3T16nZLArMA10iZdWotN1f1WkG1VRrqOSxC34Zg0rjHV8HN
GJFXQj2SEB+TYOMGzbJVdE4Bk8W6/teaVumRyBgivFlgmjDC3MzuSKN2C7Yr
psDBgwdNHTzucY8bXvnKVw5f/vKXJ72gKfh3bTCGmqlxxIbxDqqGd6S2v08x
nNMwuIQJzbs+65Fwu8+FJjOz8BvftvmWutG9+vPveRS7rNn/+q//sj8+/+d/
/mfpit/4nt7zqGblMt+mXEj96DGMbB7h3R8b/u3f/s3uys/Py++8p78ZX+Z0
lkSwZqYZazYMxWROhpvQFnGUrhg+UyuCET9rvoKfTcQmn0ejSfuI7AefJJNI
f/nbND+Zvudb6jwc2tMK0pn15gNzptlqaC0Y0fp9GnjcZbhINjVRJj8rBAPE
ZmEWjAeb1MaZPqSLgJ6f+Db336BlfmNmU76loTFT7uVPn8N9Cz5s0EHoylE8
dWhEIjKsZsjRgrfmvS3KqOgh+ZJ+Da8yj+6f//mf+fPfNu07Bhf34oP+7u/+
7vCXf/mXds+cK+k5FNY3v/lN+zbl/5Sf7FPqUS1wB63ku2h92675KOxd92qE
dSRb9ttf//VfDy972cuGs88+e3j6058+vP3tbx8+8YlPIAuMt7MO3G5o03Wg
AYc2ab/MOoNlFjsPU0ijj6Pij1/nzMXnaJ++/vWvT4evfe1r6QqG6z/+4z/y
jfe5/6yf/Gd7JM2Ju/WzPutWazSBfDJvfk5/+emZ/QROuGnm/9MV+y2Nq/wG
5MERY7dhz+tle4DmbAIzH5c65A+z4ytf+Ur5nMY55Ut6niFzKf3lb+m/32Lf
bN6TvdYPTfpgy4D6z7wD5ExcAT2i2vSeBpr+i5xFPKCo3gDBVMKjVT4X1M0z
bA0PoGejmWfA4NRmsd3An/cRVGX4ZYTtMaBykwDcTzC+i5bSNAOMJiIoHheJ
GIZa0KdRT6YB9PyWNSNIWfBZKNL1dI07FvG34Ytf/KI/R4sLtWOa16GSKW6j
YjaShj2XB7LLfuNBrodB2TthpOc///nDL//yL0+5KbUaxph79t9oIo3Lx7s1
/MVf/MXw8pe/fHjYwx42POpRj7LAwMc+9jFDfOd1yHzcv2IHVK2w1zr9xV/8
xeH1r3/9cOGFF9rn17zmNdbw6173OsZov7361a+2UFZ6T8/+wi/8whQLJDWK
PcLF9J4uvPa1r02jfMUrXjG89KUvtYbSL/Yg73xPn6fWysy+0key7NOjqZcp
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
w5ZCuP8JVCntREoXUC4cFXGbC94R2wgCGiv7pLRuyq0ihdTaCV5g3A2PeO6h
XtqucLVeIS9WqDtz8I4vheZBXubQTUsCfLtthVjeTJuHGQFWI2kDLXbV3i/J
TF/rRNRzCfK+62WAIiU5txgImHkkyvEOwSc+EPEQAk387kCdOWVil4B6VjVF
H5omcR2oiWaMUCfJFBXPEjSAUhPfTVR/JHyBKyiUdiE5DdlxedtKHG0dtu5h
Qz/koZYJEaF1BEyrCNpcEUFqJ4oQyhoIklReXT0Su9peG4YrhCv1CRhGBC4P
1zWEI11OeuuEd61sQhaH9ey+vHYtjXpYfNzF3GnP8NGMg+g/0XlMTIM5oGWl
xBR0WL0/WmVfNPS5+PjHP36S9xKely0f/Lh2CyOFmJe3V/dEzmPc38g6Xhhd
aFa2PcFCx4xmURMyDKGFDIErPvaxj03EjVAkNbRI7iTIeq5/+ctfPrE1i2nO
XuBvBEqX2iEMG09mUTCqyO7TKpsD6ISM2wYGrN730uz5aNayFhrxiuRDCscj
9oQR6O3MQujikL4iWbvjREl3mKr1Koy031fSxotgSakfAziSf6toUtEmPjLW
LS6DVu6tccN5oUXdDY+M0unryWh0lm8SlbpZ+/QCJaLdDNJmELfX0gtEoyO0
CIyU9UV+RAJjiVQnTzV9/ocqSvZZ1BEzDkbCK0BsoVskKamAQLvB3iy49A22
bRbJokOAarcuD/qX7niM3UzkMlHbKXVANjdJK22N7iuLA/Hk88smfmhzMlQr
scV9E9QX41CaiyAMXkVOhew04VkA8mOVeW/SCAVeogXgAbnjCWGihuURDclG
TLNuDxOZpfqyFGhPJ5jxjv/Lvbht0BoZcYwZ4jkwtOQe/VAcq/1hl4q4jdMh
QQJPrPdy8HBY+RJXIC7Hs4jHB4pkECycEwZRiyWT15mapxfhmH2tLdtZANml
tW1UpclZlEyct2JwcrVGr6EzqQMAm7SEaamNQCBOWtRaIqiPe8jA0QsvleiF
XYRmTvdIO/3MO6pL06HaTIdMaO9PdzfF5OxZoEW5fC7aM2iG7UIsMCoIRloz
RhjVd+Vo0r/B4ciW34GGvvRZt0FbmCKIVcwGbCtMABQElVt+z0S1nmCfYSDd
na+9e1vWasPD1IeGKZylLxag4fWzMwraATMeq1jFOnLL2RmRco1E46LTvj5W
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
9w==\
\>"]], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   StyleBox["Achieving", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[" ", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[
    RowBox[{
     StyleBox[
      StyleBox["l", "FigureCaptionCentered",
       StripOnInput->False], "FigureCaptionCentered",
      StripOnInput->False], "inear"}]], " ", 
   StyleBox["separability", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[" ", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox["by", "FigureCaptionCentered",
    StripOnInput->False], " ", "projecting", 
   StyleBox[" ", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[
    RowBox[{
     StyleBox["t", "FigureCaptionCentered",
      StripOnInput->False], "o"}], "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[" ", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[
    StyleBox["a", "FigureCaptionCentered",
     StripOnInput->False], "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[" ", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[
    RowBox[{
     StyleBox["h", "FigureCaptionCentered",
      StripOnInput->False], "igh"}]], " ", 
   StyleBox["dimensional", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[" ", "FigureCaptionCentered",
    StripOnInput->False], 
   StyleBox[
    RowBox[{
     StyleBox[
      StyleBox["s", "FigureCaptionCentered",
       StripOnInput->False], "FigureCaptionCentered",
      StripOnInput->False], "pace"}]], " ", 
   RowBox[{"(", 
    RowBox[{"Adapted", " ", "from", " ", 
     ButtonBox[Cell["[1]", "Citation",
       Editable->False,
       TaggingRules->{NoteData -> RowBox[{
            RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
            RowBox[{"and", " ", "Nello", " ", 
              RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", 
              " ", "for", " ", "pattern", " ", 
              RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", 
              " ", "press"}], ",", " ", "2004"}]}],
      BaseStyle->"Hyperlink",
      ButtonData->"00004F53"]}], ")"}]}], "Text",
  StripOnInput->False]}], "Text",
 CellChangeTimes->{
  3.6006800700300913`*^9, {3.637658967650337*^9, 3.637658987078306*^9}, {
   3.637659037298044*^9, 3.6376590805849733`*^9}, {3.6376609657663116`*^9, 
   3.637660972574011*^9}, {3.6376614861686983`*^9, 3.637661487167944*^9}, {
   3.637661561525647*^9, 3.637661566277133*^9}},
 TextAlignment->Center],

Cell[TextData[{
 StyleBox["\nKernel methods",
  FontSlant->"Italic"],
 " allow to perform the mapping to an high-dimensional space, without  \
explicitly defining ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 " and without explictly performing the mapping. \nIn the remaining of this \
section, ",
 "we ",
 "will introduce the fundamental results from the ",
 StyleBox["Reproducing Kernel Hilbert Space theory",
  FontSlant->"Italic"],
 ", as presented also in ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ".\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998461259623`*^9}, {
   3.6005197554764442`*^9, 3.600519852482081*^9}, {3.600519892420924*^9, 
   3.6005199293763533`*^9}, 3.600519997453315*^9, {3.600520031766438*^9, 
   3.600520098523343*^9}, {3.600520221605938*^9, 3.600520222008019*^9}, {
   3.6005202556530447`*^9, 3.600520371355136*^9}, {3.6005204574178047`*^9, 
   3.6005204999975557`*^9}, {3.600520539060892*^9, 3.60052054057265*^9}, 
   3.600520817666068*^9, {3.60067956304256*^9, 3.60067980293848*^9}, {
   3.600679842850666*^9, 3.60067999337082*^9}, {3.6006800587681828`*^9, 
   3.600680084113222*^9}, {3.600680133063142*^9, 3.600680151937355*^9}, {
   3.600680282772306*^9, 3.600680330666135*^9}, {3.600680412869176*^9, 
   3.6006804148508873`*^9}, {3.601558944642812*^9, 3.601558947558786*^9}, {
   3.607434968114339*^9, 3.607434969701659*^9}, 3.637583979270483*^9}],

Cell[CellGroupData[{

Cell["Kernel function. ", "Subsubsection",
 CellChangeTimes->{3.600520117616384*^9}],

Cell[TextData[{
 "A function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{"\[CenterDot]", 
      RowBox[{",", " ", "\[CenterDot]"}]}], ")"}]}], TraditionalForm]]],
 " that for all ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["x",
     FontWeight->"Bold"], ",", " ", 
    RowBox[{
     StyleBox["z",
      FontWeight->"Bold"], " ", "\[Element]", " ", "X"}]}], TraditionalForm]]],
 " satisfies"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, 
   3.599899918703438*^9, {3.599900060655603*^9, 3.5999000719742527`*^9}, {
   3.600521449431007*^9, 3.600521474971568*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], " ", "=", " ", 
   RowBox[{"\[CurlyPhi]", 
    RowBox[{
     RowBox[{"(", 
      StyleBox["x",
       FontWeight->"Bold"], ")"}], "\[CenterDot]", " ", "\[CurlyPhi]"}], 
    RowBox[{"(", 
     StyleBox["z",
      FontWeight->"Bold"], ")"}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{3.600519871893436*^9, 3.600521484232815*^9}],

Cell[TextData[{
 "where \[CurlyPhi] is a mapping from ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 " to an Hilbert space ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CurlyPhi]", " ", ":", " ", 
    RowBox[{
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], "\[RightArrow]", " ", 
      RowBox[{"\[CurlyPhi]", "(", 
       StyleBox["x",
        FontWeight->"Bold"], ")"}]}], " ", "\[Element]", " ", "F"}]}], 
   TraditionalForm]]],
 " is called ",
 StyleBox["kernel function",
  FontSlant->"Italic"],
 ". If X is an Hilbert space (e.g. an Euclidean space), the simplest example \
of kernel function is the one obtained considering the identity mapping ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CurlyPhi]", "(", 
     StyleBox["x",
      FontWeight->"Bold"], ")"}], " ", "=", " ", 
    StyleBox["x",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ", in which case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], " ", "=", " ", 
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold"], 
     StyleBox["\[CenterDot]",
      FontWeight->"Plain"], 
     StyleBox["z",
      FontWeight->"Bold"]}]}], TraditionalForm]]],
 ". \nA kernel function is thus a function that can be decomposed into a \
feature map ",
 Cell[BoxData[
  FormBox["\[CurlyPhi]", TraditionalForm]]],
 " to an ",
 StyleBox["Hilbert space",
  FontSlant->"Italic"],
 " F , applied to both arguments and followed by the evaluation of the inner \
product in ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]]],
 ".\n\nAdvantages: if the kernel function is properly chosen, instances ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 " can be implicitly mapped into a feature space of high (even infinite) \
dimensionality where they are possibly linearly separable (or better \
separable), without having to explicitly perform the expensive inner product \
evaluation in the expanded feature space.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, 
   3.599899918703438*^9, {3.599900060655603*^9, 3.599900104759665*^9}, {
   3.5999001615641317`*^9, 3.5999001634212217`*^9}, {3.6005199520162573`*^9, 
   3.600519971664825*^9}, 3.6005200236061497`*^9, {3.600520399904098*^9, 
   3.600520400837484*^9}, {3.600521444500123*^9, 3.6005214648852882`*^9}, {
   3.6006799286419353`*^9, 3.600679942970479*^9}, {3.600680170362831*^9, 
   3.6006802684922028`*^9}, 3.601558949267808*^9, {3.6016394098918867`*^9, 
   3.601639412680696*^9}, {3.637581472690474*^9, 3.637581509678729*^9}, {
   3.6375815614730587`*^9, 3.637581568607192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finitely positive semi-definite function. ", "Subsubsection",
 CellChangeTimes->{3.600520160142*^9}],

Cell[TextData[{
 "Let X be a metric space, we say that a function: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", ":", 
    RowBox[{
     RowBox[{"X", " ", "\[Times]", "X"}], " ", "\[RightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]]],
 " is finitely positive semi-definite if it is a symmetric function and for \
all finite sets ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["{",
      FontWeight->"Bold"], 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "1"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "2"], ",", "\[Ellipsis]", ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "n"]}], "}"}], " ", "\[Subset]", " ", "X"}], 
   TraditionalForm]]],
 " , of size ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 ", the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", " ", "\[Times]", " ", "n"}], TraditionalForm]]],
 " matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["K",
    FontWeight->"Bold"], TraditionalForm]]],
 " whose ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", " ", "j"}], ")"}], TraditionalForm]]],
 " entry is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "(", 
    RowBox[{
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ",", " ", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "j"]}], ")"}], TraditionalForm]]],
 " is positive semi-definite, formally"
}], "Text",
 CellChangeTimes->{
  3.600520184976275*^9, {3.600521307814665*^9, 3.600521322030164*^9}, {
   3.600521478707449*^9, 3.600521497086351*^9}, {3.60285900845245*^9, 
   3.60285903066188*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[ForAll]", "X"}], ",", " ", 
  RowBox[{"\[ForAll]", " ", 
   RowBox[{
    StyleBox["v",
     FontWeight->"Bold"], " ", "\[Element]", "X", "\[Subset]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["v",
     FontWeight->"Bold"], 
    StyleBox["\[Transpose]",
     FontWeight->"Plain"]}], 
   StyleBox["Kv",
    FontWeight->"Bold"]}], " ", "\[GreaterEqual]", " ", 
  "0."}]}], "DisplayFormula",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5998999945673923`*^9}, {3.599900197057012*^9, 3.5999002496844673`*^9}, {
   3.600521004175788*^9, 3.6005210089374657`*^9}, {3.600521060236018*^9, 
   3.600521063317602*^9}, 3.600521481463724*^9, {3.607435035187615*^9, 
   3.607435040456483*^9}, {3.6074350716912622`*^9, 3.60743508054224*^9}}],

Cell[TextData[{
 "The above mentioned matrix K is called ",
 StyleBox["Gramian matrix",
  FontSlant->"Italic"],
 " of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontWeight->"Bold"], TraditionalForm]]],
 ".\n\nWe can now state without proving the main result of the Reproducing \
Kernel Hilbert Space theory: the characterization Theorem of kernel \
functions.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5998999945673923`*^9}, {3.599900197057012*^9, 3.599900229925082*^9}, {
   3.600521078772048*^9, 3.600521081686219*^9}, {3.600680387046007*^9, 
   3.600680396475376*^9}, {3.600680431165286*^9, 3.600680433155499*^9}, 
   3.60155895076786*^9, {3.6028590505959682`*^9, 3.6028590516400557`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Characterization of kernels.", "Subsubsection",
 CellChangeTimes->{{3.600520195189268*^9, 3.6005201969073973`*^9}, {
  3.6005211261606493`*^9, 3.600521128086487*^9}, {3.60052122497523*^9, 
  3.6005212262512207`*^9}}],

Cell[TextData[{
 "A function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", ":", 
    RowBox[{
     RowBox[{"X", " ", "\[Times]", "X"}], " ", "\[RightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]]],
 " is a kernel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"\[CurlyPhi]", "(", 
      StyleBox["x",
       FontWeight->"Bold"], ")"}], "\[CenterDot]", 
     RowBox[{"\[CurlyPhi]", "(", 
      StyleBox["z",
       FontWeight->"Bold"], ")"}]}]}], TraditionalForm]]],
 " if and only if it satisfies the finitely positive semi-definite property.\n"
}], "Text",
 CellChangeTimes->{{3.5884003684209633`*^9, 3.588400428710943*^9}, {
   3.5884006005723763`*^9, 3.588400629312437*^9}, {3.588400662167811*^9, 
   3.588400662738809*^9}, {3.588400705516869*^9, 3.5884007539141912`*^9}, {
   3.588400825942787*^9, 3.588400843157497*^9}, {3.588400893227042*^9, 
   3.58840089926121*^9}, {3.5884009355838223`*^9, 3.588401051387847*^9}, {
   3.588401153597197*^9, 3.588401164076635*^9}, {3.588401223482829*^9, 
   3.5884012381997833`*^9}, {3.588401305112268*^9, 3.5884013876851997`*^9}, {
   3.588408696784808*^9, 3.588408698545323*^9}, {3.5889436278914213`*^9, 
   3.588943721963121*^9}, {3.5889437834876537`*^9, 3.588943791888619*^9}, {
   3.588943937459249*^9, 3.588943938303256*^9}, {3.588943981847172*^9, 
   3.588944013410884*^9}, {3.588944048079698*^9, 3.5889440502488413`*^9}, {
   3.588944141318069*^9, 3.588944220082452*^9}, {3.588960639754219*^9, 
   3.5889607348492317`*^9}, {3.588960787147244*^9, 3.588960930630892*^9}, {
   3.588960997318163*^9, 3.588961008176413*^9}, {3.58896107899542*^9, 
   3.588961086665382*^9}, {3.599899826281513*^9, 3.5998998660442123`*^9}, {
   3.599899918703438*^9, 3.599899923596326*^9}, {3.599899977866158*^9, 
   3.5999000197286587`*^9}, 3.599900278074287*^9, {3.6005211824337063`*^9, 
   3.600521247768865*^9}, {3.6005212794860983`*^9, 3.600521289748728*^9}, {
   3.600680334392817*^9, 3.60068033556082*^9}, 3.601558952037673*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Constructing kernels.", "Subsubsection",
 CellChangeTimes->{{3.6005208743915157`*^9, 3.600520889399968*^9}, {
  3.6005211310135317`*^9, 3.6005211312860518`*^9}, {3.60052123028054*^9, 
  3.600521231853421*^9}}],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]]],
 " be kernels over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"X", " ", "\[Times]", "X"}], ",", " ", 
    RowBox[{"X", "\[Subset]", " ", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "\[CenterDot]", ")"}], TraditionalForm]]],
 " a real function on ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Phi]", ":", 
    RowBox[{"X", "\[RightArrow]", 
     SuperscriptBox["\[DoubleStruckCapitalR]", "m"]}]}], TraditionalForm]]],
 ", with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]]],
 " a kernel over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[DoubleStruckCapitalR]", "m"], "\[Times]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "m"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["B",
    FontWeight->"Bold"], TraditionalForm]]],
 " a symmetric positive semi-definite ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]]],
 " matrix. The following functions are kernels:"
}], "Text",
 CellChangeTimes->{{3.6005215470135736`*^9, 3.60052181043848*^9}, 
   3.600521960289501*^9, {3.600680350688184*^9, 3.600680352079165*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     SubscriptBox["k", "1"], 
     RowBox[{"(", 
      RowBox[{
       StyleBox["x",
        FontWeight->"Bold"], ",", 
       StyleBox["z",
        FontWeight->"Bold"]}], ")"}]}], "+", 
    RowBox[{
     SubscriptBox["k", "2"], 
     RowBox[{"(", 
      RowBox[{
       StyleBox["x",
        FontWeight->"Bold"], ",", 
       StyleBox["z",
        FontWeight->"Bold"]}], ")"}]}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["ak", "1"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["k", "1"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}], 
    SubscriptBox["k", "2"], 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"f", 
    RowBox[{"(", 
     StyleBox["x",
      FontWeight->"Bold"], ")"}], "f", 
    RowBox[{"(", 
     StyleBox["z",
      FontWeight->"Bold"], ")"}]}]}], ",", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    SubscriptBox["k", "3"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Phi]", 
       RowBox[{"(", 
        StyleBox["x",
         FontWeight->"Bold"], ")"}]}], ",", 
      RowBox[{"\[Phi]", 
       RowBox[{"(", 
        StyleBox["z",
         FontWeight->"Bold"], ")"}]}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold"], "\[Transpose]"}], 
    StyleBox[
     RowBox[{"Bz", "."}],
     FontWeight->"Bold"]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.600521821322874*^9, 3.600521954172388*^9}}],

Cell[TextData[{
 "Using these rules, it is possible to prove that the following functions are \
kernels ",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ":"
}], "Text",
 CellChangeTimes->{{3.6005220003083353`*^9, 3.600522027218873*^9}, 
   3.600522239615951*^9, {3.6375816772219143`*^9, 3.637581681519464*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"p", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["k", "1"], 
      RowBox[{"(", 
       RowBox[{
        StyleBox["x",
         FontWeight->"Bold"], ",", 
        StyleBox["z",
         FontWeight->"Bold"]}], ")"}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"exp", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["k", "1"], 
      RowBox[{"(", 
       RowBox[{
        StyleBox["x",
         FontWeight->"Bold"], ",", 
        StyleBox["z",
         FontWeight->"Bold"]}], ")"}]}], ")"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"k", 
    RowBox[{"(", 
     RowBox[{
      StyleBox["x",
       FontWeight->"Bold"], ",", 
      StyleBox["z",
       FontWeight->"Bold"]}], ")"}]}], "=", 
   RowBox[{"exp", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["\[Sigma]", "2"]]}], 
      SuperscriptBox[
       RowBox[{"\[LeftDoubleBracketingBar]", 
        RowBox[{
         StyleBox["x",
          FontWeight->"Bold"], "-", 
         StyleBox["z",
          FontWeight->"Bold"]}], "\[RightDoubleBracketingBar]"}], "2"]}], 
     ")"}]}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.600522034296327*^9, 3.600522125572928*^9}, {
  3.600522159916383*^9, 3.600522173394792*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]]],
 " is a polynomial with positive coefficient, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Sigma]", "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "+"]}], TraditionalForm]]],
 " and the last kernel is called the ",
 StyleBox["Gaussian kernel.\n",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.600522181091859*^9, 3.6005222713596487`*^9}, {
   3.600604367460373*^9, 3.600604407425941*^9}, {3.600633626266096*^9, 
   3.60063365830182*^9}, {3.6006804528314857`*^9, 3.6006804530787573`*^9}, 
   3.601558955248292*^9, {3.607435123162004*^9, 3.607435126578198*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607435131187323*^9, 3.607435145995408*^9}}],

Cell["\<\
A snippet of code exploiting matrix computations to efficiently compute the \
Gaussian kernel (without any loop on the samples) is provided below
\
\>", "Text",
 CellChangeTimes->{{3.600522181091859*^9, 3.6005222713596487`*^9}, {
   3.600604367460373*^9, 3.600604407425941*^9}, {3.600633626266096*^9, 
   3.60063365830182*^9}, {3.6006804528314857`*^9, 3.6006804530787573`*^9}, 
   3.601558955248292*^9, {3.607435123162004*^9, 3.607435126578198*^9}, {
   3.637581717582654*^9, 3.637581717931527*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"computeGaussianKernel", "[", 
     RowBox[{"fTr_", ",", "fTe_", ",", "sigmaSQ_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"D", ",", "K"}], "}"}], ",", "\n", 
      RowBox[{
       RowBox[{"D", "=", 
        RowBox[{"computeDist", "[", 
         RowBox[{"fTr", ",", "fTe"}], "]"}]}], ";", "\n", 
       RowBox[{"K", "=", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "1"}], "/", 
           RowBox[{"(", 
            RowBox[{"2", " ", "sigmaSQ"}], ")"}]}], " ", "D"}], "]"}]}]}]}], 
     "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"computeDist", "[", 
    RowBox[{"fTr_", ",", "fTe_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "nTr", ",", "nTe", ",", "NTr", ",", "NTe", ",", "P", ",", 
       "D"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTr", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTr", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nTe", ",", "d"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "fTe", "]"}]}], ";", "\n", 
      RowBox[{"P", "=", 
       RowBox[{"fTr", ".", 
        RowBox[{"Transpose", "[", "fTe", "]"}]}]}], ";", "\n", 
      RowBox[{"NTr", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Norm", "/@", "fTr"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", "nTe"}], "}"}]}], "]"}], "]"}]}], ";", "\n", 
      RowBox[{"NTe", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Norm", "/@", "fTe"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nTr"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"D", "=", 
       RowBox[{"NTr", "+", "NTe", "-", 
        RowBox[{"2", "P"}]}]}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.600631896186021*^9, 3.6006319280829906`*^9}}],

Cell["", "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernelized Support Vector Machines", "Subsection",
 CellChangeTimes->{{3.60052057586366*^9, 3.6005205832622623`*^9}, {
  3.600680463724263*^9, 3.600680475089451*^9}}],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Kernel Trick\[CloseCurlyDoubleQuote].", 
  "Subsubsection"],
 " Given an algorithm formulated in such a way that it depends on instances \
only through their inner product, it is possible to construct an alternative \
optimization problems by replacing the inner products with a ",
 StyleBox["kernel function",
  FontSlant->"Italic"],
 ".  The algorithm is thus said to be ",
 StyleBox["kernelizable",
  FontSlant->"Italic"],
 ".\n\nAs it can be seen from equations (",
 
 CounterBox["DisplayFormulaNumbered", "eq:hard_margin_svm_Dual"],
 ",",
 
 CounterBox["DisplayFormulaNumbered", "eq:soft_margin_svm_Dual"],
 ",",
 
 CounterBox["DisplayFormulaNumbered", "eq:2norm_svm_Dual"],
 "), the SVM training procedures depends on data only via the inner products \
of the training instances, as encoded in the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ". We can thus substitute the inner products ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "i"], "\[CenterDot]", 
    SubscriptBox[
     StyleBox["x",
      FontWeight->"Bold"], "j"]}], TraditionalForm]]],
 " in the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["H",
    FontWeight->"Bold"], TraditionalForm]]],
 ", with evaluations of a kernel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "i"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontWeight->"Bold"], "j"]}], ")"}], "."}], TraditionalForm]]],
 " The same argument can be repeated when computing ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 ", while during prediction we have:"
}], "Text",
 CellChangeTimes->{{3.6005205906937237`*^9, 3.60052060725213*^9}, {
   3.600520734263096*^9, 3.6005208082720633`*^9}, {3.60052231125207*^9, 
   3.60052244716322*^9}, {3.600522602075625*^9, 3.600522631488048*^9}, {
   3.600679822312314*^9, 3.600679824486844*^9}, {3.6006805005202703`*^9, 
   3.600680513041226*^9}, 3.637581782629739*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["f", 
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], ",", "b"}]], 
    RowBox[{"(", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold"], "i"], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["w",
       FontWeight->"Bold"], "\[CenterDot]", 
      StyleBox["x",
       FontWeight->"Bold"]}], " ", "+", "b"}], "=", 
    RowBox[{
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["\[Alpha]", "j"], 
       SubscriptBox["y", "j"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "j"], "\[CenterDot]", 
        SubscriptBox[
         StyleBox["x",
          FontWeight->"Bold"], "i"]}]}]}], "=", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["\[Alpha]", "j"], 
        SubscriptBox["y", "j"], "k", 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "j"], ",", 
          SubscriptBox[
           StyleBox["x",
            FontWeight->"Bold"], "i"]}], ")"}]}]}], "+", "b"}]}]}]}], 
  ","}]], "DisplayFormula",
 CellChangeTimes->{{3.6005224511976852`*^9, 3.6005225680942383`*^9}, {
  3.600522616237176*^9, 3.600522616683543*^9}}],

Cell["\<\
The SVM algorithm is thus kernelizable.
\
\>", "Text",
 CellChangeTimes->{{3.600522576351549*^9, 3.600522581762825*^9}, {
   3.600522634902485*^9, 3.600522689377336*^9}, {3.600632077360847*^9, 
   3.600632141805462*^9}, {3.600633696941916*^9, 3.600633704520831*^9}, {
   3.600680543354413*^9, 3.600680558709915*^9}, 3.600680591255466*^9, 
   3.6015589690049334`*^9, 3.6074352003734617`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Implementation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.607435206105165*^9, 3.6074352116708393`*^9}}],

Cell[TextData[{
 "Following are two examples of using a Gaussian kernel with a 1-norm \
soft-margin SVM and ",
 Cell[BoxData[
  FormBox["\[Sigma]", TraditionalForm]]],
 " either manually set\n"
}], "Text",
 CellChangeTimes->{{3.600522576351549*^9, 3.600522581762825*^9}, {
   3.600522634902485*^9, 3.600522689377336*^9}, {3.600632077360847*^9, 
   3.600632141805462*^9}, {3.600633696941916*^9, 3.600633704520831*^9}, {
   3.600680543354413*^9, 3.600680558709915*^9}, 3.600680591255466*^9, 
   3.6015589690049334`*^9, 3.6074352003734617`*^9}],

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.6006048285290947`*^9, 3.600604832214456*^9}, {
  3.60060492573352*^9, 3.60060493283676*^9}, {3.60063205504002*^9, 
  3.600632055382025*^9}, {3.637589294615818*^9, 3.637589306180026*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", 
      SuperscriptBox["10", "s"], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "6", ",", "0.5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"s", ",", "3", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5998242191740923`*^9, 3.599824229454277*^9}, {
   3.5998252407905684`*^9, 3.599825254780796*^9}, {3.599826597734229*^9, 
   3.5998266032226143`*^9}, {3.599827838897214*^9, 3.599827844368305*^9}, {
   3.599834921347526*^9, 3.599834931257943*^9}, 3.599837534064529*^9, {
   3.599837586265244*^9, 3.599837587236148*^9}, 3.599838156127186*^9, {
   3.599838278004527*^9, 3.599838283845191*^9}, {3.599838320952675*^9, 
   3.5998383940135202`*^9}, {3.6001818323648357`*^9, 3.600181839037133*^9}, 
   3.600184631598147*^9, {3.600193595816077*^9, 3.600193596704954*^9}, {
   3.600414786940836*^9, 3.6004147882576027`*^9}, {3.6006048392177057`*^9, 
   3.60060484081664*^9}, {3.600605120330772*^9, 3.600605236489294*^9}, {
   3.600605278496801*^9, 3.600605370975388*^9}, {3.6006054467664337`*^9, 
   3.6006056337560787`*^9}, {3.600608340073489*^9, 3.600608403369323*^9}, {
   3.600608784741392*^9, 3.600608800561816*^9}, {3.6006138946792793`*^9, 
   3.600613914949931*^9}, {3.600613981095159*^9, 3.6006140038278933`*^9}, {
   3.600631031797982*^9, 3.600631046883752*^9}, {3.600631169968791*^9, 
   3.6006312022651997`*^9}, {3.600632284493023*^9, 3.600632381592064*^9}, {
   3.600632716638606*^9, 3.600632720569006*^9}, {3.600632883363166*^9, 
   3.600632887269599*^9}, 3.6006341300235977`*^9, {3.6012176852743673`*^9, 
   3.601217723056239*^9}, {3.601217774874392*^9, 3.601217829056218*^9}, {
   3.601218048212277*^9, 3.601218049956155*^9}, {3.601218092413991*^9, 
   3.601218094058381*^9}, 3.601218538625985*^9, {3.601639528847186*^9, 
   3.601639529765829*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., $CellContext`s$$ = -0.5, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 6, 0.5}, {
      Hold[$CellContext`s$$], 3, -1, -0.5}}, Typeset`size$$ = {
    1386., {8., 20.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$214775$$ = 
    0, $CellContext`s$214776$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`c$$ = 0, $CellContext`s$$ = 3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$214775$$, 0], 
        Hold[$CellContext`s$$, $CellContext`s$214776$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[10^$CellContext`s$$]], 
      "Specifications" :> {{$CellContext`c$$, 0, 6, 0.5}, {$CellContext`s$$, 
         3, -1, -0.5}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{1437., {74., 83.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006139182977867`*^9, {3.600613991571281*^9, 3.600614006333933*^9}, {
   3.600631166222625*^9, 3.600631204383501*^9}, 3.600632361422915*^9, 
   3.6006324038610373`*^9, 3.600632706012581*^9, 3.600632790117234*^9, 
   3.600632828274665*^9, 3.6006328883788433`*^9, 3.6006341308833113`*^9, 
   3.600673411795135*^9, 3.601214296560351*^9, {3.6012177250354443`*^9, 
   3.60121774461922*^9}, {3.6012177771940536`*^9, 3.601217790779821*^9}, 
   3.601217975721672*^9, 3.601218016027615*^9, 3.601218100445734*^9, 
   3.601218427072694*^9, 3.601559005952841*^9, 3.6015718646445913`*^9, 
   3.602859125092246*^9, {3.602860301230935*^9, 3.602860304963408*^9}, 
   3.607435219113673*^9, 3.637564997130847*^9, 3.6375741093416557`*^9, 
   3.637585932828742*^9, 3.637589234152894*^9},
 TextAlignment->Center]
}, Open  ]],

Cell["\<\

or automatically estimated from the distance matrix
\
\>", "Text",
 CellChangeTimes->{{3.6006805982005177`*^9, 3.600680602556728*^9}, {
  3.6015590758471746`*^9, 3.601559076617323*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.637588572062921*^9, 3.637588576374981*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   Background->GrayLevel[0.85],
   BaseStyle->{"Palatino", Bold, 16},
   DisplayFunction->Identity,
   Epilog->{{
      PointSize[Large], 
      RGBColor[1, 0, 0], 
      PointBox[
       Dynamic[SVM`xPos]]}, {
      PointSize[Large], 
      RGBColor[0, 0, 1], 
      PointBox[
       Dynamic[SVM`xNeg]]}},
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->600,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotRange->{{0., 0.}, {0, 1}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {0, 0}},
   Ticks->{Automatic, Automatic}],
  EventHandlerTag[{
   "MouseDragged" :> (Private`pt$1910 = MousePosition["Graphics"]; 
     Private`p$1910 = Union[
        Flatten[{
          Partition[
           Flatten[Private`p$1910], 2], 
          Union[
           Partition[Private`pt$1910, 2]]}, 1]]; 
     If[Private`s$1910 > 0, SVM`xPos = Union[
         Flatten[{SVM`xPos, Private`p$1910}, 1]], SVM`xNeg = Union[
         Flatten[{SVM`xNeg, Private`p$1910}, 1]]]; Null), 
    "MouseClicked" :> (Private`p$1910 = {}; 
     Private`s$1910 = Private`s$1910 (-1)), PassEventsDown -> Automatic, 
    PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{{3.637588577236641*^9, 3.637588588173602*^9}, 
   3.637588628986217*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzVPWdgVFW6IclMZpLQlC4oWMAuFrDrqoCuCOqzYGGVojNphBBCQui9yNpQ
V3g8ERXwuYpYwGdjUVEWREVaMnnb3q67FgQRWF1UEt6c23LPna/dyUx87wcD
3Hvuved8/XznK4OGVxTcO2p4ReHI4d2vLh9eVlA4cmz3AaPL45eyWmRkZN6W
kdHi/u4Z6t9HMjLsnyMZdXV1xs8d6kdd9n2hjfHX0fHfHWt/N3f0kWgk8t6o
GW+02BarU3cCdbVbtj43qfhIJFL48LhF72fsrDOut6iL7fq3LWuWfrxgcvmh
ksLCz0vGTJw3f8kr4Q93xTImGO9sT44h3p1dF/u0dN2zj+6aVV32Q3FhwZ7i
0srl0x98utvrH9VkjG3au8nnqtM47wlpgHOWG4XtfL669pefvv7QDxWF0YZI
NPpdtLi4IRpV/y58omLhm5nxZ8cbr+0oGQp9Ij7zHQvWL6muL45G4mMLvi4e
XXZoVGE0Pr3o3wrHPtjp1a2xjDFN+4bkuYyqZlhHdXpQkClCcHyGO/ttfnPt
zWvWrDnrjfe3Z9TW1QXrajZvXz6hOD62YG3Z3JdyttTU3Lnlpfk/lUUjB6PF
k4/77ZZaE8GdJEOhT3Sp/filb6ePitZHoiVTJy1bn7W9Vl177S+PVRSqdy0b
+/DvWmyP1ZWZ8E/2M5LnLBynfSnj04MIC80mP1+wY/2Cw2UFkYxgnFoiGVk/
RArHnfX4+zuNMdnGbwCcQNC4l9u59pOXD0wtUWsZfeXct7arq23rtr/19dzR
irZG3ThtzdaMWF1dkTE8y/6c8bEA8MlMf681Z5ibF9u5+Zr1b6z51Uur17R6
f4chN+N/ds3auLTqSFEk8qfCcYtyP9hpEYfft0uHV6Z17uNTh4wWqaSAM3Z9
sPhQZWHkUKSw6vR/37hLXc2t2/nBnxaNK1QSaH7Vkg8ydvmmAOlrw84Ma6Zs
WlatIPbXgopH897bWZdR5u9V2f6GV6ZuogLcSj+j4TYnVrP1hC2bN2UET9y0
aVNG1gmbNm8JfloTk+K2z853H/ypPBr5PlJU3WvZphp1NVS36/e1T44vin80
GpdU7yntYuHW/pzxsQDwyUx/r7UQEtdnW8tfW/kfT/xm4aPXPvX6lhY1sbpO
tVtf/8PjVUVKL/5u1Mw1WZ/U2tzt8+3S4ZVpnbuAAqRftiiglfFXTiBWa4sU
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
qq18LbLeh/GSs1wvNH7ukF7IaPG/zrIOuw==\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train1NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.600613948168401*^9, 3.600613952460599*^9}, {
   3.600613984781619*^9, 3.600613985070965*^9}, {3.600632430678021*^9, 
   3.6006324394629927`*^9}, {3.600632760059959*^9, 3.600632760297097*^9}, {
   3.601217841683545*^9, 3.6012178996634207`*^9}, {3.601217934031218*^9, 
   3.6012179413367558`*^9}, 3.6012181058933687`*^9, {3.601218378597372*^9, 
   3.601218386568543*^9}, {3.601218449702098*^9, 3.601218454101859*^9}, 
   3.6012184852873774`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    1386., {8., 20.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$349386$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$349386$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train1NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[$CellContext`fTr]], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1437., {61., 70.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6006139555960484`*^9, 3.6006140124361277`*^9, {3.600631134408229*^9, 
   3.600631156152076*^9}, 3.600632442234915*^9, 3.6006324889386044`*^9, 
   3.600632670795189*^9, {3.6006327915627813`*^9, 3.6006328094417877`*^9}, 
   3.601214371380438*^9, {3.601217883436945*^9, 3.60121790023698*^9}, {
   3.601217942569275*^9, 3.601217968762043*^9}, 3.601218107421936*^9, 
   3.6012184546693573`*^9, 3.601571936310586*^9, 3.602859157011862*^9, 
   3.6375860488656054`*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[TextData[{
 "\nNote that the only difference w.r.t. 1-norm SVM implementation presented \
in the previous Section is that the ",
 StyleBox["linearKernel", "Code"],
 " used to compute the inner products between the samples has been replaced \
with a ",
 StyleBox["gaussianKernel", "Code"],
 ".\nExamples with the 2-norm soft margin SVM and the hard-margin SVM can \
also be similarly obtained, without any modification to the training \
algorithm\n"
}], "Text",
 CellChangeTimes->{{3.600633734023837*^9, 3.600633762487398*^9}, {
  3.6006806134703293`*^9, 3.600680765709626*^9}, {3.601559081232439*^9, 
  3.601559082916675*^9}, {3.637581822110478*^9, 3.6375818269573317`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"runSVMExperiment", "[", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", 
     RowBox[{
      RowBox[{"train2NormSoftMarginSVM", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        SuperscriptBox["10", "c"]}], "]"}], "&"}], ",", 
     RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.60063376783984*^9, 3.600633799012179*^9}, {
   3.600634018727207*^9, 3.600634021419395*^9}, 3.6006340741687193`*^9, {
   3.601218354623122*^9, 3.601218368367414*^9}, {3.6012184626827097`*^9, 
   3.6012184719714117`*^9}, {3.6012185142264338`*^9, 3.601218516602757*^9}, {
   3.601626556640802*^9, 3.601626565263352*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`c$$], 0, 5, 0.5}}, Typeset`size$$ = {
    1386., {8., 20.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`c$457765$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`c$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`c$$, $CellContext`c$457765$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SVM`runSVMExperiment[$CellContext`fTr, $CellContext`yTr, \
$CellContext`fTe, $CellContext`yTe, 
        SVM`train2NormSoftMarginSVM[#, #2, 10^$CellContext`c$$]& , 
        SVM`gaussianKernel[$CellContext`fTr]], 
      "Specifications" :> {{$CellContext`c$$, 0, 5, 0.5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1437., {61., 70.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.60063395696488*^9, 3.600634022691804*^9, 3.6006340748757343`*^9, 
   3.6006734975619097`*^9, {3.6012185016681843`*^9, 3.601218517924493*^9}, 
   3.601559032899728*^9, 3.6016265662634573`*^9, 3.602859184103071*^9, 
   3.637586116663261*^9},
 TextAlignment->Center]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fTr", ",", "yTr", ",", "fTe", ",", "yTe"}], "}"}], "=", 
   RowBox[{"getTrTeData", "[", "30", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"runSVMExperiment", "[", 
  RowBox[{
  "fTr", ",", "yTr", ",", "fTe", ",", "yTe", ",", "trainHardMarginSVM", ",", 
   RowBox[{"gaussianKernel", "[", "fTr", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6006337750492973`*^9, 3.600633807983213*^9}, 
   3.6006338717603903`*^9, {3.600633904185114*^9, 3.600633905192507*^9}, {
   3.600633935598153*^9, 3.600633983199975*^9}, {3.601218398120228*^9, 
   3.601218420453926*^9}, {3.601218475151033*^9, 3.601218496491725*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
GDWwUMpe13U87xc4HnP8rO4v9haOv6HjeT/B8ZjjM6f+oYnT7Zb3+mvvNzge
c3z9Fn/8UGZAtPf6bO9HOB5z/OQ1lWt8Uv62d72z9yu6Xpg5Pur3wanqP/OO
5/0Mx2OOT1V39/mWW+94P7+939HPb9bPv+D35Z373vV+fns/pJ/frJ//foWe
P3wY4/389n5JP79ZP3+lgZVGPfKO5/2Ufn6zfv6JOxLP2HjP+/nt/ZZ+frN+
/kvPjy/p6b3/4v2Yfn6zfv5i5RcFlYzV9YT3V1xPMNeT+q0fFU3dOUHH8/6L
4zHHTw4q/TxH4Uc6nvdnHI85PupNz0NF7njH8/6N4zHHp2qwYdLHgY91PO/v
OB5zPPuJ49lLXM8xrzfsNZw24kyBgKgjut5nPbZhb6Jl++VM9be1m7Nmp97P
sZ/4eTCvX3ln9E71RZtNcu60A7Zc6bBO92dv6e/HMnN89ilDWvTsHigXy/j2
1ZvbC/R6evF1WP0qtyfrn//t6O/DS3Zf6b0+TGg7NEWbzXq9Zn/xfMG8fiar
UzzHD0V2ye9NKFI7qOBe3Z+9xv0xx6eIKNQ/Ot8BOWXK95flyH1Y92ffcX/M
8eNXz+hSbGqwnLxOurefpzqq+7MHuT/m+An3ps5pNzHE+/UnpC4x9L0w3Z/9
yP0xx08qOtmdPzZcTh2RouW2xJHe68P6sbmSDT8uz4wbVfeTIafkL7K5VatW
814Pfbs+Pd1871m5QcuD3/er5L2eHX9V7e+pOy/IDRfum7uuvPd6dLJylZIh
Wy/LjS/vDr75ofd6cnpIxa//3HhNbppr56NspbzXg7P7yo8rF3RTLrGp1fS1
Wbzrefe/F7baedZzUKNLhY/O9q7Hcb9mf3KqqXe9LfG4xf4bGbzrY/ca88c/
POk5aMb5pm+me9fDuJtZ8qZo5F3vSnwUEJs1rXd96j5yzvZCx7z3x+xJXS/N
/PuIK5Cpfo36nlNFbv0wbP0Db6/a/tT108zxJfo1zdowpef6OZ++Ods1ztu3
tld1PTVzfPfgmbdaR3ie3O2jsOii8d77e9u3en0wc3xQxlO/dZ3gOWpvn1mP
73n3Zw/rn9+sf/726QcPquM5VarNbd+ufqjeS2xrVHNsMu/63D3x9LSzQzwH
NTt+adkY73ocF5hm1caa3vW25PMGffYneqL34+xl3h+zj7md9/eYPc31in2M
2cdcn9nD3M4+wOxn9W37V+ff9i9m/2L2L2b/YvYWZm9h9hZmb+n+trf45+F6
yvUcc365vvLvm59H729t32if2b7S88f2Dueb1yfOF68H3J/9ws+DOZ49o37s
/YD6Masfe37xfODzEX4eXh85H3y+wa/H6xO383kHt/N6xc/P5xH8+lx/uZ3P
J7id6zG383mFng92feZ2Pr/gdq7Xen22zzP0/LHrN7fz+Qa3cz3ndj7v4Hau
79zO5x/czvWe2/k8hNu5/nM7n49wO68H3M7nJdzO6wO38/kJt/N6we18nqJ/
//b6oc8T7PMVXR/t9UTPX/u8Rc9fe33R5w32+Yuub/Z6o88f7PMY/fr2+qNf
3z6f0a9vr0f69e3zGv369vqkX98+v9Gvb69X+vXt8xz9+vb6pV/fPt/Rr2+v
Zzy/+byF5zfXY27n8xdu5/rM7Xwew+1cr7mdz2e4nes3t/P5Ibdz/dH7b3t9
0ePZ50UcT+9zB97s+EXsJl3f+T4MPxj17xvs3Xo94PrA9Zv335j301zvuT+f
/3A7n//w6/P+HfP6dL5Z5Yt5B23T/fn1eT+Nef3hesXjr0ia/NqRGvv1eXGX
k+HJ1mR09XrXqeyjvasDg3W9O71++aTqTUP1+tVosa/0pUxhut61P5Y74GhI
mK5vDQdvLNO0q/d5LtfXo/XGry+wNcrpcLZTldDaUbreZZgddSvVL1G6viV5
uH/VL/e8v4895Z7OiYKL+XT9Gtj59vR97X26XjkLq45xZ/l0fXocnmFRsr0+
XY/y5j4xbM9Fn64/SwMGXU/6yOf9/WRDmlXO8pdP15evjxfuly6x9/lrtq/y
1sr1j8/7+ymeNf3lm999ul4s3B574u1dn64PmU99cj7/MZ+uB2Vv3u0S+5tP
/Qe2GpFz2Fifep+2pMsP75r7vD9fMPU/f8wv4FPPlRMOVPv+rvfnLyWKvnFh
7grvz5tJ3T5weK2vvT9fo2GmTq8Xp4j6n88ru6WvuKBJx1hn7d3wqYFlvc9H
ozJ+H55/e5j6zLov7+ZRH4apx2Lps1R8tMb7/RQ1YnPWnJLT+/54fMN6J967
edgdtq3O7B9XHnTzp4it2LlOqDttedq/+x0f7MT8Xrrm2seh7vV9AxPV7POL
E5MvY4Y+n0W5j8uV65Vq8TFn6UeDyiSaHeWeHB5W7PMuJ520E0aOmXAlyk0z
bV9CoSWnnUOFLj7JmNvnDiuxe/x7yc86m2s2iAwr7XM//yJ4fMryMU61gXeG
53gS5U7JOCuyzp8xTop0LVpsCopyqxy5fDso5J7j63J76txvotybIwf8U37G
fWdZ6o5vL/nPT6u3KTPdah3rhHX/uWuJ/f6f98tjkT12PXYyTbqWbUKeULfj
+Idtck574vyxpkeSaokOuANmjr51o1CI+/x2vG9IhiNu16C/fii9aYd7ovyL
3M1SH3VzbZ44rMX6De7axeuu9mpw1N17bm+KtMPWuyUP5NoYnzzc3ZmpS6o9
ObY6Hbau3/3BlnD3QnTJgKl9dju3R9y4FLM/3J3q3Dw68/5u5+zCjJ8WLe9/
vzfm3Kn7vgPOmsEzJw3+JsLNUu15vaHLDzmnfzlb8OONEW7JtwNOvVoU7Oxu
0jwmf1//86fa67fJa/lfrx8u/6fEMp/rDBgyqMipC86a22tPrQjxn68ft03t
3uqSs+5UvnsPbvncc+WXjHx287KTPjKgUPsXPrdLsXH1rnS86nwXNyRxu3c+
d/b+T59Vi7nmPC5Ze3YFfw/frmv76MNON5yGszJWK/fW516sEFf/+K2bTtad
WVv/+sTnTnrVrF/WMtHO6W/uHTh8zecW+P7OodJx0c7gJleTXg72ueHNT7yp
svq2k6/036+KL/e5iyZ+terzdneciacPHH082Oc2P7n34lc57jpTh07+uPMX
Pjdz5IIWP5y66/RYVC/k0roI9+LkFmfCC8U70y/N3N+8W4T7T+c0Ma/mxjsd
/mq6IEvtCDfHtlcV3pyNd3LVvplt56Nw9930loH1ujx0ao2LaZDkerjb67dh
yyaOeeh0u157+L6+4e6AQYvrDCqX4MwMjeiU/Z8wt/T0KW8P3kpwDg/Zsnrh
lDA3u6/Q8v7Tvd9/+t2KzIN+ij3sLp1Ydnv3OO/7tF/eHB6dZv3/fl9W67On
B2/m3uaWrt8sd+2l3j7g/WnK0h1vpFzWwU26sebZNnEh//P92fr8q9al2bPT
2bwg0+UO77zvwzq3/LZchsneHpjQ9YO8nbJ732+VX1g6U5Kp3vv3R9+ERBTM
571/nxaVps2WoP/9vuR8XNtnTpYEp9DT6onr3ojU9xs3W62ucCKHv5fa1bPN
a+Bz8iY+lfHgHwfdmL9zz4g7GOzGn+s8oevdQ26f7uXX1Czmuh9t+7j2ydkh
bvrrZ+as3DTdTb52Vq+5MSFuugLbv41POtjts25gv8Oxke6n9ZJUWHsm0skb
tfK9zv4eI9NmCY7zX6/2X+w1//juSHdE71IfvE73wDmeLH3n0Vcj/e+3hnxf
NDjWf/1uV6xVjmB9v7F67awyE78OdjcG7GiVxt3jtkx0vM3SzsHumPAtu54N
3ONuzV+8WYFi3u8HGHCzZDmn0hF309mGcc9PbXcn3F2fPNsO7/uM8HtpWvU+
E+omvC1TpW/UAmfNjE7VNvUK0/cX814V2B8+Pcx9feHDORc3rnOqbfy14zdr
wtzcxXItmN44yAkYsn3jZzm83w9QcUfBJx8VDnfv73k+7krebc7+hUXbtuoU
7nZ40HhsmjE7nMKlR+xd2c/7/mLsqeI/5hviv543LdCm5KgTTvESrZIkO+J9
X3H2lzUVRxyPciPKzn7d7OvTToanw+dcTOHT9xNPMofUmpXN5wa0a1ax3MMz
ju/mgYXt6vj0fcTkOuXnrP3K52YoPzu47oBzTtD1iBG3Anzuk23dg64NO+f8
maHvjks/+fR9xOefLcpQ2/96le6380tj75x3MqROtfHGRJ87LcWisQNSXXDS
nutT4sc1Pn0f8eLl5s9ebvC5SSqOvRXT/KJTterPXTJt97lvPjt35f15F52Q
F3+P7x3p0/cRJ9/Fn9p/3OdGZM/T/9OoS07LRLuCYs76r0dls9ZImveyk2/s
uCuxd3z6PqJ6+d/DFt/zufteTd791LniVBr+POm+eJ9bsNC+Q5UDrzjB7equ
zuh/feb7iMiy/T+b88r/eA8Otnm396pT/euQdw/e+NzG75dteqXwNSftNz0m
ZPS/vvN9xIRPO79b7Xdk01MffF/hunM89PrnUYmOuQU6dyudePV159WW1SHp
E3u/n+HP+2lPnPXfvjHTikvFtt9wJoWmHBzkv//n7SuniSh40wk8e2dNOf/7
C76P6H0s9428f/rck+/65qxV/pZTKf5y3Hn/z1f/avu2NX+95TSKbBWxzP/+
RN9PHMicfPxDn9s0rOumtm2inS8HPiwy977PbXeo467Pp0Y7o37M2WDYZZ++
j1hbPu/bdBd87oJaDR8cyXvb+WvCjJbFT/ncPz/bEHKu7m2n2uSDiRMO+PR9
RNDGgGEHdvvcTOPGbg6Ivu0ETGq89sJWnxuV9va0bxPfcXpeHz0n2yKfvo/Y
lTOhxxz/+63pXQvWybjmjnO//VcTr0z1P186r/02bv8dZ2XbxpPy9vbp+4hf
rpx5s6ijz92b0DP4VY+7ztI9ZZ729b9/693rdeFRA+46u+qM7VrkE5++j8hV
q/eW4A/97+dudDpRrFSMM7l40n3Nk/j0/UONV7Mzv3kV5Q57lihX7O0Y58uU
IzKfOup935BnxojbnfdFue2TnGoStfCec/HUiTz7hnvfL7Sp/SJtlcFRbp52
T8tcbHjfqVk015zKZb3vEyIKRp1YXSbKbfEs6YfZEsc6F3+dcSaht/f7NbI/
X5bJ1zPczZ5nbPHNlROcKQHNjt6rHO7m6RVxY8OkBOfs6MfP33sepu8PNtTo
X6HDnTA3R8ZS/cqneeR8OPBJgaZhYW65zDdaBlV65NS8/lnY035h+v6gTPj6
Mr83C3MnZUuX7ugt/+vPgzsznjUOc7utrDg+e8wjZ2bsmxrn4r3vD9Iuz5tk
5PlQ91nKVZ88mPXY+fDbXQ3Pfed9XzD9ztZMw1qGusFJTySU+/SJU6/Rjejp
ow5oX2zslCfu1ob9bp79OzMXGB/iXli+bM7AZgfdms/OThgw+Yj7qsrreZvf
HXCD+r+aMfXpEbf72EK5a3/nuudDznwf+sUBt0fIkPpOlOvW7JuuY7vy+92r
7YqW7hYZ7BZM/t20xvV3uVVmva4a88FRfV/wXs25f07bdsSdM6xovQO3trjL
6zdMW7zfUXdPn1m1Zqxc6wbU7/x154wh2jPvPX2ervS5o+6sOu9Gp10Q6C77
KFXpMteOugUCWhzcUyLQfVj8vRfjOoW4Lcbmn3/58ly33exWRd9+HOJWzXS9
xoKUi92mP+Xo2bhdqFstYcU/L7qOdn7s23tb5yWhbo2F/4QXTj3LiUhyukH7
GmHulEGVfj3UfqXTtdXojbWcMDdLkvnFhvZd6bxMPSN03xX/v48d5zM2frrR
qb+i3KGfd3q/v6t+VIqMx56Fu2eif2/UNs8+p3rJyWMX14nwvj/o0vvElXQR
7t6/E6YuqbPfKR0//ljtfhHuyQrZx+Qdcdj5q/CPyQb6IvT9wMdJ6/ierI1w
v1iZplvFocFO79DnTfs+inB79I7q26TQUWfU7eiYdPcj3Fnj8iVd+vKIM+yD
9rVP1YrU9wMltoX8ejxfpFs79NT9Mc1CnJ2xEUkLlo10S7XO3rFIZIjTa0lA
no/6RrqtiwZ0Od0zzBnVdvTq7gGR7uAyGa9s3hLqxGaOPlRne6S+L7jV/tbx
hAmR7qyJdcvmyRDuLEw5ccbB3yLdAse+btQlXYTzbd2WVePuRLppuvfJ+npj
pPNbwMNfvtkb6V4oeSF1aN8IZ9ydavN/rh/lpmv7ZnD9+8ecI4FJ7uzrHuUO
zdlo7dR3x51Mud3lwaui3Gb90zWpnfOUc3Fn9fW1dke5r3fu+qrUiVPOdd+8
p98/j3Jzvpw3/LeCZ5z8cTuH+v6Mcr8Z/F7rL5qecfK1qT82dSX/3gtI8uXD
HWedwA5Zn7Wp7H+9q5m8UJuDZ52tyUZ++aKnz10aHTz5WMnzTpkch6cs9l/P
huYaGf7LkgtO+k/mzWt+yOc+q9fKF5b+kvN4+LTixa76X9+ij4R8Oe6y83Gd
e2GZ/e9vq/654LPSb684sc0XfJnT//73+/x9330/+Jrz99+RA6r4Xw9ef3Q5
7K/n150HWVNWGOh//9xm5NZG8f1vOncaPk15wv/+uvyxJR+Uf3HLWbShRfk6
t31u0qBpTbofiHZOBv1891a4z40tN7dzl59vO0X6FugRuNr/+pGr2aZpn99x
dvdN13jmUJ/bsdXjljdT3HVudC/Uc6v//XHxrk/btj5515n7dEjo4iz+63Fo
lXmrJsQ4B/OvPXM/vf/1sMnSckkWxDgrvr//+b3LUW7Yxxtav6juvx6O31Ky
9Qn/PnyZLfu5dvectoOytft5UZQ7cciJp92f33PmL3gzK9u4KLfnm/VPoorf
d06FrSu26Ksot3nPiS/Tr7vvtGq2Jn2Jj6PcNj2rnoh5cd+5UrdA1z/HRur7
i0WfvAmttcH//q3snc93F33gLM/eadmKaZGu2+JQs0pdHzipw/dm/rRDpP96
eTtnveAHzpqNbZt+MNT/fFn0VfT06Q+cQiu75l7/QaS+z6gd/rpdkXqR/tfT
gHsbXz5w3sxYNXVdhUg3aeHkTUrminMCfhg27V7ySHdS81bh0f3jnDq5r3eu
nznSPZf825eZv4lzKh5s/eNAN0Lfb5Tb8v2zOdci3NYxFze4IXHO0ZOVxr69
FOGu3n+hUU9fnHM4uEajuJUR7ux6SffvLhXv5K399NG45hH6fmPOzWfRowdH
uAGti8W8HBrvpD1cZE1CqQh39Oa0m4a/jXc+jtjx97u73u/3ezkvLuWcjBFu
2p9fTzxf8qGzrEdY2c2bwt26VUvX//rkQ+f4tKxXXxcLd/tUb7q0cWCCU32r
71CqJWHu6EFNc7ce9MjpPnrHlnKZw9wNybYNnF3tsfNq6Vrfs+Rh7uPv3ts6
sMFjp0iz31s+nO/fq5U/HZ0v9rFTMuXp8M09Q92PDpaaFvj+E6fZ4zUNpuw7
qM+PahfbnSnHo0PumofvB5TM4H1/kf2DNvV2TFnpdu4S//Oxn0P0+dHmImdf
7k3w7941EX0ufvODG7grJGmZlJH6/uHarD51qwyP1PcP0yY/zzLtXqQ+718/
vcvIYdsi9f3DPxtKTK3VIlLfP2SK/C1Z7hfe9w8tXz5bXqNHuPvdwfafdQ/d
4eTs8LZdrmxRbrG/Hw06VMHn1P215hcHbkW6rfp22zNpZ6yTbEHlv7sHHnG3
Xpn+freArW6Fnj+07b7Wf36fJ66c5epD5/8AcS91Ig==
    "], {{
      {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
0I09LsNVAoYZrhow1HR8t2fAagGrB+xluAb7aH5L3N6+WzNgVCPPTZ0YYf/A
lwlYNmCXgM4BywcMNFwhYJBhl4BjGnmu6Vh8MH1HvTlLAa+zl3d4I8+6HBHh
APNerpT+3OMCxpfS7/u0UvrvLlFO/++vAhYvp+84+GLllK/gyzRyjbpshJ0b
uc5fPsIly5kOv/J329M+DO91aaRdYMVG+pqPt7wVyumPjq/6iuX068Vfebly
+tDjU79MOX3T8Xlfupz+7uBLlbMc8GXLGU+aLuXMj7yWL6dvPWV0Lmd+4DtL
A+i7E/lK992Vzafo5zvMfjvfvqTfJssHxJ0jf4CfLR+ATzHdnrZzgGXilzzE
76BBf+PO81vKQNbgF4itHb6GZwu/EsLCV4UQXxLGFb4myLvC1wQc3Z3zVZwn
QzYwR9KHhQ8K342z/f3t+53lu4mG8N2pATv63diAfuJjSkmrfgJnnJYqpb2e
c07MQdP9bqxplpLWzH1Lmv5e4ynnPkPqdY/9QHp8r+FvxuWZhtBxknVkTJyG
3FGenu470uCfOrqUPt/bKxOhL/7moy1jzUb6s74V9Rofcf3Na6yydseAUw13
Kuc+DHszxZ7JGNeZ+OaPdd23pWtI1o9X1XM8rN1IOzlpWJuyz4z9Hdsxvvwn
usZkP3kT49aKNLdHeGU99yXGuQY407MYnMng3NqcWvqeY69dPWCNltwDZp+5
sNuuZhxnSciTcyXYi9cMWKsl7bxriG8Y+d6LDaGRabC5YmdlL5ln8mJdgq28
7BoI+zs4dlPsudh31zHE7ruuITbUtU3X5HoM2zo2eGzq2C6xNV7r3LJ51OHG
erZvm0bq/djl/7S+1AubK/3AXgF9QRt4V7JtJet0fT31qi0jnx6NpNt2jVxP
sE9AvqzJqAs4tnjsodhK8aegz9iXwE4/j3HYRLG/YF95xxC7C74nh6nPc17r
+VruAe7UyOcdG3n2gm+wR7E/jw0I+w97+/Qffcf+Pzh7C/jIjLQP3rUc1hno
3a+q8/M99jJsZUOijFfi+SbXWK+oz3/gmuRW67mu+b5nftiW3jfku00sn30N
zqMcr/2BsyzHWBb0GS0P49MP/3A2hf08bNALtOQe3vzi7Et1EuccyWjHC/x/
ovlvKe35Dpvc/bW0y23WyOdrHIsn2/f4ORwh3+P7sJ44tN1AmmIDYP8JnuOM
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
4KwuZzU594qfLH6z+LLuYf+ca7r9Wjp8SwkLX+x9rB9+zdSVfPFlJg78r3P2
tdzXL/ybicOPHF81fE+5i+QXce4x+FUcP2fOTxZnTwmL8+WE9AP+1Xv7HfcM
cO8I949whwD3vzBGb/Dd2y0ddyi8KI++LF6cjyUvfMX3FS/Ox3Jetji/Wpxn
HVHtOGtLiHyCPxhXz8ovz4vDpy+Ir2N+xTnR/SzvUuv1guMGeVHc8fCKdYVf
XzPuOtvHvSbsR7EvVexlERb7SITLufe1ir4K7CWxt8T+Ff7YnBvlLCT/sOFc
M2ez+e9NT3Fs/Ku7388+FftVlMfZ3MOkC3tX7MMRV27LOQrfQMbZ69Yb+fSG
+LXWHbzYl0K+sBf1nPKrs74SO7sXx/xW7OkRdnX/jXas0tqx/0c9uG+CuzyK
+ydulBcOl3aU/6d9Dx+V7Ps1lb9ri8OX+FbiK805CXz3OTcBT3GnC3etMA9s
Wu24A2YTeQR52l0+Yh6gnNVNs5lp/pDX4XH4Hv9syuP+kN8cD9xD8rs495D8
IQ79KI+5Cv4u6nKY7bvG9PiRky/pGT/gjD3ahLwnr9UcW8zryEfkZs12wOPM
i5yt5qx3cR8K9UJWPiM+Vd4H54w4+sGBpmHOPrjacb4deX+EY5X+ONL+Ad/Q
8USa8y0HerRbF+LP8x0yozi7zlhttbzirhfC4g6b9ewP2o3sHiKtdxMvzuGD
49fPuRbOCJyrnEJuFefeadsUyyduQccNdygU93YxNxZ3ezF34TNcnNldpS3X
fujO3QzRqVc2ZC04y28564pPEL7v+MgXZ3o594o/Nr7y+MhPNx4/91Xb0h5B
Gau1pc0IfPW2tGWAY3PBLxm/b+xG1I8ysTnNFse28qnfYWv5TPweywFfqy19
arBvrWmI3WsNQ8q7zzrSBvzAv7HeD9uO4nwzIWdV+X8P92FyJyf/vOHuO+7I
4784M8T5RxH3dnL3Nv8l4p487ss73nfcEY6P15Jt6bvFfip31rPHyvnl68X5
j9H95tvftRY6e/HfHe7p45893OF391xnPjkDim/8t7bnQetenCPu5/lOyuBO
O+62G2WbqDf/K7rLdvIvoGnioy0HfIzlU3Zx9yj1PsO+ghcmSUfoxz4652O3
8DwpZ1m38twq51c5X8v51R3EqS9nYDkrC09x1poz1pyX5Wwt+8v0CWdk+Y6+
Ih58MWlAXgubd3GOlpDzu9CCvDkPS39zFhbaLN2WPkL4Di0hnaBpJ+tLGzg/
yFlZzuAuaH7gnDfcxrYtYDw4Y4Wz7LRhKfPGH2lJQ3xOOKPFvvl19cSxcbB2
x1bIeRLOi2A7/Ic4ebAOx/6xkuNyiHUfZxy20gfk6wnyAfhE+wS8OF9Bvqfb
b/RZcUaFMyvYNDkPgz9DF9fMg+Rd6orfzAmN9Ee8L+q/omtsvutqvQbb1rG2
rY/tY03KHSv4Ld2vD8VO+lrcavmUzZ21N8pn3F17k/hxjqdb7NtRjj94fKx8
uqNjFXwnx+qpTR3/MGNccp4N34Yb6tmXx5v3FvI34/Kb1uQP+rCveRf/djul
qePfbqMdN9+35p3p3ImO7rF2W8qkkiEy6bvWjOeeyH+1ZshZh29bM6Q8+PdE
29bL8Xmi/H2y+ObWEVnydWvWEf7a1nYU/9wg5B7g4r489I791G+KOzkI0X1Y
pzJns4ZDl0XXR8ffxHfMx+j1rEPQxVk/HCDe3bkFfB/zYy2EjXFNZTD65sWW
zdqXu83Qj4qzCvjHFv/9Oqqp479f4OiSA9XDxjnfIMs3s03Uewvnb9q5pfoW
+FaWA87cfIn1YHxy90RxXwVhcf8EIefyOdfwI75WrXm+A56A3jMMkeuccfgJ
3y9tImX7nHMQ/zUOewnvCpsr4f9a8zwIIfehMh8gm/GrfNp3v7fmuZVvLZsz
KfAQvFP8D+9+6XSz4+RYxwc4um+T/LiUY4OxMtv60rZZtu+H1jzrQQgvP2xI
eQ9aJvUo7gZFn3jKOv7WmmdnfrbN4Mz96BeUgRzh/wCUQ8j/BGjf6uoF3JMw
3rEKPdZQR1jaMUy9i/sUwJe1f8CpL/kx9p607F9tH7KJsqnTSson+pl/DDJX
P+G3v7TmWaFfbMPOxhf/qzzN+tFW6kvbSLeKehPpuqk3kX5l5TR9T5nUg/Pl
vVzPcKcYd1lxBxY+Rfgz4S+GXxW+WNhI8THCb4l41tWsr1hXsc7+UXy2ax7w
Ud7jUtyDdXul496p2zx7eZB3zXDHDL5Q+EhRBnfJXOx9MzMth3Ub98tcYtwh
3i9T3KlzuXkdaH58x1043K3D/TmcxeFczV/3uFbyfjrub9uikX5j/EcXmw5r
KtZSI/XV36TR4UeFXxV+avO6x/SY37LGQn6TD7JwhD5mGzXStveTdFm3kfR8
rJ5to3zuVOPeIO444qzxVN9x3xG0WMf+eNw88V/jThL83rBf43Nf1g9/P2lG
Hvyb61797bgrDHsi9hXoxB1tLxV0r+T9bdzNwx093N9zhGeiuVuIu++wP5K+
uNcSnDzIr7hTkxC7DnTFtoJtg7MCTfoEcx4IGzu24Oc82/2n5ZMOOw3nDJr1
w/6X5wlIz/1BV9rf/LPxVn2di7uQrrG/X7Bfi/HzhOPncXHG3WPiPykrwYfb
bsoYaX7Q4hjPUHOm+ljPUoNz/9sN0gg/Zc7t4j9Q3MdEnS72zN3z9bxHijw4
732cvH+L4+5G86Lu0ADacc8RPMYZYmwA+BJibxjqOF5ZnWZFZUhf9aEl1Xu6
GIfMmW07i7VHsRZZs61jjbKW+sFeyrk11Ju6Wt4wZeeq6nhLqycU6zTi9jC+
WFetZl7F+o3v8BVdTH/RHdVlyKuQ78h7zonMcC7jfpR15W+Ad0U7v3LO20VZ
u7w6zIPOS986V4EPNL74J8wK0ug7v6XsQiemTsXcw1zU37YWd2kv29bxn5nl
LPsb52PKw88SGYm8aHJc9rH8H5zbsD9iL8UeyXz0iP20knPDz85XvzmfraJ8
/830s0xzqnrHX2fDW5Nuf537VO9GL8Fm9Kc89HS1w2+6mCd+tT6/KPuwoWI/
wjb2lN+CP+E7vivO83zl/PO7+gF8w3yJPlHolIWO+V1rh076vfN6F+fj/7R2
zMfg9AHtKXTeb1o7dNJvnfsL/mYcr61O0dTWoeOW5T/qRZ3gd+pVkq9/Uh5w
v846tqeYL6EL94uyj4K8u0x5iazi39XcackdnvyzmjvVuFttPecz5p+/GU9c
J+fVLZXryDxsw/xjmzvhuBuOf3JvLF43P3Doik6D/sU/dbBFYlPhHzvYIsE5
h8xcDl78gxy8uEePOvEPOf6nXbVeyKnDbMcR4lXT0A5sNszZzNX4SOOvj58+
/sz49OOrjv/zBsbhd9zmO/QJ7qAs7oMcZV7zSYPif+BbWP6WykFkapv0KP4r
voF14r4/5n70Av5v12Y8/7trNx3/waMN/COc/+Q1Kh3/PUe+M4fwX7j5LJ9/
6M1jX/GvuHnt202lDfMA/ITOytlu/ufO3aRb2z/EF3cHjrAM/seOrYv7Swt9
Gv16Ad+Rnv/UdZIe/EtpfnmE/yRRxvzSgPqi43CHH3cocu8H56E5I80ZOezX
2IA518ddjfwnnfsb+V8fNADn/4I1ea3ZfkOfmN92wJfd5dkDpPch8g3/dFqw
0vH/ecLif/WE1JV/EEI/aM3/C+vycvG/dvJukXfgG/bbsPVjR2bu5O4V7hMu
7l4Bv8533E+Jnzv+95x1LM5aoIdeazz39a4jX6D74LsPv1ImugJ6z8vSort8
dI3pGN/ctYUegf/fFvIg4wHdizH6h33G3I8ugO8+YwBaFndts4/KvSPcP8Je
cXE+hHmAO0Z4x/4qZbJnjEyhfezFsm/MXS7EF3d1E7K3ibzmPAx7DNCGctjL
ZV5BN+dMAPTiHXkh43lHGu6BIQ/qB50oh7LRb16VLldLA3Q6dJB37YOrfPeq
/LSuNGbPm7MFjHV4HNlQ6DK0k3ag138kjr7/sTjnJJAN9M22poOmF0sn9Gvu
t+GuUe7AKe6voR3sb5Oevi3OzIAzb6Hfscaa5fkOznncYl1If5N50Dbu6eGO
nN/lffoTvYy9+ZfkrSss52WhRZl3qPmv0cj99ZdN85vlI6O3Mj9k2f8DSjfR
kQ==
          "]], PolygonBox[CompressedData["
1:eJwtlnmUl1Mcxu8sLb/3XhVhODhk7ThkX8p6HFtCpJSIVGSpJk1FzTRjRjPR
SsvUUE3KkiWRPYQjOTpHllCqsVXiFFkj2T6P5/fHc97nud/7vu99v/f5fu/b
rl9ptyGFIYRGUAympBCKYgjnZyGs5vomKAABTCI2EfxD7DzwIWOTQUkuhF3o
ccQGgR+bhzANPRg+BBzcIoR6dCn89ei588Hh6N/Rg+GzeHmF3gE2twzhT8bq
iF+pZxaF0AfdEz4KbIUXgNvhlWA7vBBUwLuBVfDIc6bBy7i25gPbcp2J7gq2
5DznCvhmxntlnqO5FzH2DfGVjF0KvySZZ8Smwu8GnYk/zNg9ehbjvTOvsR5+
NGNriC9i7Fj4UNCd729A3wa/EKyA55h7H/yY5LnKqXI7jPGmghCWos9GPxTN
e4KN8GrGToUXgZfRY9Ed4cXgFfR4dDnvX4ieAO8Assxrmqd91TfnvIbO8DGM
rST3a9B90Z3Ai5k9IC+cAppyHjsN/iDji5UbsAG+AjQHzcC9yTlX7i8g/oly
g/6A3PRHXw2fDhLjW9Bl8Blgt+g9vSM5J8rNu+gu8F5gLvf3RV8l/xGrI58l
XBvQ9aBVtAfGJO+R9uo99GXJHpFXtoFyeCmxJcHfcAJ6WbTXGsEh6Dr0RPz7
Jfpm5SKaTwJ7a39AgH8LRsJfI74TPhschB6d/C6tSWsbkTxX36hvfSo618PA
LvhL0d7VnlYRX4xeCx8hT8APTPaOvnlO3sPy8kb25B2uByTXljw2Ozrnyv3+
YHi+ZlW7d3J5g+v74ETtPVgLPy451gV9vLwbHdMeaa+0p9rbUXjyba5fgx6Z
PSqv7pdc66rxB9B7oSdkzqFy+Vn0sy8G65RrMDSz5+S9V6O92wnUcu/SaG/L
0zXoPVRz8N48r5bYqui5yrly/1F0LyrI9yp5Ut7sqjXCP873suZ5rx6VXBuL
yF+j9hZ0z/xNX8EXgk3E9lGPY+6+ykHmnnY/sfXR3yIPyUuXJ3tNPUW9pUg9
SrXUjLxqbrKX1VPUWwIYie5AvIr436AM/Rf5qIR3JP5C5ppT7SVQg97B/LvU
y9C16PasZyw6h65CLydeo1pEV6CnoqvRX2iN6CfYr+nw5aBN5ndMZu5hYF7m
Hq5erpwpd63BW/DTk/dezzgDfmbys5Szs+AlybWxjPU0KJfqIUXuiT3U+8Gc
zD1dvV01plrTOw9Vb4j2qu6ZEV1DqiXd0y75jNBZsQAckXxG6Kz4FH0deoH2
POdvOjm5R6pXqqdvis6JcrMBfUNyTpSb9egB6MfRq+E3gu3w58Hn8HGgTXLO
lfsmzUE/F83Hqqa1V8oxfDxoi342+l3VOjOS90h7pWcOVC5V78V+5zXJnpa3
9YyblFt5Vr0H/Az/Fdyid3NPebSn5K11jPVn/tOqMfVO1UCyh+Ql9ZDr0c9E
zy3XGZHsOXlP9/TT2ROdy1LwB3y0+kOx19CH+JPqKfBB4LfoNWgtGruW+JLo
XFaCFuhH8r2pBH0O+qRkL2mP5hM7NzmmGns0+pl6tv4BdsC3RZ8VA8D30Xui
vRmoGoxeo9aqHrIzukeqV6qm/o1eg9aimmiZ3GPVa/+vsegcKVeq0cLknCg3
qplmyTlX7pXzX9RLk3uBzszHovdUe6uajMkekBdUk63gP0WvVTlULrdGn106
A2flz6ySfA9WL/4u+t9GZ9xM+A/R3y6PyCvDk89KnTk6e+RJeVM9cfdkz8l7
6rl7wtsn14r+UaZw/5HJ/yr6J5grLyXXqnrarfD/AFh8WkQ=
          "]]}]}, 
      {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
+fxLzIG7a8mjyN83W9vPKTm3PC/y3B55X63lWCFTOJtdzHmPbCl8s5ivHZWt
yKqJ9fRfO7ye+2NkCjJmQec88etth7PQ8+vpH3oU9tuoe75a+pwwhnPEiXF9
z/hN4vKe8+xt+zDNfrC2UB96Q2f5nW+vy5tznQ/zixeyBN8ZfIyLO5GE+Ekv
of7Ife392zLOmri4Ifft92nLOOvpYobcj1myLfV4dPjC73lKKX2e8dXFZ3fZ
trStsDcm7VXTLi+lzzK+y/9ty/0YezHm07RS+hW/Uc05h/8/d1nwSX6ilHdK
njR+pe3gc/xY9H2hqOuCevrkv2QbPe0r+tNSbWmLYe+xTFvu29HRD1P2Xx6w
QlvuG9kzrtiWZzDsCY+JtFvk46H/6Osgy13WkjofOF3henCV8cvsK/7k3KvB
Vxq/aO7cPGucuzfPGV+6LfcP7B2K+zP0+VLrIN947EQBtwYs35ZnipyRXGTd
lDnWdPD+PdK/jnXsnkq7vx3rVQf5Gt7dWr6CPxuUR4W/4VrVdh9GwsK3kRD7
DnyHfajwPezkvEHnIx07ET6S5PnAdr6yLXi9o7jUnHOsjQu6DiFT+pTS1x6f
+7flb/rBPGMeEj/aucacYy51qLb7chKSD92ru3O7zXZYe5kzrJ3IePSc7zzX
/t7f4HlK1Pt7/D45wo3a8je61Wn11HVPree6+61lObNG7kJLzrtL0m985Psh
8typLPjWPQCy4XvbApefxOdnf1Pn/LWM85tvv5jnGMvQ/jhlze21pPE31kk/
frBs4X8JLVhD2EsUPhGE6PtrRN65AX8y9sjFgL+qKTs/jN+zW1JfRO9Hx0c/
e9p4b8eKew1D61l2SD31uGfMN7ie9R8W4ZHKVeTrg9C1lu9j4GOHr91LtbQ7
osPCQ/dy3lTLN6nOrae+vEM9+a638pq+Qi/6e7Z7sd713FOxt9q6nmvyq/b/
b99k/flXa0v9nHkDXqThw9zZfOT5VDqQXvipFH4rr1nvcNca1hz0xRddq6+Q
xsSZG+zP96+23y1HXl9mXtbzQVH+/WhrYISrt+XvP5yH6H2FnbWfdU2W/6A1
OH4knpdaX+Fb9Jz5kI/XKn9r9ZR7bfW8p/y1evDYWsrrPyIcX0v5WK3nuVun
tjx7O7aWMrRSzzMQ7iPv4FnyTsaPqaXMaqrnfVx8GfFtxLewY1ue3y0UuPYJ
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
4o3ez96bMyj0+HuMX1NKfQ49Gjl0mzw3Tf2LtJMth5y7Nup/JOrfvJ5rxjR5
DfqyVnIfFb2O+uGBqdbNOne8tJ8lf93heBznN9o+yXZIYz/A+HFe2lzPNaBc
z7u12G2x4x7kmBDnPgz327jbdlyM5ayWtGlypkI/wQU/KvxhTtP/4oR/+Jic
qF/H3fqNnKovxXH6Ujyofwd+HvdaB35Kd+kTQpk7rYM4+uG7+gLtoP5X6JVL
qBMOcZ/Efmmwez3ih7nnI/6QbeKPgr46p7ndR/49/azwOTtD/O4Tr8IHbYJp
M/UvKfxHjtEn5Udl9fRa+qr0+4ePzAH6nNxqXnxeHtUnBd+Uh8ULv5lCr6Wf
E/Vr6SdOe+kjM1tanqDPynjp+4h1nFtu978p/HEICz+d/f7hF7O/bZxl3ZTZ
zj0NeBQ2HfZBQ6Xxxu5FP3QNWsy9EOs0exvWr2KvQ0ga+yXWNNLQiea6HlEv
axlpC7vXJd5bvWkh9Z53K+16ECFr3KbqnsV+fQHzwhPsUdk3QUfwQrfA9r6N
e2d0C9qnD7TDuglO6F/UTZz9yDv6vfURF8odYXvYXzjnwq6FnYuzPPbu7OE5
y+tufJg06277nd0Dco7Wx/JbS+PO4reIY1DYzqD3WNthTMYZUu5IccE2xPng
puLH2Ry2I2h5uHiRNsq8pB1jHdu0tNvsGIfRlgO/750DhZ/sA87j75wnpOHr
y3vrvMWOXxxvphfvrBOShk8XPnCFjxsh/nH4EvP2OW9aMz/wO8P/bGfTl5bH
+YYPGn5utEMZfO14C572kCX4u+1ebn9fuHhvmJC3wfC7450v0qiXd8Qoj58z
7fOWNm2SlzR87Xg7jDL4NpPOO9zM+63F9Tt1qutr2fZ/y+2+z8uJL3gtaxrz
DX9ofEvxE1zGtH5+W8O5Dl3Aa0/rWMF5j1/aDsoV8uK/d5I03VlZsJ35TjAv
tN9FWtLeKcYL38ZdxfFA60MnPNFy1HuydVOmsD8yF/H95o1n3mGGFvgX4j+I
Ty4ynXXgMWUN8uwX91Q31NJPFx89ZCr7K+Qm8hJfYNYY1ofHLUcaftPIXOTo
h5Yjjs/6o+V2H/bHLIePOXIf+fqt9cGv+J0/aFrhl4/s/Fp8abvw3afe39RP
bqzlHvVx8d3WvuKb+bF4IY/x52ZdZD3EZx7a/O49j798nOtrdZvraulvD09B
R8YMnlvcMSBvg+O5qGmF/+jfPF7O9RJaw1O0U9wdIfz73WxxIR9+6LPF7xPx
LfzZZ5lW+BPDg8W9FPBmPYS/C//iPcyHHOmovC7s1B1dn5G7yGLsGx/q/4xN
Zq5+yNg3PtbnGfvV+/o5YwP5SJ9pbCkf6LvMmcVX+v5i9/hE/2Rs8l/ob4wO
xp6Q/SVnB9yX445dYWNCp+AcAZ9k0tj/0nZhKyKkTWwRHU3jzOJr/ZjZv3cw
bTPrI44NAdsWtivOWb7UPxm7zaf6O7NHps/gzl6JeLFX3ka82RNtZRp7Mfbe
7LnHiB/xw20P28NY0ynD+cLn+pMfZR+K/X3vSrs9ClzIt4V9LexPhIX9aWFx
PdJ+0u+RtlnYOXqaNsp02mMvton4YQuF9sW9RkLuYLImo5/eKX+gG6NLs/6z
V0N/xr7Dnqiw9xBi40FXQM+d5RpPOXRl7FbsnyiDPYt9FfEvbYc20EVut+1p
0pE+ofsPr7TvI0eYRhl091NsA70fnfxT2y9sErOtFxsV+7y3K+12THjuY/sE
3gtpt51dS72GfWOx7yFkj80+i30a+0h0/u2No+dvZ/w987I/n0dbza213LtC
Y/aJ6DczpSn6DXviwjYww7Q37HNhIyS8VjpONY3+sI+9Xppebdr7tk+975hO
f96yDsqgV7KOsX7O797ttlr2AX5l7vIWzKuMX0u+w/VyhK+05DsxhKTx/hS+
E+xHeJsKvw/8KHir6/WWfHsawGdqmmXwXcKH6U2/4TvFO0S0Qxne/XqpJdtD
f6QPjAlnsx+6t+XdrucjfKElz5fZE7H35c2vF1uy/EfiAn68B0Ze0j4R31n2
5ypxou2p4vqaOBJHv4aPi/MoQnif/UybaeiU2DnhNfY2VdPGqztup65HOvpx
d+ugDHeZ8BfDB+w487Ln4A01/Ljw6XpLOpHvHfPi38W7YjOkO2+b4duFj9dc
Q9KOtz72au9ajnrfs27KwL+LOvbQDj+fK1vafeBGiPfb8lTxfxXoYbSBHlz4
rxEe09LuczbWfr4pD9LeGNMYm2Ol0y2WI16cK7NW7KbMQlYhixcR1939xtxC
Tnc2bQf5tzhXJ2SN2tX6qItz1aVsYyfTiV9jXw+XR8Y7JvAOvkv4MJ0gLXeU
d9jrDpVfhkkvxoc9wKiWdh/BI+SzoeabZjsjHdcjLMPYsE8YbXv4ThW+V4Ts
p180jW+9tXdh65klvoz5bMMTHOfR0v1K6wDvl41fJV+Msm1spdiLsJfuo5xA
J2Kfuoo6FPYS/qMF/5NW7Sf8fsjv+JFM8V4ud3L5/zL8UfBF4azmHs/We9Tz
+9Ra5nuorf0/KymLD0pRL3ehkUvc3+A+B3Kjm3FkzsbGeSOwu3HeCtzEOPNo
Pr8hZ/BT//t9S+vj7gXzCx9N/DeZL/hXEWc+ci+COPOLexTcq2AOco+CODKQ
uxDEi3f6iL8UtHym+rcJ7285Uxd33m58sprvO75QzTsnT1VT3nYVP2QRedta
2+Uv6cWbjODE3AcX4sgTcKefyNh5pQf0vluaI4fb7Dc80Co9kNXzSEvkAN8q
AnTirgCyF59+7gowZ+nnh87lj40zdz4xXsijQj69r+yZabkP5H/wfkteJX2O
c4dv9GOGeamLeQqu0JI3qninibe7eMuYd+s6a7Pj9zaG1/t7ur/JO826qWuq
9RWynxA6cSfvLvmWef2OuDJf3jXeLG2gC+PHnSHuEFGGu/3UMdTfwwzv93df
8+9v+Li/HzAPddwgPWiPt/jgG97V20w/sGm15B146NxqygfGDLw4d8Iei132
efnwUUN4j7qaHE/uc9Dmg+LWot21uzS4299Fecq+LN/SLvbSedrSZlq8Ncy5
97Xa6rHZdzPEt2SqcfxNNjLER2Uj5VNhOxys7Oum/CQNGwnrBevNsHrqByPq
aTc51jTOJVo8mzjac3LOljlnqHjWcJRnzPg74PN7vXh3tU3k7yjTSWM9H28b
6APDxKmP8hU5O1y77NWeJc6wbWzh2MyxnS9XT9y4K1zIa+Q39iDWBNaG1/SF
wCcC+T5bed7bdpDV2JWOsAx6xXBxwk51tDhhRxprvLBVEd/cOgr7EyFrUA/b
L+xnI6x3M9Npj/fUeKON98nGSNfivecbpSnnmfgs/am/0p/6T3BeR/wPfZQI
2TfgN8S5xV/6Ov2lnwH+FL9rf99BGhR6DSFrHnn5Tv5FpTFnEE/Jn8wtZBK+
icW7qoQL66vYWV/FZ5wnyOox9fQNHVvPuw/MIe4ZjfZezBGe7fxP350l63mO
xftnvDfBfbetPBdCx0ZXafMOOnfL8fHibTzeUOyi78f69fyPCHzb8OvifIl9
BHsHzot+04eJs9DVjPPuCffdtq/nO1a8DVf8TxQh7/YtU0+e5x3W7aQZfMxZ
6OrSt/gfKd66K/6Pqvh/qt+s9/9MJ+0R6+btOngX+kHjNaONGxnjeupN6E/o
69gGuJvNveoWz15n1tLezx3j4j43YXHfmnCG94O5JzxdG8St1vWB6TO1Zdxi
GucJN1jvp7bJ/ek2/TZvqeVe8G3r/tE7zQ+5N+bOdPFe0QOmvWv7N2g7mN3c
fnf8du8qU5470mdrH5kpTtyJ5o0f3r/hfSneSOCtBN5t4j2E4p2qf5vGuxHF
uxS8YVG8acE7Uby9sIjwqTYk7lbvZBvFmzu8wbO17VCGN4UWsj3a+Eg7GffM
fy233zsnxK7GPfVftOfxNlEny/OexY/a8/703PCmWt5p/1lbHe9nfKbtDXvD
fdL0C+l0p7Qp3qDiLjh3wos75YTcZb/H/pB2l3Q8xfInGb/FOni/6m7TT5Uv
xtoG48PbRsWd8hMtv6+6LXpt8SZF8UbFB+X2dyw+1N5ZvIV0vHxGm8XbV+NN
K95Oor1v7MO9ze3vHzE23M3n3aS9pMuE5vb7+oTFnf4z5aev7H9xz/5u64Uf
eReK96GKd7Kg35fS6C7r3sP2yp45zqjlPOONqaOl9+7moz3ed9pHuu9m2pni
S9rZpuMvdIPtF2+hjbbe4o0wxmB/9w3YROHFT7Rxwpsfa/tkf/+pa+FI13TW
9nXreQ/2qlrKReQjPiIvqHuhk+JDim80fqToIG94dvu3/1c112DOzOfx3Bzf
nI6W4Ty8g2fi+O7yP0Dct53pb+64PaycQ9fk2y3mIY0y+KtRHz7Y+GZ3Ek9k
OLhSdyHTb7Ys+ii4oKuy7rykTsZ7pbwxyvoKvjfaH/Z8LypP2fu9ZJw93MvG
//Z9q6af+RR12MLO8Yr5nlVvQ9cs/uuOTQg0uF2a8J4u33i3dV71P94spU+3
SX/6e4d95u3dv1w/Nq7n927cAalnnRvWcw1grNA3eSPnC+3lD+m3iG/vI+6H
0G/hHeRj8S4g4VbyVh/TmPfIuG3ku96m8eYeb/As7hwlfVtlwVaWKd4K5B0f
3tlb1DK8y8PZA+cexJFh4Eo+8OUshXeIOIdDLvOmD+cZxRs/hKTR3iLWy5tB
X3mmwds/1E0Z3khFZ3imlvICnHZUfmxvnPlHvcX7bYTFW2uEyzsnkb8rOUdX
MI6sWcbyrGXLaTfZ03LkK94TLN43XKK5/b3DJaXHeOlXvEe4nfgx7zeX7g36
mdxcS7nAurKKcmIl48i/pcVpZ+smjo8Db87yNu3/A2Kt2tY=
          "]], 
         PolygonBox[CompressedData["
1:eJwtlXmU1lMcxq9Jzfv+7rU32d4ak1IpqSwH0Y4cdBi7bGVfmnJUsu9SOSVC
JvsSyTqJiWypIxSFE+ocTCVMi5g0xSSf5zzvH8/5Pc/93v1+v8+vYujwyqqS
EMIksCMYH0PokYXwKHgcflgKoQa+itg89Ldgd/TxO4TwDXwtGIJelw+hHr4G
1MO/ou0Mxh4NauF7gBHEfgQ/5912DLGf0JWZ2xTbk7aJ6H/RreDX01aOvkB7
gv8KBmdeQ2uNp882dC/wAPo+dJPmBpPQv0ePXUv/3+BjwH6Z9zxVewF1xOag
ezP2qOSzzUb3hD9HfBb8TXAo+gf0cvq/hu6BPj35rK3BqOg70F0sRZ9D7Eyw
BN4GjI7eg/aitrOIvYB+H94KfAp/CcyDfwT6E+8M8pnPOAG+jvh6xn+NHow+
GSzjAReiB8G7J+9tJ1BF34PRg3i7mehu8HOTx+oOdBdnJ+9Vd6y7rkTnmoWw
CH0afCB4nvnno0+A7w0mw5vYw17wLxizC9hI223oRfBdwSb0negJ8D7wavAE
/EHQD550Rvh3oLY0hL7o7+GLQU0uhC3oexh/f3RsIFgGnwx6w2eAp+B306cx
85paWzmgXJgOnoTfSLzAfPXom+DjaOsOnwKmKV9At8xnqoY/BPpnzvEF8LG6
w8w5+Rj8DuZoyHxmnb22ePYN4GZi09EfwOeCvuh3i3fxF7hduQUWwHO0fwaO
QJeRbyXwifD50Vw5d3hyn1wxJ45F3wU2Zz7ze7R/rpziLcr4TiW2kG9pcQ/9
0HOj71JjNFY5odzQG+gt9k2+i23MsU9yDiuXB4CH4QNo+zjznJpbNaxa1h3p
rq4FLTPX8JToHFeuq0YfgXdSPmWuyXHwXsm1pjEaW4VelflN9DZt0NvZy2rF
lavRuaIcXgrvmFzbpaADvHWyV/3HmAK8LeiJbg4q4O3lQfAWoB38nWhv6Yq+
El2enJtaU2vPJr4V3oW2y9HPoFegd0Yfgn4ZvQFdgT4PPRP9B7ot+nz0K8oH
9P7yLPSr6D/R7dAXqpbQK/Ve6D7oA5NzVXekuwqgA7yBPtvpW5a813/QLZM9
Qd6gN3mReFetCS8wdBj6l2gv0RqrtVb0WvK4OviRyd6mnFPurYg+mzxtObxL
cm3Jc+Q9ymHlsjxKXnVcshcoh2foX4A+KPOd7ZbskfJK/TOeVR5G373e5F5i
H0a/nd5krMYme5PO8LS8JPnut+jO4W9Hn11rXJH8D9K/qMC3Wt7P9wDVF32a
9DbRbyOPXB9dc6o91ewc9DS9edFjFhfnKBTf+BO+JyV7qTzvxOSaUm3JE0fy
XRJdG6o51d6pyV4pDz4luYZUSytpGwa/CtRl9hB5yYjk3NY/Vv/aUeh6/G8N
enSyx8nr5JnyTuW0cls1MjzZc+W9mvNq+DXJa8nD5GVvRd9dZ/RlxG5N9iZ5
4C3wG5K9UGuO0b8i+u7a03YRelN07iqnG+CN0bmrnN6st4juq5zeqtyOzn3V
xEZ4Xjktv0Hn4COTzyaPvw7eAnRC/028OTwl77URHeGvR+e+3nQI+g35Z941
MVS5FT22I/pidE30WprzEvSs6Lm0h0vRzZL7ao4S+JfR3lBezIX/AaBOQls=

          "]]}]}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["

1:eJwV03V0lQUYwOE7BWlESkFCUGmdpCJIh4kwQlIJQXpSC3J0LIDNTWEWKF2C
khIqoUgo3R1KSSkh+Xx/PPu977tzvnPPd+4t1jEyondYKBQK96dXtlDoxeyh
0Nf6gr5EOAnscNvJzyTaf9JkelPeXoED5oMcIpKKbtP0MEdYz1S3X7SyTtdK
+o1W0Q2apK9QlZepxqtMZJf/72YTk+wbNYWPqW5/jaPmY3xCH2q41eS4+QQn
6Ustt2/1FKc5Qz8+df9VZ1DbPFPr6G9aT2dpXZ2t9XWzNtQ52kDf4HUm8xZv
8yaNeIdkGtOEd2lKBCns8Yz+fGb+Xf8klQE0c2vOWfNfpBFFC7f3+Nt8Lvj8
RNPSrRXnzReCZxJDa7c2XDRf4h9iaes2Vy9zhasMpJ37PL3Gdf5lEO+7z9f/
uMFNBvOB+wK9xW3+Zwjt3RfqHe5yj6F0cF+k93lAyD5MO+p3GqaP8Chx9k66
WDNoRh5juP1DXaKZNDNZGGHvrN9rVs1Gdkbau+gPmkNz8jij7B/pUs2lT5Cb
0fauukzzaF7yMcbeTZdrfn2SKeaxdDf34CkKMNVtHD3NvSjI06S7jQ9+R+ZI
ClGYz90mBN9tcx+KUJQv3OLZSwJT3P7Q/ewLvvf2fvSnL1EMIJUYYolmEANJ
YwhDGcwKzximW3S4rtQ4XaUjdKuO0h91pK7W0bpN03W7ruEZczGKk2gfo2v1
WX2O50kK3pWu0xJaklJMDN6Vjqc0Zfgy+M0H78QcT1nK8ZXbZB4CSw+nQQ==

          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
      AbsoluteThickness[2], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledCircle]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.14637212643678166`, 
       0.43134474436762316`}}, {{-0.09357040229885061, 
       0.980862563512372}}, {{-0.09357040229885061, 0.980862563512372}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[6], 
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
        StyleBox["\<\"\[FilledSquare]\"\>",
         StripOnInput->False,
         FontSize->24], {0., 0.}], {{{-0.2695761494252874, 
       0.6117834312509736}}, {{-0.22733477011494252`, 
       0.010321141639805631`}}, {{-0.22733477011494252`, 
       0.010321141639805631`}}}]}, {}}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[2], PointBox[CompressedData["
1:eJw9k3tMk1cYxrtxCaCrDFizCDKcjHXDoW6uWkx8YBAhEVlpnDLHiFY7YSAw
54yruBU10CwDu81FYxcsmBEGNooEcBT8Cr3FrNBCK9DSllasvQADx1VW4/hc
+N7k5OT3xznnfd7nORt5pVz+yzQaLWVlkTtTveYYt6uXSHj1ij9BMoq1h879
IX3QQ7QflDkjP7MhV/Mam5/XTfHtNMKcPNdBeGhB4+yj0wjpKRCE/3iHSFTz
1PYqG4SzjLTk0gqoXA1FWTQvpCU32T5NPQSetqjld9yYOZe0ZszdDg2xltO4
4EW4t0st7u9Ap/VUdWjcNOL27xV+1HYX1T3Z7MXlMdwuinxLzurGyT+96yNT
/sZM6tZrsYEEvvutwtbC8IK5uL335Mc9SJHPOiqDp5DJU5bHs3pxP/mViuFZ
Bw735ewYilEiv6RTEyiehnCn40lVgAq6fbufyc2TCC95W+84rcLk2aCowsOP
KSa2jdZfjnTjLv3ZFxMGNap+b5XPLTxESjpZGnwpPNDAr7HgjN8p1L6hA3dz
N4et8EF8vGzXt8F9yF1XzWo1WZH7tan6www93kzSMmSVXopX3/c0RhfVdOox
ONC4JXTeBFrYgwgpx4Dt/ZdvbCwYhhgxM0tKA1RRzSI604ybTWQN4Hm0UWpL
NUFF2vPTIBipBeYMj5FiU3nYYr3ShRfjDDTihI7bOXjUCcdKt/QzRvBOa7MF
gVqUtZMCjZQf/olPLES+CTUfuApCLC6KmV1LSkXhJPx5jHt6/hDEiidEdo6G
4q+EsRd+4IxD9PPnEqZ5CIfoW7vDEpUUZ+W8zwjP11Kc6SMsJ2Zc4Lz30ori
YSTkkQYpUHz1kqry6TB0F97NSgi7Q/H5PZWJN3YZoCDj1jAC65XMf/0b7kMU
EPv9TscI/H37u5cPtODiKTsv021Bkiooi2VXQjpWvGG5bxT9HZcqyoNVxNKt
g4XPBVZqXtIXDdjALL3Oavb9hYIJQ2k73Y6Q2Rh9XUwdsbmSvNAOUfz8kuis
FKu8en4u7vV9687bQTM8Va3flE50ycmyY0+tUkOLHkN8y5HdERIHFi7u+Kc5
xQHf3iDZPZMDAkle1aMmDazZtT1Tx5wYkW+ytLTJiFW++khXG+BtIuq9K4Gv
dWI+oq732hELgjt+OV4md1J6+8l4zzvRqOIiw3kLHvI7jT7EVFPotkTREOYk
sjTi08doTS/nb/lm4P98Gdww0Md5vxZfJ/4D1bkUNw==
       "]]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], AbsolutePointSize[4], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxFlAtM01cUh4susgErjwlDEaaRaB0PpxgFmRwMrKCZDojjJWOAZQibiA4S
ZA4E+hqZuMS5EAkbDlQmWYUOLGN0p+VRVqBgC5QWLPTxF+RRygyCIIG1Ev67
yc3Nl5vc/O53zr27Ui5GpW6iUCh087SsieU0daP0OVKZB+0va7RQdqOdvcSd
w8RdyQEmhz4oHpH6NX02h9Qj6sKERBHJZ2QxFXadWvCsTw5yKjdhbM6wG1f5
F4gM9tYf5pvwQk9Us+KcDn76Znvyn3tNGDp5m1nJbAM/3j/7DDZmPjzv+Ggz
AW/S+4uTGmYxnvqB0MarDd4NOXrxgOcszjjEuFBKGsE4HCrlyYzYvfXrVL8p
Hbwaqm0oOGbEu5z8vw/VDEK71Q3YkTWN2unSN+Lab0H/6ov3jWNTmJu2GFnK
qwY7RlRL8L0pHNhfn349tAPMae47ukxhcBHtxKqLHgQ307IClybRqyOlY5Sj
AckPvWft0ieRd8qjhCaXgv9ZTv4fL56hfobnwHUUk7w601vstp0AeuxsOjP1
GXr8tpYhEA9B9KfmMTiBPJNzRHWhGioEroorthPI6j41VEbRg3JHzjmZfBzX
3PorNccHoLl+vMZt+inWBToxHGO0oDJfT9hFYDZ94VKcoBd4Iag+mk1gkdaf
3hsgRqbFvzuBYSvdFFZGH+yk5q7oKASWpkyyuqyU0BK8p8OWMGDQkKSQES4H
X9uxCX6WAZWs7JcinRLOZwVe2XLEgAltsWsZ4lEIshRAq0f2cuR8PE0BdQqz
wAt6zP6Oy6zJHABWxlsRNS56pLkW+PZV1ZHs7MRoYYkMkL6Wd2thvw6bGhvd
yh7ISP6ip0Tz+x0VydfFpwMWl8egijG05+SCFuPq9hazRxQkN5g03tIQPUxJ
bldlemtJ36/9Ph3DEp670Ml5AJ5zNnsU+I8h46CqtahKQDLxTmbRElsP3sbP
HypWR7E8/2Ptv50j4FAkn9/pOop2XwYJ+PF8DJ/wYWeParB624yP/byA5Fee
OR3Kih7wvvpLd+viE1yRnREuR9ev1+PkE3xb/ThMRX1M8s9d4fOJFfp1v3PD
mLvJejw5Gtf9CoYxKWYLp+o+Bzf4Gj13X21CMrnfVBgxfpxXC1srI3ysbIZJ
ny8PtV7+ZLeaPD/D4u+hCuW/VjuFyQj4qtTSMUrMK0/gEA8kwH09Bsl+3+CN
/BtcGUAZiRTySRZJvO96HXsEWnP6b30HkMY/cGL5jhzar3oe7gnrJ/Os6K51
vkftJ/+D7+9Zi8/nybGymqdqvmkAia3lgf3PxI+XPjq9TYZJ7mm+wbtZ8B81
BGoZ
       "]]}, {}}, {}}},
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->400,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotLabel->FormBox[
    StyleBox[
    "\"TRerr=0.% TEerr=3.12% Marg=0.0535\"", FontSize -> 21, StripOnInput -> 
     False], TraditionalForm],
  PlotRange->{{-1.1742456896551725`, 
   0.7442169540229884}, {-0.15644794775238186`, 0.9863304025088373}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.600633817859412*^9, 3.600633879575737*^9, {3.600633916698587*^9, 
   3.6006339915512037`*^9}, {3.601218489652751*^9, 3.6012184974546328`*^9}, 
   3.60155905782364*^9, 3.6015719848275137`*^9, 3.601572961195009*^9, 
   3.602859191746373*^9, 3.6028603327363863`*^9, 3.607435246854671*^9, 
   3.6375663428422832`*^9, 3.6375742022727137`*^9, {3.637583922046226*^9, 
   3.637583926164082*^9}, 3.637586133285777*^9, 3.637589376085411*^9, 
   3.637660403344537*^9},
 TextAlignment->Center,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfQdYk9f3f5SN4t6jaiu2dqgd1qq1Q6u2tVpt1aqtttY2CQkJI2GHLUsQ
ZAmKoiiCAwQHiuKse1YUF4IDZCmCzEBCkv9735Xk5b5ZL9/feP6/56nR3rw5
53PPPefce885977zV4u5fwtWix3WrB4913W1M9dhjWj0HCdXpMmsG4vVbQPy
J2U0C/xbxWIRHyrkP1Us+GCxpqN/2dmq2p8X7gkKH3m+TgFaeqtaH5ZHeYSA
/++mUrYJnp9KKV3r7f1IIgl23VRQ1k2qVLEWoL/tTfe9Jg1zlaIx9E5ObKm/
t6RE4hPsmXS0pHsLQuM7w2nQ4pjfBTim6BRHd5VSNrq+ts5cqlC9JX9x7G6o
f/qAoiZFH2VL8e2swOB3DlbJcHH0ofteg4ZydvO95Nvegbl2j6VKO6X0yeW8
MN+ZqfdbWEqV6lusNwaQoYcyv2ugfIoJZRL6lxnyqZzfWBhXLRGLWWbVYvB5
xivqlOVLOapRrO7Yc1rCM0PbrJFPxR91F8KTA9LLWG2oBspCK3OCnUJPvGTJ
VapZtCwGaLHQQ4Z4ZkZz8blvzxQ1sDqw/1/++mr4HsnmxyypSjUXfaivoaR0
PjPPOFq6YLE+1dRAOiHKwiuyg0Qhx1/gZBWrNdj+YNhjFuhj5qB5GQLgoHdC
ibZcdP4a74vuZ+YxQmKYJBABB4lDjmkRTvHf8YwiCV2PYQpr9X57xYHdyZsL
+pU2KwZ3NNy/mRPstSTuegNLgXyrIRZdpAix6HxmXtfBwmU0Ff3LwkLV8WrH
hdS0H/NvFd3eFdjJ9H6vv6iJFOVODMoPhj2GgbJ8U/6yoHytR+ilmPCAR96S
UO/kI/fNmxS41+qrjwphCTqfmdcliKZoSQgQm9RadvHarhBRvdAZnQxQzUMo
IG6y4G6Yf3q/e83ATT5E3OTadw5VyRbo/hqTr1lPVduT29sCNwwsbFSyfjDk
J7Rfzzee4TQtW+mtbC25kh26TrN3yLTY/nfVP9vvh/v5ginPefOJsm5tStUC
3V/jUJGpouHcjXXOLTxHQbNAIGgSCDynbSyRfmfQr+m+ns+INz6ymssYY/89
APylYrHZbDH4sNFoReSGtOCKij7SF5+cNJv7QNp6/99zXf6cHaTN6v9G63/o
c3pHS/sre0jbckjbCgOf++h/FXv009mE33yAKX7fZqnML+dsscfh8yU27fKO
L40jdRVrG1RTUzP20aNH6P/9jlGO23n0rmpVYB74Izh+5YmRlNFl3QWWquk0
y2zGP8diZw+f8TfLfvE6hDz4NI+bI9xJkOfP4Gz5DDRb6eGBfqNJ+c+tG93H
jf7WXZPywHeXRQfN5G/3/Zq3ze6dpVEoZQvy5zZ6MJ/HKFvI6gq8+r//reXY
n8JYWwwBp4PYmMdFmasHf7IUBciU2Fenj8TMHT5jDTNif6DEzOe3Ptxwr3Lv
jOtV2bM+bX+WijWbrUrb7DV+1Fxxl/B4ULnnc9WzLWPBnzPVB77/HeNh1tFw
0met35oeby1ay9rKkMfdyr1fEDxO1xych/MYUf5g79+DPv4Z7QdTHvNaH8Ze
q9r/zVmkD0BWOI9pF04kkNptMo9zGLFfdm/3IwXPlJgoKsTB7q2FwcyI/YMR
G/Dyaa4gLlKAEktlSGzy1bPJPw6d9nuXEPspe1fgR2/McuoSYg4bY5yHjPnB
lxmxsxgxa+nLY54D3v+uu/3iCNY2hsTGPfx3x6rBk39BkRlETO0ucRJfnjm6
4esRX3LUJAz3iwFwhzEDo7xyx2Yv0hGb3NMAuMP4HOPRTdl4yivU/6+eQKW3
M+RBdRifq7WcPegjzGEw5UF1GDiPibcubVky9LPfmPE4gxGbm5+77rORMx27
hNjq1I3uI8bM8+mS3lM1Zbp6FIFNWIz9OZyV1sWagvMYWvkoixxFpjyomoLz
+Pj6uU3fD/v8zy7hQdUUnMe8w/vCPnrjGydmPE5jxP5KiRePHPO9NzNipzBi
3RXY5I0ujzCS5n3H/7LeD1l0eXzlkGrz9tKosQx5DKp5vJ836MNFKHWcx6Zv
ndKJZaPrF9ytTHkAW1w4FJ+IcB63FntlEzz2znPNNIiH2tfilL/PywqbPuJr
niblFA30oi9x9Ia7YJzymi2JbmNGf+epSZm66DVZLicJK2067RkW+HePtxau
Ze1kSAw4VeeBE+ejUJkSe/futW0rhny6HCUmhGvehwx5gA3LrOFfsDV5aG5Y
BMiGZSKFNb4BszCd69I9af7vjpojouPKV3PVAoNszhhwBWu6gW/O99fkStUm
CFd+wdWnpnA9od5e+az1X2Nu/3MYaweFa+7ZR3bSdjkD8sOfP9zHHfQR5jrS
TdUGnNikfy+m/Dx06kpmxNbBZ8UJGI/Zxw9Efj7iKweDeGChGCbpUnM9KKnz
Ko7y1/QtPmOJVZ5hKJmkMPWhpM7MOErnmHB+37d+DDQMZdckAc30QKVO8MMx
qINVL0M7KrAesKzRT7O2Z6nze7W+wmZtc7W5+Ab5rEY3Ei5wpzfJkJ4yT+vp
6ylVwY3s6Yjyh3sRy/0J7aML3PUa1lPGmTq0pxaAgZkO0zCyfx/dOL950dCp
q+j6xyf6p+Zuo6mpjBNr+saPalRG9u/bozkR00d8xdPsH3U60Tt+VrjngGbA
WHoSaPq8BkNTXLFrq+QdIkKzy6Ce0KW4WHoyZLQ92WMcZF5itNOgN+f7GQSZ
dgIzkikInprZI3s8Rkw/gzsVgYFYzLDPvnXlB4UDJy1AsWQwxEJ1AEZiAWGc
34Z8uqxLsFCN1UgsUy6f2vjdsM/XdAkWql3hWPqp6uLLX2RMrC9L+4BljX6a
lZRn/mnbXq+FBQQyJo+cKWCG5TgRjkrxsicWKjTzpcmbBJyH04YIxwFvLvDX
NVOZzGM6XO9XwJtHYIjM5a9PSIJ9/zQHoRVX+NzCFBFV+1fAm3FEg6tL968e
/MkSFIsrfDZgiohqAyvgzTiid+7fSCO3j5kMWVNVfgW8GWf92aVTiWTEyCDW
6qACzeLqPfWkO3nkLIGasuFBBZplDU55eUaq5O1Rc92YiYtmafGeOuQ+lAi5
M+VBlf276qgjMA2rsT+FstbCHcJoU1kL4YMzB2Pdp/75IfGACfNQpmvhfoIp
a+ro9YUj6qdziQ6W3mTU9C+4jIahzWZE84VFHvtY3UEvWGbAu6Dfgj9vMOwQ
VVX6wvuJd+j5812TieYbVdkz8Q59cPty6lIi0L66c4c2znHaiYMXaIIfgn5a
ag7S0QXiPYTDYjpYVBXtC+8y3rf2stR3iOb68rQJeN++OJu/4ZvhX/yt2TdN
wGcXuu+FDcwQ+LTwpql9Cob3CQf/7HnGpxoDMwsHvzAnM5jM2GHgrTQRgcHR
nCJYw+BTh8moN+ncCoAwB7l6WA1nPctU1u/AbTAKY81NinHp/+aCAJTpboY8
4CtVOvP3GPDB9+jKoStYU5V5IZz1UDjQYRgiq7ba424DPsA85x6GiKhjvRDO
eigcP45oWEXxPg4RnTAZkQTOYygc6DD1wmX5kCkruoQ1lccUjMenV05vnDds
+mrDeahXKEcxEt8UHIz6gghk7jFuKTIariTx6vD4+6PmuDITwGj4sOM8/tya
6DZqzPdeXcKDOr44D2HsOkfSxJnyoA4kzgMsdSwIWzaZxxGMmE3ri3zgHFBi
e00lFgEf3PEYjyFVJdlrBn+8mBmPoXAejvAxx1mPv3c97ZchU36lWyWAZc9s
hoiorB3hGjKeiBGe27Rg2LQ/6OZ2sFhhigjOupPoJsKbe8K1D8cPykzI9BkE
P78L8MNZdxL0RHjzVAzoj7m71378xiyhroneZKBz4IKeCG/GEf22M8V7HLHf
MtkO5sBlNBHePJVYemxwQbZhEmascZ/hEh3G60PkYEwmZq9zrdRd0XjKN0iy
2sz+5wg6w51j3CT2FkaZYCgt2zYe2d6g8TOgNui34A+22TTr2VR9hFyg0Bjq
HOPmQByBpsISCICaUBGAShcHokaCxtSs4aKZZuqoYBAtNTW4sXz7+4Q6RZFx
zp1knJPGtqzhImOIrJOCRxNu9fxmsuhQAJeVyaxnwFVVjLGeevFEwrfD8UCr
AC4MpqypPk6sjqtOG4nXoexjyIPqtXAei/ZnBE184xvnLuFBHT2xhmckNmV/
wFV6rqmsE3XGVTnJsa7DCM/4B1xnR8ARvc0QEU1cFbjX3m/9GIQy/QXO2gJt
ttAEmvuDaDf4ijUc3gmmaGlirt4h/n9Zg8CbBloqaxwtMIqrP3lmaX4FQ8vv
ArQ0u3+b1pfHQJkpynQZnLUlvHk43LL1AWX1BH8bUM/RuuVZmmcHj8vvDo7C
scyQT5eQwJxKlgwlTdPdw1i/+tc+OwD2Hpr9oiK1hDfrm0VZvVDva0Cpx2h5
7dlHsZL1Hx4rawOnyy31gNYq4M/SB0PvEfPuJAPl1JbSvJIYn4jvsu5gZ7Fh
5UaaUN4svb2LrL/mwG3ua0MQ6qyvMFMjtJfVXCxKDQj4Zfu1OvRR2nzwN7r2
PWYTCi9tXTz0s5WawKnmZxhwXeUSuPjekL+6VJwkiRh7vEaOAVZXUHyjazNk
9tmlk4lkMhICk0/ANL0yQjmurbpoyq3HLejxaeSZyIqsAK/gIzW6KyO+gXs3
HPesE4fWfzHiS64mbqoB6RWv7ooHTG3BEChntBZvuewbdqxHeZvSSiV/mX8h
1mdF1JV60CN9HaA6PLwD8w/uDflkJL4L0mtjBlU0gCs2Qopy4h4FSMAVG75J
kemXrV/K6CsaDqtjPO8RJZD6oND6d5zY79s3eb5J1Mm6ww32I4Y82JviRMOJ
inl3uG2ZzIOmkH4Sxtp1fahDL2INAGHN7wLWVFPFWZOV3xqsqSrPlDXV2nDW
Af5e2AKekYaI4JK10bVvRsPRZBwsmyFrmjMuYJIm93Mm8/gd3r0+cMl+rp5q
/yRy9SazHgxnTeP6++gM5lCJ9FbvLH8lUvhMgVIRYUCtNGV0u2rfl5owwH0L
sJ/i8N5+cCPtJ6LCjyk86lhBPPnTiswpsBgFTYkQjvLDmxdSyIMPBqFUR0kG
w0dtLpzhKPhg0hDprd4wk4dcs40LofwJpzwKPmp4gQA4VfsVcTSODZ8sTM75
hcAl8646Ckme8mHD5xCmrGnKIhbv2xnwwajZrnSs+UxYH8J4rNi11YfcuLPh
kwVTHuDgGpm3Mdnm/oJr6jxiqgdRgHlYFGAHXEOsGLKmKucncET9MUSgAq0f
kUnaAVccpoioOvsJHCiOSOvEMQQRvwsQUVX5EzhQHJFnWMDfZOyBetAE1z6T
EfHgwzMBDrQfEbZuOAnC1t1B2Ho/Q9bw6cvMWlqLHjxG+8uUB3wOMrNrrDoi
GjDhhy7hQZWVFVyyeKpiUM3jHP7ADxcyY+2mMzc0suzB3r+IjCRTHjTZnlFP
7+0ml1wG8VBPwm46kzlgjUSWOe43bv48SKxjbu4gCw5MFgBODJyhIo89LIM7
T6w0yYbaDFo7tZlcNOoDV6yPMZjgXgKyAAIS+wMeFVIdRlSPgTZYQdlEU9H+
DEc7Fq65eCdAVfdMIv26pLOsNcretErDBnXuGL9zx/hd2TFqDwbC+9sDbkV4
f7VuNcD6q1VN5kWtJsMVjToNgNZObSYr2s9wzAPhHe8Bt2a8h6CohjwduAQ+
rS5hCJTKeiAc/0wM0fd52eGfEtX6C+kNt5M8TYbpCIeJ41lwYE8IWVG4EG64
Kxj6sJ+z0gM/eANfLEN48LuAB1iQvz9KmwdVhibzmAC3rgDIOt1kfz8Brt8B
xDo9yX30aHydzpQHVTU/1Ll8B1dFvUFcf8CUNVULP4T3mtw5xInInYOR0/wa
eF9xyqB0fjBxsisGPq0ON272XwPvIc5Q6yhZDNzOhpsqXDZ8AL+F5DwhrPld
wJo6gDpYU62SKWvqCOOsPcKD2DZjF4WgTBfBR3g5Q9bUsf4WsnVaBB9rk1l/
Dx/rvyABZghrfhewpo71X5AA8yL4WDNlTR1rgnW/d2eTrE12Ud/DBxWza+zi
hf7voZUSrBxTedDEz6eRgfJjwoETF3QJD+owTSN3n3kuxJ0i+niwbMHfhlyY
gGXaQJqqg/PqbHhIMJZcp81bieADioPs/brisJEgDUmimwiSqhE4SHA+iQT5
M9zDLNOH3aBbFKxVsspbuUGuNS4iMbjXvUEk5DU7CMQJQRl67hY4gEEFxwnJ
7MjPcI+kFyq4lsKgaxDcK/OjPaOPVrDaDZTzfLhV/GEYeL4h4A28N9zSSiV/
kXc6LvKjg89aOLUU7OqM/Hy4jcEQY6Uh1gPG/RLHm8JJy/rWdc/lhR5ZV3/2
2Ld3gWs6dyYnqc/EX9bNhntMtGOdE/d67/fGyyFGdtRdPJe8bq/71fwwoiv0
5RDz4UYJ65U5+mlmbr8k2v1jh4ymJf55LEtso9uw0j9b+B033mz8Ev1X2ulJ
4JuT4BSLG26kPJF4uYT4G9gNqtni3QBX3JCVMWbYp6X9kpj0aS65yt8C8ljW
WDcUqwIPbVrilGz+3hL9Fxrqye5jNR7mZipFU+qd7ZKQAD0GgZvtG880wlzd
Majd7JdEBU3iZyt+Q0DaklAPui3ibmC9jTzhAfdEJh/50oFlzLgVWxp/8kOt
kNUDw1K30m/fiGnLI9EnJsGxzIR7IIYQrbQgYn8iIyY65qiAqHpi8JDPwx6L
HWJRUU2C44DAY3TUD4NnSYVngSjdrS88D/XCkF391WOzGdA1Mj7UGcJMuJPo
amQ97ZfGl38nOYwje7zSZ6ftxKVayKgQuAwhjH5yN/MP4qZfHMJzNYRnKyXp
PSbhEFIY8tKK8QJS9ks3FH3lRfC69ZvnFov3lzDk5Quf07BqDCsqBORP1KYP
nXJVK7VVNXqpIA5VVZPvEvaFz1STIOFu3Krfe/u37a2IP9e06uZV/tn2X/2K
WTVTLDQVKjAs3e0Xr9/6iVOucmUA6e2UqwIOxS8VJnYD84vJt/P6wicJGBZ8
krAb90v8ha89DqFjZK0eo1Mr3FJ7APMw+dbbAxCm5iTTuB2fu2R3gJkJn2A7
VgUcTPnZKaXHhKUM7oyFMcWKiW2B45z23qrN22Y673n6s88hMNe0rfQ/9Gi5
T1bifGHqJ5+tXM8at3jdF3D3vsq4SA0OxL74VvpPxG1xNuRktw4wQv/va7i3
XmVcmAbWbYybYQmU6XDPbFCfYXi+hvsJR1qYehIo1loJFEgPPoE7cKYdoClO
1deBzokSCz6lA+ArFiw7lMAQMk1dKkw1DEp5mMFVYyNDmDTVp1owB8IH1WTW
MCsxOSDRpcS4cHuZ/R/gQVXp/wQPqg7OVjtDslRPAnezJucQuXC9mg1Z6Evg
Ptdk1rDNBIQH/z/EA3o/a9fH8bRYT4aPnrtxk6TuoB6MIXXM3I2bJ3UH6PQx
5BMMTRHuMrhwaQofcURDK0uyyRsmJsOH+3v4ULzDECh1UJZA4iXB8EFhypo6
PAay5ncBa+o46GBNHQeTWeOmPfDFk1yyjMkUD4wHgue3Pjt5rzJr7vWq3IWg
C0PgipegDkqTGsaA64PKfbM11WUIXIs0uJJR5hlwBRaaDuZuZda3mgo0BK5X
OsBQVZoBmHmtZaevVeUuOlt9eLnGeFA1DQfTo7nmqBtxrAAChm8iGE1NQ+sB
wwL+1uRB1eau4OEVGvAXs/XEGLjurock55bDtWgRQ9ZUBdbBmqozTFlT1RVn
DaRqRSRiIaz5hrJWz8Nj4Cq5HpL5XQ5Xl0XGzcN4fYt7RDAHfeEToGlyivNd
uJKshWTrmfKguXGOytoO3rzyP4CI5p44KlA7ePNKso5DXTjCFBHN5W9UoHbw
Zppbn6ZCKlxMBvoVHKgdvJnmjigcEX7kz4hqHhgi3YXBXVOsRFMibAYXuIVR
zZiMsIMXjAu6JHCBWxjVjCPqmjI2mivaLIxqxhEt2btDfahVHyLj3u3ArTi7
vSTMBzzjGx+Vec2yTk6fjaO5+83CqGa8T1q1kHr7hL6O1ZDKhvdkFTm3gwKz
+hS3KC1V8lf7ryb5LYu5+ho9r01bHYDPLT/mZq79kDhH9TV8ceBgCFRDXgch
96w5GrzRb1cZqx39f/Dy8oht/tuf6i5kwKHOOZa77mPiyDVNQNggqIYUMrRt
fZrm+UDou2f47Xq5nUJadvxUjPfqqAt1uqWahkHtqarf9rx21zj0hCF+l/i9
sr0iK9nr09gT2KdWjTKkS3xDutSHZdiLG9oTyzICQoJz8k7tXO9f6u0dFBa3
/yap/Or6hi7oA3Xd8wZcsdCCqs4FDqBDBr2z4c+68+GbAnYSzyiHyBte9K5t
VdBas5Fd03ql0Rq4xum7PkdPkQOmSVajOmrPPoqUJI6+WCu3Vsqqz5+OkMxK
ut8CrvvoMm2bfr4gfs7wGX/RdYdvcHf0XWUAbH3Jq+t7iqID/Iv9JZLEdRm6
3ayRPZlQeGnLD8SRkzVwnTP5XiMjsbx/50oq+WZCk+dOmuuwaS5n7KPdfLMq
e8aLFzvH2dCj7Hy2iQFKmvtfaQ6qaza3PU8dqwOl1nUxJqN8Cy60ufAFB83d
jpBz/3rAa8VFmYKnynIUvE9j4QsOmvseKTcHnK/OnalHbYZVPMoi415M+0Rz
yJ3a1V8w1jaq15n7Go79gJ7Pt0Y/zdJqToRadDRoQdQKOjKFSHP+nYocy6Jg
VaDINpUZ6zlw1jgPcJEseKkgMx6HIPEYk49848QkwZI/ybuvmRIDXSRL9k0m
FqNz3wUu8iKPfht5fUOMzv0TtuHG38Zg5M0LMTr3QVqbWqZyodmXdA0PfCCX
ZW7ztR+FbyWZEtPaMTElpnXhIlNic44diCTfVMqU2OfnjseRb0NnSkzrOC7N
NYc/MeSB3go6bNrvGjxsYKUpnSpo5jNk/O7da9vJe6cxxnpKSvTWxBh0260O
SGMe38n4ffDkpZqQYCUjplS5fMMQm9aS5Df4OpmmcoWpWMCt/+SLUWiW6Ex5
gJSUK3GbAk1BGt84P49TBid+yNzPF/CdH984P3+YmDV9/yTHlyZzZRBmHTzA
jSLWYxeFavKgyp4pD63wPNNb5/gJ69UnJJkSW7MlwY18ZzdTYr/s3u43nnhz
IU0Klqkote4yehvOo58OHWTAGsTUyIuO34bzgLDuCiX94my+OrgCYc1Xs+5q
3dWaIt+G8whkyGPSvxp3hTHVwvH3rqunPabERj29u5sst2dKDLymHFhvlxAD
WX1wQ6PhxNSOGycB3llGJtSzjPPQeRgJcHqY9J4mX8ydp3aTfQg3yZSYVl6P
KbE1WxLdyFU/U2Jg1U+6SabEwL0U5BsmmBL7+lReNHlHHVNiUy+eTCSvpGdK
TGsRPRru9vvCm10ZstZ6L9JouNvvC2/Wx9rwXJyFqqMhrHB/7DN/T+8SiY9f
QlTGFZ333eZBFrUQ8Hw4eL4h4A1NuinnNxYmnJVEnrKplIGkW232lSQJN+Js
LXorNm3APk8dsuINwmvYRsPnn77wZoN6YEguThZRkR3kGlJAJFSUixtuRGRJ
kktZUgN6oPUSD32GYHDSTTm3uWjzVUnoob6PWhR2SumzkyeiJcvjrtbrTrrh
mMw6Gk76Bfpgs/oPcMP5VR9UQ88KI7rQElW8L6jJSSBucBcKtnlvv2XWqKDm
0vA3u4gjQxxsiejWPLhhodBMOO2LA3qj49XZu5H+2wfdaVT0VrY+Ako7PreS
/s3eRyBBMQg0PgGNaY7Lcpy8Ou9usH9m70etyp7Ktme3DwT6Tcooa9eHEKzn
yYlqHtwsDEOoL21lplK0SIrzEouDJH4P/X0DQmJzisyJQdWBEGwS3iWKFSbA
Nc8e3vyjqZ78CDFXgr0DfofTBLhm2cObmbIGt7+SITAIaz6cNb8LWE++eiaJ
vPZ+Alwl7OHNTFlPvHVpC3lUjekbn8Y+KkxfOWTysi4hppWrYUoMvP0dXJXa
JcTA7Z3k20HmwA3hD1N54O9QdI/QuPNnNlzjmfIQxEUKyLcQQnjwu4AHWJaP
IC7Hp7kYgikPUFxFvqDatFdWzjucFTZl5ExHNQnD91lHIStzk9+3iBObctnY
t3DqIAbebriM8WtDcWJad04wJdarofIweX8sU2LALJ1jIhyZEcvHiIH3FVkw
fhMuTswxPkpI7pqZEgPpLdKimBIDpkNe/s2UGHgF/dSRX6PhLLpUjckZk3x1
boks+qF5jxRTHiDWRV5UC+HB7wIeYMtKFrD8AveLBvFQu7J8wkA1MhVT4aPQ
U8d2wnDHl08acR65eZoKH5KeOjYJDKTYTdl02met7xoLcE8cdlLOgtopzWyU
VqbK1rTdAS2mYxgmEPEjMwnYCXVrar+pI93TtG2APih/pcSLRxKu4hN4d50Y
8kBrrYnJl+ZAPlMeYFfwMbEryGRIDFwVTF6NzJQYCL3PHzb9jy4hBk5KryTK
xZgSG1JVmk26AabEQCSbTazFmRIDMW3fIB/sna0mEzsOCUhnMCSmtTWfCPeR
IoY8lu5J8yNfYQ65Gwm4B4N4qB0/Thm85XP6iK+wDawV5njGvb1i0+5ZrlnP
l0gONv3qf6j5N/9D5csl+zMWum4fNWXFOpp4o8i4ieA4JJyM3b9iZm2/NDZv
hjhXCS6usiRuvQk8nL1UtNny/aXrWG/AXQZTMWuVseIX0PS0X5rwZK4PdhuQ
DYbl3kqvNGviNqZ4hkzfLNWoncCv2uluvzT6n6nuh1F2tuqrdg7/Kkpkje8C
pug7HQdOWqDJ9Iu3f89U/hqgde8RuGto8tyVaPEGK44hU7OO1yeBDXezXxxB
XHCEfEZdnuKB9dQOY3rkN3ES2kvwRKypTAtQppbiyLVc8s0iyB9b+6XxrT/4
5/UiL3ZKtySGchDcej0YQtA6+IX8GWy/bHPH0kACgnxVwP4Bny3TgkA1bqYQ
lmekSsjcFAkhQA0hMGfQVHoI/C6A8H1eVthnxG4Z+dPLflli24/kQLSu8s+0
/Uh7IKj2zRQCKP6fS+wDsD/R96aRF5/dWOmZTOodTTJKwAwCOl1/Sbz0EbeB
H8f/uU/1m7bhqRDDm71gNWZ4Y+BKoQ8LFtG1s1W1Py/cExQO8k2ghXoWDJaj
gl4ueQFrM1cpWh4eij+iCbfwz6Rn3evw58agn+ZxO4/eJRWo4OpTsdFINU94
0SWkoEgvYm1DFU3PG8PDj2j67rpVEdcGXW3BnnsTQzqwsaU9KPv0Q9/cs4/s
pO1yvUjNtJBibXrfIQvL3VwigVaWbow7qvodgWiFAX3wV8LtQTdwoCmmItL/
zlg00/IWhP5ySNs3mMCQTzmn7Hrho9C44/K/go9gOyVz2R9r8+8IN15ZueNW
Ezje1tNAqhNIHDYG9UlXbsoMR6hJH/l3XwjbPpC23v97nuuO9BxNCv4PxUe2
2dErL3pMSmWh6ni140Jq2o/5t4pu7wpEx1vDqPTf8/v/w3D/r3lO73CDMZ3U
Wnbx2q4QUb3QGZ2IMC9uSZc/Nf+/Yf6f9pyOYcbdd29la8mV7NB1qPvGB5gu
/Yx+jY6pWGMeQKnG0vz7E/TfNghF2Xe1d44fTo8PeeEtEnTwuNzXPCf3UwHr
U385dK2iO1jOLNb43cfov3sgnx1/1p2Pk4u4HBnHwfm8b0Tc3qRNyQWJMSEt
no5cBYcjiAvIvGvWrFCxfu70ewsrlbym6EgAX8rmS2bsLcaOqeIX+QzuaLhb
tC9A0M7heX2a/kSK/9wBk0tPZVvVzJL7Dwc+bZRji0P0U9m/o7n686ePSt56
9qIVdewBRj4/EeOOLJvaJrworxjyokGqfr03+pPvm+/EKFw4vDjvzHL0APpP
GDLMkMynSUsSFSIO+19B8GmL2g783ezmn7Y92SJ357KL+AH5VjVylSWpFIqF
jf9ukrtx2TK2g/u3qUXNqBSQb81UitYVZVdyz2yJ8n/t5sSXcR0cn7h4hSQk
ZJwcdr9ejksKMADHzD1UDmyn79bdadaQIvw7bIFtjYy6/Nu6ovxT29f7NYqF
PCmX73zZOyx5Wc7Vyu6IPuHzAljr1kc5s9vYPJ8P9j6X4R2yU0qflO725he4
xFw2r1fgT1uB1bCw4mSS1IvPUSFaCFRgh1/qBesaGWEDNCIyI0QEfsayRj/N
kE++v9+havS2dvxV7PrkwlAslir5a+H9kxk344I9W535Dk08geiST3gSZ+/Z
YovGDjqxYAMK7md/feVqqJBoxu14qrQ0qUOM980K61sjWxg6/FK9AvfLJkvV
Rq2b3zXfWadyYnPyXOMeoQVYuDEh88CDqmQxF1Exz0/TnrRhZAfOarkfpXJm
cxBuxaxWTOtsle01Iddzkh+HervI+A68lwJX74OhCRmzTt2v6yFve16y14fX
yBGGjTyHbjA6ixHriS1Cpzrw5sGUkggfUZuAxy9z8ggJTs69MbW8NKPdm8c5
6xxZ1K1ZqerDSBnNDPu1OTm09c73TqQTQ9vIE4ou+oRv+iP7wlOzFoXGYzo1
wChqJvmFQf2UzffKtns4IIPNzRYn3TBrUKCjg/Cs23Z1u0ThyGEjnlF0IjB6
4/5NSRvKQj34Kg6bU+UgThh3ulqGTyedRkeX/vfHBg75lP/18txGmZsDcOou
BYExSUeS40Kl7nxOB5vr7BV5pBxMN911uQfwCa7liG115Xt/llEq1bA+63dk
VYdaAhx56R5bL4x+WvvSofRMUruYJ3APzq8BC9JeBklMzuEKql3FYivwOhPW
AOTTS7zuWA1Rm/hfICkbpazq8Ol4sdKBw2nmCryPhsUmH06OD2/2FnCVHA4v
zy2uoGd5m5JGUjo9hvlgRcONVzEuwNw59Q7OIku0m2YlYp/YIdcbNJ0GI1lb
o4/1hDoPTDLKr1seJOO+y2Gbx3a0srM73IEgfWnYc3OzG5DIa65TwI7Y1PTN
GTu3Xk8IcZPzuE67127e2urNB9p+FGg7VLqYAHogDqTi1LH1Lioum1Pr4BKQ
E71x08mN0QEyFweHB06+3h1CLvuqMPSSGeIm8ZmFqe52N4UK8HQV+SdiRUin
2S0cR6/jITFJeclx4S1ejkAN+Du9t14Ft1Z0N0VrDKZuZoq3wZoHI+5TGlu6
20fJ47Bfcl1jyVkJWd/9/eqfKIUzh/OU55X6zsWqdmJ1gqzdXqXc2CFR8jmc
64KQ45YvaIZTlyHhgSdk81r77+lggebsCPSeMo3ZjuyoO18f6cxp4AhDvsx9
2Iyu2BANndBWfupFrIjbzBEEvZ1XjY+jOYiyffn04b2Z9+6X9KhpU2IG18tG
Jau4e9Df8aJTOCobvKeyoMoDvs18QdCYky878B5W3z3iz7/P9ztkXS0z0C3d
4/sftqqWq9A3SqHD8d8lQhstEWKdlHvU5K9VCjic24LAfcPvkItI2yHIcvv6
/hAh0MB4n8xSNIKJfAOXIY3TQhGGlOX4Kx053PPOEcdtK9qV+C7HZLHr8VCI
7rZkPUgWt3N5rs9CPAXPee6pvUqluLVZUz3USEXduaYQAQdZwoSML6jEVaUH
WEAsfPVvZnOAAF1gXRKGX+veoNQ1HL00xAk6m9e3pIWwGsX0lpJD9eHOXEDr
hmDtP+avFCpiiKz/YwqONY8wlAoxApLqvCCgEw8dfdPH3HgpI/RzhLyu8M7u
AAGy2hSKwo4TU2snHcLY9qVRIePIdzfFjZmrVeSjtmc5yHzHUbA5zrzI07Ua
7z+run/Qjw9WwJ+nPWoFIDCltUEWx4/OZ0YE54fFpg+98Rq+qjXABJHRqN9z
bXP4raCgIJYV+mmDfAbHR2Vqnk6QI/LwV/HZ/DDf/c/RDaSaNnjXWZhSyHHY
6pH2BP1ND1LXlN833dkkdeO7z0rFL3RSqVqPP4xxqeM4r+/zoIWg33z2XqTz
K45LTO/iVpN8lgVMVqz/vLCsqcJCPAa63Whn87ympD+W4nuksfKaY81BAk4t
x2XDgMImZQ+4S8IXR2D+PHss0lnJ5fD2uyed6VHRpmT1ZCZVPS6pr7LlfnWS
mFvC89n9673L0ciKxX361hIpjUsaL6vMlfry2U8dvNJ7lLXhagnGoi3+aaa3
isdmn3NaV9itCe6OcF/QQ9X27Gm6lwOyRggYd7Raju8cgcL5IAqHzDGkIyJk
j0q8K5TUkvyO7ne2sN/ZqtrLH2d68+RsrvuXWx+2qG3S+j1ZxaFWfz7nOdd9
KyJxJVwVbKiqAKOIa645lSQDT2MBzp3cyQ0QgI3EBaeIAjBPEXvtYYr6y42h
QjbCJ7XnkzZcWYwPR/QjffyrG/+sFSA9956wuxw/5mI+qqP2dHOwgP2IJ8m2
qZDheSI7ZNfz4lpBiPCWIOgosGigzceKN7i85jhF9itqVuIzZvM/RZFOLzii
hF4lUswOjHUSXd1NZOSqw87u37k1Ne2obWU7LmhzsGgozpbwCKOmsXV809lX
0VJ8MTfcGdkycM85r8sdcL9JwWIiGaxTg2kMXTmz5T6I6vDivTPLBkkbb76K
dnHIcE8p7taKLZ6olg7C8RVb3EEYxu3vpH/KzVoVpGP9quVhjNKFw/7HCYuL
6BCkOTgChagy+yHfN8e6kjjqCDQ8u03CI+28l1EaZKnraetO+qZsq1h3Kmvn
lm1pB+3KpERMBCze7uX584GdTtpV1g4fVmvqsMKpmVOpmWSy+NIUnLTb8GCP
L1hs13BFCaPO18oJ14Bskg8CD1zPdV67Iyl1m+X2bdu2say2bdueMe4Yuk4y
SaftVNInlSlu3Aa2MHzwzQalOdn8uGqTmAs0b2BhoxJXUKBQM1qLd7R68sU/
brzViKza5G41xwLaHHmSD7Key4gZ8VGWhHcT77JpptvV3R1GmnD5493eYFAl
72VX0NkqpmeWdkppWc7JjR7InpNT7ChJtb9Yg64MbRlIAzPXt2DmCrYJ2feT
wDbB68OMsjZEHRqP34pxqXRw29znYYsSZq5Im+LHhls7W/wdOUo2h/OCJ/It
CI1Jit2+++BvJy7f+6GkMEku5hpksshQpIChuCwMu2r2mggOkl6UYrIGao6l
UU9j0gGpjYZLN8KFSI+cZ66/32INHz2ap00yQfxsKUjChN7MiZS7cDkVPPe4
j/OfStVzvtnb8mowQWvGyK2QZbxoekKJVEO0wp/CbzbQ6KT6O9wEByobb72O
cGJXc8VJdqWkYwFvQ36Y48tvYTsGvlnwUo5tUXsivq/uzPko5weOvjm25e0q
sJECPv2Kc+jeBedv3Yo5vye03YknWpaAXYtsivV1bTeHkt8pp7eWZLZ589Cu
9r2PaDSN/WEJRktkN1ofXbg3pEPI5dQ4iGI/PoYNhq1posDUZSjM9Ijl8BOe
164ez9rQmXNB460YZFks/jr5AbpIg2UiwHNvtb8oCj2Tk3YmMWptpcRNqHDg
cNCtMyI0iNlRhUaaHbGf1212BmqLpVFP44YE1h+3jwc6IkPt+nnco1YrHSNH
8xNDbK8noXXtHJ5LiaePT4mPj89jH2+PFpEjF1mugrC5y9awtENzzt2tMpMS
GSbzwcqGGw0RQs5Ljmsc4g/xztggEF4WnghyJLyChqz5XgFHNPfsFtDv6MNT
1tTw1HBF/cWmEAG2onzaprEIqCk6iiaJfd85UCXD0l29LZXyxsmVTx5NKimr
Bf0ArR+2lWW1SBxdfou5DM76K2Y13T98P9HPCdn7cV7yXINdUwpKQGZGdyKy
U4YBC71bI58efuGHqtBcJPLgf73ItGNGGFpra6Wsoc/rFlkPedvrJWXXc2qi
RQ4dHK6zc9SJGgCVxg1gOgYuIJB6PMmPkbtyOa+4LlGT8svagAFZdIGUsZHq
B/EJSsTeN4KVc5JXOnm3OGJPhbWxLg77xUn3u7UoO/kEzOx69FC0NXxWXXon
8lzWWoWQwz7rHHmX1axS6ZAzCBnktwbw2Q/4vrnqBbPlB7Lne9t8eDQROlMV
FHcP8KetqU8D6QyVva6e9qykxK5SilfxmNuDnW2wgNPEEawddaa2Aw9x6Rts
A6kZ4km08/G4AiLLAId/RJH7BxY1KgglRhW+IMgRMRf3WVu0Lhu3QYRw6fU6
J04F130LuqNSDxLYOF9GkzedjUH9nTpc9DrjWsq66yEhISxr9NMqNno3GbIA
fMjdKCJsFmRswDUWmNcF5q/8UFp2rDzegwecItItbqEwaMeoK7VykMM6dDNB
9ITvlYG4dSUxFVkrZHK0a0ZLDQTieZGSrArCc/w3ScxMU2L4c1bjZZUHwGYA
IAXZ5rtC/4Tfsi9XgLQ5vnfu5DvwigNQleBRlh/Z4czlPON5bhtwp4moMWUm
YcxlWVMdRzepsiXn3kaxjOvg9XH60zZMCj0RF9aUXxjrgqxiEvvda1ZCkpJN
wfdzU/MTYjePPlsrx/30dGnJxg4Rl3PSOfohq0WlS9BgcVz2OMOb18rh+7+T
VyVTB9faIsqyJSBEpxFcQ+XOsjFdS9UeROtx7Ok+1KeR1taDxQkiRMzcMy5R
B0bdqSVi7Er79pobhZlBIFDFPSRKQOsIMDIDdA48NiJGkWWwOX8L0SRFP1lz
7Y9Pbx0rTpE4AronXKLPW9SReSLF4oYbiaDQDNG0Le9cUGfReimlT4+ciBMh
049jQOBBwsiIsWTLOA5i18SC+8Oq62tnld+/Y/uyXdd3SmJxQCzvajiiRGCI
kOXdW8dfyDGP0hNsn4qzJPzHfO+0SVfKame8KC54sUHkcFGIZbuQPXdeU6DA
iRd+Gr3caYBBYtLeOgz/LxUDVuRgBfbpQWcPZB7eFh+ErNg59VznkMUZN+rQ
6ZXGP+B5BGAKudcSxSouG1TLYa9n6W6avHrBXULflpZ7NRtF3GcOnjuBiWDU
0ejBvKbbcTJXB9G3CUXNs5o7bS9kYRX7QTDIYY/75iuWr+QEsiHIFPsy+3KS
GBEMb4P3nnL8JTO6hCVzqzkWAtKAV51Ccwc8aCLSgPL59YW7iZQizV5Dj3pZ
6nq6N/VppLVD8PJUkEqA2jTA6vyvT3D4rbAgL7kTFy0mKRIE7BpUiEzfmK71
1znAWD8Mp2lSFYIluUgraFor4LSy+QH2R2rwtOIw4L5jivYEg7VeG4cnPh4c
k5S7KTH6ZYArD6Qac90TT9tUy4hZBB0nqQPfc1fSFl9kTFDMcjbXbcbm4nod
37XiZg+iJpWb3biNbGHYkGsNCkowpYEjjBj0b6MSN/sJ7eV72r15gjUh5+vw
NKts/fO9Pi08bPOHzE3N6fe2uj/nu6eCrZ1xZt/jv1YCA8lVBZi6T7xa7wJi
RxGjztZ24FtS8NkeWHFw5x/7Lzwxb1aoqJaPbzbQCKMfn42Y5Q6w5e9umrTg
Rl/8Te09MHM7bPbc+VR9XmVcf2XznZdxrlzkkTuza+51iif0VzTfu7/LzxER
GfepwCs0NyYx+WBywvrKYDdQEcZGhjZ0XL52RRidqGyV7ZUFBTGuYM/zmuvk
ezgyfuPFuHDvDgGXe8s5KFbqzofE9AxRLEtdT/eiPg1aJ7c92YpoDfewOP70
upNZSU9CvZzb+TxBqat3eHhy9mW7cqnSWsfQYoNjYwgZFoOaRpDLqSzeL+GB
YNfUjaVSPNUHSq1/qrp5+GRqdMBrdyc+ogwuNzzXxvMzTj+0bCCCh300RsR3
0oGyyk2Xd4Y1uQscy5w9Qn7ferFqayntd3UaRYVEekPGdvD6ML2sTZ0MOYun
N7LUyRAsQdx8J1LhRMbn0PUPMgmHdwi54qlJpWjb6I7a06/DnQSeQUerAbP+
Rpl5z/8OQYBuDJQ1vpheVlJiUydTqit4pBmlKe7InC1cFXoJuzLRirRD6Z7H
m8WI0nNvOK9Nm/zPk6orlztVLiLr05cpZ3YkFETHbO93vxkPR/fvpZKWvEgU
cV6zndYhOwVy1W+KfPGaIitNz3DUNfZW7o1EEbI78Jyc9qSN2OCApN6hogQR
KGxbdunqOi23gMl0ZG9Fa1nAlYPb/o0J9mp2FfDkXC6vWij23ReenPXxhaet
uLNS6ZE9Kl9k/VDrXXgk9WGkr6gdFD4j34UnZV8dWVlXVB/pTLoFlikaSfO0
DfVp0IoHOTmFjkEnLF/KiWGkGXlb6MhDyNgwcAEDlE13XsSLuGhCL6Os/T1S
6dAiBRWfzVvvs7dMY6GoWXDAS/TKKNMoOOiFD3+k0pnj8mXMw1ZCfZY2XAuX
C7nun6YgaqBCkz/SxNIMr2q+eOOgW40K48wTOyRjgUx19VcuhQrBpv3zrXhV
jBqkdFfpFiA7we8hFzHZYT7Xaoi84RFiDqFyZJeM7B/dX/s5ORAWQyQgQbT9
2rkQAbK28pi6vRQvb+iPjOqZpmABiAWkgBw70T9T+gwzmcsuYQdrokTcMgeP
NLsnUjImwMLuUE1A9hkucSGZ/iqhhsl8wGjMdP3OFvo7lbpQpJbjEgt2+FZ6
R8QWOiIQUiZpM15ugCwonuw5sxmkMMFKJw0kAVjvY/xHKOouvop2Aavp8E+P
PJESO+dJbWUnQQ1eE0cQMvZ4DZ4dsH5XVpmDbMb5Ib45lcTOLflJulcjTxg6
4kKdQqO2pDbGxTHUNwfdl/QzQZHBEk2x/PVVcIiJUygI2t/vQTOxYVF+0Pb8
BAIbwAtGNxTYVg6MnfyHusIsoqaxc90nOGK6HlS5gqrAIUUNxLoC1MqUHzqd
IEJGwiHVYztWHNGdUbd7dlblRgehqIPPBRwea0THLfspm+/WJIq4LVw0/UGq
8QRThsngx3HciA02nSmMckYW7RqpN+MGgIYUrrfYehuMglz48mRktRc4I4Cm
K8xfiVzA7gDs14TVIrEYa7Z8KPZNAjtIQjlaOI6eV4JDw8wuh4WFsayQz9Ci
tQFeMmcHdNfazuF5LN56owG1n/dJ25L/WXs+CdTHg/1IfnBsUn5SbIjUDauP
916H1cfjug2inZdOhAvrHZzD1+w9/y/vxun0xkAhL1uc9C+467g7OS21hzzP
8XslcIkZfrle0ZNx17RPiJg9Fnuvf+OfV2iRMQubeWzRO7fPJ7mDKoRXDi4B
WdHJKYc3x5Ol/t6RR9CzlT1IPVd+LH16pC7SmUv6cPzAE1j27MdJgbr+vPC4
5JzNG6NrgkQgAsq5IwjI7H+3mTiVzUgqlhqqj23K2Q4eU7Y/luLFFWDNk3sv
Edgc+Jqq9cYNoMGPqyHLAqsO+oFKmxd8kbv5c3d3d1Yv5NMzKVh9UbehotdJ
1UyLavdORuFVcwTMNGyWLRqJN69nO0f1fthKqogF2mwJqjvauDxBmYuHf3ZE
0u6vTj9sAFEnTF5ADPK5dUX5p7dH+TWJBTzEPYn/8Y3cuvjQjWoAEXeSQzoa
Co/vjwGbQHBuxDUjOOVE78etRD0GyG9VJ4kdkZkNrY02AqYNln1pYTsGjTnx
Uo7+8H1SjxqcHpxIvxUb5CF14vNqHV08DwfHZ3xXcKe2m0ypsiPFp1j6+lpi
i9hRo2LO2kLV0cgtPrvn8sYwSZNIwEMWtk733Pwjg1Nyr4ANnwWDnnVS0nKu
RyqYIy3VX8/CKui0lHSiMULX+xieDvmq5WE8mCIx+ZLZVO4e8ebHGhX4esVp
HDniuLKVUt5m3q5Qkl4EX4b3lrc2921uaQfeNdDwR6Mx4jqPduP/ZnX7f2bY
P6Y=\
\>"]]
}, Open  ]],

Cell["", "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".\tConclusion"
}], "Section",
 CellChangeTimes->{{3.5998944518809967`*^9, 3.599894477451784*^9}, {
  3.599894511898885*^9, 3.5998945381286793`*^9}, {3.599894796440259*^9, 
  3.599894836715193*^9}, {3.59989581442519*^9, 3.5998958434354467`*^9}, {
  3.599895893572297*^9, 3.599895897664892*^9}, {3.59989594574212*^9, 
  3.59989596213556*^9}, {3.5998959933365173`*^9, 3.5998959950405684`*^9}, {
  3.599899418576304*^9, 3.599899421983275*^9}},
 CellTags->"conclusions"],

Cell[TextData[{
 "In this notebook we presented several max-margin and SVM classifiers, both \
in the linear and non-linear setting, partially following the exposition in \
",
 ButtonBox[Cell["[1]", "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"Shawe", "-", "Taylor"}], ",", " ", "John", ",", " ", 
       RowBox[{"and", " ", "Nello", " ", 
         RowBox[{"Cristianini", ".", " ", "Kernel"}], " ", "methods", " ", 
         "for", " ", "pattern", " ", 
         RowBox[{"analysis", ".", " ", "Cambridge"}], " ", "university", " ", 
         "press"}], ",", " ", "2004"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004F53"],
 ". We have exploited the Quadratic Programming functionality of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve most of the optimization problems presented. With the help of \
dynamic interactions, as dataset drawing and direct manipulation of the \
algorithm parameters, this Notebook can help understanding the algorithms and \
the role of their parameters.\nThe implementations provided here could \
virtually be used to address any binary classification problem. It is to note \
however, that in order to extend the applicability of the methods to larger \
problems (with more than a few hundreds of examples), it would be necessary \
to abandon the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " QP solver and implement a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " interface to existing and efficient C++ SVM implementations."
}], "Text",
 CellChangeTimes->{{3.600633087076248*^9, 3.600633575187806*^9}, {
  3.60066866290123*^9, 3.600668954013122*^9}, {3.600680784775477*^9, 
  3.600680883372558*^9}, {3.600680966600589*^9, 3.60068099644777*^9}, {
  3.600681077199624*^9, 3.600681094620131*^9}, {3.601559105921438*^9, 
  3.601559198545088*^9}, {3.601559249982498*^9, 3.601559282462489*^9}, {
  3.60162661258946*^9, 3.601626632824834*^9}, {3.602859200950872*^9, 
  3.602859222123472*^9}, {3.607435279179245*^9, 3.607435281253655*^9}, {
  3.637581868498744*^9, 3.637581869905108*^9}, {3.637583980164358*^9, 
  3.637583982248032*^9}, {3.6375842030551443`*^9, 3.637584203566497*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.5998994728452187`*^9, 3.599899474304348*^9}}],

Cell["\<\
\t1.\tNello Cristianini and John Shawe-Taylor. An introduction to Support \
Vector Machines and other kernel-based learning methods. Cambridge university \
press, 2000\
\>", "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellChangeTimes->{{3.6016267198091307`*^9, 3.601626780317151*^9}},
 CellTags->"00004F53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"Presentation",
WindowToolbars->"EditBar",
WindowSize->{1280, 776},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->(FrontEndExecute[{
   FrontEnd`NotebookApply[
    FrontEnd`InputNotebook[], #, Placeholder]}]& ),
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->"/home/marko/print.pdf"},
PrivateNotebookOptions->{"NoteStyle"->"NumberedNote"},
ShowSelection->True,
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Creative"}, "NaturalColor.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["DisplayFormula"]], 
   Cell[
    StyleData["FigureCaption"], CellMargins -> {{54, 24}, {10, -5}}, 
    TextAlignment -> Center, LineSpacing -> {1, 2}, 
    ParagraphSpacing -> {0, 5}, LanguageCategory -> "NaturalLanguage", 
    ScriptLevel -> 1, CounterIncrements -> "FigureCaption", FontFamily -> 
    "Times New Roman", FontSize -> 12]}, Visible -> False, FrontEndVersion -> 
  "10.1 for Linux x86 (64-bit) (March 23, 2015)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "intro"->{
  Cell[15887, 361, 315, 8, 135, "Section",
   CellTags->"intro"]},
 "linear_classifiers"->{
  Cell[23858, 536, 571, 12, 135, "Section",
   CellTags->"linear_classifiers"]},
 "sec:max_margin"->{
  Cell[149252, 2832, 578, 12, 135, "Section",
   CellTags->"sec:max_margin"]},
 "margin_bound"->{
  Cell[149855, 2848, 151, 2, 67, "Subsection",
   CellTags->"margin_bound"]},
 "theorem1"->{
  Cell[155060, 2996, 1772, 53, 168, "Text",
   CellTags->"theorem1"]},
 "eq:max_margin_hard"->{
  Cell[176006, 3589, 1158, 39, 79, "DisplayFormulaNumbered",
   CellTags->"eq:max_margin_hard"]},
 "eq:1norm_svm"->{
  Cell[220327, 4461, 1705, 48, 163, "DisplayFormulaNumbered",
   CellTags->"eq:1norm_svm"]},
 "subsec:hinge_loss"->{
  Cell[246674, 5069, 207, 3, 67, "Subsection",
   CellTags->"subsec:hinge_loss"]},
 "sec:svm"->{
  Cell[301704, 6449, 467, 10, 135, "Section",
   CellTags->"sec:svm"]},
 "primal_problem"->{
  Cell[304563, 6509, 1226, 38, 116, "DisplayFormulaNumbered",
   CellTags->"primal_problem"]},
 "eq:dual_problem"->{
  Cell[309625, 6669, 844, 26, 79, "DisplayFormulaNumbered",
   CellTags->"eq:dual_problem"]},
 "eq:kkt"->{
  Cell[317046, 6890, 2242, 75, 236, "DisplayFormulaNumbered",
   CellTags->"eq:kkt"]},
 "eq:hard_margin_svm_L"->{
  Cell[322869, 7055, 1491, 54, 84, "DisplayFormula",
   CellTags->"eq:hard_margin_svm_L"]},
 "eq:hard_margin_svm_w"->{
  Cell[328423, 7247, 878, 25, 172, "DisplayFormulaNumbered",
   CellTags->"eq:hard_margin_svm_w"]},
 "eq:hard_margin_svm_Dual"->{
  Cell[341847, 7654, 1511, 54, 136, "DisplayFormulaNumbered",
   CellTags->"eq:hard_margin_svm_Dual"]},
 "eq:soft_margin_svm_L"->{
  Cell[465281, 10005, 2038, 72, 84, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_L"]},
 "eq:soft_margin_svm_w"->{
  Cell[471862, 10229, 1194, 32, 214, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_w"]},
 "eq:soft_margin_svm_Dual"->{
  Cell[482423, 10578, 1376, 47, 136, "DisplayFormulaNumbered",
   CellTags->"eq:soft_margin_svm_Dual"]},
 "eq:svm_w"->{
  Cell[527972, 11719, 971, 30, 229, "DisplayFormulaNumbered",
   CellTags->"eq:svm_w"]},
 "eq:2norm_svm_Dual"->{
  Cell[544544, 12222, 1336, 48, 136, "DisplayFormulaNumbered",
   CellTags->"eq:2norm_svm_Dual"]},
 "sec:kernel_svm"->{
  Cell[575823, 12963, 582, 12, 135, "Section",
   CellTags->"sec:kernel_svm"]},
 "conclusions"->{
  Cell[893214, 18748, 509, 11, 135, "Section",
   CellTags->"conclusions"]},
 "00004F53"->{
  Cell[896052, 18810, 347, 8, 39, "Reference",
   CellTags->"00004F53"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"intro", 897827, 18860},
 {"linear_classifiers", 897919, 18863},
 {"sec:max_margin", 898021, 18866},
 {"margin_bound", 898119, 18869},
 {"theorem1", 898212, 18872},
 {"eq:max_margin_hard", 898308, 18875},
 {"eq:1norm_svm", 898425, 18878},
 {"subsec:hinge_loss", 898542, 18881},
 {"sec:svm", 898639, 18884},
 {"primal_problem", 898732, 18887},
 {"eq:dual_problem", 898849, 18890},
 {"eq:kkt", 898956, 18893},
 {"eq:hard_margin_svm_L", 899070, 18896},
 {"eq:hard_margin_svm_w", 899189, 18899},
 {"eq:hard_margin_svm_Dual", 899319, 18902},
 {"eq:soft_margin_svm_L", 899450, 18905},
 {"eq:soft_margin_svm_w", 899578, 18908},
 {"eq:soft_margin_svm_Dual", 899710, 18911},
 {"eq:svm_w", 899830, 18914},
 {"eq:2norm_svm_Dual", 899943, 18917},
 {"sec:kernel_svm", 900063, 18920},
 {"conclusions", 900161, 18923},
 {"00004F53", 900253, 18926}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 1385, 33, 19, "Input",
 CellOpen->False,
 InitializationCell->True,
 InitializationGroup->True],
Cell[1955, 57, 163, 3, 19, "Print",
 CellOpen->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[2155, 65, 806, 10, 221, "Title"],
Cell[2964, 77, 183, 3, 52, "Text"],
Cell[3150, 82, 444, 6, 38, "SmallText"],
Cell[CellGroupData[{
Cell[3619, 92, 102, 1, 45, "Subsubtitle"],
Cell[CellGroupData[{
Cell[3746, 97, 98, 1, 67, "Subsection"],
Cell[3847, 100, 12003, 256, 1070, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15887, 361, 315, 8, 135, "Section",
 CellTags->"intro"],
Cell[16205, 371, 7616, 160, 1357, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23858, 536, 571, 12, 135, "Section",
 CellTags->"linear_classifiers"],
Cell[24432, 550, 1816, 45, 90, "Text"],
Cell[CellGroupData[{
Cell[26273, 599, 536, 16, 56, "Item"],
Cell[26812, 617, 228, 6, 53, "Item"],
Cell[27043, 625, 291, 6, 53, "Item"]
}, Open  ]],
Cell[27349, 634, 1466, 29, 89, "Text"],
Cell[28818, 665, 1011, 29, 41, "DisplayFormulaNumbered"],
Cell[29832, 696, 1831, 50, 94, "Text"],
Cell[31666, 748, 690, 20, 41, "DisplayFormulaNumbered"],
Cell[32359, 770, 2887, 65, 278, "Text"],
Cell[35249, 837, 101912, 1683, 446, "Text"],
Cell[137164, 2522, 1103, 28, 165, "Text"],
Cell[138270, 2552, 865, 22, 41, "DisplayFormulaNumbered"],
Cell[139138, 2576, 2411, 69, 237, "Text"],
Cell[141552, 2647, 746, 22, 41, "DisplayFormula"],
Cell[142301, 2671, 2574, 56, 422, "Text"],
Cell[CellGroupData[{
Cell[144900, 2731, 1433, 34, 19, "Input",
 CellOpen->False],
Cell[146336, 2767, 2755, 55, 470, "Output"]
}, Open  ]],
Cell[149106, 2825, 109, 2, 52, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149252, 2832, 578, 12, 135, "Section",
 CellTags->"sec:max_margin"],
Cell[CellGroupData[{
Cell[149855, 2848, 151, 2, 67, "Subsection",
 CellTags->"margin_bound"],
Cell[150009, 2852, 1948, 49, 163, "Text"],
Cell[151960, 2903, 560, 15, 41, "DisplayFormulaNumbered"],
Cell[152523, 2920, 1615, 45, 163, "Text"],
Cell[154141, 2967, 535, 16, 43, "DisplayFormulaNumbered"],
Cell[154679, 2985, 378, 9, 89, "Text"],
Cell[155060, 2996, 1772, 53, 168, "Text",
 CellTags->"theorem1"],
Cell[156835, 3051, 880, 26, 69, "DisplayFormulaNumbered"],
Cell[157718, 3079, 2264, 54, 378, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[160019, 3138, 179, 2, 67, "Subsection"],
Cell[160201, 3142, 2382, 78, 238, "Text"],
Cell[162586, 3222, 1291, 36, 65, "DisplayFormula"],
Cell[163880, 3260, 1397, 28, 163, "Text"],
Cell[165280, 3290, 998, 34, 65, "DisplayFormula"],
Cell[166281, 3326, 1363, 20, 126, "Text"],
Cell[167647, 3348, 997, 32, 65, "DisplayFormula"],
Cell[168647, 3382, 3228, 82, 358, "Text"],
Cell[171878, 3466, 1148, 37, 106, "DisplayFormula"],
Cell[173029, 3505, 2974, 82, 187, "Text"],
Cell[176006, 3589, 1158, 39, 79, "DisplayFormulaNumbered",
 CellTags->"eq:max_margin_hard"],
Cell[177167, 3630, 4664, 111, 255, "Text"],
Cell[CellGroupData[{
Cell[181856, 3745, 2096, 31, 50, "Subsubsection"],
Cell[183955, 3778, 2428, 39, 163, "Text"],
Cell[186386, 3819, 2462, 69, 430, "Code",
 Evaluatable->False],
Cell[188851, 3890, 1049, 18, 348, "Text"],
Cell[CellGroupData[{
Cell[189925, 3912, 468, 8, 60, "Input",
 InitializationCell->True],
Cell[190396, 3922, 5760, 106, 435, "Output"]
}, Open  ]],
Cell[196171, 4031, 1910, 31, 459, "Text"],
Cell[CellGroupData[{
Cell[198106, 4066, 1866, 30, 93, "Input"],
Cell[199975, 4098, 15558, 265, 456, "Output"]
}, Open  ]],
Cell[215548, 4366, 1649, 26, 459, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[217246, 4398, 179, 2, 67, "Subsection"],
Cell[217428, 4402, 2896, 57, 311, "Text"],
Cell[220327, 4461, 1705, 48, 163, "DisplayFormulaNumbered",
 CellTags->"eq:1norm_svm"],
Cell[222035, 4511, 5058, 138, 645, "Text"],
Cell[CellGroupData[{
Cell[227118, 4653, 173, 5, 50, "Subsubsection"],
Cell[227294, 4660, 1631, 26, 163, "Text"],
Cell[228928, 4688, 3538, 95, 578, "Code",
 Evaluatable->False],
Cell[232469, 4785, 1270, 20, 200, "Text"],
Cell[CellGroupData[{
Cell[233764, 4809, 356, 6, 60, "Input",
 InitializationCell->True],
Cell[234123, 4817, 4374, 88, 435, "Output"]
}, Open  ]],
Cell[238512, 4908, 1118, 26, 348, "Text"],
Cell[CellGroupData[{
Cell[239655, 4938, 3271, 52, 131, "Input"],
Cell[242929, 4992, 2833, 52, 171, "Output"]
}, Open  ]],
Cell[245777, 5047, 848, 16, 237, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[246674, 5069, 207, 3, 67, "Subsection",
 CellTags->"subsec:hinge_loss"],
Cell[246884, 5074, 1265, 28, 126, "Text"],
Cell[CellGroupData[{
Cell[248174, 5106, 879, 26, 85, "Item"],
Cell[249056, 5134, 1249, 42, 85, "Item"]
}, Open  ]],
Cell[250320, 5179, 669, 19, 52, "Text"],
Cell[250992, 5200, 548, 17, 41, "DisplayFormula"],
Cell[251543, 5219, 1302, 35, 128, "Text"],
Cell[252848, 5256, 944, 31, 84, "DisplayFormulaNumbered"],
Cell[253795, 5289, 4026, 116, 372, "Text"],
Cell[257824, 5407, 489, 15, 41, "DisplayFormulaNumbered"],
Cell[258316, 5424, 632, 11, 89, "Text"],
Cell[CellGroupData[{
Cell[258973, 5439, 2162, 55, 19, "Input",
 CellOpen->False],
Cell[261138, 5496, 6766, 135, 519, "Output"]
}, Open  ]],
Cell[267919, 5634, 1118, 17, 163, "Text"],
Cell[CellGroupData[{
Cell[269062, 5655, 693, 18, 52, "Item"],
Cell[269758, 5675, 1009, 28, 54, "Item"]
}, Open  ]],
Cell[270782, 5706, 16, 0, 52, "Text"],
Cell[CellGroupData[{
Cell[270823, 5710, 173, 5, 50, "Subsubsection"],
Cell[270999, 5717, 210, 5, 89, "Text"],
Cell[271212, 5724, 3228, 91, 541, "Code",
 Evaluatable->False],
Cell[274443, 5817, 225, 7, 126, "Text"],
Cell[CellGroupData[{
Cell[274693, 5828, 199, 4, 60, "Input",
 InitializationCell->True],
Cell[274895, 5834, 3464, 75, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[278396, 5914, 3946, 61, 96, "Input"],
Cell[282345, 5977, 2367, 45, 171, "Output"]
}, Open  ]],
Cell[284727, 6025, 384, 9, 163, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[285160, 6040, 256, 3, 67, "Subsection"],
Cell[285419, 6045, 1957, 44, 200, "Text"],
Cell[CellGroupData[{
Cell[287401, 6093, 173, 5, 50, "Subsubsection"],
Cell[287577, 6100, 686, 14, 52, "Text"],
Cell[288266, 6116, 1033, 33, 84, "DisplayFormulaNumbered"],
Cell[289302, 6151, 1189, 24, 126, "Text"],
Cell[290494, 6177, 2770, 77, 467, "Code",
 Evaluatable->False],
Cell[293267, 6256, 333, 8, 126, "Text"],
Cell[CellGroupData[{
Cell[293625, 6268, 202, 4, 60, "Input",
 InitializationCell->True],
Cell[293830, 6274, 2924, 68, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296791, 6347, 1697, 30, 96, "Input"],
Cell[298491, 6379, 2100, 42, 543, "Output"]
}, Open  ]],
Cell[300606, 6424, 1037, 18, 163, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[301704, 6449, 467, 10, 135, "Section",
 CellTags->"sec:svm"],
Cell[302174, 6461, 1766, 33, 163, "Text"],
Cell[CellGroupData[{
Cell[303965, 6498, 114, 1, 67, "Subsection"],
Cell[304082, 6501, 478, 6, 52, "Text"],
Cell[304563, 6509, 1226, 38, 116, "DisplayFormulaNumbered",
 CellTags->"primal_problem"],
Cell[305792, 6549, 1565, 42, 128, "Text"],
Cell[307360, 6593, 1830, 62, 84, "DisplayFormulaNumbered"],
Cell[309193, 6657, 429, 10, 52, "Text"],
Cell[309625, 6669, 844, 26, 79, "DisplayFormulaNumbered",
 CellTags->"eq:dual_problem"],
Cell[310472, 6697, 1126, 33, 89, "Text"],
Cell[311601, 6732, 2988, 91, 131, "Text"],
Cell[314592, 6825, 2451, 63, 96, "Text"],
Cell[317046, 6890, 2242, 75, 236, "DisplayFormulaNumbered",
 CellTags->"eq:kkt"],
Cell[319291, 6967, 2493, 53, 165, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321821, 7025, 111, 1, 67, "Subsection"],
Cell[321935, 7028, 415, 9, 89, "Text"],
Cell[CellGroupData[{
Cell[322375, 7041, 161, 2, 50, "Subsubsection"],
Cell[322539, 7045, 327, 8, 52, "Text"],
Cell[322869, 7055, 1491, 54, 84, "DisplayFormula",
 CellTags->"eq:hard_margin_svm_L"],
Cell[324363, 7111, 1445, 48, 109, "Text"],
Cell[325811, 7161, 2340, 79, 196, "DisplayFormula"],
Cell[328154, 7242, 266, 3, 52, "Text"],
Cell[328423, 7247, 878, 25, 172, "DisplayFormulaNumbered",
 CellTags->"eq:hard_margin_svm_w"],
Cell[329304, 7274, 416, 11, 52, "Text"],
Cell[329723, 7287, 3267, 111, 297, "DisplayFormula"],
Cell[332993, 7400, 3177, 89, 203, "Text"],
Cell[336173, 7491, 4458, 135, 408, "DisplayFormula"],
Cell[340634, 7628, 1210, 24, 89, "Text"],
Cell[341847, 7654, 1511, 54, 136, "DisplayFormulaNumbered",
 CellTags->"eq:hard_margin_svm_Dual"],
Cell[343361, 7710, 3887, 71, 143, "Text"],
Cell[347251, 7783, 1479, 54, 87, "DisplayFormulaNumbered"],
Cell[348733, 7839, 4382, 98, 128, "Text"],
Cell[353118, 7939, 2964, 90, 203, "DisplayFormula"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356119, 8034, 238, 3, 50, "Subsubsection"],
Cell[356360, 8039, 5101, 120, 274, "Text"],
Cell[361464, 8161, 185, 5, 59, "DisplayFormula"],
Cell[361652, 8168, 1039, 18, 200, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362728, 8191, 177, 5, 50, "Subsubsection"],
Cell[362908, 8198, 1124, 26, 129, "Text"],
Cell[364035, 8226, 4252, 116, 689, "Code",
 Evaluatable->False],
Cell[368290, 8344, 547, 12, 126, "Text"],
Cell[CellGroupData[{
Cell[368862, 8360, 85, 2, 60, "Input",
 InitializationCell->True],
Cell[368950, 8364, 3601, 77, 435, "Output"]
}, Open  ]],
Cell[372566, 8444, 1212, 23, 274, "Text"],
Cell[CellGroupData[{
Cell[373803, 8471, 3800, 56, 93, "Input"],
Cell[377606, 8529, 86244, 1438, 458, 66922, 1121, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[463865, 9970, 808, 15, 200, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[464710, 9990, 107, 1, 50, "Subsubsection"],
Cell[464820, 9993, 458, 10, 89, "Text"],
Cell[465281, 10005, 2038, 72, 84, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_L"],
Cell[467322, 10079, 213, 4, 52, "Text"],
Cell[467538, 10085, 4002, 136, 332, "DisplayFormula"],
Cell[471543, 10223, 316, 4, 52, "Text"],
Cell[471862, 10229, 1194, 32, 214, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_w"],
Cell[473059, 10263, 1240, 37, 89, "Text"],
Cell[474302, 10302, 3955, 131, 392, "DisplayFormula"],
Cell[478260, 10435, 2054, 70, 166, "Text"],
Cell[480317, 10507, 1391, 45, 105, "DisplayFormula"],
Cell[481711, 10554, 709, 22, 106, "Text"],
Cell[482423, 10578, 1376, 47, 136, "DisplayFormulaNumbered",
 CellTags->"eq:soft_margin_svm_Dual"],
Cell[483802, 10627, 8510, 212, 737, "Text"],
Cell[492315, 10841, 2391, 84, 170, "DisplayFormula"],
Cell[494709, 10927, 3302, 45, 52, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[498048, 10977, 177, 5, 50, "Subsubsection"],
Cell[498228, 10984, 3888, 65, 129, "Text"],
Cell[502119, 11051, 5088, 141, 763, "Code",
 Evaluatable->False],
Cell[507210, 11194, 452, 8, 163, "Text"],
Cell[CellGroupData[{
Cell[507687, 11206, 85, 2, 60, "Input",
 InitializationCell->True],
Cell[507775, 11210, 3507, 76, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511319, 11291, 4041, 63, 96, "Input"],
Cell[515363, 11356, 2228, 44, 437, "Output"]
}, Open  ]],
Cell[517606, 11403, 482, 11, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518125, 11419, 162, 2, 50, "Subsubsection"],
Cell[518290, 11423, 847, 16, 52, "Text"],
Cell[519140, 11441, 1696, 53, 126, "DisplayFormula"],
Cell[520839, 11496, 1166, 22, 126, "Text"],
Cell[522008, 11520, 1826, 63, 84, "DisplayFormula"],
Cell[523837, 11585, 645, 8, 52, "Text"],
Cell[524485, 11595, 3259, 117, 258, "DisplayFormula"],
Cell[527747, 11714, 222, 3, 52, "Text"],
Cell[527972, 11719, 971, 30, 229, "DisplayFormulaNumbered",
 CellTags->"eq:svm_w"],
Cell[528946, 11751, 1361, 28, 126, "Text"],
Cell[530310, 11781, 4042, 136, 392, "DisplayFormula"],
Cell[534355, 11919, 3816, 115, 229, "Text"],
Cell[538174, 12036, 5154, 158, 408, "DisplayFormula"],
Cell[543331, 12196, 1210, 24, 89, "Text"],
Cell[544544, 12222, 1336, 48, 136, "DisplayFormulaNumbered",
 CellTags->"eq:2norm_svm_Dual"],
Cell[545883, 12272, 7590, 200, 430, "Text"],
Cell[553476, 12474, 2635, 83, 203, "DisplayFormula"],
Cell[556114, 12559, 3455, 63, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[559606, 12627, 177, 5, 50, "Subsubsection"],
Cell[559786, 12634, 3120, 47, 126, "Text"],
Cell[562909, 12683, 2042, 58, 282, "Code",
 Evaluatable->False],
Cell[564954, 12743, 215, 6, 126, "Text"],
Cell[CellGroupData[{
Cell[565194, 12753, 200, 4, 60, "Input",
 InitializationCell->True],
Cell[565397, 12759, 3830, 80, 435, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[569264, 12844, 4631, 71, 96, "Input"],
Cell[573898, 12917, 1852, 38, 545, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[575823, 12963, 582, 12, 135, "Section",
 CellTags->"sec:kernel_svm"],
Cell[CellGroupData[{
Cell[576430, 12979, 104, 1, 67, "Subsection"],
Cell[576537, 12982, 2703, 48, 200, "Text"],
Cell[579243, 13032, 152367, 2531, 415, "Text"],
Cell[731613, 15565, 2900, 52, 163, "Text"],
Cell[CellGroupData[{
Cell[734538, 15621, 84, 1, 50, "Subsubsection"],
Cell[734625, 15624, 1677, 35, 52, "Text"],
Cell[736305, 15661, 535, 18, 41, "DisplayFormula"],
Cell[736843, 15681, 3874, 93, 348, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[740754, 15779, 106, 1, 50, "Subsubsection"],
Cell[740863, 15782, 1676, 60, 92, "Text"],
Cell[742542, 15844, 1974, 37, 79, "DisplayFormula"],
Cell[744519, 15883, 1917, 35, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[746473, 15923, 223, 3, 50, "Subsubsection"],
Cell[746699, 15928, 2179, 45, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[748915, 15978, 215, 3, 50, "Subsubsection"],
Cell[749133, 15983, 1589, 56, 89, "Text"],
Cell[750725, 16041, 2927, 117, 227, "DisplayFormula"],
Cell[753655, 16160, 757, 17, 52, "Text"],
Cell[754415, 16179, 1663, 63, 136, "DisplayFormula"],
Cell[756081, 16244, 659, 16, 89, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[756777, 16265, 173, 5, 50, "Subsubsection"],
Cell[756953, 16272, 509, 9, 89, "Text"],
Cell[757465, 16283, 2086, 61, 504, "Code",
 Evaluatable->False],
Cell[759554, 16346, 16, 0, 52, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[759619, 16352, 172, 2, 67, "Subsection"],
Cell[759794, 16356, 2131, 62, 240, "Text"],
Cell[761928, 16420, 1426, 50, 87, "DisplayFormula"],
Cell[763357, 16472, 400, 8, 89, "Text"],
Cell[CellGroupData[{
Cell[763782, 16484, 175, 5, 50, "Subsubsection"],
Cell[763960, 16491, 541, 11, 89, "Text"],
Cell[764504, 16504, 267, 4, 60, "Input"],
Cell[CellGroupData[{
Cell[764796, 16512, 2378, 43, 131, "Input"],
Cell[767177, 16557, 2761, 52, 197, "Output"]
}, Open  ]],
Cell[769953, 16612, 196, 6, 126, "Text"],
Cell[CellGroupData[{
Cell[770174, 16622, 124, 2, 60, "Input"],
Cell[770301, 16626, 26871, 463, 435, 1652, 48, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[797209, 17094, 1119, 23, 131, "Input"],
Cell[798331, 17119, 2221, 44, 171, "Output"]
}, Open  ]],
Cell[800567, 17166, 679, 13, 200, "Text"],
Cell[CellGroupData[{
Cell[801271, 17183, 994, 21, 131, "Input"],
Cell[802268, 17206, 1999, 41, 171, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[804304, 17252, 679, 13, 93, "Input"],
Cell[804986, 17267, 88136, 1471, 449, 67744, 1135, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[893137, 18741, 16, 0, 52, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[893214, 18748, 509, 11, 135, "Section",
 CellTags->"conclusions"],
Cell[893726, 18761, 2189, 41, 274, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[895952, 18807, 97, 1, 135, "Section"],
Cell[896052, 18810, 347, 8, 39, "Reference",
 CellTags->"00004F53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
